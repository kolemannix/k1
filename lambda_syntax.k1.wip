fn staticAddOne(x: int): int { x + 1 }

fn map[T, U](a: List[T], f: some \T -> U): List[U] {
  let* us = List/withCapacity[U](a.len);
  for i in a do { us.push[U](f(i)) };
  us.*
}

fn runAll(tasks: List[dyn[\unit -> unit]]): unit { for task in tasks do { task() } }

fn main(): int {
  let result = [1,2,3,5,6,7,8]
  | map(\(x: int) x + 1)
  | filter(\(x: int) x % 2 == 0);

  let t1 = \() -> println("Task 1 completed");
  let t2 = \() -> println("Task 2 completed");

  runAll([t1, t2]); // expected: any thunk, got: <closure ty>. Coerce using 'make obj from closure'
  runAll([t1.toDyn(), t2.toDyn()]); // Explicitly calling toDyn() on a lambda or type implementing an ability gives you a dyn[t]

  myShowable.toDyn[Show]()

  assert(result == [2, 4, 6, 8]);

  captures();
  captureMut();
  closureReturn();

  0
}
