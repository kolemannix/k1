// Only code that is necessary for the compiler's operation
// belongs in this file

///////////
// Types //
deftype u8  = builtin
deftype u16 = builtin
deftype u32 = builtin
deftype u64 = builtin
deftype uword = builtin
deftype i8  = builtin
deftype i16 = builtin
deftype i32 = builtin
deftype i64 = builtin
deftype iword = builtin

deftype unit    = builtin
deftype char    = builtin
deftype bool    = builtin
deftype never   = builtin
deftype Pointer = builtin

deftype f32 = builtin
deftype f64 = builtin

deftype Buffer[T] = { len: uword, data: T* }

deftype List[T] = { len: uword, private buffer: Buffer[T] }
deftype string = { buffer: Buffer[char] }

deftype Opt[T] = either None, Some(T)

ns compiler {
  deftype SourceLocation = { filename: string, line: u64 }
}

deftype Ordering = either Less, Equal, Greater

deftype Result[T, E] = either Ok(T), Err(E)

deftype alias int = iword
deftype alias uint = uword
deftype alias byte = u8

////////////////////////////////
// Builtin Abilities

// Equals must have ability id 0
ability Equals {
  fn equals(self: Self, other: Self): bool
}

// TODO(dogfood): use writer ability for string interpolation
// TODO(dogfood): Enhance with an `impl Error` type parameter
// TODO(dogfood): Allow Error = never for infallible writes
ability Writer {
  fn writeChar(self: Self*, value: char): unit
  fn writeByte(self: Self*, value: u8): unit
  fn writeString(self: Self*, value: string): unit
  fn writeBytes(self: Self*, buffer: Buffer[byte]): unit
}

ability Print {
  fn printTo[W: Writer](self: Self, w: W*): unit
}

// Show must have ability id 4
// TODO: Show and Writer and friends do not belong in builtin long term
ability Show {
  fn show(self: Self): string
}

ability Bitwise {
  fn bitNot(self: Self): Self
  fn bitAnd(self: Self, other: Self): Self
  fn bitOr(self: Self, other: Self): Self
  fn xor(self: Self, other: Self): Self
  fn shiftLeft(self: Self, other: Self): Self
  fn shiftRight(self: Self, other: Self): Self
}

ability Comparable {
  fn compare(self: Self, other: Self): Ordering
}

ability Unwrap[impl Inner] {
  fn hasValue(self: Self): bool
  fn unwrap(self: Self): Inner
  fn make(inner: Inner): Self
}

ability Try[impl T, impl E] {
  // DO NOT REORDER `try` internal operation expects
  // makeError to be first! (FIXME)
  fn makeError(e: E): Self
  fn makeOk(t: T): Self

  fn isOk(self: Self): bool
  fn getError(self: Self): E
  fn getOk(self: Self): T
}

ability Iterator[impl Item] {
  fn next(self: Self*): Item?
  fn sizeHint(self: Self): { atLeast: uword, atMost: uword? }
  fn advanceBy(self: Self*, n: uword): unit
  fn nth(self: Self*, n: uword): Item?
}

ability Iterable[impl Item, impl I: Iterator[Item = Item]] {
  fn iterator(self: Self): I
}

/////////////////////////////////
// Compiler builtins
ns k1 {
  // IS_STATIC is set to 'true' when executing K1 code statically, at compile-time
  let static IS_STATIC: bool = builtin;

  let static TEST: bool = builtin;
  let static NO_STD: bool = builtin;
  let static DEBUG: bool = builtin;

  let static OS: string = builtin; // Possible values: 'linux', 'macos', 'wasm'
  let static OS_MACOS: bool = OS == "macos";

  intern fn emitCompilerMessage(
    level: (either Info, Warn),
    msg: string
  ): unit

}

/////////////////////////////////
// Core sizing intrinsics

intern fn sizeOf[T](): uword
intern fn sizeOfStride[T](): uword
intern fn alignOf[T](): uword

ns compiler {
  intern fn location(): SourceLocation
}

ns sys {
  intern fn exit(code: i32): never
}

ns bool {
  intern fn negated(self: bool): bool
}

impl Equals for bool {
  fn equals(self: bool, other: bool): bool {
    // Since the type is known to be 'bool' here, this won't recursively call this function, but instead
    // dispatch to builtin integer equality
    self == other
  }
}

// TODO(vm): Great metaprogramming use-case!
impl Equals for u8 { fn equals(self: u8, other: u8): bool { self == other } }
impl Equals for u64 { fn equals(self: u64, other: u64): bool { self == other } }
impl Equals for u32 { fn equals(self: u32, other: u32): bool { self == other } }
impl Equals for uword { fn equals(self: Self, other: Self): bool { self == other } }

impl Equals for i32 { fn equals(self: i32, other: i32): bool { self == other } }
impl Equals for i64 { fn equals(self: i64, other: i64): bool { self == other } }
impl Equals for iword { fn equals(self: Self, other: Self): bool { self == other } }


fn discard[T](t: T): unit { () }

// TODO: #if(K1_LIBC?) ?
ns libc {
  extern(exit) fn exit(code: i32): never

  extern(read) fn read(fileNo: i32, buffer: Pointer, count: uword): iword
  extern(write) fn write(fileNo: i32, data: Pointer, count: uword): iword
  // extern(memcpy) fn memcpy(dst: Pointer, src: Pointer, count: uword): Pointer
  // extern(memset) fn memset(src: Pointer, value: u32, count: uword): Pointer
  extern(memcmp) fn memcmp(s1: Pointer, s2: Pointer, size: uword): i32

  extern(malloc) fn malloc(size: uword): Pointer
  extern(calloc) fn calloc(count: uword, size: uword): Pointer
  extern(free) fn free(ptr: Pointer): unit
  extern(realloc) fn realloc(ptr: Pointer, size: uword): Pointer

  // extern(abort) fn abort(): never
}

fn assert(context locn: compiler/SourceLocation)(value: bool): unit {
  if not value { crash("ASSERT FAILED") };
}

fn assertdbg(context locn: compiler/SourceLocation)(value: bool): unit {
  #if k1/DEBUG 
    if not value { crash("ASSERT FAILED") };
}

fn crash(context locn: compiler/SourceLocation)(msg: string): never {
  if k1/NO_STD {
    let s = "exiting (nostd)\n\0";
    libc/write(
      fileNo = 1, 
      data = s.buffer.data as Pointer, 
      count = s.buffer.len - 1,
    );
    sys/exit(1)
  } else if k1/IS_STATIC {
    //let s = "exiting static\n\0";
    //libc/write(
    //  fileNo = 1, 
    //  data = s.buffer.data as Pointer, 
    //  count = s.buffer.len - 1, 
    //  offset = 0
    //);
    k1/emitCompilerMessage(.Info, msg);
    sys/exit(111)
  } else {
    let filename = locn.filename;
    let line = locn.line;
    sys/printBacktrace();
    let s = "\{msg} at \{filename}:\{line}\n";
    eprint(s);
    sys/exit(1)
  }
}
