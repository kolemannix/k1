// Only code that is necessary for the compiler's operation
// belongs in this file

///////////
// Types //
deftype u8  = builtin
deftype u16 = builtin
deftype u32 = builtin
deftype u64 = builtin
deftype i8  = builtin
deftype i16 = builtin
deftype i32 = builtin
deftype i64 = builtin

deftype unit    = builtin
deftype char    = builtin
deftype bool    = builtin
deftype never   = builtin
deftype Pointer = builtin

deftype f32 = builtin
deftype f64 = builtin

deftype Buffer[T] = { len: u64, data: T* }

deftype List[T] = { len: u64, private buffer: Buffer[T] }
deftype string = { buffer: Buffer[char] }

deftype Opt[T] = either None, Some(T)

ns compiler {
  deftype SourceLocation = { filename: string, line: u64 }
}

deftype Ordering = either Less, Equal, Greater

deftype Result[T, E] = either Ok(T), Err(E)

deftype alias int = i64
deftype alias uint = u64
deftype alias byte = u8

////////////////////////////////
// Builtin Abilities

// Equals must have ability id 0
ability Equals {
  fn equals(self: Self, other: Self): bool
}

// TODO(dogfood): use writer ability for string interpolation
ability Writer {
  fn writeChar(self: Self*, value: char): unit
  fn writeByte(self: Self*, value: u8): unit
  fn writeString(self: Self*, value: string): unit
  fn writeBytes(self: Self*, buffer: Buffer[byte]): unit
}

ability WriteText {
  fn writeText[W: Writer](self: Self, w: W*): unit
}

// Show must have ability id 4
// TODO: Show and Writer and friends do not belong in builtin long term
ability Show {
  // Will use the thread-local temporary allocator
  fn show(self: Self): string
}

ability Bitwise {
  fn bitNot(self: Self): Self
  fn bitAnd(self: Self, other: Self): Self
  fn bitOr(self: Self, other: Self): Self
  fn xor(self: Self, other: Self): Self
  fn shiftLeft(self: Self, other: Self): Self
  fn shiftRight(self: Self, other: Self): Self
}

ability Comparable {
  fn compare(self: Self, other: Self): Ordering
}

ability Unwrap[impl Inner] {
  fn hasValue(self: Self): bool
  fn unwrap(self: Self): Inner
  fn make(inner: Inner): Self
}

ability Try[impl T, impl E] {
  // DO NOT REORDER `try` internal operation expects
  // makeError to be first! (FIXME)
  fn makeError(e: E): Self
  fn makeOk(t: T): Self

  fn isOk(self: Self): bool
  fn getError(self: Self): E
  fn getOk(self: Self): T
}

ability Iterator[impl Item] {
  fn next(self: Self*): Item?
  fn sizeHint(self: Self): { atLeast: u64, atMost: u64? }
  fn advanceBy(self: Self*, n: u64): unit
  fn nth(self: Self*, n: u64): Item?
}

ability Iterable[impl Item, impl I: Iterator[Item = Item]] {
  fn iterator(self: Self): I
}


/////////////////////////////////
// Compile-time builtin constants
ns k1 {
  let const TEST: bool = builtin;
  let const NO_STD: bool = builtin;
  let const DEBUG: bool = builtin;

  let const OS: string = builtin; // Possible values: 'linux', 'macos', 'wasm'
  let const OS_MACOS: bool = OS == "macos";
}

// TODO: make threadlocal, make trait object. For now, global ptr
//let ALLOCATOR: Pointer = 0 as Pointer;


/////////////////////////////////
// Core sizing intrinsics

intern fn sizeOf[T](): u64
intern fn sizeOfStride[T](): u64
intern fn alignOf[T](): u64

ns compiler {
  intern fn location(): SourceLocation
}

ns bool {
  intern fn negated(self: bool): bool
}

impl Equals for bool {
  fn equals(self: bool, other: bool): bool {
    // Since the type is known to be 'bool' here, this won't recursively call this function, but instead
    // dispatch to builtin integer equality
    self == other
  }
}

fn discard[T](t: T): unit { () }

// TODO: #if(K1_LIBC?) ?
ns libc {
  extern(exit) fn exit(code: i32): never

  extern(read) fn read(fileNo: i32, buffer: Pointer, count: u64, offset: u64): i64
  extern(write) fn write(fileNo: i32, data: Pointer, count: u64, offset: u64): u64
  extern(memcpy) fn memcpy(dst: Pointer, src: Pointer, count: u64): Pointer
  extern(memset) fn memset(src: Pointer, value: u32, count: u64): Pointer
  extern(memcmp) fn memcmp(s1: Pointer, s2: Pointer, size: u64): i32
  extern(calloc) fn calloc(count: u64, size: u64): Pointer

  extern(malloc) fn malloc(size: u64): Pointer
  extern(free) fn free(ptr: Pointer): unit

  extern(realloc) fn realloc(ptr: Pointer, size: u64): Pointer

  extern(abort) fn abort(): never
}

fn assert(context locn: compiler/SourceLocation)(value: bool): unit {
  if not value { crash("ASSERT FAILED") };
}

fn assertdbg(context locn: compiler/SourceLocation)(value: bool): unit {
  #if k1/DEBUG 
    if not value { crash("ASSERT FAILED") };
}

fn crash(context locn: compiler/SourceLocation)(msg: string): never {
  #if k1/NO_STD {
    let s = "exiting (nostd)\n\0";
    libc/write(
      fileNo = 1, 
      data = s.buffer.data as Pointer, 
      count = s.buffer.len - 1, 
      offset = 0
    );
    libc/exit(1)
  } else {
    let filename = locn.filename;
    let line = locn.line;
    sys/printBacktrace();
    let s = "\{msg} at \{filename}:\{line}\n";
    eprint(s);
    libc/exit(1)
  }
}
