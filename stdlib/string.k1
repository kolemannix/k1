// TODO: CString type
deftype alias CString = Pointer
ns CString { 
}

ns string {

  fn get(self: string, index: u64): char {
    self.buffer.get(index)
  }

  fn toBytes(self: string): Buffer[byte] {
    let copied: Buffer[char] = self.buffer.cloned();
    let sneakyCasted: Buffer[byte] = Buffer/fromRawParts[byte](copied.len, copied.data);
    sneakyCasted
  }

  fn wrapList(list: List[char]): string {
    { buffer: list.toBuffer() }
  }

  fn wrapBuffer(buffer: Buffer[char]): string {
    { buffer: buffer }
  }

  fn wrapBytes(buffer: Buffer[byte]): string {
    let sneakyCasted: Buffer[char] = Buffer/fromRawParts(buffer.len, buffer.data);
    { buffer: sneakyCasted }
  }

  fn fromBytes(buffer: Buffer[byte]): string {
    let copied: Buffer[byte] = buffer.cloned();
    wrapBytes(copied)
  }

  fn fromBuffer(buffer: Buffer[char]): string {
    let copied = buffer.cloned();
    { buffer: copied }
  }

  fn len(self: string): u64 { self.buffer.len }

  fn isEmpty(self: string): bool { self.len() == 0 }
  fn nonEmpty(self: string): bool { self.len() != 0 }

  fn first(self: string): char? {
    if self.nonEmpty() .Some(self.get(0)) else .None
  }


  fn indexOf(self: string, c: char): i64 {
    let mut i: u64 = 0;
    while i < self.len() {
      if self.get(i) == c {
        return(i as i64);
      };
      i = i + 1;
    };
    -1
  }

  fn concat(self: string, other: string): string {
    fromBuffer(self.buffer.concat(other.buffer))
  }

  fn appendChar(self: string, c: char): string {
    let newLength = self.len() + 1;
    let newBuffer = self.buffer._enlargedClone(newLength);
    newBuffer.set(self.len(), c);
    fromBuffer(newBuffer)
  }

  fn splitByChar(self: string, delim: char): List[string] {
    let* results = List/empty[List[char]]();
    let* accum = List/empty[char]();
    // Note(stdlib slow): TODO: use ranges instead to make this zero-copy!!
    //                    We can point to the old string instead of building up new ones
    for c in self do {
      if c == delim {
        if accum.*.nonEmpty() {
          results.push(accum);
          accum <- List/empty[char]()
        }
      } else {
        accum.push(c);
      };
    };
    if accum.*.nonEmpty() {
      results.push(accum);
    };

    for list in results.* yield {
      string/wrapList(list)
    }
  }

  fn indexOfString(self: string, target: string): u64? {
    let mut i: u64 = 0;
    while i < self.len() {
      if i + target.len() >= self.len() {
        return(.None)
      };
      let sub = self.substring(i, i + target.len());
      if sub == target { return(.Some(i)) };
      i = i + 1;
    };
    .None
  }

  fn substring(self: string, start: u64, end: u64): string {
    { buffer: self.buffer.slice(start, end) }
  }

  fn startsWith(self: string, other: string): bool {
    self.substring(0, other.len()) == other
  }

  fn toCString(self: string): Pointer {
    self.appendChar('\0').buffer.data
  }

  fn fromCString(cString: Pointer): string {
    let* self = List/empty[char]();
    let mut i = 0: u64;
    loop {
      let c = cString.refAtIndex[char](i);
      if c.* == '\0' {
        break();
      } else {
        self.push(c);
        i = i + 1;
      }
    };
    wrapList(self)
  }

  fn toInt(self: string): int? {
    if self.isEmpty() { return(.None) };

    let neg = self.get(0) == '-';
    let mut i: u64 = if neg 1 else 0;
    let mut total: u64 = 0;
    while i < self.len() {
      let c = self.get(i);
      let digit = c.toAsciiDigit();
      if digit is .Some(digit) {
        total = (total * 10) + digit as u64;
      } else {
        return(.None);
      };
      i = i + 1;
    };

    some(
      if neg { (total as i64) * -1 } else { total as i64 }
    )
  }

}

impl Equals for string {
  fn equals(self: string, that: string): bool {
    self.buffer == that.buffer
  }
}

impl Show for string {
  fn show(self: string): string { self }
}

impl Iterable[Item = char, I = BufferIterator[char]] for string {
  fn iterator(self: string): I { BufferIterator/fromBuffer(self.buffer) }
}

impl Iterable[Item = char, I = BufferIterator[char]] for string* {
  fn iterator(self: string*): I { self.*.iterator() }
}
