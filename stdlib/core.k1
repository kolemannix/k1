ns libc {
  extern(exit) fn exit(code: i32): never

  extern(read) fn read(fileNo: i32, buffer: Pointer, count: u64, offset: u64): i64
  extern(write) fn write(fileNo: i32, data: Pointer, count: u64, offset: u64): u64
  extern(memcpy) fn memcpy(dst: Pointer, src: Pointer, count: u64): Pointer
  extern(memset) fn memset(src: Pointer, value: u32, count: u64): Pointer
  extern(memcmp) fn memcmp(s1: Pointer, s2: Pointer, size: u64): i32
  extern(calloc) fn calloc(count: u64, size: u64): Pointer

  extern(malloc) fn malloc(size: u64): Pointer
  extern(free) fn free(ptr: Pointer): unit

  extern(realloc) fn realloc(ptr: Pointer, size: u64): Pointer
  extern(arc4random_uniform) fn arc4random_uniform(upperBound: u32): u32

  extern(abort) fn abort(): never
}


fn assert(context locn: compiler/SourceLocation)(value: bool): unit {
  if not value {
    crash("ASSERT FAILED")
  };
}

fn crash(context locn: compiler/SourceLocation)(msg: string): never {
  let filename = locn.filename;
  let line = locn.line;
  let s = "\{msg} at \{filename}:\{line}\n";
  eprint(s);
  libc/abort()
}

ns Pointer {
  fn null(): Pointer { 0 as u64 as Pointer }

  fn isNull(self: Pointer): bool {
    self as u64 == 0
  }

  // This is an intrinsic so that we can codegen a getelementptr
  // instruction in LLVM rather than a pointer cast.
  // But we _could_ do it in userland using sizeOf and arithmetic which is neat!
  intern fn refAtIndex[T](self: Pointer, index: u64): T*

}

impl Equals for Pointer {
  fn equals(self: Pointer, other: Pointer): bool {
    self as u64 == other as u64
  }
}

fn new[T](value: T): T* {
  let ptr = libc/malloc(sizeOf[T]());
  let t = ptr as T*;
  t <- value;
  t
}

fn identity[T](value: T): T { value }

fn ignore[T](value: T): unit { () }

fn printIt[T: Show](value: T): unit  {
  let s = value.show();
  print(s)
}

fn print(s: string): unit {
  libc/write(1, s.buffer.data, s.len(), 0);
  ()
}
fn println(s: string): unit {
  print(s.appendChar('\n'));
}

fn eprint(s: string): unit {
  libc/write(2, s.buffer.data, s.len(), 0);
  ()
}
fn eprintln(s: string): unit {
  eprint(s.appendChar('\n'));
}

ns sys {
  fn exit(code: i32): never {
    libc/exit(code)
  }

  fn parseMainArgs(argCount: u32, args: Pointer): Buffer[string] {
    let mut i = 0: u32;
    let buf = Buffer/fromRawParts[CString](argCount as u64, args);
    let* strings = List/withCapacity[string](argCount as u64);
    let strings = for cstr in buf yield {
      string/fromCString(buf.get(i as u64))
    };
    strings.toBuffer()
  }

  fn readLine(buffer: Pointer, bufsize: u64): i32 {
    let bytesRead = libc/read(0, buffer, bufsize - 1, 0);
    
    if bytesRead < 0 {
      libc/perror("read");
      return -1;
    };
    
    // Null-terminate the string
    buffer[bytesRead] = 0 as u8;
    
    // Remove trailing newline if present
    if bytesRead > 0 and buffer[bytesRead - 1] == '\n' {
      buffer[bytesRead - 1] = 0 as u8;
    };
    
    bytesRead as i32
  }

}

ns files {
  ns unix {
    let SEEK_END: i32 = 2;
    let SEEK_SET: i32 = 0;
    extern(fopen)  fn fopen(pathCString: Pointer, modeCString: Pointer): Pointer
    extern(fseek)  fn fseek(fileDesc: Pointer, offset: u64, whence: i32): i32
    extern(fread)  fn fread(buffer: Pointer, size: u64, num: u64, stream: Pointer): u64
    extern(fclose) fn fclose(fileDesc: Pointer): i32
    extern(ftell)  fn ftell(fileDesc: Pointer): u64
  }

  fn readToString(context alloc: Allocator)(path: string): string {
    let filenameCString = path.toCString();
  
    let file = files/unix/fopen(filenameCString, "r".toCString());
    files/unix/fseek(file, 0, unix/SEEK_END);
    let fileSizeBytes = files/unix/ftell(file);
    let buf = alloc.tempArena().pushBytes(fileSizeBytes);
  
    files/unix/fseek(file, 0, unix/SEEK_SET);
    files/unix/fread(buf, fileSizeBytes, 1, file);
    let string = string/wrapBuffer(Buffer/fromRawParts(fileSizeBytes, buf));
    files/unix/fclose(file);

    libc/free(filenameCString);

    string
  }
}

fn assertMsg(context locn: compiler/SourceLocation)(msg: string, value: bool): unit {
  if not value {
    crash("ASSERT FAILED: \{msg}")
  };
}

ns char {
  fn toString(self: char): string {
    string/wrapList([self])
  }

  fn toAsciiDigit(self: char): u8? {
    let i_code = self as u8;
    if i_code >= 48 and i_code <= 57 {
      .Some(i_code - 48)
    } else {
      .None
    }
  }
}

impl Show for bool { fn show(self: bool): string { if self "true" else "false" } }
impl Show for char { fn show(self: char): string { self.toString() } }

impl Show for i64 {
  // We know this is super slow, relax, it'll be ok
  fn show(self: i64): string {
    if self == 0 return("0");
    let neg = self < 0;
    let mut remaining: i64 = if neg self * -1 else self;
    let* buf = List/withCapacity[char](8);
    while remaining > 0 {
      let d = remaining % 10;
      let c = (d + 48) as u8 as char;
      buf.push(c);
      remaining = remaining / 10;
    };

    if neg {
      buf.push('-');
    };

    // I know I know I know I know
    // Since we know its bytes we could do simd stuff or even just 64 bits at a time
    // Which I guess is technically 'simd' too
    // Why did inference break here??
    let rev = buf.*.reversed();
    string/wrapList(rev)
  }
}

impl Comparable for i64 {
  fn compare(self: i64, other: i64): Ordering {
    if self == other .Equal else if self > other .Greater else .Less
  }
}

impl Comparable for u64 {
  fn compare(self: u64, other: u64): Ordering {
    if self == other .Equal else if self > other .Greater else .Less
  }
}

impl Comparable for u8 {
  fn compare(self: u8, other: u8): Ordering {
    if self == other .Equal else if self > other .Greater else .Less
  }
}

impl Show for u64 {
  fn show(self: u64): string {
    if self == 0 return("0");

    let mut remaining: u64 = self;
    let* buf = List/withCapacity[char](8);
    while remaining > 0 {
      let d = remaining % 10;
      let c = (d + 48) as u8 as char;
      buf.push(c);
      remaining = remaining / 10;
    };

    let rev = buf.*.reversed();
    string/wrapList(rev)
  }
}

impl Show for u8 {
  fn show(self: u8): string {
    (self as u64).show()
  }
}

impl Show for i32 {
  fn show(self: i32): string {
    (self as i64).show()
  }
}

impl Show for i16 {
  fn show(self: i16): string {
    (self as i64).show()
  }
}

impl Show for i8 {
  fn show(self: i8): string {
    (self as i64).show()
  }
}

impl Equals for i64 {
  fn equals(self: i64, other: i64): bool {
    // Because the types of self and other are i64, the compiler will not
    // use the ability but rather do the intrinsic thing
    self == other
  }
}
