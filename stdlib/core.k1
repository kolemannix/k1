fn assertEquals[T: Show and Equals](context locn: compiler/SourceLocation)(a: T, b: T): unit {
  if a != b {
    crash("ASSERT FAILED: \{a} != \{b}")
  }
}

ns Pointer {
  let static NULL: Pointer = 0:u64 as Pointer;

  fn isNull(self: Pointer): bool {
    self as u64 == 0
  }

  // This is an intrinsic so that we can codegen a getelementptr
  // instruction in LLVM rather than a pointer cast.
  // But we _could_ do it in userland using sizeOf and arithmetic which is neat!
  intern fn refAtIndex[T](self: Pointer, index: u64): T*

}

impl Equals for Pointer {
  fn equals(self: Pointer, other: Pointer): bool {
    self as u64 == other as u64
  }
}

fn new[T](value: T): T* {
  mem/newIn(context mem/AllocMode/CURRENT)(value)
}

fn identity[T](value: T): T { value }

fn printIt[T: Show](value: T): unit  {
  let s = value.show();
  print(s)
}

fn print(s: string): unit {
  libc/write(fileNo = 1, data = s.buffer.data as Pointer, count = s.len(), offset = 0);
  ()
}
fn println(s: string): unit {
  print(s.appendChar('\n'));
}

fn eprint(s: string): unit {
  libc/write(fileNo = 2, data = s.buffer.data as Pointer, count = s.len(), offset = 0);
  ()
}
fn eprintln(s: string): unit {
  eprint(s.appendChar('\n'));
}

ns sys {

  extern(_k1_show_backtrace) fn _k1_show_backtrace_libunwind(): unit
  fn printBacktrace(): unit {
    if k1/IS_STATIC {
      println("<todo: static backtrace intrinsic>");
    } else {
      _k1_show_backtrace_libunwind();
    }
  }

  fn exit(code: i32): never {
    libc/exit(code)
  }

  #if k1/OS_MACOS extern(arc4random_uniform) fn arc4random_uniform(upperBound: u32): u32

  fn random(upperBound: u32): u32 {
    #if k1/OS == "macos" arc4random_uniform(upperBound)
    else if k1/OS == "linux" crash("linux 'random' unimpl")
    else if k1/OS == "wasm" crash("wasm 'random' unimpl")
    else crash("unreachable os")
  }

  fn parseMainArgs(argCount: u32, args: Pointer): Buffer[string] {
    let mut i = 0: u32;
    let buf = Buffer/fromRawParts[CString](argCount as u64, args);
    let* strings = List/withCapacity[string](argCount as u64);
    let strings = for cstr in buf yield {
      string/fromCString(buf.get(i as u64))
    };
    strings.toBuffer()
  }

  fn readLine(maxLengthBytes: u64): Result[string, string] {
    let* buffer = Buffer/_allocate[byte](maxLengthBytes);
    let bytesRead = libc/read(0, buffer.data as Pointer, buffer.len, 0);
    
    if bytesRead < 0 {
      return(.Err("Failed to read line"));
    };

    let length = bytesRead as u64 - 1;
    
    // Remove trailing newline if present
    if bytesRead > 0 and buffer.get(length) == ('\n' as u8) {
      buffer.set(length, 0);
      buffer.len* <- length;
    };
    
    let result = string/wrapBytes(buffer);
    .Ok(result)
  }

}

ns files {
  ns unix {
    let static SEEK_END: i32 = 2;
    let static SEEK_SET: i32 = 0;
    extern(fopen)  fn fopen(pathCString: Pointer, modeCString: Pointer): Pointer
    extern(fseek)  fn fseek(fileDesc: Pointer, offset: u64, whence: i32): i32
    extern(fread)  fn fread(buffer: Pointer, size: u64, num: u64, stream: Pointer): u64
    extern(fclose) fn fclose(fileDesc: Pointer): i32
    extern(ftell)  fn ftell(fileDesc: Pointer): u64
  }

  fn readToString(context alloc: mem/AllocMode)(path: string): string {
    let filenameCString = path.toCString();
  
    let file = files/unix/fopen(filenameCString.ptr, "r\0".toCString().ptr);
    files/unix/fseek(file, 0, unix/SEEK_END);
    let fileSizeBytes = files/unix/ftell(file);
    let buf = mem/allocIn(alloc, size = fileSizeBytes, align = 1);
  
    files/unix/fseek(file, 0, unix/SEEK_SET);
    files/unix/fread(buf, fileSizeBytes, 1, file);
    let string = string/wrapBuffer(Buffer/fromRawParts(fileSizeBytes, buf));
    files/unix/fclose(file);

    mem/freeIn(alloc, ptr = filenameCString.ptr, size = filenameCString.len + 1, align = 1);
    //libc/free(filenameCString);

    string
  }
}

fn assertMsg(context locn: compiler/SourceLocation)(msg: string, value: bool): unit {
  if not value {
    crash("ASSERT FAILED: \{msg}")
  };
}

ns char {
  fn toString(self: char): string {
    string/wrapList([self])
  }

  fn toDigitValue(self: char): u8? {
    let i_code = self as u8;
    if i_code >= 48 and i_code <= 57 {
      .Some(i_code - 48)
    } else {
      .None
    }
  }
}

impl[T: Print] Show for T {
  fn show(self: Self): string { 
    let* buf = List/empty[char]();
    self.printTo(buf);
    string/wrapList(buf)
  }
}


impl Show for bool { fn show(self: bool): string { if self "true" else "false" } }
impl Show for char { fn show(self: char): string { self.toString() } }

impl Show for i64 {
  // We know this is super slow, relax, it'll be ok
  fn show(self: i64): string {
    if self == 0 return("0");
    let neg = self < 0;
    let mut remaining: i64 = if neg self * -1 else self;
    let* buf = List/withCapacity[char](8);
    while remaining > 0 {
      let d = remaining % 10;
      let c = (d + 48) as u8 as char;
      buf.push(c);
      remaining = remaining / 10;
    };

    if neg {
      buf.push('-');
    };

    // Why did inference break here??
    let rev = buf.*.reversed();
    string/wrapList(rev)
  }
}

impl Comparable for i64 {
  fn compare(self: i64, other: i64): Ordering {
    if self == other .Equal else if self > other .Greater else .Less
  }
}

impl Comparable for u64 {
  fn compare(self: u64, other: u64): Ordering {
    if self == other .Equal else if self > other .Greater else .Less
  }
}

impl Comparable for u8 {
  fn compare(self: u8, other: u8): Ordering {
    if self == other .Equal else if self > other .Greater else .Less
  }
}

ns u8 {
  fn toAsciiDigit(v: u8): char {
    (v + 48) as char
  }
}

fn formatUInt[W: Writer](context w: W*)(value: u64, base: u64): unit {
  if value == 0 { w.writeChar('0'); return(()) }
  else if value < (base * 2) {
    let first: u64 = (value / base) * base;
    let second: u64 = value % base;
    let firstDigit = u8/toAsciiDigit(first as u8);
    let secondDigit = u8/toAsciiDigit(second as u8);
    w.writeChar(firstDigit);
    w.writeChar(secondDigit);
  } else {
    let mut remaining: u64 = value;
    // TODO(stdlib slow): Try to use stack space for small ones.
    let* digits = List/withCapacity[char](8);
    while remaining > 0 {
      let d = remaining % base;
      let c = u8/toAsciiDigit(d as u8);
      digits.push(c);
      remaining = remaining / base;
    };

    digits.reverse();

    w.writeBytes(digits.toBuffer().toByteBuffer());

    ()
  }
}

impl Show for u64 {
  fn show(self: u64): string {
    if self == 0 return("0");

    let mut remaining: u64 = self;
    // TODO(stdlib slow): Try to use stack space for small ones
    let* buf = List/withCapacity[char](8);
    while remaining > 0 {
      let d = remaining % 10;
      let c = (d + 48) as u8 as char;
      buf.push(c);
      remaining = remaining / 10;
    };

    buf.reverse();
    string/wrapList(buf)
  }
}

impl Show for u32 {
  fn show(self: u32): string {
    (self as u64).show()
  }
}

impl Show for u8 {
  fn show(self: u8): string {
    (self as u64).show()
  }
}

impl Show for i32 {
  fn show(self: i32): string {
    (self as i64).show()
  }
}

impl Show for i16 {
  fn show(self: i16): string {
    (self as i64).show()
  }
}

impl Show for i8 {
  fn show(self: i8): string {
    (self as i64).show()
  }
}

impl[S, F] Try[T = S, E = F] for Result[S, F] {
  fn makeError(e: E): Self   { .Err(e) }
  fn makeOk(t: T): Self { .Ok(t) }

  fn isOk(self: Self): bool { self is .Ok(_) }
  fn getOk(self: Self): T  { self.asOk().!.value }
  fn getError(self: Self): E { self.asErr().!.value }
}

impl[S, F] Unwrap[Inner = S] for Result[S, F] {
  fn hasValue(self: Self): bool { self is .Ok(_) }
  fn unwrap(self: Self): Inner { self.getOk() }
  fn make(inner: Inner): Self { Try/makeOk(inner) }
}

