deftype StringBuilder = { charList: List[char]* }
ns StringBuilder {
  deftype alias Part = StringBuilder.charList.value.T

  fn withCapacity(cap: uword): StringBuilder {
    let charList = mem/new(List/withCapacity[Part](cap));
    { charList: charList }
  }

  fn new(): StringBuilder {
    withCapacity(0)
  }

  fn putChar(self: StringBuilder, c: char): unit {
    self.charList.push(c)
  }
  fn putString(self: StringBuilder, s: string): unit {
    // TODO(stdlib): Need an appendBufferCopy, or similarly
    // to solve for the 'copy' vs 'non-copy' problem
    self.charList.appendBuffer(s.innerBuffer())
  }
  fn putByte(self: StringBuilder, b: byte): unit {
    self.charList.push(b as char)
  }
  fn build(self: StringBuilder): string {
    string/wrapList(self.charList)
  }
}
