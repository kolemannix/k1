// Only code that is necessary for the compiler's operation
// belongs in this file

///////////
// Types //
deftype u8  = builtin
deftype u16 = builtin
deftype u32 = builtin
deftype u64 = builtin
deftype uword = builtin
deftype i8  = builtin
deftype i16 = builtin
deftype i32 = builtin
deftype i64 = builtin
deftype iword = builtin

deftype unit    = builtin
deftype char    = builtin
deftype bool    = builtin

/// An uninhabited type representing that code with this type never returns
/// Used to signal termination and enables control flow analysis
deftype never   = builtin

deftype Pointer = builtin

deftype f32 = builtin
deftype f64 = builtin

deftype Buffer[T] = { len: uword, data: T* }

deftype List[T] = { len: uword, private buffer: Buffer[T] }
deftype string = { buffer: Buffer[char] }

deftype Opt[T] = either None, Some(T)

ns compiler {
  deftype SourceLocation = { filename: string, line: u64 }
}

deftype Ordering = either Less, Equal, Greater

deftype Result[T, E] = either Ok(T), Err(E)

deftype alias int = iword
deftype alias uint = uword
deftype alias byte = u8

ns types {
  intern fn typeId[T](): u64

  intern fn typeSchema(id: u64): TypeSchema
  intern fn typeName(id: u64): string

  fn getTypeName[T](): string { typeName(typeId[T]()) }
  fn getTypeSchema[T](): TypeSchema { typeSchema(typeId[T]()) }

  // DO NOT REORDER VARIANTS
  deftype IntKind = either U8, U16, U32, U64, I8, I16, I32, I64

  // DO NOT REORDER VARIANTS
  deftype IntValue = either
    U8(u8), U16(u16), U32(u32), U64(u64),
    I8(i8), I16(i16), I32(i32), I64(i64)

  deftype Layout = { size: uword, align: uword }

  deftype TypeSchema = (either
    Unit,
    Char,
    Int(IntKind),
    Word(either UWord, IWord),
    Float(either F32, F64),
    Bool,
    Pointer,
    Reference({ innerTypeId: u64 }),
    Struct({
      fields: Buffer[{
        name: string,
        typeId: u64,
        offset: uword
      }],
    }),
    Either({
      tagType: IntKind,
      variants: Buffer[{
        name: string,
        tag: IntValue,
        payload: { typeId: u64, offset: uword }?
      }],
    }),
    Variant({
      enumTypeId: u64,
      name: string,
    }),
    // TODO: Function schema, lambda schema, lambda object schema
    // Function({
    //   returnTypeId: u64,
    //   params: [{ name: string, typeId: u64 }],
    // }),
    // Lambda({ typeId: u64, functionTypeId: u64 }),
    // LambdaObject({ functionTypeId: u64 }),
    Never,
    Other(string)
  )

  deftype Any = {
    typeId: u64,
    value: Pointer
  }

}

ns meta {
  intern fn emit(code: string): unit

  /////// Static value ferrying across the runtime/comptime border:
  /////// Likely marked internal eventually
  intern fn bakeStaticValue[T](value: T): u64
  // Must be provided an integer literal.
  // Can only be called by generated code
  intern fn getStaticValue[T](id: u64): T

}

////////////////////////////////
// Builtin Abilities

// Equals must have ability id 0
ability Equals {
  fn equals(self: Self, other: Self): bool
}

// TODO(dogfood): Enhance with an `impl Error` type parameter
// TODO(dogfood): Allow Error = never for infallible writes
ability Writer {
  fn writeChar(self: Self*, value: char): unit
  fn writeByte(self: Self*, value: u8): unit
  fn writeString(self: Self*, value: string): unit
  fn writeBytes(self: Self*, buffer: Buffer[byte]): unit
}

ability Print {
  fn printTo[W: Writer](self: Self, w: W*): unit
}

// Show must have ability id 4
// TODO: Show and Writer and friends do not belong in builtin long term
ability Show {
  fn show(self: Self): string
}

ability Bitwise {
  fn bitNot(self: Self): Self
  fn bitAnd(self: Self, other: Self): Self
  fn bitOr(self: Self, other: Self): Self
  fn xor(self: Self, other: Self): Self
  fn shiftLeft(self: Self, other: Self): Self
  fn shiftRight(self: Self, other: Self): Self
}

ability Comparable {
  fn compare(self: Self, other: Self): Ordering
}

ability Unwrap[impl Inner] {
  fn hasValue(self: Self): bool
  fn unwrap(self: Self): Inner
  fn make(inner: Inner): Self
}

ability Try[impl T, impl E] {
  // DO NOT REORDER `try` internal operation expects
  // makeError to be first! (FIXME)
  fn makeError(e: E): Self
  fn makeOk(t: T): Self

  fn isOk(self: Self): bool
  fn getError(self: Self): E
  fn getOk(self: Self): T
}

ability Iterator[impl Item] {
  fn next(self: Self*): Item?
  fn sizeHint(self: Self): { atLeast: uword, atMost: uword? }
  fn advanceBy(self: Self*, n: uword): unit
  fn nth(self: Self*, n: uword): Item?
}

ability Iterable[impl Item, impl I: Iterator[Item = Item]] {
  fn iterator(self: Self): I
}

/////////////////////////////////
// Impls that we want to have available early

impl Equals for Buffer[u8] {
  fn equals(self: Buffer[u8], other: Buffer[u8]): bool {
    self.equalsBits(other)
  }
}

impl Equals for Buffer[char] {
  fn equals(self: Buffer[char], other: Buffer[char]): bool {
    self.equalsBits(other)
  }
}

impl Equals for Buffer[int] {
  fn equals(self: Buffer[int], other: Buffer[int]): bool {
    self.equalsBits(other)
  }
}

impl Equals for string {
  fn equals(self: string, that: string): bool {
    self.buffer == that.buffer
  }
}

impl Print for string {
  fn printTo[W: Writer](self: string, w: W*): unit { w.writeString(self) }
}

ns mem {

  // TODO: Possibly reduce to a single alloc with a 'zero' option to reduce the number of builtins
  intern fn alloc(size: uword, align: uword): Pointer
  intern fn allocZeroed(size: uword, align: uword): Pointer
  intern fn realloc(ptr: Pointer, oldSize: uword, align: uword, newSize: uword): Pointer
  intern fn free(ptr: Pointer, size: uword, align: uword): unit

  intern fn copy(
    dst: Pointer,
    src: Pointer,
    count: uword
  ): unit
  intern fn set(
    dst: Pointer,
    value: u8,
    count: uword
  ): unit
  intern fn equals(p1: Pointer, p2: Pointer, size: uword): bool

  intern fn zeroed[T](): T

}

/////////////////////////////////
// Compiler builtins
ns k1 {
  // IS_STATIC is set to 'true' when executing K1 code statically, at compile-time
  let IS_STATIC: bool = builtin;

  let TEST: bool = builtin;
  let NO_STD: bool = builtin;
  let DEBUG: bool = builtin;

  let OS: string = builtin; // Possible values: 'linux', 'macos', 'wasm'
  let OS_MACOS: bool = OS == "macos";
  let OS_POSIX: bool = OS == "macos" or OS == "linux";

  intern fn emitCompilerMessage(
    locn: compiler/SourceLocation,
    level: (either(u8) Info, Warn, Error),
    msg: string
  ): unit

  // MUST MATCH k1_types::ModuleManifest
  deftype ModuleManifest = {
    kind: (either(u8) Library, Executable),
    deps: string,
  }

}

/////////////////////////////////
// Core sizing intrinsics

ns types {
  intern fn sizeOf[T](): uword
  intern fn sizeOfStride[T](): uword
  intern fn alignOf[T](): uword
}

ns compiler {
  intern fn location(): SourceLocation
}

ns sys {
  intern fn exit(code: i32): never
}

ns bool {
  intern fn negated(self: bool): bool
}

impl Equals for bool {
  fn equals(self: bool, other: bool): bool {
    // Since the type is known to be 'bool' here, this won't recursively call this function, but instead
    // dispatch to builtin integer equality
    self == other
  }
}

// nocommit(2): Metaprogramming for definitions.
// #meta {
//   for t in ["u8", "u16", "u32", "u64", "i8", "i16", "i32", "i64"] do {
//     meta/emitString `impl Equals for {t} { fn equals(self: {t}, other: {t}): bool { self == other } } `
//   }
// }
impl Equals for u8 { fn equals(self: u8, other: u8): bool { self == other } }
impl Equals for u16 { fn equals(self: u16, other: u16): bool { self == other } }
impl Equals for u32 { fn equals(self: u32, other: u32): bool { self == other } }
impl Equals for u64 { fn equals(self: u64, other: u64): bool { self == other } }
impl Equals for uword { fn equals(self: Self, other: Self): bool { self == other } }

impl Equals for i8 { fn equals(self: i8, other: i8): bool { self == other } }
impl Equals for i16 { fn equals(self: i16, other: i16): bool { self == other } }
impl Equals for i32 { fn equals(self: i32, other: i32): bool { self == other } }
impl Equals for i64 { fn equals(self: i64, other: i64): bool { self == other } }
impl Equals for iword { fn equals(self: Self, other: Self): bool { self == other } }


fn discard[T](t: T): unit { () }

#if k1/OS_POSIX
ns posix {

  let STDIN: i32 = 0;
  let STDOUT: i32 = 1;
  let STDERR: i32 = 2;

  extern(read) fn read(fileNo: i32, buffer: Pointer, count: uword): iword
  extern(write) fn write(fileNo: i32, data: Pointer, count: uword): iword

}

// Eventually: #if k1/C_RUNTIME
ns libc {

  extern(exit) fn exit(code: i32): never

  extern(memcmp) fn memcmp(s1: Pointer, s2: Pointer, size: uword): i32

  extern(malloc) fn malloc(size: uword): Pointer
  extern(calloc) fn calloc(count: uword, size: uword): Pointer
  extern(free) fn free(ptr: Pointer): unit
  extern(realloc) fn realloc(ptr: Pointer, size: uword): Pointer

}

fn assert(context locn: compiler/SourceLocation)(value: bool): unit {
  if not value { crash("ASSERT FAILED") };
}

fn assertdbg(context locn: compiler/SourceLocation)(value: bool): unit {
  #if k1/DEBUG
    if not value { crash("ASSERT FAILED") };
}

fn crash(context locn: compiler/SourceLocation)(msg: string): never {
  if k1/NO_STD {
    let s = "exiting (nostd)\n\0";
    posix/write(
      fileNo = 1,
      data = s.buffer.data as Pointer,
      count = s.buffer.len - 1,
    );
    sys/exit(1)
  } else if k1/IS_STATIC {
    //let s = "exiting static\n\0";
    //posix/write(
    //  fileNo = 1,
    //  data = s.buffer.data as Pointer,
    //  count = s.buffer.len - 1,
    //  offset = 0
    //);
    k1/emitCompilerMessage(locn, .Error, msg);
    sys/exit(111)
  } else {
    let filename = locn.filename;
    let line = locn.line;
    sys/printBacktrace();
    let s = "{msg} at {filename}:{line}\n";
    eprint(s);
    sys/exit(1)
  }
}
