// Copyright (c) 2025 knix
// All rights reserved.

ns meta {

  fn emitLine[W: Writer](context w: W)(code: string): unit {
    w.writeString(code);
    w.writeString(";\n");
  }

  fn bakedValueExpr[T](value: T): string {
    let valueId = bakeStaticValue[T](value);
    `core/meta/getStaticValue({valueId})`
  }

  fn bakedVariable[T](name: string, value: T): string {
    let bakedValueExpr: string = bakedValueExpr[T](value);
    let typeId = types/typeId[T]();
    `let {name}: typeFromId({typeId}) = {bakedValueExpr};\n`
  }

  fn emitVariable[W: Writer, T](context w: W)(name: string, value: T): unit {
    let bakedVar = bakedVariable[T](name, value);
    w.writeString(bakedVar)
  }

  fn emitLines[W: Writer, Iter: Iterator[Item = string]](context w: W)(lines: Iter): unit {
    for l in lines do {
      w.writeString(l)
    }
  }

}
