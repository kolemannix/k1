type Loc = { file: string, line: u32 }

namespace Parser;

type alias opaque Symbols = Array<{ name: string, value: Ast }>
type Context = __struct_combine({ symbols: Symbols }, DefaultContext)

// Idea for vale-style safe pointers
// type TrackedAllocation =  {
//   ptr: Pointer, fingerprint: u64
// }

How do we call a function from another namespace if our context doesn't have
what its context needs?
a) pass only missing members explicitly
I don't think its a struct, I think its more like Scala's implicits, and the 
other context, the one we use for allocations, is bound to a Thread, _not_ implicitly
passed around on the stack.

fn parse_expr(ctx: Context, caller_loc: Loc)(tokens: Array<Token>, index: int): Ast? {
  switch tokens.first() {
    None -> None,
    Some(t) -> {
      if t == T.True new(Ast.True) else None
    }
  }
}

fn main() {
  let tokens = lexer::go();

  context let ctx = { symbols: Symbols::new() };
  let ast = parse_expr(tokens, 0);
}


namespace end;
