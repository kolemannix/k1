// always emits an expr
// sees caller scope or not
// functions that might take exprs and return exprs
// they can't insert definitions though, so that is still an open item
// they can take in token streams too
macro upperCase(e: Expr) {
  // require that is a string lit
  // emit a capitalized version
  let e is .StringLit(s) else return .Err("requires a stringlit");
  Expr.StringLit(s.toUpperCase())
}
macro xmlDsl(ts: List[Token]) {
  // So like, a full parser written in 'const k1' in here? phewie
}
macro makeCodec[T: TypeInfo](context scope: CallerScope)(w: Writer) {
  val e = ExprBuilder/new();
  e.emit("let buffer = Buffer/new()");
  for f in typeFields[T] do {
    e.emit("builder.writeInt()");
    #emit(e) {
      builder.writeInt()
    }
  }
  e.build()
}
// I think eventually 'auto impls' would be their own entity
// they'd just kinda be a container for calling the macros
// that implement the ability
// like derive in rust but not a proc macro and not tied to the 
// definition of the type
impl Encode for Point {
  fn encode(w: Writer, p: Point): unit {
    makeCodec[Point]()
  }
}


I don't think any of this is very good
