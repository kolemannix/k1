use types/typeId
use types/asdfasdf
  // Use a constant from top-level
use files/unix/SEEK_END as SEEKEND

namespace foo {
  fn getOne(): int { 1 }
}

fn main(): int {
  // Use a function
  use types/typeId as typeIdAlias;
  assert(typeIdAlias[never]() == typeId[never]()); 

  // Use a constant
  use files/unix/SEEK_END as S;
  assert(S == files/unix/SEEK_END);
  assert(SEEKEND == files/unix/SEEK_END);

  // Use a basic type
  use _root/string as str;
  let hello: str = "Hello";

  // Use a generic type
  use _root/Opt as Optional;
  let helloOpt: Optional[str] = some("Hello");
  assert(hello == helloOpt!);

  // Use a namespace
  use _root/foo as fooAlias;
  assert(fooAlias/getOne() == 1);

  0
}
