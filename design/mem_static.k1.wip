// Explorations in making the allocator-based differences
// statically resolved, specializing each function over
// different allocation _styles_. For example,
// calling free when growing a buffer, or not
// doing so, statically, based on whether the allocator-style
// is GC, Explicit Heap, or Stack/Push.
ns mem {
  deftype AllocStyle = either Heap, Push, GcHeap

  ability Allocator {
    fn allocate(self: Self, size: u64, align: u64): Pointer
    fn reallocate(self: Self, ptr: Pointer, newSize: u64): Pointer
    fn free(self: Self, ptr: Pointer): unit
    // We'd want this type of function on abilities?
    // Or simply some static fn that supports just a few known
    // ability impls
    fn allocStyle(): AllocStyle
  }

  impl Allocator for mem/SystemHeap {
    fn allocate(self: Self, size: u64, align: u64): Pointer { systemMalloc(size, align) }
    fn allocStyle(): AllocStyle { .Heap }
  }

  fn requiresFree[A: Allocator](): bool {
    #static switch (Allocator for A)/allocStyle() {
      .Heap -> true,
      .Push -> false,
      .GcHeap -> false
    }
  }

  static fn supportsRealloc[A: Allocator](): bool {
    #static switch (Allocator for A)/allocStyle() {
      .Heap -> true,
      .Push -> false,
      .GcHeap -> false
    }
  }

  // The allocator _could_ end up being zero-sized, in which case
  // we should optimize out the function argument altogether!
  fn bufferGrowTo[T, A: Allocate](context a: A)(self: Buffer[T]*, newCount: u64): unit {
    #if supportsRealloc[A] {
      let newSize = bufferSizeBytes[T](newCount);
      let realloc = a.realloc(self.dataPointer(), newSize);
      self <- { len: newCount, data: realloc }
    } else {
      let oldPtr = self.data;
      let newBuffer = Buffer/_allocate[T](newCount);
      _copyFrom[T](self.*, newBuffer, self.len);

      static if requiresFree[A] { a.free(oldPtr) };

      self <- newBuffer
    }
  }

}

fn main(): i32 {
   // Compiler Setting to inject a context value equal to the global constant rt/ALLOC_MODE_GC
   // to opt out of worrying about allocation for that program. If enabled, how do we prevent users from accidentally using it?
   // Also to consider, push/pop and scopes

   let debug = k1/DEBUG;

   mem/allocWith(mem/AllocMode/TEMP, 8, 8);
   println("debug? \{debug}");
   {
     let context alloc: mem/SystemHeap = mem/AllocMode/CONTEXT;
     let b = MyBuffer/filledIn[int](size = 5, value = 42);
     for i in b do {
       println("\{i}");
     };
     let b2 = MyBuffer/filled[int](size = 5, value = 49);
     for i in b2 do {
       println("\{i}");
     };
   };

   0
}
