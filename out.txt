Module optionals
--- TYPES ---
type 00 scalar     u8   [ tparams: 0, inference: 0 ]
type 01 scalar     u16   [ tparams: 0, inference: 0 ]
type 02 scalar     u32   [ tparams: 0, inference: 0 ]
type 03 scalar     u64   [ tparams: 0, inference: 0 ]
type 04 scalar     i8   [ tparams: 0, inference: 0 ]
type 05 scalar     i16   [ tparams: 0, inference: 0 ]
type 06 scalar     i32   [ tparams: 0, inference: 0 ]
type 07 scalar     i64   [ tparams: 0, inference: 0 ]
type 08 scalar     unit   [ tparams: 0, inference: 0 ]
type 09 scalar     char   [ tparams: 0, inference: 0 ]
type 10 scalar     bool   [ tparams: 0, inference: 0 ]
type 11 never      never   [ tparams: 0, inference: 0 ]
type 12 pointer    Pointer   [ tparams: 0, inference: 0 ]
type 13 scalar     f32   [ tparams: 0, inference: 0 ]
type 14 scalar     f64   [ tparams: 0, inference: 0 ]
type 15 tvar       T   [ tparams: 1, inference: 0 ]
type 16 reference  T*   [ tparams: 1, inference: 0 ]
type 17 struct     {len: u64, data: T*}   [ tparams: 1, inference: 0 ]
type 18 generic    Buffer[T]   [ tparams: 0, inference: 0 ]
type 19 tvar       T   [ tparams: 1, inference: 0 ]
type 20 reference  T*   [ tparams: 1, inference: 0 ]
type 21 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 22 struct     {len: u64, buffer: Buffer[T]}   [ tparams: 1, inference: 0 ]
type 23 generic    List[T]   [ tparams: 0, inference: 0 ]
type 24 reference  char*   [ tparams: 0, inference: 0 ]
type 25 struct     Buffer[char]   [ tparams: 0, inference: 0 ]
type 26 struct     string   [ tparams: 0, inference: 0 ]
type 27 tvar       T   [ tparams: 1, inference: 0 ]
type 28 variant    None   [ tparams: 0, inference: 0 ]
type 29 variant    Some(T)   [ tparams: 1, inference: 0 ]
type 30 enum       enum None | Some(T)   [ tparams: 1, inference: 0 ]
type 31 generic    Opt[T]   [ tparams: 0, inference: 0 ]
type 32 struct     SourceLocation   [ tparams: 0, inference: 0 ]
type 33 variant    Ordering.Less   [ tparams: 0, inference: 0 ]
type 34 variant    Ordering.Equal   [ tparams: 0, inference: 0 ]
type 35 variant    Ordering.Greater   [ tparams: 0, inference: 0 ]
type 36 enum       Ordering   [ tparams: 0, inference: 0 ]
type 37 tvar       T   [ tparams: 1, inference: 0 ]
type 38 tvar       E   [ tparams: 1, inference: 0 ]
type 39 variant    Ok(T)   [ tparams: 1, inference: 0 ]
type 40 variant    Err(E)   [ tparams: 1, inference: 0 ]
type 41 enum       enum Ok(T) | Err(E)   [ tparams: 2, inference: 0 ]
type 42 generic    Result[T, E]   [ tparams: 0, inference: 0 ]
type 43 tvar       T   [ tparams: 1, inference: 0 ]
type 44 reference  T*   [ tparams: 1, inference: 0 ]
type 45 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 46 struct     {buf: Buffer[T], pos: u64}   [ tparams: 1, inference: 0 ]
type 47 generic    BufferIterator[T]   [ tparams: 0, inference: 0 ]
type 48 variant    Char(char)   [ tparams: 0, inference: 0 ]
type 49 variant    String(string)   [ tparams: 0, inference: 0 ]
type 50 enum       enum Char(char) | String(string)   [ tparams: 0, inference: 0 ]
type 51 reference  enum Char(char) | String(string)*   [ tparams: 0, inference: 0 ]
type 52 struct     Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 53 struct     List[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 54 reference  List[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 55 struct     StringBuilder   [ tparams: 0, inference: 0 ]
type 56 struct     Arena   [ tparams: 0, inference: 0 ]
type 57 struct     ObjectPool   [ tparams: 0, inference: 0 ]
type 58 reference  Arena*   [ tparams: 0, inference: 0 ]
type 59 struct     Buffer[Arena]   [ tparams: 0, inference: 0 ]
type 60 struct     List[Arena]   [ tparams: 0, inference: 0 ]
type 61 reference  ObjectPool*   [ tparams: 0, inference: 0 ]
type 62 struct     Buffer[ObjectPool]   [ tparams: 0, inference: 0 ]
type 63 struct     List[ObjectPool]   [ tparams: 0, inference: 0 ]
type 64 struct     Allocator   [ tparams: 0, inference: 0 ]
type 65 struct     IntRange   [ tparams: 0, inference: 0 ]
type 66 struct     IntRangeIterator   [ tparams: 0, inference: 0 ]
type 67 variant    Opt[i64].None   [ tparams: 0, inference: 0 ]
type 68 variant    Opt[i64].Some(i64)   [ tparams: 0, inference: 0 ]
type 69 enum       Opt[i64]   [ tparams: 0, inference: 0 ]
type 70 struct     PointMaybeY   [ tparams: 0, inference: 0 ]
type 71 struct     WeirdPoint   [ tparams: 0, inference: 0 ]
type 72 tvar       Self   [ tparams: 1, inference: 0 ]
type 73 function   fn(Self, Self) -> bool   [ tparams: 2, inference: 0 ]
type 74 tvar       Self   [ tparams: 1, inference: 0 ]
type 75 function   fn(Self) -> string   [ tparams: 1, inference: 0 ]
type 76 tvar       T   [ tparams: 1, inference: 0 ]
type 77 function   fn() -> u64   [ tparams: 0, inference: 0 ]
type 78 tvar       T   [ tparams: 1, inference: 0 ]
type 79 tvar       T   [ tparams: 1, inference: 0 ]
type 80 function   fn() -> SourceLocation   [ tparams: 0, inference: 0 ]
type 81 tvar       Self   [ tparams: 1, inference: 0 ]
type 82 function   fn(Self) -> Self   [ tparams: 2, inference: 0 ]
type 83 function   fn(Self, Self) -> Self   [ tparams: 3, inference: 0 ]
type 84 tvar       Self   [ tparams: 1, inference: 0 ]
type 85 function   fn(Self, Self) -> Ordering   [ tparams: 2, inference: 0 ]
type 86 tvar       Self   [ tparams: 1, inference: 0 ]
type 87 tvar       Inner   [ tparams: 1, inference: 0 ]
type 88 function   fn(Self) -> bool   [ tparams: 1, inference: 0 ]
type 89 function   fn(Self) -> Inner   [ tparams: 2, inference: 0 ]
type 90 function   fn(Inner) -> Self   [ tparams: 2, inference: 0 ]
type 91 tvar       Self   [ tparams: 1, inference: 0 ]
type 92 tvar       T   [ tparams: 1, inference: 0 ]
type 93 tvar       E   [ tparams: 1, inference: 0 ]
type 94 function   fn(E) -> Self   [ tparams: 2, inference: 0 ]
type 95 function   fn(T) -> Self   [ tparams: 2, inference: 0 ]
type 96 function   fn(Self) -> bool   [ tparams: 1, inference: 0 ]
type 97 function   fn(Self) -> E   [ tparams: 2, inference: 0 ]
type 98 function   fn(Self) -> T   [ tparams: 2, inference: 0 ]
type 99 tvar       Self   [ tparams: 1, inference: 0 ]
type 100 tvar       Item   [ tparams: 1, inference: 0 ]
type 101 reference  Self*   [ tparams: 1, inference: 0 ]
type 102 variant    Opt[Item].None   [ tparams: 0, inference: 0 ]
type 103 variant    Opt[Item].Some(Item)   [ tparams: 1, inference: 0 ]
type 104 enum       Opt[Item]   [ tparams: 1, inference: 0 ]
type 105 function   fn(Self*) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 106 variant    Opt[u64].None   [ tparams: 0, inference: 0 ]
type 107 variant    Opt[u64].Some(u64)   [ tparams: 0, inference: 0 ]
type 108 enum       Opt[u64]   [ tparams: 0, inference: 0 ]
type 109 struct     {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 110 function   fn(Self) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 111 function   fn(Self*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 112 function   fn(Self*, u64) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 113 tvar       Self   [ tparams: 1, inference: 0 ]
type 114 tvar       Item   [ tparams: 1, inference: 0 ]
type 115 tvar       I   [ tparams: 1, inference: 0 ]
type 116 reference  I*   [ tparams: 1, inference: 0 ]
type 117 variant    Opt[Item].None   [ tparams: 0, inference: 0 ]
type 118 variant    Opt[Item].Some(Item)   [ tparams: 1, inference: 0 ]
type 119 enum       Opt[Item]   [ tparams: 1, inference: 0 ]
type 120 function   fn(I*) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 121 function   fn(I) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 122 function   fn(I*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 123 function   fn(I*, u64) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 124 function   fn(Self) -> I   [ tparams: 2, inference: 0 ]
type 125 function   fn(bool) -> bool   [ tparams: 0, inference: 0 ]
type 126 function   fn(bool, bool) -> bool   [ tparams: 0, inference: 0 ]
type 127 tvar       T   [ tparams: 1, inference: 0 ]
type 128 function   fn(T) -> unit   [ tparams: 1, inference: 0 ]
type 129 function   fn(i32) -> never   [ tparams: 0, inference: 0 ]
type 130 function   fn(i32, Pointer, u64, u64) -> i64   [ tparams: 0, inference: 0 ]
type 131 function   fn(i32, Pointer, u64, u64) -> u64   [ tparams: 0, inference: 0 ]
type 132 function   fn(Pointer, Pointer, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 133 function   fn(Pointer, u32, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 134 function   fn(Pointer, Pointer, u64) -> i32   [ tparams: 0, inference: 0 ]
type 135 function   fn(u64, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 136 function   fn(u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 137 function   fn(Pointer) -> unit   [ tparams: 0, inference: 0 ]
type 138 function   fn(Pointer, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 139 function   fn(u32) -> u32   [ tparams: 0, inference: 0 ]
type 140 function   fn() -> never   [ tparams: 0, inference: 0 ]
type 141 function   fn(SourceLocation, bool) -> unit   [ tparams: 0, inference: 0 ]
type 142 function   fn(SourceLocation, string) -> never   [ tparams: 0, inference: 0 ]
type 143 tvar       T   [ tparams: 1, inference: 0 ]
type 144 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 145 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 146 function   fn(SourceLocation, T, T) -> unit   [ tparams: 2, inference: 0 ]
type 147 function   fn() -> Pointer   [ tparams: 0, inference: 0 ]
type 148 function   fn(Pointer) -> bool   [ tparams: 0, inference: 0 ]
type 149 tvar       T   [ tparams: 1, inference: 0 ]
type 150 reference  T*   [ tparams: 1, inference: 0 ]
type 151 function   fn(Pointer, u64) -> T*   [ tparams: 1, inference: 0 ]
type 152 function   fn(Pointer, Pointer) -> bool   [ tparams: 0, inference: 0 ]
type 153 tvar       T   [ tparams: 1, inference: 0 ]
type 154 reference  T*   [ tparams: 1, inference: 0 ]
type 155 function   fn(T) -> T*   [ tparams: 2, inference: 0 ]
type 156 tvar       T   [ tparams: 1, inference: 0 ]
type 157 function   fn(T) -> T   [ tparams: 2, inference: 0 ]
type 158 tvar       T   [ tparams: 1, inference: 0 ]
type 159 function   fn(T) -> unit   [ tparams: 1, inference: 0 ]
type 160 tvar       T   [ tparams: 1, inference: 0 ]
type 161 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 162 function   fn(T) -> unit   [ tparams: 1, inference: 0 ]
type 163 function   fn(string) -> unit   [ tparams: 0, inference: 0 ]
type 164 function   fn() -> unit   [ tparams: 0, inference: 0 ]
type 165 reference  string*   [ tparams: 0, inference: 0 ]
type 166 struct     Buffer[string]   [ tparams: 0, inference: 0 ]
type 167 function   fn(u32, Pointer) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 168 variant    Result[string, string].Ok(string)   [ tparams: 0, inference: 0 ]
type 169 variant    Result[string, string].Err(string)   [ tparams: 0, inference: 0 ]
type 170 enum       Result[string, string]   [ tparams: 0, inference: 0 ]
type 171 function   fn(u64) -> Result[string, string]   [ tparams: 0, inference: 0 ]
type 172 function   fn(Pointer, Pointer) -> Pointer   [ tparams: 0, inference: 0 ]
type 173 function   fn(Pointer, u64, i32) -> i32   [ tparams: 0, inference: 0 ]
type 174 function   fn(Pointer, u64, u64, Pointer) -> u64   [ tparams: 0, inference: 0 ]
type 175 function   fn(Pointer) -> i32   [ tparams: 0, inference: 0 ]
type 176 function   fn(Pointer) -> u64   [ tparams: 0, inference: 0 ]
type 177 function   fn(Allocator, string) -> string   [ tparams: 0, inference: 0 ]
type 178 function   fn(SourceLocation, string, bool) -> unit   [ tparams: 0, inference: 0 ]
type 179 function   fn(char) -> string   [ tparams: 0, inference: 0 ]
type 180 variant    Opt[u8].None   [ tparams: 0, inference: 0 ]
type 181 variant    Opt[u8].Some(u8)   [ tparams: 0, inference: 0 ]
type 182 enum       Opt[u8]   [ tparams: 0, inference: 0 ]
type 183 function   fn(char) -> Opt[u8]   [ tparams: 0, inference: 0 ]
type 184 tvar       Self   [ tparams: 1, inference: 0 ]
type 185 reference  Self*   [ tparams: 1, inference: 0 ]
type 186 function   fn(Self*, char) -> unit   [ tparams: 1, inference: 0 ]
type 187 function   fn(Self*, string) -> unit   [ tparams: 1, inference: 0 ]
type 188 function   fn(Self*, Buffer[char]) -> unit   [ tparams: 1, inference: 0 ]
type 189 function   fn(bool) -> string   [ tparams: 0, inference: 0 ]
type 190 function   fn(i64) -> string   [ tparams: 0, inference: 0 ]
type 191 function   fn(i64, i64) -> Ordering   [ tparams: 0, inference: 0 ]
type 192 function   fn(u64, u64) -> Ordering   [ tparams: 0, inference: 0 ]
type 193 function   fn(u8, u8) -> Ordering   [ tparams: 0, inference: 0 ]
type 194 function   fn(u8) -> char   [ tparams: 0, inference: 0 ]
type 195 tvar       W   [ tparams: 1, inference: 0 ]
type 196 reference  W*   [ tparams: 1, inference: 0 ]
type 197 function   fn(W*, char) -> unit   [ tparams: 1, inference: 0 ]
type 198 function   fn(W*, string) -> unit   [ tparams: 1, inference: 0 ]
type 199 function   fn(W*, Buffer[char]) -> unit   [ tparams: 1, inference: 0 ]
type 200 function   fn(W*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 201 function   fn(u64) -> string   [ tparams: 0, inference: 0 ]
type 202 function   fn(u32) -> string   [ tparams: 0, inference: 0 ]
type 203 function   fn(u8) -> string   [ tparams: 0, inference: 0 ]
type 204 function   fn(i32) -> string   [ tparams: 0, inference: 0 ]
type 205 function   fn(i16) -> string   [ tparams: 0, inference: 0 ]
type 206 function   fn(i8) -> string   [ tparams: 0, inference: 0 ]
type 207 function   fn(i64, i64) -> bool   [ tparams: 0, inference: 0 ]
type 208 tvar       S   [ tparams: 1, inference: 0 ]
type 209 tvar       F   [ tparams: 1, inference: 0 ]
type 210 variant    Result[S, F].Ok(S)   [ tparams: 1, inference: 0 ]
type 211 variant    Result[S, F].Err(F)   [ tparams: 1, inference: 0 ]
type 212 enum       Result[S, F]   [ tparams: 2, inference: 0 ]
type 213 function   fn(F) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 214 function   fn(E) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 215 function   fn(S) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 216 function   fn(T) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 217 function   fn(Result[S, F]) -> bool   [ tparams: 2, inference: 0 ]
type 218 function   fn(Result[S, F]) -> F   [ tparams: 3, inference: 0 ]
type 219 function   fn(Result[S, F]) -> E   [ tparams: 3, inference: 0 ]
type 220 function   fn(Result[S, F]) -> S   [ tparams: 3, inference: 0 ]
type 221 function   fn(Result[S, F]) -> T   [ tparams: 3, inference: 0 ]
type 222 tvar       S   [ tparams: 1, inference: 0 ]
type 223 tvar       F   [ tparams: 1, inference: 0 ]
type 224 variant    Result[S, F].Ok(S)   [ tparams: 1, inference: 0 ]
type 225 variant    Result[S, F].Err(F)   [ tparams: 1, inference: 0 ]
type 226 enum       Result[S, F]   [ tparams: 2, inference: 0 ]
type 227 function   fn(Result[S, F]) -> bool   [ tparams: 2, inference: 0 ]
type 228 function   fn(Result[S, F]) -> S   [ tparams: 3, inference: 0 ]
type 229 function   fn(Result[S, F]) -> Inner   [ tparams: 3, inference: 0 ]
type 230 function   fn(S) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 231 function   fn(Inner) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 232 tvar       T   [ tparams: 1, inference: 0 ]
type 233 function   fn(u64) -> u64   [ tparams: 0, inference: 0 ]
type 234 tvar       T   [ tparams: 1, inference: 0 ]
type 235 reference  T*   [ tparams: 1, inference: 0 ]
type 236 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 237 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 238 tvar       T   [ tparams: 1, inference: 0 ]
type 239 reference  T*   [ tparams: 1, inference: 0 ]
type 240 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 241 function   fn(u64, Pointer) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 242 tvar       T   [ tparams: 1, inference: 0 ]
type 243 reference  T*   [ tparams: 1, inference: 0 ]
type 244 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 245 function   fn(u64, T*) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 246 tvar       T   [ tparams: 1, inference: 0 ]
type 247 reference  T*   [ tparams: 1, inference: 0 ]
type 248 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 249 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 250 tvar       T   [ tparams: 1, inference: 0 ]
type 251 reference  T*   [ tparams: 1, inference: 0 ]
type 252 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 253 function   fn(Buffer[T], Buffer[T], u64) -> unit   [ tparams: 2, inference: 0 ]
type 254 tvar       T   [ tparams: 1, inference: 0 ]
type 255 reference  T*   [ tparams: 1, inference: 0 ]
type 256 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 257 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 258 tvar       T   [ tparams: 1, inference: 0 ]
type 259 reference  T*   [ tparams: 1, inference: 0 ]
type 260 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 261 function   fn(Buffer[T]) -> u64   [ tparams: 1, inference: 0 ]
type 262 tvar       T   [ tparams: 1, inference: 0 ]
type 263 reference  T*   [ tparams: 1, inference: 0 ]
type 264 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 265 function   fn() -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 266 tvar       T   [ tparams: 1, inference: 0 ]
type 267 reference  T*   [ tparams: 1, inference: 0 ]
type 268 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 269 function   fn(u64, T) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 270 tvar       T   [ tparams: 1, inference: 0 ]
type 271 reference  T*   [ tparams: 1, inference: 0 ]
type 272 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 273 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 274 tvar       T   [ tparams: 1, inference: 0 ]
type 275 reference  T*   [ tparams: 1, inference: 0 ]
type 276 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 277 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 278 tvar       T   [ tparams: 1, inference: 0 ]
type 279 reference  T*   [ tparams: 1, inference: 0 ]
type 280 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 281 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 282 tvar       T   [ tparams: 1, inference: 0 ]
type 283 reference  T*   [ tparams: 1, inference: 0 ]
type 284 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 285 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 286 tvar       T   [ tparams: 1, inference: 0 ]
type 287 reference  T*   [ tparams: 1, inference: 0 ]
type 288 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 289 function   fn(Buffer[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 290 tvar       T   [ tparams: 1, inference: 0 ]
type 291 reference  T*   [ tparams: 1, inference: 0 ]
type 292 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 293 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 294 tvar       T   [ tparams: 1, inference: 0 ]
type 295 reference  T*   [ tparams: 1, inference: 0 ]
type 296 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 297 function   fn(Buffer[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 298 tvar       T   [ tparams: 1, inference: 0 ]
type 299 reference  T*   [ tparams: 1, inference: 0 ]
type 300 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 301 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 302 tvar       T   [ tparams: 1, inference: 0 ]
type 303 reference  T*   [ tparams: 1, inference: 0 ]
type 304 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 305 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 306 tvar       T   [ tparams: 1, inference: 0 ]
type 307 reference  T*   [ tparams: 1, inference: 0 ]
type 308 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 309 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 310 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 311 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 312 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 313 tvar       T   [ tparams: 1, inference: 0 ]
type 314 reference  T*   [ tparams: 1, inference: 0 ]
type 315 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 316 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 317 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 318 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 319 function   fn(Buffer[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 320 tvar       T   [ tparams: 1, inference: 0 ]
type 321 reference  T*   [ tparams: 1, inference: 0 ]
type 322 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 323 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 324 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 325 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 326 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 327 tvar       T   [ tparams: 1, inference: 0 ]
type 328 reference  T*   [ tparams: 1, inference: 0 ]
type 329 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 330 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 331 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 332 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 333 function   fn(Buffer[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 334 tvar       T   [ tparams: 1, inference: 0 ]
type 335 reference  T*   [ tparams: 1, inference: 0 ]
type 336 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 337 function   fn(Buffer[T], Buffer[T]) -> Buffer[T]   [ tparams: 3, inference: 0 ]
type 338 tvar       T   [ tparams: 1, inference: 0 ]
type 339 reference  T*   [ tparams: 1, inference: 0 ]
type 340 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 341 reference  Buffer[T]*   [ tparams: 1, inference: 0 ]
type 342 function   fn(Buffer[T]*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 343 tvar       T   [ tparams: 1, inference: 0 ]
type 344 function   fn(T, T) -> Ordering   [ tparams: 2, inference: 0 ]
type 345 reference  T*   [ tparams: 1, inference: 0 ]
type 346 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 347 function   fn(Buffer[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 348 reference  u8*   [ tparams: 0, inference: 0 ]
type 349 struct     Buffer[u8]   [ tparams: 0, inference: 0 ]
type 350 function   fn(Buffer[u8], Buffer[u8]) -> bool   [ tparams: 0, inference: 0 ]
type 351 function   fn(Buffer[char], Buffer[char]) -> bool   [ tparams: 0, inference: 0 ]
type 352 reference  i64*   [ tparams: 0, inference: 0 ]
type 353 struct     Buffer[i64]   [ tparams: 0, inference: 0 ]
type 354 function   fn(Buffer[i64], Buffer[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 355 tvar       T   [ tparams: 1, inference: 0 ]
type 356 reference  T*   [ tparams: 1, inference: 0 ]
type 357 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 358 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 359 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 360 tvar       T   [ tparams: 1, inference: 0 ]
type 361 reference  T*   [ tparams: 1, inference: 0 ]
type 362 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 363 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 364 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 365 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 366 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 367 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 368 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 369 function   fn(BufferIterator[T]*) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 370 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 371 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 372 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 373 function   fn(BufferIterator[T]*, u64) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 374 tvar       T   [ tparams: 1, inference: 0 ]
type 375 reference  T*   [ tparams: 1, inference: 0 ]
type 376 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 377 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 378 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 379 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 380 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 381 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 382 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 383 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 384 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 385 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 386 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 387 function   fn(Buffer[T]) -> I   [ tparams: 2, inference: 0 ]
type 388 tvar       T   [ tparams: 1, inference: 0 ]
type 389 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 390 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 391 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 392 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 393 tvar       T   [ tparams: 1, inference: 0 ]
type 394 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 395 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 396 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 397 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 398 tvar       T   [ tparams: 1, inference: 0 ]
type 399 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 400 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 401 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 402 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 403 tvar       T   [ tparams: 1, inference: 0 ]
type 404 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 405 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 406 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 407 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 408 function   fn(Opt[T], Opt[T]) -> bool   [ tparams: 2, inference: 0 ]
type 409 tvar       T   [ tparams: 1, inference: 0 ]
type 410 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 411 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 412 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 413 function   fn() -> Opt[T].None   [ tparams: 0, inference: 0 ]
type 414 tvar       T   [ tparams: 1, inference: 0 ]
type 415 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 416 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 417 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 418 function   fn(T) -> Opt[T].Some(T)   [ tparams: 2, inference: 0 ]
type 419 tvar       T   [ tparams: 1, inference: 0 ]
type 420 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 421 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 422 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 423 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 424 function   fn(Opt[T], Opt[T]) -> bool   [ tparams: 2, inference: 0 ]
type 425 tvar       T   [ tparams: 1, inference: 0 ]
type 426 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 427 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 428 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 429 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 430 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 431 function   fn(Opt[T]) -> Inner   [ tparams: 2, inference: 0 ]
type 432 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 433 function   fn(Inner) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 434 tvar       T   [ tparams: 1, inference: 0 ]
type 435 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 436 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 437 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 438 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 439 function   fn(Opt[T]) -> string   [ tparams: 1, inference: 0 ]
type 440 tvar       T   [ tparams: 1, inference: 0 ]
type 441 reference  T*   [ tparams: 1, inference: 0 ]
type 442 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 443 struct     List[T]   [ tparams: 1, inference: 0 ]
type 444 function   fn() -> List[T]   [ tparams: 1, inference: 0 ]
type 445 tvar       T   [ tparams: 1, inference: 0 ]
type 446 reference  T*   [ tparams: 1, inference: 0 ]
type 447 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 448 struct     List[T]   [ tparams: 1, inference: 0 ]
type 449 function   fn(u64, T) -> List[T]   [ tparams: 2, inference: 0 ]
type 450 tvar       T   [ tparams: 1, inference: 0 ]
type 451 reference  T*   [ tparams: 1, inference: 0 ]
type 452 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 453 struct     List[T]   [ tparams: 1, inference: 0 ]
type 454 function   fn(u64) -> List[T]   [ tparams: 1, inference: 0 ]
type 455 tvar       T   [ tparams: 1, inference: 0 ]
type 456 reference  T*   [ tparams: 1, inference: 0 ]
type 457 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 458 struct     List[T]   [ tparams: 1, inference: 0 ]
type 459 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 460 function   fn(List[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 461 tvar       T   [ tparams: 1, inference: 0 ]
type 462 reference  T*   [ tparams: 1, inference: 0 ]
type 463 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 464 struct     List[T]   [ tparams: 1, inference: 0 ]
type 465 function   fn(T) -> List[T]   [ tparams: 2, inference: 0 ]
type 466 tvar       T   [ tparams: 1, inference: 0 ]
type 467 reference  T*   [ tparams: 1, inference: 0 ]
type 468 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 469 struct     List[T]   [ tparams: 1, inference: 0 ]
type 470 function   fn(Buffer[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 471 tvar       T   [ tparams: 1, inference: 0 ]
type 472 reference  T*   [ tparams: 1, inference: 0 ]
type 473 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 474 struct     List[T]   [ tparams: 1, inference: 0 ]
type 475 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 476 tvar       T   [ tparams: 1, inference: 0 ]
type 477 reference  T*   [ tparams: 1, inference: 0 ]
type 478 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 479 struct     List[T]   [ tparams: 1, inference: 0 ]
type 480 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 481 tvar       T   [ tparams: 1, inference: 0 ]
type 482 reference  T*   [ tparams: 1, inference: 0 ]
type 483 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 484 struct     List[T]   [ tparams: 1, inference: 0 ]
type 485 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 486 tvar       T   [ tparams: 1, inference: 0 ]
type 487 reference  T*   [ tparams: 1, inference: 0 ]
type 488 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 489 struct     List[T]   [ tparams: 1, inference: 0 ]
type 490 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 491 tvar       T   [ tparams: 1, inference: 0 ]
type 492 reference  T*   [ tparams: 1, inference: 0 ]
type 493 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 494 struct     List[T]   [ tparams: 1, inference: 0 ]
type 495 function   fn(List[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 496 tvar       T   [ tparams: 1, inference: 0 ]
type 497 reference  T*   [ tparams: 1, inference: 0 ]
type 498 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 499 struct     List[T]   [ tparams: 1, inference: 0 ]
type 500 function   fn(List[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 501 tvar       T   [ tparams: 1, inference: 0 ]
type 502 reference  T*   [ tparams: 1, inference: 0 ]
type 503 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 504 struct     List[T]   [ tparams: 1, inference: 0 ]
type 505 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 506 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 507 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 508 function   fn(List[T], u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 509 tvar       T   [ tparams: 1, inference: 0 ]
type 510 reference  T*   [ tparams: 1, inference: 0 ]
type 511 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 512 struct     List[T]   [ tparams: 1, inference: 0 ]
type 513 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 514 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 515 tvar       T   [ tparams: 1, inference: 0 ]
type 516 reference  T*   [ tparams: 1, inference: 0 ]
type 517 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 518 struct     List[T]   [ tparams: 1, inference: 0 ]
type 519 function   fn(List[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 520 tvar       T   [ tparams: 1, inference: 0 ]
type 521 reference  T*   [ tparams: 1, inference: 0 ]
type 522 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 523 struct     List[T]   [ tparams: 1, inference: 0 ]
type 524 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 525 function   fn(List[T]*, T) -> unit   [ tparams: 2, inference: 0 ]
type 526 tvar       T   [ tparams: 1, inference: 0 ]
type 527 reference  T*   [ tparams: 1, inference: 0 ]
type 528 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 529 struct     List[T]   [ tparams: 1, inference: 0 ]
type 530 function   fn(List[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 531 tvar       T   [ tparams: 1, inference: 0 ]
type 532 reference  T*   [ tparams: 1, inference: 0 ]
type 533 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 534 struct     List[T]   [ tparams: 1, inference: 0 ]
type 535 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 536 tvar       T   [ tparams: 1, inference: 0 ]
type 537 reference  T*   [ tparams: 1, inference: 0 ]
type 538 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 539 struct     List[T]   [ tparams: 1, inference: 0 ]
type 540 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 541 tvar       T   [ tparams: 1, inference: 0 ]
type 542 reference  T*   [ tparams: 1, inference: 0 ]
type 543 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 544 struct     List[T]   [ tparams: 1, inference: 0 ]
type 545 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 546 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 547 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 548 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 549 tvar       T   [ tparams: 1, inference: 0 ]
type 550 reference  T*   [ tparams: 1, inference: 0 ]
type 551 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 552 struct     List[T]   [ tparams: 1, inference: 0 ]
type 553 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 554 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 555 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 556 function   fn(List[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 557 tvar       T   [ tparams: 1, inference: 0 ]
type 558 reference  T*   [ tparams: 1, inference: 0 ]
type 559 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 560 struct     List[T]   [ tparams: 1, inference: 0 ]
type 561 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 562 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 563 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 564 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 565 tvar       T   [ tparams: 1, inference: 0 ]
type 566 reference  T*   [ tparams: 1, inference: 0 ]
type 567 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 568 struct     List[T]   [ tparams: 1, inference: 0 ]
type 569 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 570 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 571 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 572 function   fn(List[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 573 tvar       T   [ tparams: 1, inference: 0 ]
type 574 reference  T*   [ tparams: 1, inference: 0 ]
type 575 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 576 struct     List[T]   [ tparams: 1, inference: 0 ]
type 577 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 578 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 579 tvar       T   [ tparams: 1, inference: 0 ]
type 580 reference  T*   [ tparams: 1, inference: 0 ]
type 581 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 582 struct     List[T]   [ tparams: 1, inference: 0 ]
type 583 function   fn(List[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 584 tvar       T   [ tparams: 1, inference: 0 ]
type 585 reference  T*   [ tparams: 1, inference: 0 ]
type 586 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 587 struct     List[T]   [ tparams: 1, inference: 0 ]
type 588 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 589 function   fn(List[T]*, List[T]) -> unit   [ tparams: 2, inference: 0 ]
type 590 tvar       T   [ tparams: 1, inference: 0 ]
type 591 reference  T*   [ tparams: 1, inference: 0 ]
type 592 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 593 struct     List[T]   [ tparams: 1, inference: 0 ]
type 594 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 595 function   fn(List[T]*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 596 tvar       T   [ tparams: 1, inference: 0 ]
type 597 function   fn(T, T) -> Ordering   [ tparams: 2, inference: 0 ]
type 598 reference  T*   [ tparams: 1, inference: 0 ]
type 599 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 600 struct     List[T]   [ tparams: 1, inference: 0 ]
type 601 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 602 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 603 tvar       T   [ tparams: 1, inference: 0 ]
type 604 function   fn(T, T) -> Ordering   [ tparams: 2, inference: 0 ]
type 605 reference  T*   [ tparams: 1, inference: 0 ]
type 606 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 607 struct     List[T]   [ tparams: 1, inference: 0 ]
type 608 function   fn(List[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 609 tvar       T   [ tparams: 1, inference: 0 ]
type 610 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 611 reference  T*   [ tparams: 1, inference: 0 ]
type 612 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 613 struct     List[T]   [ tparams: 1, inference: 0 ]
type 614 function   fn(List[T], string) -> string   [ tparams: 1, inference: 0 ]
type 615 struct     List[u8]   [ tparams: 0, inference: 0 ]
type 616 function   fn(List[u8], List[u8]) -> bool   [ tparams: 0, inference: 0 ]
type 617 struct     List[i64]   [ tparams: 0, inference: 0 ]
type 618 function   fn(List[i64], List[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 619 tvar       T   [ tparams: 1, inference: 0 ]
type 620 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 621 reference  T*   [ tparams: 1, inference: 0 ]
type 622 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 623 struct     List[T]   [ tparams: 1, inference: 0 ]
type 624 function   fn(List[T], List[T]) -> bool   [ tparams: 2, inference: 0 ]
type 625 tvar       T   [ tparams: 1, inference: 0 ]
type 626 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 627 reference  T*   [ tparams: 1, inference: 0 ]
type 628 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 629 struct     List[T]   [ tparams: 1, inference: 0 ]
type 630 function   fn(List[T]) -> string   [ tparams: 1, inference: 0 ]
type 631 tvar       T   [ tparams: 1, inference: 0 ]
type 632 reference  T*   [ tparams: 1, inference: 0 ]
type 633 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 634 struct     List[T]   [ tparams: 1, inference: 0 ]
type 635 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 636 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 637 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 638 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 639 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 640 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 641 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 642 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 643 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 644 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 645 function   fn(List[T]) -> I   [ tparams: 2, inference: 0 ]
type 646 function   fn(string, u64) -> char   [ tparams: 0, inference: 0 ]
type 647 function   fn(string) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 648 function   fn(string) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 649 struct     List[char]   [ tparams: 0, inference: 0 ]
type 650 function   fn(string) -> List[char]   [ tparams: 0, inference: 0 ]
type 651 function   fn(List[char]) -> string   [ tparams: 0, inference: 0 ]
type 652 function   fn(Buffer[char]) -> string   [ tparams: 0, inference: 0 ]
type 653 function   fn(Buffer[u8]) -> string   [ tparams: 0, inference: 0 ]
type 654 function   fn(string) -> u64   [ tparams: 0, inference: 0 ]
type 655 function   fn(string) -> bool   [ tparams: 0, inference: 0 ]
type 656 variant    Opt[char].None   [ tparams: 0, inference: 0 ]
type 657 variant    Opt[char].Some(char)   [ tparams: 0, inference: 0 ]
type 658 enum       Opt[char]   [ tparams: 0, inference: 0 ]
type 659 function   fn(string) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 660 function   fn(string, char) -> i64   [ tparams: 0, inference: 0 ]
type 661 function   fn(string, string) -> string   [ tparams: 0, inference: 0 ]
type 662 function   fn(string, char) -> string   [ tparams: 0, inference: 0 ]
type 663 struct     List[string]   [ tparams: 0, inference: 0 ]
type 664 function   fn(string, char) -> List[string]   [ tparams: 0, inference: 0 ]
type 665 function   fn(string, string) -> Opt[u64]   [ tparams: 0, inference: 0 ]
type 666 function   fn(string, u64, u64) -> string   [ tparams: 0, inference: 0 ]
type 667 function   fn(string, u64) -> string   [ tparams: 0, inference: 0 ]
type 668 function   fn(string, string) -> bool   [ tparams: 0, inference: 0 ]
type 669 function   fn(string) -> Pointer   [ tparams: 0, inference: 0 ]
type 670 function   fn(Pointer) -> string   [ tparams: 0, inference: 0 ]
type 671 function   fn(string) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 672 function   fn(string, string) -> bool   [ tparams: 0, inference: 0 ]
type 673 function   fn(string) -> string   [ tparams: 0, inference: 0 ]
type 674 struct     BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 675 reference  BufferIterator[char]*   [ tparams: 0, inference: 0 ]
type 676 function   fn(BufferIterator[char]*) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 677 function   fn(BufferIterator[char]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 678 function   fn(BufferIterator[char]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 679 function   fn(BufferIterator[char]*, u64) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 680 function   fn(string) -> BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 681 function   fn(string) -> I   [ tparams: 1, inference: 0 ]
type 682 function   fn(string*) -> BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 683 function   fn(string*) -> I   [ tparams: 1, inference: 0 ]
type 684 tvar       T   [ tparams: 1, inference: 0 ]
type 685 function   fn(u64) -> StringBuilder   [ tparams: 0, inference: 0 ]
type 686 function   fn() -> StringBuilder   [ tparams: 0, inference: 0 ]
type 687 function   fn(StringBuilder, char) -> unit   [ tparams: 0, inference: 0 ]
type 688 function   fn(StringBuilder, string) -> unit   [ tparams: 0, inference: 0 ]
type 689 function   fn(StringBuilder, u8) -> unit   [ tparams: 0, inference: 0 ]
type 690 function   fn(StringBuilder) -> u64   [ tparams: 0, inference: 0 ]
type 691 function   fn(StringBuilder) -> string   [ tparams: 0, inference: 0 ]
type 692 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 693 function   fn(i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 694 function   fn(u8) -> u8   [ tparams: 0, inference: 0 ]
type 695 function   fn(u8, u8) -> u8   [ tparams: 0, inference: 0 ]
type 696 function   fn(u16) -> u16   [ tparams: 0, inference: 0 ]
type 697 function   fn(u16, u16) -> u16   [ tparams: 0, inference: 0 ]
type 698 function   fn(u32) -> u32   [ tparams: 0, inference: 0 ]
type 699 function   fn(u32, u32) -> u32   [ tparams: 0, inference: 0 ]
type 700 function   fn(u64) -> u64   [ tparams: 0, inference: 0 ]
type 701 function   fn(u64, u64) -> u64   [ tparams: 0, inference: 0 ]
type 702 function   fn(i8) -> i8   [ tparams: 0, inference: 0 ]
type 703 function   fn(i8, i8) -> i8   [ tparams: 0, inference: 0 ]
type 704 function   fn(i16) -> i16   [ tparams: 0, inference: 0 ]
type 705 function   fn(i16, i16) -> i16   [ tparams: 0, inference: 0 ]
type 706 function   fn(i32) -> i32   [ tparams: 0, inference: 0 ]
type 707 function   fn(i32, i32) -> i32   [ tparams: 0, inference: 0 ]
type 708 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 709 function   fn(i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 710 function   fn(Arena) -> u64   [ tparams: 0, inference: 0 ]
type 711 function   fn(u64, u64) -> u64   [ tparams: 0, inference: 0 ]
type 712 function   fn(string, u64) -> Arena   [ tparams: 0, inference: 0 ]
type 713 function   fn(Arena*, u64, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 714 tvar       T   [ tparams: 1, inference: 0 ]
type 715 reference  T*   [ tparams: 1, inference: 0 ]
type 716 function   fn(Arena*, T) -> T*   [ tparams: 2, inference: 0 ]
type 717 function   fn(Arena*, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 718 function   fn(Arena*) -> unit   [ tparams: 0, inference: 0 ]
type 719 function   fn() -> Allocator   [ tparams: 0, inference: 0 ]
type 720 function   fn(Allocator) -> Arena*   [ tparams: 0, inference: 0 ]
type 721 function   fn(i64, i64) -> IntRange   [ tparams: 0, inference: 0 ]
type 722 function   fn(i64) -> IntRange   [ tparams: 0, inference: 0 ]
type 723 function   fn(IntRange) -> IntRangeIterator   [ tparams: 0, inference: 0 ]
type 724 function   fn(IntRangeIterator) -> i64   [ tparams: 0, inference: 0 ]
type 725 reference  IntRangeIterator*   [ tparams: 0, inference: 0 ]
type 726 function   fn(IntRangeIterator*, u64) -> bool   [ tparams: 0, inference: 0 ]
type 727 function   fn(IntRangeIterator*) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 728 function   fn(IntRangeIterator*) -> Opt[Item]   [ tparams: 1, inference: 0 ]
type 729 function   fn(IntRangeIterator) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 730 function   fn(IntRangeIterator*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 731 function   fn(IntRangeIterator*, u64) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 732 function   fn(IntRangeIterator*, u64) -> Opt[Item]   [ tparams: 1, inference: 0 ]
type 733 function   fn(IntRange) -> IntRangeIterator   [ tparams: 0, inference: 0 ]
type 734 function   fn(IntRange) -> I   [ tparams: 1, inference: 0 ]
type 735 function   fn() -> i64   [ tparams: 0, inference: 0 ]
type 736 function   fn() -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 737 reference  Pointer*   [ tparams: 0, inference: 0 ]
type 738 struct     Buffer[Pointer]   [ tparams: 0, inference: 0 ]
type 739 function   fn(u64, Pointer) -> Buffer[Pointer]   [ tparams: 0, inference: 0 ]
type 740 function   fn(u64) -> List[string]   [ tparams: 0, inference: 0 ]
type 741 reference  List[string]*   [ tparams: 0, inference: 0 ]
type 742 struct     BufferIterator[Pointer]   [ tparams: 0, inference: 0 ]
type 743 function   fn(Buffer[Pointer]) -> BufferIterator[Pointer]   [ tparams: 0, inference: 0 ]
type 744 reference  BufferIterator[Pointer]*   [ tparams: 0, inference: 0 ]
type 745 variant    Opt[Pointer].None   [ tparams: 0, inference: 0 ]
type 746 variant    Opt[Pointer].Some(Pointer)   [ tparams: 0, inference: 0 ]
type 747 enum       Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 748 function   fn(BufferIterator[Pointer]*) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 749 function   fn(BufferIterator[Pointer]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 750 function   fn(BufferIterator[Pointer]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 751 function   fn(BufferIterator[Pointer]*, u64) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 752 function   fn(Opt[Pointer]) -> bool   [ tparams: 0, inference: 0 ]
type 753 function   fn(Opt[Pointer]) -> Pointer   [ tparams: 0, inference: 0 ]
type 754 function   fn(Pointer) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 755 hole       '0   [ tparams: 0, inference: 1 ]
type 756 reference  '0*   [ tparams: 0, inference: 1 ]
type 757 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 758 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 759 function   fn(Buffer[Pointer], u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 760 function   fn(List[string]*, string) -> unit   [ tparams: 0, inference: 0 ]
type 761 hole       '0   [ tparams: 0, inference: 1 ]
type 762 reference  '0*   [ tparams: 0, inference: 1 ]
type 763 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 764 struct     List['0]   [ tparams: 0, inference: 1 ]
type 765 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 766 function   fn(List[string]) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 767 function   fn(u64) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 768 reference  Buffer[u8]*   [ tparams: 0, inference: 0 ]
type 769 hole       '0   [ tparams: 0, inference: 1 ]
type 770 reference  '0*   [ tparams: 0, inference: 1 ]
type 771 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 772 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 773 function   fn(Buffer[u8], u64) -> u8   [ tparams: 0, inference: 0 ]
type 774 hole       '0   [ tparams: 0, inference: 1 ]
type 775 reference  '0*   [ tparams: 0, inference: 1 ]
type 776 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 777 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 778 hole       '0   [ tparams: 0, inference: 1 ]
type 779 reference  '0*   [ tparams: 0, inference: 1 ]
type 780 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 781 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 782 function   fn(Buffer[u8], u64, u8) -> unit   [ tparams: 0, inference: 0 ]
type 783 reference  u64*   [ tparams: 0, inference: 0 ]
type 784 hole       '0   [ tparams: 0, inference: 1 ]
type 785 reference  '0*   [ tparams: 0, inference: 1 ]
type 786 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 787 function   fn(u64, Pointer) -> Buffer['0]   [ tparams: 0, inference: 1 ]
type 788 function   fn(u64, Pointer) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 789 function   fn(u64) -> List[char]   [ tparams: 0, inference: 0 ]
type 790 reference  List[char]*   [ tparams: 0, inference: 0 ]
type 791 function   fn(List[char]*, char) -> unit   [ tparams: 0, inference: 0 ]
type 792 hole       '0   [ tparams: 0, inference: 1 ]
type 793 reference  '0*   [ tparams: 0, inference: 1 ]
type 794 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 795 struct     List['0]   [ tparams: 0, inference: 1 ]
type 796 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 797 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 798 hole       '0   [ tparams: 0, inference: 1 ]
type 799 reference  '0*   [ tparams: 0, inference: 1 ]
type 800 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 801 struct     List['0]   [ tparams: 0, inference: 1 ]
type 802 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 803 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 804 hole       '0   [ tparams: 0, inference: 1 ]
type 805 reference  '0*   [ tparams: 0, inference: 1 ]
type 806 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 807 struct     List['0]   [ tparams: 0, inference: 1 ]
type 808 function   fn(List['0]) -> List['0]   [ tparams: 0, inference: 2 ]
type 809 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 810 function   fn(List[char]) -> List[char]   [ tparams: 0, inference: 0 ]
type 811 hole       '0   [ tparams: 0, inference: 1 ]
type 812 reference  '0*   [ tparams: 0, inference: 1 ]
type 813 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 814 struct     List['0]   [ tparams: 0, inference: 1 ]
type 815 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 816 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 817 hole       '0   [ tparams: 0, inference: 1 ]
type 818 reference  '0*   [ tparams: 0, inference: 1 ]
type 819 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 820 struct     List['0]   [ tparams: 0, inference: 1 ]
type 821 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 822 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 823 function   fn(List[char]*) -> unit   [ tparams: 0, inference: 0 ]
type 824 hole       '0   [ tparams: 0, inference: 1 ]
type 825 reference  '0*   [ tparams: 0, inference: 1 ]
type 826 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 827 struct     List['0]   [ tparams: 0, inference: 1 ]
type 828 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 829 function   fn(List[char]) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 830 hole       '0   [ tparams: 0, inference: 1 ]
type 831 reference  '0*   [ tparams: 0, inference: 1 ]
type 832 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 833 struct     List['0]   [ tparams: 0, inference: 1 ]
type 834 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 835 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 836 hole       '0   [ tparams: 0, inference: 1 ]
type 837 reference  '0*   [ tparams: 0, inference: 1 ]
type 838 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 839 struct     List['0]   [ tparams: 0, inference: 1 ]
type 840 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 841 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 842 variant    Opt[Result[S, F].Err(F)].None   [ tparams: 0, inference: 0 ]
type 843 variant    Opt[Result[S, F].Err(F)].Some(Result[S, F].Err(F))   [ tparams: 1, inference: 0 ]
type 844 enum       Opt[Result[S, F].Err(F)]   [ tparams: 1, inference: 0 ]
type 845 function   fn(Opt[Result[S, F].Err(F)]) -> bool   [ tparams: 1, inference: 0 ]
type 846 function   fn(Opt[Result[S, F].Err(F)]) -> Result[S, F].Err(F)   [ tparams: 2, inference: 0 ]
type 847 function   fn(Result[S, F].Err(F)) -> Opt[Result[S, F].Err(F)]   [ tparams: 2, inference: 0 ]
type 848 variant    Opt[Result[S, F].Ok(S)].None   [ tparams: 0, inference: 0 ]
type 849 variant    Opt[Result[S, F].Ok(S)].Some(Result[S, F].Ok(S))   [ tparams: 1, inference: 0 ]
type 850 enum       Opt[Result[S, F].Ok(S)]   [ tparams: 1, inference: 0 ]
type 851 function   fn(Opt[Result[S, F].Ok(S)]) -> bool   [ tparams: 1, inference: 0 ]
type 852 function   fn(Opt[Result[S, F].Ok(S)]) -> Result[S, F].Ok(S)   [ tparams: 2, inference: 0 ]
type 853 function   fn(Result[S, F].Ok(S)) -> Opt[Result[S, F].Ok(S)]   [ tparams: 2, inference: 0 ]
type 854 function   fn(F) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 855 function   fn(S) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 856 function   fn(Result[S, F]) -> F   [ tparams: 3, inference: 0 ]
type 857 hole       '0   [ tparams: 0, inference: 1 ]
type 858 reference  '0*   [ tparams: 0, inference: 1 ]
type 859 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 860 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 861 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 862 hole       '0   [ tparams: 0, inference: 1 ]
type 863 reference  '0*   [ tparams: 0, inference: 1 ]
type 864 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 865 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 866 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 867 function   fn(Buffer[T], Buffer[T], u64) -> unit   [ tparams: 2, inference: 0 ]
type 868 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 869 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 870 hole       '0   [ tparams: 0, inference: 1 ]
type 871 reference  '0*   [ tparams: 0, inference: 1 ]
type 872 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 873 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 874 function   fn(Buffer[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 875 function   fn() -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 876 hole       '0   [ tparams: 0, inference: 1 ]
type 877 reference  '0*   [ tparams: 0, inference: 1 ]
type 878 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 879 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 880 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 881 hole       '0   [ tparams: 0, inference: 1 ]
type 882 reference  '0*   [ tparams: 0, inference: 1 ]
type 883 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 884 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 885 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 886 hole       '0   [ tparams: 0, inference: 1 ]
type 887 reference  '0*   [ tparams: 0, inference: 1 ]
type 888 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 889 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 890 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 891 hole       '0   [ tparams: 0, inference: 1 ]
type 892 reference  '0*   [ tparams: 0, inference: 1 ]
type 893 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 894 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 895 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 896 function   fn(Pointer, u64) -> T*   [ tparams: 1, inference: 0 ]
type 897 hole       '0   [ tparams: 0, inference: 1 ]
type 898 reference  '0*   [ tparams: 0, inference: 1 ]
type 899 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 900 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 901 hole       '0   [ tparams: 0, inference: 1 ]
type 902 reference  '0*   [ tparams: 0, inference: 1 ]
type 903 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 904 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 905 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 906 hole       '0   [ tparams: 0, inference: 1 ]
type 907 reference  '0*   [ tparams: 0, inference: 1 ]
type 908 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 909 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 910 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 911 hole       '0   [ tparams: 0, inference: 1 ]
type 912 reference  '0*   [ tparams: 0, inference: 1 ]
type 913 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 914 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 915 function   fn(Buffer[T]) -> u64   [ tparams: 1, inference: 0 ]
type 916 hole       '0   [ tparams: 0, inference: 1 ]
type 917 reference  '0*   [ tparams: 0, inference: 1 ]
type 918 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 919 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 920 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 921 hole       '0   [ tparams: 0, inference: 1 ]
type 922 reference  '0*   [ tparams: 0, inference: 1 ]
type 923 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 924 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 925 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 926 hole       '0   [ tparams: 0, inference: 1 ]
type 927 reference  '0*   [ tparams: 0, inference: 1 ]
type 928 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 929 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 930 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 931 hole       '0   [ tparams: 0, inference: 1 ]
type 932 reference  '0*   [ tparams: 0, inference: 1 ]
type 933 variant    Opt['0*].None   [ tparams: 0, inference: 0 ]
type 934 variant    Opt['0*].Some('0*)   [ tparams: 0, inference: 1 ]
type 935 enum       Opt['0*]   [ tparams: 0, inference: 1 ]
type 936 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 937 function   fn(Buffer['0]) -> Opt['0*]   [ tparams: 0, inference: 2 ]
type 938 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 939 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 940 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 941 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 942 hole       '0   [ tparams: 0, inference: 1 ]
type 943 reference  '0*   [ tparams: 0, inference: 1 ]
type 944 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 945 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 946 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 947 hole       '0   [ tparams: 0, inference: 1 ]
type 948 reference  '0*   [ tparams: 0, inference: 1 ]
type 949 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 950 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 951 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 952 hole       '0   [ tparams: 0, inference: 1 ]
type 953 reference  '0*   [ tparams: 0, inference: 1 ]
type 954 variant    Opt['0*].None   [ tparams: 0, inference: 0 ]
type 955 variant    Opt['0*].Some('0*)   [ tparams: 0, inference: 1 ]
type 956 enum       Opt['0*]   [ tparams: 0, inference: 1 ]
type 957 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 958 function   fn(Buffer['0]) -> Opt['0*]   [ tparams: 0, inference: 2 ]
type 959 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 960 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 961 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 962 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 963 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 964 hole       '0   [ tparams: 0, inference: 1 ]
type 965 reference  '0*   [ tparams: 0, inference: 1 ]
type 966 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 967 function   fn(Buffer['0], Buffer['0], u64) -> unit   [ tparams: 0, inference: 2 ]
type 968 hole       '1   [ tparams: 0, inference: 1 ]
type 969 reference  '1*   [ tparams: 0, inference: 1 ]
type 970 struct     Buffer['1]   [ tparams: 0, inference: 1 ]
type 971 function   fn(Buffer['1], u64, u64) -> Buffer['1]   [ tparams: 0, inference: 2 ]
type 972 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 973 function   fn(Buffer[T], Buffer[T], u64) -> unit   [ tparams: 2, inference: 0 ]
type 974 hole       '0   [ tparams: 0, inference: 1 ]
type 975 reference  '0*   [ tparams: 0, inference: 1 ]
type 976 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 977 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 978 hole       '0   [ tparams: 0, inference: 1 ]
type 979 reference  '0*   [ tparams: 0, inference: 1 ]
type 980 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 981 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 982 reference  Buffer['0]*   [ tparams: 0, inference: 1 ]
type 983 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 984 hole       '0   [ tparams: 0, inference: 1 ]
type 985 reference  '0*   [ tparams: 0, inference: 1 ]
type 986 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 987 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 988 reference  Buffer['0]*   [ tparams: 0, inference: 1 ]
type 989 hole       '0   [ tparams: 0, inference: 1 ]
type 990 reference  '0*   [ tparams: 0, inference: 1 ]
type 991 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 992 struct     List['0]   [ tparams: 0, inference: 1 ]
type 993 function   fn(Buffer['0]) -> List['0]   [ tparams: 0, inference: 2 ]
type 994 struct     List[T]   [ tparams: 1, inference: 0 ]
type 995 function   fn(Buffer[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 996 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 997 hole       '0   [ tparams: 0, inference: 1 ]
type 998 reference  '0*   [ tparams: 0, inference: 1 ]
type 999 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1000 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1001 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1002 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 1003 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1004 hole       '0   [ tparams: 0, inference: 1 ]
type 1005 reference  '0*   [ tparams: 0, inference: 1 ]
type 1006 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1007 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1008 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1009 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1010 hole       '0   [ tparams: 0, inference: 1 ]
type 1011 reference  '0*   [ tparams: 0, inference: 1 ]
type 1012 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1013 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1014 function   fn(Buffer[u8]) -> Pointer   [ tparams: 0, inference: 0 ]
type 1015 hole       '0   [ tparams: 0, inference: 1 ]
type 1016 reference  '0*   [ tparams: 0, inference: 1 ]
type 1017 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1018 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1019 hole       '0   [ tparams: 0, inference: 1 ]
type 1020 reference  '0*   [ tparams: 0, inference: 1 ]
type 1021 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1022 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1023 function   fn(Buffer[u8]) -> u64   [ tparams: 0, inference: 0 ]
type 1024 hole       '0   [ tparams: 0, inference: 1 ]
type 1025 reference  '0*   [ tparams: 0, inference: 1 ]
type 1026 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1027 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1028 hole       '0   [ tparams: 0, inference: 1 ]
type 1029 reference  '0*   [ tparams: 0, inference: 1 ]
type 1030 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1031 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1032 hole       '0   [ tparams: 0, inference: 1 ]
type 1033 reference  '0*   [ tparams: 0, inference: 1 ]
type 1034 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1035 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1036 hole       '0   [ tparams: 0, inference: 1 ]
type 1037 reference  '0*   [ tparams: 0, inference: 1 ]
type 1038 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1039 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1040 function   fn(Buffer[char]) -> Pointer   [ tparams: 0, inference: 0 ]
type 1041 hole       '0   [ tparams: 0, inference: 1 ]
type 1042 reference  '0*   [ tparams: 0, inference: 1 ]
type 1043 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1044 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1045 hole       '0   [ tparams: 0, inference: 1 ]
type 1046 reference  '0*   [ tparams: 0, inference: 1 ]
type 1047 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1048 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1049 function   fn(Buffer[char]) -> u64   [ tparams: 0, inference: 0 ]
type 1050 hole       '0   [ tparams: 0, inference: 1 ]
type 1051 reference  '0*   [ tparams: 0, inference: 1 ]
type 1052 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1053 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1054 hole       '0   [ tparams: 0, inference: 1 ]
type 1055 reference  '0*   [ tparams: 0, inference: 1 ]
type 1056 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1057 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1058 hole       '0   [ tparams: 0, inference: 1 ]
type 1059 reference  '0*   [ tparams: 0, inference: 1 ]
type 1060 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1061 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1062 hole       '0   [ tparams: 0, inference: 1 ]
type 1063 reference  '0*   [ tparams: 0, inference: 1 ]
type 1064 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1065 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1066 function   fn(Buffer[i64]) -> Pointer   [ tparams: 0, inference: 0 ]
type 1067 hole       '0   [ tparams: 0, inference: 1 ]
type 1068 reference  '0*   [ tparams: 0, inference: 1 ]
type 1069 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1070 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1071 hole       '0   [ tparams: 0, inference: 1 ]
type 1072 reference  '0*   [ tparams: 0, inference: 1 ]
type 1073 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1074 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1075 function   fn(Buffer[i64]) -> u64   [ tparams: 0, inference: 0 ]
type 1076 hole       '0   [ tparams: 0, inference: 1 ]
type 1077 reference  '0*   [ tparams: 0, inference: 1 ]
type 1078 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1079 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1080 hole       '0   [ tparams: 0, inference: 1 ]
type 1081 reference  '0*   [ tparams: 0, inference: 1 ]
type 1082 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1083 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1084 hole       '0   [ tparams: 0, inference: 1 ]
type 1085 reference  '0*   [ tparams: 0, inference: 1 ]
type 1086 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1087 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1088 hole       '0   [ tparams: 0, inference: 1 ]
type 1089 reference  '0*   [ tparams: 0, inference: 1 ]
type 1090 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1091 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1092 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1093 hole       '0   [ tparams: 0, inference: 1 ]
type 1094 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1095 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1096 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1097 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1098 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1099 hole       '0   [ tparams: 0, inference: 1 ]
type 1100 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1101 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1102 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1103 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1104 function   fn(u64) -> Opt[u64]   [ tparams: 0, inference: 0 ]
type 1105 hole       '0   [ tparams: 0, inference: 1 ]
type 1106 reference  '0*   [ tparams: 0, inference: 1 ]
type 1107 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1108 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 1109 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 1110 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1111 hole       '0   [ tparams: 0, inference: 1 ]
type 1112 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1113 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1114 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1115 function   fn(Opt['0], Opt['0]) -> bool   [ tparams: 0, inference: 2 ]
type 1116 function   fn(Opt[T], Opt[T]) -> bool   [ tparams: 2, inference: 0 ]
type 1117 hole       '0   [ tparams: 0, inference: 1 ]
type 1118 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1119 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1120 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1121 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 1122 function   fn(u64) -> List[T]   [ tparams: 1, inference: 0 ]
type 1123 hole       '0   [ tparams: 0, inference: 1 ]
type 1124 reference  '0*   [ tparams: 0, inference: 1 ]
type 1125 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1126 function   fn(u64, '0) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1127 function   fn(u64, T) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1128 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1129 hole       '0   [ tparams: 0, inference: 1 ]
type 1130 reference  '0*   [ tparams: 0, inference: 1 ]
type 1131 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1132 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1133 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1134 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 1135 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1136 reference  Buffer[T]*   [ tparams: 1, inference: 0 ]
type 1137 function   fn(u64, T) -> List[T]   [ tparams: 2, inference: 0 ]
type 1138 hole       '0   [ tparams: 0, inference: 1 ]
type 1139 reference  '0*   [ tparams: 0, inference: 1 ]
type 1140 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1141 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1142 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1143 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1144 hole       '0   [ tparams: 0, inference: 1 ]
type 1145 reference  '0*   [ tparams: 0, inference: 1 ]
type 1146 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1147 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1148 function   fn(Buffer[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 1149 hole       '0   [ tparams: 0, inference: 1 ]
type 1150 reference  '0*   [ tparams: 0, inference: 1 ]
type 1151 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1152 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1153 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1154 hole       '0   [ tparams: 0, inference: 1 ]
type 1155 reference  '0*   [ tparams: 0, inference: 1 ]
type 1156 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1157 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1158 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1159 hole       '0   [ tparams: 0, inference: 1 ]
type 1160 reference  '0*   [ tparams: 0, inference: 1 ]
type 1161 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1162 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 1163 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1164 hole       '0   [ tparams: 0, inference: 1 ]
type 1165 reference  '0*   [ tparams: 0, inference: 1 ]
type 1166 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1167 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1168 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1169 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1170 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 1171 hole       '0   [ tparams: 0, inference: 1 ]
type 1172 reference  '0*   [ tparams: 0, inference: 1 ]
type 1173 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1174 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1175 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1176 function   fn(List['0]*, u64) -> unit   [ tparams: 0, inference: 1 ]
type 1177 function   fn(List[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1178 hole       '0   [ tparams: 0, inference: 1 ]
type 1179 reference  '0*   [ tparams: 0, inference: 1 ]
type 1180 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1181 function   fn(Buffer['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1182 function   fn(Buffer[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1183 hole       '0   [ tparams: 0, inference: 1 ]
type 1184 reference  '0*   [ tparams: 0, inference: 1 ]
type 1185 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1186 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1187 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1188 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1189 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 1190 hole       '0   [ tparams: 0, inference: 1 ]
type 1191 reference  '0*   [ tparams: 0, inference: 1 ]
type 1192 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1193 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1194 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1195 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 1196 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1197 hole       '0   [ tparams: 0, inference: 1 ]
type 1198 reference  '0*   [ tparams: 0, inference: 1 ]
type 1199 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1200 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1201 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1202 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1203 function   fn(List[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 1204 function   fn() -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1205 hole       '0   [ tparams: 0, inference: 1 ]
type 1206 reference  '0*   [ tparams: 0, inference: 1 ]
type 1207 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1208 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1209 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1210 hole       '0   [ tparams: 0, inference: 1 ]
type 1211 reference  '0*   [ tparams: 0, inference: 1 ]
type 1212 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1213 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1214 function   fn(List['0]) -> bool   [ tparams: 0, inference: 1 ]
type 1215 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1216 hole       '0   [ tparams: 0, inference: 1 ]
type 1217 reference  '0*   [ tparams: 0, inference: 1 ]
type 1218 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1219 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1220 function   fn(List['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1221 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1222 hole       '0   [ tparams: 0, inference: 1 ]
type 1223 reference  '0*   [ tparams: 0, inference: 1 ]
type 1224 variant    Opt['0*].None   [ tparams: 0, inference: 0 ]
type 1225 variant    Opt['0*].Some('0*)   [ tparams: 0, inference: 1 ]
type 1226 enum       Opt['0*]   [ tparams: 0, inference: 1 ]
type 1227 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1228 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1229 function   fn(List['0]) -> Opt['0*]   [ tparams: 0, inference: 2 ]
type 1230 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 1231 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 1232 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 1233 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 1234 hole       '0   [ tparams: 0, inference: 1 ]
type 1235 reference  '0*   [ tparams: 0, inference: 1 ]
type 1236 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1237 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1238 function   fn(List['0]) -> bool   [ tparams: 0, inference: 1 ]
type 1239 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1240 hole       '0   [ tparams: 0, inference: 1 ]
type 1241 reference  '0*   [ tparams: 0, inference: 1 ]
type 1242 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1243 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1244 function   fn(List['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1245 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1246 hole       '0   [ tparams: 0, inference: 1 ]
type 1247 reference  '0*   [ tparams: 0, inference: 1 ]
type 1248 variant    Opt['0*].None   [ tparams: 0, inference: 0 ]
type 1249 variant    Opt['0*].Some('0*)   [ tparams: 0, inference: 1 ]
type 1250 enum       Opt['0*]   [ tparams: 0, inference: 1 ]
type 1251 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1252 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1253 function   fn(List['0]) -> Opt['0*]   [ tparams: 0, inference: 2 ]
type 1254 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 1255 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 1256 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 1257 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 1258 hole       '0   [ tparams: 0, inference: 1 ]
type 1259 reference  '0*   [ tparams: 0, inference: 1 ]
type 1260 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1261 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1262 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1263 function   fn(List['0]*, u64, u64) -> unit   [ tparams: 0, inference: 1 ]
type 1264 function   fn(List[T]*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1265 hole       '0   [ tparams: 0, inference: 1 ]
type 1266 reference  '0*   [ tparams: 0, inference: 1 ]
type 1267 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1268 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1269 function   fn(List['0]) -> List['0]   [ tparams: 0, inference: 2 ]
type 1270 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 1271 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1272 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1273 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1274 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1275 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1276 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1277 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1278 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1279 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1280 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1281 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1282 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1283 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1284 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1285 hole       '0   [ tparams: 0, inference: 1 ]
type 1286 reference  '0*   [ tparams: 0, inference: 1 ]
type 1287 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1288 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1289 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1290 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1291 function   fn(List[T]*, T) -> unit   [ tparams: 2, inference: 0 ]
type 1292 hole       '0   [ tparams: 0, inference: 1 ]
type 1293 reference  '0*   [ tparams: 0, inference: 1 ]
type 1294 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1295 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1296 function   fn(List['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1297 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1298 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1299 hole       '0   [ tparams: 0, inference: 1 ]
type 1300 reference  '0*   [ tparams: 0, inference: 1 ]
type 1301 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1302 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1303 function   fn(List['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1304 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1305 hole       '0   [ tparams: 0, inference: 1 ]
type 1306 reference  '0*   [ tparams: 0, inference: 1 ]
type 1307 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1308 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1309 function   fn(List['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1310 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1311 function   fn(List[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1312 function   fn(u64) -> List[T]   [ tparams: 1, inference: 0 ]
type 1313 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1314 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1315 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1316 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1317 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1318 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1319 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1320 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1321 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1322 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1323 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1324 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1325 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1326 hole       '0   [ tparams: 0, inference: 1 ]
type 1327 reference  '0*   [ tparams: 0, inference: 1 ]
type 1328 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1329 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1330 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1331 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1332 function   fn(List[T]*, T) -> unit   [ tparams: 2, inference: 0 ]
type 1333 hole       '0   [ tparams: 0, inference: 1 ]
type 1334 reference  '0*   [ tparams: 0, inference: 1 ]
type 1335 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1336 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1337 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1338 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1339 hole       '0   [ tparams: 0, inference: 1 ]
type 1340 reference  '0*   [ tparams: 0, inference: 1 ]
type 1341 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1342 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1343 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1344 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1345 hole       '0   [ tparams: 0, inference: 1 ]
type 1346 reference  '0*   [ tparams: 0, inference: 1 ]
type 1347 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1348 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1349 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1350 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 1351 hole       '0   [ tparams: 0, inference: 1 ]
type 1352 reference  '0*   [ tparams: 0, inference: 1 ]
type 1353 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1354 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1355 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1356 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 1357 hole       '0   [ tparams: 0, inference: 1 ]
type 1358 reference  '0*   [ tparams: 0, inference: 1 ]
type 1359 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1360 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1361 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1362 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1363 function   fn(List[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 1364 hole       '0   [ tparams: 0, inference: 1 ]
type 1365 reference  '0*   [ tparams: 0, inference: 1 ]
type 1366 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1367 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1368 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1369 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1370 hole       '0   [ tparams: 0, inference: 1 ]
type 1371 reference  '0*   [ tparams: 0, inference: 1 ]
type 1372 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1373 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1374 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1375 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1376 hole       '0   [ tparams: 0, inference: 1 ]
type 1377 reference  '0*   [ tparams: 0, inference: 1 ]
type 1378 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1379 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1380 function   fn(List['0]) -> List['0]   [ tparams: 0, inference: 2 ]
type 1381 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 1382 hole       '0   [ tparams: 0, inference: 1 ]
type 1383 reference  '0*   [ tparams: 0, inference: 1 ]
type 1384 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1385 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1386 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1387 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 1388 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1389 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1390 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1391 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1392 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1393 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1394 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1395 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1396 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1397 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1398 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1399 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1400 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1401 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1402 hole       '0   [ tparams: 0, inference: 1 ]
type 1403 reference  '0*   [ tparams: 0, inference: 1 ]
type 1404 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1405 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1406 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1407 function   fn(List[u8]) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 1408 hole       '0   [ tparams: 0, inference: 1 ]
type 1409 reference  '0*   [ tparams: 0, inference: 1 ]
type 1410 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1411 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1412 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1413 hole       '0   [ tparams: 0, inference: 1 ]
type 1414 reference  '0*   [ tparams: 0, inference: 1 ]
type 1415 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1416 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1417 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1418 hole       '0   [ tparams: 0, inference: 1 ]
type 1419 reference  '0*   [ tparams: 0, inference: 1 ]
type 1420 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1421 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1422 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1423 function   fn(List[i64]) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1424 hole       '0   [ tparams: 0, inference: 1 ]
type 1425 reference  '0*   [ tparams: 0, inference: 1 ]
type 1426 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1427 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1428 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1429 hole       '0   [ tparams: 0, inference: 1 ]
type 1430 reference  '0*   [ tparams: 0, inference: 1 ]
type 1431 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1432 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1433 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1434 hole       '0   [ tparams: 0, inference: 1 ]
type 1435 reference  '0*   [ tparams: 0, inference: 1 ]
type 1436 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1437 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1438 function   fn(List['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1439 function   fn(List[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1440 hole       '0   [ tparams: 0, inference: 1 ]
type 1441 reference  '0*   [ tparams: 0, inference: 1 ]
type 1442 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1443 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1444 function   fn(List['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1445 hole       '0   [ tparams: 0, inference: 1 ]
type 1446 reference  '0*   [ tparams: 0, inference: 1 ]
type 1447 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1448 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1449 function   fn(List['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1450 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1451 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1452 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1453 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1454 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1455 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1456 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1457 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1458 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1459 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1460 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1461 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1462 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1463 hole       '0   [ tparams: 0, inference: 1 ]
type 1464 reference  '0*   [ tparams: 0, inference: 1 ]
type 1465 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1466 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1467 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1468 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1469 hole       '0   [ tparams: 0, inference: 1 ]
type 1470 reference  '0*   [ tparams: 0, inference: 1 ]
type 1471 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1472 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1473 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1474 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1475 hole       '0   [ tparams: 0, inference: 1 ]
type 1476 reference  '0*   [ tparams: 0, inference: 1 ]
type 1477 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1478 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1479 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1480 hole       '0   [ tparams: 0, inference: 1 ]
type 1481 reference  '0*   [ tparams: 0, inference: 1 ]
type 1482 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1483 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1484 function   fn(Buffer[char], u64) -> char   [ tparams: 0, inference: 0 ]
type 1485 function   fn(u64, Pointer) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 1486 hole       '0   [ tparams: 0, inference: 1 ]
type 1487 reference  '0*   [ tparams: 0, inference: 1 ]
type 1488 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1489 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1490 hole       '0   [ tparams: 0, inference: 1 ]
type 1491 reference  '0*   [ tparams: 0, inference: 1 ]
type 1492 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1493 function   fn(Buffer['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1494 function   fn(Buffer[char]) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1495 hole       '0   [ tparams: 0, inference: 1 ]
type 1496 reference  '0*   [ tparams: 0, inference: 1 ]
type 1497 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1498 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1499 function   fn(Buffer['0]) -> List['0]   [ tparams: 0, inference: 2 ]
type 1500 function   fn(Buffer[char]) -> List[char]   [ tparams: 0, inference: 0 ]
type 1501 hole       '0   [ tparams: 0, inference: 1 ]
type 1502 reference  '0*   [ tparams: 0, inference: 1 ]
type 1503 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1504 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1505 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1506 hole       '0   [ tparams: 0, inference: 1 ]
type 1507 reference  '0*   [ tparams: 0, inference: 1 ]
type 1508 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1509 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1510 hole       '0   [ tparams: 0, inference: 1 ]
type 1511 reference  '0*   [ tparams: 0, inference: 1 ]
type 1512 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1513 function   fn(Buffer['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1514 function   fn(Buffer[u8]) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 1515 hole       '0   [ tparams: 0, inference: 1 ]
type 1516 reference  '0*   [ tparams: 0, inference: 1 ]
type 1517 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1518 function   fn(Buffer['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1519 hole       '0   [ tparams: 0, inference: 1 ]
type 1520 reference  '0*   [ tparams: 0, inference: 1 ]
type 1521 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1522 function   fn(Buffer['0], Buffer['0]) -> Buffer['0]   [ tparams: 0, inference: 3 ]
type 1523 function   fn(Buffer[char], Buffer[char]) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1524 hole       '0   [ tparams: 0, inference: 1 ]
type 1525 reference  '0*   [ tparams: 0, inference: 1 ]
type 1526 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1527 function   fn(Buffer['0], u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1528 function   fn(Buffer[char], u64) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1529 hole       '0   [ tparams: 0, inference: 1 ]
type 1530 reference  '0*   [ tparams: 0, inference: 1 ]
type 1531 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1532 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1533 function   fn(Buffer[char], u64, char) -> unit   [ tparams: 0, inference: 0 ]
type 1534 struct     Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 1535 struct     List[List[char]]   [ tparams: 0, inference: 0 ]
type 1536 function   fn() -> List[List[char]]   [ tparams: 0, inference: 0 ]
type 1537 reference  List[List[char]]*   [ tparams: 0, inference: 0 ]
type 1538 function   fn() -> List[char]   [ tparams: 0, inference: 0 ]
type 1539 function   fn(Opt[char]) -> bool   [ tparams: 0, inference: 0 ]
type 1540 function   fn(Opt[char]) -> char   [ tparams: 0, inference: 0 ]
type 1541 function   fn(char) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 1542 hole       '0   [ tparams: 0, inference: 1 ]
type 1543 reference  '0*   [ tparams: 0, inference: 1 ]
type 1544 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1545 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1546 function   fn(List['0]) -> bool   [ tparams: 0, inference: 1 ]
type 1547 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1548 function   fn(List[char]) -> bool   [ tparams: 0, inference: 0 ]
type 1549 hole       '0   [ tparams: 0, inference: 1 ]
type 1550 reference  '0*   [ tparams: 0, inference: 1 ]
type 1551 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1552 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1553 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1554 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1555 function   fn(List[List[char]]*, List[char]) -> unit   [ tparams: 0, inference: 0 ]
type 1556 hole       '0   [ tparams: 0, inference: 1 ]
type 1557 reference  '0*   [ tparams: 0, inference: 1 ]
type 1558 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1559 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1560 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1561 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1562 hole       '0   [ tparams: 0, inference: 1 ]
type 1563 reference  '0*   [ tparams: 0, inference: 1 ]
type 1564 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1565 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1566 function   fn(List['0]) -> bool   [ tparams: 0, inference: 1 ]
type 1567 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1568 hole       '0   [ tparams: 0, inference: 1 ]
type 1569 reference  '0*   [ tparams: 0, inference: 1 ]
type 1570 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1571 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1572 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1573 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1574 struct     BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 1575 function   fn(List[List[char]]) -> BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 1576 reference  BufferIterator[List[char]]*   [ tparams: 0, inference: 0 ]
type 1577 variant    Opt[List[char]].None   [ tparams: 0, inference: 0 ]
type 1578 variant    Opt[List[char]].Some(List[char])   [ tparams: 0, inference: 0 ]
type 1579 enum       Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1580 function   fn(BufferIterator[List[char]]*) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1581 function   fn(BufferIterator[List[char]]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 1582 function   fn(BufferIterator[List[char]]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1583 function   fn(BufferIterator[List[char]]*, u64) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1584 function   fn(Opt[List[char]]) -> bool   [ tparams: 0, inference: 0 ]
type 1585 function   fn(Opt[List[char]]) -> List[char]   [ tparams: 0, inference: 0 ]
type 1586 function   fn(List[char]) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1587 hole       '0   [ tparams: 0, inference: 1 ]
type 1588 reference  '0*   [ tparams: 0, inference: 1 ]
type 1589 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1590 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1591 function   fn(Buffer[char], u64, u64) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1592 hole       '0   [ tparams: 0, inference: 1 ]
type 1593 reference  '0*   [ tparams: 0, inference: 1 ]
type 1594 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1595 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 1596 function   fn(Pointer, u64) -> char*   [ tparams: 0, inference: 0 ]
type 1597 hole       '0   [ tparams: 0, inference: 1 ]
type 1598 reference  '0*   [ tparams: 0, inference: 1 ]
type 1599 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1600 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1601 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1602 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1603 hole       '0   [ tparams: 0, inference: 1 ]
type 1604 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1605 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1606 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1607 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1608 function   fn(i64) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1609 hole       '0   [ tparams: 0, inference: 1 ]
type 1610 reference  '0*   [ tparams: 0, inference: 1 ]
type 1611 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1612 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 1613 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 1614 function   fn(Buffer[char]) -> BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 1615 reference  Self*   [ tparams: 1, inference: 0 ]
type 1616 hole       '0   [ tparams: 0, inference: 1 ]
type 1617 reference  '0*   [ tparams: 0, inference: 1 ]
type 1618 function   fn('0) -> '0*   [ tparams: 0, inference: 2 ]
type 1619 function   fn(u64) -> List[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1620 function   fn(List[enum Char(char) | String(string)]) -> List[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 1621 hole       '0   [ tparams: 0, inference: 1 ]
type 1622 reference  '0*   [ tparams: 0, inference: 1 ]
type 1623 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1624 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1625 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1626 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1627 function   fn(List[enum Char(char) | String(string)]*, enum Char(char) | String(string)) -> unit   [ tparams: 0, inference: 0 ]
type 1628 hole       '0   [ tparams: 0, inference: 1 ]
type 1629 reference  '0*   [ tparams: 0, inference: 1 ]
type 1630 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1631 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1632 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1633 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1634 hole       '0   [ tparams: 0, inference: 1 ]
type 1635 reference  '0*   [ tparams: 0, inference: 1 ]
type 1636 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1637 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1638 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1639 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1640 struct     BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1641 function   fn(List[enum Char(char) | String(string)]) -> BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1642 reference  BufferIterator[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 1643 variant    Opt[enum Char(char) | String(string)].None   [ tparams: 0, inference: 0 ]
type 1644 variant    Opt[enum Char(char) | String(string)].Some(enum Char(char) | String(string))   [ tparams: 0, inference: 0 ]
type 1645 enum       Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1646 function   fn(BufferIterator[enum Char(char) | String(string)]*) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1647 function   fn(BufferIterator[enum Char(char) | String(string)]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 1648 function   fn(BufferIterator[enum Char(char) | String(string)]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1649 function   fn(BufferIterator[enum Char(char) | String(string)]*, u64) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1650 function   fn(Opt[enum Char(char) | String(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 1651 function   fn(Opt[enum Char(char) | String(string)]) -> enum Char(char) | String(string)   [ tparams: 0, inference: 0 ]
type 1652 function   fn(enum Char(char) | String(string)) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1653 hole       '0   [ tparams: 0, inference: 1 ]
type 1654 reference  '0*   [ tparams: 0, inference: 1 ]
type 1655 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1656 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1657 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1658 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1659 hole       '0   [ tparams: 0, inference: 1 ]
type 1660 reference  '0*   [ tparams: 0, inference: 1 ]
type 1661 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1662 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1663 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1664 function   fn(List['0]*, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1665 function   fn(u64) -> List[Arena]   [ tparams: 0, inference: 0 ]
type 1666 reference  List[Arena]*   [ tparams: 0, inference: 0 ]
type 1667 function   fn(List[Arena]*, Arena) -> unit   [ tparams: 0, inference: 0 ]
type 1668 function   fn(u64) -> List[ObjectPool]   [ tparams: 0, inference: 0 ]
type 1669 reference  List[ObjectPool]*   [ tparams: 0, inference: 0 ]
type 1670 hole       '0   [ tparams: 0, inference: 1 ]
type 1671 reference  '0*   [ tparams: 0, inference: 1 ]
type 1672 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1673 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1674 function   fn(List['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1675 function   fn(List[Arena], u64) -> Arena*   [ tparams: 0, inference: 0 ]
type 1676 variant    Opt[PointMaybeY].None   [ tparams: 0, inference: 0 ]
type 1677 variant    Opt[PointMaybeY].Some(PointMaybeY)   [ tparams: 0, inference: 0 ]
type 1678 enum       Opt[PointMaybeY]   [ tparams: 0, inference: 0 ]
type 1679 function   fn(Opt[PointMaybeY]) -> bool   [ tparams: 0, inference: 0 ]
type 1680 function   fn(Opt[PointMaybeY]) -> PointMaybeY   [ tparams: 0, inference: 0 ]
type 1681 function   fn(PointMaybeY) -> Opt[PointMaybeY]   [ tparams: 0, inference: 0 ]
type 1682 function   fn(Opt[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 1683 function   fn(Opt[i64]) -> i64   [ tparams: 0, inference: 0 ]
type 1684 function   fn(i64) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1685 variant    Opt[bool].None   [ tparams: 0, inference: 0 ]
type 1686 variant    Opt[bool].Some(bool)   [ tparams: 0, inference: 0 ]
type 1687 enum       Opt[bool]   [ tparams: 0, inference: 0 ]
type 1688 function   fn(Opt[bool]) -> bool   [ tparams: 0, inference: 0 ]
type 1689 hole       '0   [ tparams: 0, inference: 1 ]
type 1690 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1691 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1692 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1693 function   fn(Opt['0]) -> bool   [ tparams: 0, inference: 1 ]
type 1694 struct     {name: string, age: i64}   [ tparams: 0, inference: 0 ]
type 1695 variant    Opt[{name: string, age: i64}].None   [ tparams: 0, inference: 0 ]
type 1696 variant    Opt[{name: string, age: i64}].Some({name: string, age: i64})   [ tparams: 0, inference: 0 ]
type 1697 enum       Opt[{name: string, age: i64}]   [ tparams: 0, inference: 0 ]
type 1698 function   fn(Opt[{name: string, age: i64}]) -> bool   [ tparams: 0, inference: 0 ]
type 1699 function   fn(Opt[{name: string, age: i64}]) -> {name: string, age: i64}   [ tparams: 0, inference: 0 ]
type 1700 variant    Opt[string].None   [ tparams: 0, inference: 0 ]
type 1701 variant    Opt[string].Some(string)   [ tparams: 0, inference: 0 ]
type 1702 enum       Opt[string]   [ tparams: 0, inference: 0 ]
type 1703 function   fn(Opt[string]) -> bool   [ tparams: 0, inference: 0 ]
type 1704 function   fn(Opt[string]) -> string   [ tparams: 0, inference: 0 ]
type 1705 function   fn(string) -> Opt[string]   [ tparams: 0, inference: 0 ]
type 1706 variant    Opt[WeirdPoint].None   [ tparams: 0, inference: 0 ]
type 1707 variant    Opt[WeirdPoint].Some(WeirdPoint)   [ tparams: 0, inference: 0 ]
type 1708 enum       Opt[WeirdPoint]   [ tparams: 0, inference: 0 ]
type 1709 reference  Opt[WeirdPoint]*   [ tparams: 0, inference: 0 ]
type 1710 struct     Buffer[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 1711 struct     List[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 1712 function   fn(u64) -> List[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 1713 reference  List[Opt[WeirdPoint]]*   [ tparams: 0, inference: 0 ]
type 1714 function   fn(List[Opt[WeirdPoint]]*, Opt[WeirdPoint]) -> unit   [ tparams: 0, inference: 0 ]
type 1715 hole       '0   [ tparams: 0, inference: 1 ]
type 1716 reference  '0*   [ tparams: 0, inference: 1 ]
type 1717 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1718 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1719 function   fn(List['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1720 function   fn(List[Opt[WeirdPoint]], u64) -> Opt[WeirdPoint]   [ tparams: 0, inference: 0 ]
type 1721 hole       '0   [ tparams: 0, inference: 1 ]
type 1722 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1723 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1724 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1725 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1726 hole       '0   [ tparams: 0, inference: 1 ]
type 1727 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1728 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1729 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1730 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1731 hole       '0   [ tparams: 0, inference: 1 ]
type 1732 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1733 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1734 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1735 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1736 function   fn(Opt[i64], Opt[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 1737 hole       '0   [ tparams: 0, inference: 1 ]
type 1738 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1739 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1740 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1741 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1742 hole       '0   [ tparams: 0, inference: 1 ]
type 1743 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1744 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1745 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1746 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1747 hole       '0   [ tparams: 0, inference: 1 ]
type 1748 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1749 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1750 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1751 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1752 hole       '0   [ tparams: 0, inference: 1 ]
type 1753 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1754 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1755 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1756 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1757 hole       '0   [ tparams: 0, inference: 1 ]
type 1758 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1759 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1760 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1761 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1762 hole       '0   [ tparams: 0, inference: 1 ]
type 1763 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1764 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1765 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1766 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1767 hole       '0   [ tparams: 0, inference: 1 ]
type 1768 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1769 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1770 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1771 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1772 function   fn(bool) -> Opt[bool]   [ tparams: 0, inference: 0 ]
type 1773 hole       '0   [ tparams: 0, inference: 1 ]
type 1774 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1775 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1776 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1777 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1778 function   fn(bool) -> Opt[bool]   [ tparams: 0, inference: 0 ]
type 1779 hole       '0   [ tparams: 0, inference: 1 ]
type 1780 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1781 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1782 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1783 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1784 hole       '0   [ tparams: 0, inference: 1 ]
type 1785 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1786 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1787 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1788 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1789 hole       '0   [ tparams: 0, inference: 1 ]
type 1790 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1791 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1792 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1793 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1794 hole       '0   [ tparams: 0, inference: 1 ]
type 1795 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1796 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1797 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1798 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1799 hole       '0   [ tparams: 0, inference: 1 ]
type 1800 reference  '0*   [ tparams: 0, inference: 1 ]
type 1801 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1802 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1803 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1804 hole       '0   [ tparams: 0, inference: 1 ]
type 1805 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1806 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1807 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1808 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1809 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1810 hole       '0   [ tparams: 0, inference: 1 ]
type 1811 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1812 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1813 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1814 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1815 hole       '0   [ tparams: 0, inference: 1 ]
type 1816 reference  '0*   [ tparams: 0, inference: 1 ]
type 1817 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1818 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1819 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1820 hole       '0   [ tparams: 0, inference: 1 ]
type 1821 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1822 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1823 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1824 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1825 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1826 hole       '0   [ tparams: 0, inference: 1 ]
type 1827 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1828 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1829 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1830 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1831 hole       '0   [ tparams: 0, inference: 1 ]
type 1832 reference  '0*   [ tparams: 0, inference: 1 ]
type 1833 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1834 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1835 hole       '0   [ tparams: 0, inference: 1 ]
type 1836 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1837 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1838 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1839 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1840 function   fn(char) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 1841 hole       '0   [ tparams: 0, inference: 1 ]
type 1842 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1843 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1844 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1845 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1846 function   fn(u64) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 1847 hole       '0   [ tparams: 0, inference: 1 ]
type 1848 reference  '0*   [ tparams: 0, inference: 1 ]
type 1849 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1850 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 1851 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 1852 function   fn(Buffer[Pointer]) -> BufferIterator[Pointer]   [ tparams: 0, inference: 0 ]
type 1853 hole       '0   [ tparams: 0, inference: 1 ]
type 1854 reference  '0*   [ tparams: 0, inference: 1 ]
type 1855 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1856 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1857 hole       '0   [ tparams: 0, inference: 1 ]
type 1858 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1859 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1860 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1861 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1862 function   fn(Pointer) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 1863 hole       '0   [ tparams: 0, inference: 1 ]
type 1864 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1865 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1866 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1867 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1868 hole       '0   [ tparams: 0, inference: 1 ]
type 1869 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1870 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1871 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1872 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 1873 hole       '0   [ tparams: 0, inference: 1 ]
type 1874 reference  '0*   [ tparams: 0, inference: 1 ]
type 1875 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1876 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1877 function   fn(Buffer[Pointer], u64) -> Pointer*   [ tparams: 0, inference: 0 ]
type 1878 hole       '0   [ tparams: 0, inference: 1 ]
type 1879 reference  '0*   [ tparams: 0, inference: 1 ]
type 1880 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1881 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1882 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1883 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1884 function   fn(List[string]) -> u64   [ tparams: 0, inference: 0 ]
type 1885 hole       '0   [ tparams: 0, inference: 1 ]
type 1886 reference  '0*   [ tparams: 0, inference: 1 ]
type 1887 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1888 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1889 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1890 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 1891 function   fn(List[string]*) -> unit   [ tparams: 0, inference: 0 ]
type 1892 hole       '0   [ tparams: 0, inference: 1 ]
type 1893 reference  '0*   [ tparams: 0, inference: 1 ]
type 1894 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1895 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1896 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1897 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1898 function   fn(List[string], u64, string) -> unit   [ tparams: 0, inference: 0 ]
type 1899 hole       '0   [ tparams: 0, inference: 1 ]
type 1900 reference  '0*   [ tparams: 0, inference: 1 ]
type 1901 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1902 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1903 function   fn(Buffer[string], u64, u64) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 1904 hole       '0   [ tparams: 0, inference: 1 ]
type 1905 reference  '0*   [ tparams: 0, inference: 1 ]
type 1906 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1907 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1908 function   fn(Buffer[u8], u64) -> u8*   [ tparams: 0, inference: 0 ]
type 1909 hole       '0   [ tparams: 0, inference: 1 ]
type 1910 reference  '0*   [ tparams: 0, inference: 1 ]
type 1911 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1912 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 1913 function   fn(u64) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1914 hole       '0   [ tparams: 0, inference: 1 ]
type 1915 reference  '0*   [ tparams: 0, inference: 1 ]
type 1916 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1917 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1918 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 1919 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1920 function   fn(List[char]) -> u64   [ tparams: 0, inference: 0 ]
type 1921 hole       '0   [ tparams: 0, inference: 1 ]
type 1922 reference  '0*   [ tparams: 0, inference: 1 ]
type 1923 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1924 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1925 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1926 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 1927 hole       '0   [ tparams: 0, inference: 1 ]
type 1928 reference  '0*   [ tparams: 0, inference: 1 ]
type 1929 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1930 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1931 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 1932 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1933 function   fn(List[char], u64, char) -> unit   [ tparams: 0, inference: 0 ]
type 1934 hole       '0   [ tparams: 0, inference: 1 ]
type 1935 reference  '0*   [ tparams: 0, inference: 1 ]
type 1936 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1937 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1938 function   fn(List['0]) -> List['0]   [ tparams: 0, inference: 2 ]
type 1939 hole       '0   [ tparams: 0, inference: 1 ]
type 1940 reference  '0*   [ tparams: 0, inference: 1 ]
type 1941 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1942 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1943 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1944 function   fn(List['0]*, u64, u64) -> unit   [ tparams: 0, inference: 1 ]
type 1945 function   fn(List[char]*, u64, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1946 hole       '0   [ tparams: 0, inference: 1 ]
type 1947 reference  '0*   [ tparams: 0, inference: 1 ]
type 1948 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1949 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1950 hole       '0   [ tparams: 0, inference: 1 ]
type 1951 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1952 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1953 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1954 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 1955 hole       '0   [ tparams: 0, inference: 1 ]
type 1956 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1957 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1958 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1959 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 1960 variant    Opt[Result[S, F].Err(F)].None   [ tparams: 0, inference: 0 ]
type 1961 variant    Opt[Result[S, F].Err(F)].Some(Result[S, F].Err(F))   [ tparams: 1, inference: 0 ]
type 1962 enum       Opt[Result[S, F].Err(F)]   [ tparams: 1, inference: 0 ]
type 1963 function   fn(Opt[Result[S, F].Err(F)]) -> bool   [ tparams: 1, inference: 0 ]
type 1964 function   fn(Opt[Result[S, F].Err(F)]) -> Result[S, F].Err(F)   [ tparams: 2, inference: 0 ]
type 1965 function   fn(Result[S, F].Err(F)) -> Opt[Result[S, F].Err(F)]   [ tparams: 2, inference: 0 ]
type 1966 variant    Opt[Result[S, F].Ok(S)].None   [ tparams: 0, inference: 0 ]
type 1967 variant    Opt[Result[S, F].Ok(S)].Some(Result[S, F].Ok(S))   [ tparams: 1, inference: 0 ]
type 1968 enum       Opt[Result[S, F].Ok(S)]   [ tparams: 1, inference: 0 ]
type 1969 function   fn(Opt[Result[S, F].Ok(S)]) -> bool   [ tparams: 1, inference: 0 ]
type 1970 function   fn(Opt[Result[S, F].Ok(S)]) -> Result[S, F].Ok(S)   [ tparams: 2, inference: 0 ]
type 1971 function   fn(Result[S, F].Ok(S)) -> Opt[Result[S, F].Ok(S)]   [ tparams: 2, inference: 0 ]
type 1972 hole       '0   [ tparams: 0, inference: 1 ]
type 1973 reference  '0*   [ tparams: 0, inference: 1 ]
type 1974 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1975 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1976 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1977 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1978 hole       '0   [ tparams: 0, inference: 1 ]
type 1979 reference  '0*   [ tparams: 0, inference: 1 ]
type 1980 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1981 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1982 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1983 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1984 hole       '0   [ tparams: 0, inference: 1 ]
type 1985 reference  '0*   [ tparams: 0, inference: 1 ]
type 1986 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1987 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1988 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 1989 hole       '0   [ tparams: 0, inference: 1 ]
type 1990 reference  '0*   [ tparams: 0, inference: 1 ]
type 1991 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 1992 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 1993 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1994 hole       '0   [ tparams: 0, inference: 1 ]
type 1995 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1996 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1997 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1998 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1999 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 2000 hole       '0   [ tparams: 0, inference: 1 ]
type 2001 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2002 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2003 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2004 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2005 hole       '0   [ tparams: 0, inference: 1 ]
type 2006 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2007 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2008 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2009 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2010 hole       '0   [ tparams: 0, inference: 1 ]
type 2011 reference  '0*   [ tparams: 0, inference: 1 ]
type 2012 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2013 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2014 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2015 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 2016 hole       '0   [ tparams: 0, inference: 1 ]
type 2017 reference  '0*   [ tparams: 0, inference: 1 ]
type 2018 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2019 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2020 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2021 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2022 hole       '0   [ tparams: 0, inference: 1 ]
type 2023 reference  '0*   [ tparams: 0, inference: 1 ]
type 2024 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2025 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2026 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2027 hole       '0   [ tparams: 0, inference: 1 ]
type 2028 reference  '0*   [ tparams: 0, inference: 1 ]
type 2029 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2030 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 2031 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 2032 hole       '0   [ tparams: 0, inference: 1 ]
type 2033 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2034 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2035 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2036 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2037 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 2038 hole       '0   [ tparams: 0, inference: 1 ]
type 2039 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2040 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2041 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2042 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2043 hole       '0   [ tparams: 0, inference: 1 ]
type 2044 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2045 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2046 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2047 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2048 hole       '0   [ tparams: 0, inference: 1 ]
type 2049 reference  '0*   [ tparams: 0, inference: 1 ]
type 2050 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2051 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2052 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2053 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 2054 hole       '0   [ tparams: 0, inference: 1 ]
type 2055 reference  '0*   [ tparams: 0, inference: 1 ]
type 2056 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2057 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2058 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2059 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2060 hole       '0   [ tparams: 0, inference: 1 ]
type 2061 reference  '0*   [ tparams: 0, inference: 1 ]
type 2062 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2063 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2064 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2065 hole       '0   [ tparams: 0, inference: 1 ]
type 2066 reference  '0*   [ tparams: 0, inference: 1 ]
type 2067 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2068 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 2069 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 2070 hole       '0   [ tparams: 0, inference: 1 ]
type 2071 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2072 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2073 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2074 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2075 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 2076 hole       '0   [ tparams: 0, inference: 1 ]
type 2077 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2078 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2079 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2080 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2081 hole       '0   [ tparams: 0, inference: 1 ]
type 2082 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2083 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2084 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2085 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2086 hole       '0   [ tparams: 0, inference: 1 ]
type 2087 reference  '0*   [ tparams: 0, inference: 1 ]
type 2088 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2089 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2090 function   fn(Buffer[u8], u64, u64) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 2091 hole       '0   [ tparams: 0, inference: 1 ]
type 2092 reference  '0*   [ tparams: 0, inference: 1 ]
type 2093 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2094 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2095 function   fn(Buffer[i64], u64, u64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 2096 hole       '0   [ tparams: 0, inference: 1 ]
type 2097 reference  '0*   [ tparams: 0, inference: 1 ]
type 2098 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2099 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2100 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2101 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 2102 hole       '0   [ tparams: 0, inference: 1 ]
type 2103 reference  '0*   [ tparams: 0, inference: 1 ]
type 2104 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2105 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2106 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2107 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2108 hole       '0   [ tparams: 0, inference: 1 ]
type 2109 reference  '0*   [ tparams: 0, inference: 1 ]
type 2110 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2111 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2112 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2113 hole       '0   [ tparams: 0, inference: 1 ]
type 2114 reference  '0*   [ tparams: 0, inference: 1 ]
type 2115 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2116 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 2117 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 2118 hole       '0   [ tparams: 0, inference: 1 ]
type 2119 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2120 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2121 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2122 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2123 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 2124 hole       '0   [ tparams: 0, inference: 1 ]
type 2125 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2126 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2127 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2128 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2129 hole       '0   [ tparams: 0, inference: 1 ]
type 2130 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2131 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2132 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2133 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2134 hole       '0   [ tparams: 0, inference: 1 ]
type 2135 reference  '0*   [ tparams: 0, inference: 1 ]
type 2136 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2137 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 2138 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 2139 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2140 hole       '0   [ tparams: 0, inference: 1 ]
type 2141 reference  '0*   [ tparams: 0, inference: 1 ]
type 2142 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2143 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2144 function   fn(Buffer[char], u64) -> char*   [ tparams: 0, inference: 0 ]
type 2145 hole       '0   [ tparams: 0, inference: 1 ]
type 2146 reference  '0*   [ tparams: 0, inference: 1 ]
type 2147 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2148 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2149 hole       '0   [ tparams: 0, inference: 1 ]
type 2150 reference  '0*   [ tparams: 0, inference: 1 ]
type 2151 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2152 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2153 hole       '0   [ tparams: 0, inference: 1 ]
type 2154 reference  '0*   [ tparams: 0, inference: 1 ]
type 2155 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2156 function   fn(Buffer['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2157 hole       '0   [ tparams: 0, inference: 1 ]
type 2158 reference  '0*   [ tparams: 0, inference: 1 ]
type 2159 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2160 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2161 hole       '0   [ tparams: 0, inference: 1 ]
type 2162 reference  '0*   [ tparams: 0, inference: 1 ]
type 2163 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2164 function   fn(Buffer['0], Buffer['0], u64) -> unit   [ tparams: 0, inference: 2 ]
type 2165 hole       '1   [ tparams: 0, inference: 1 ]
type 2166 reference  '1*   [ tparams: 0, inference: 1 ]
type 2167 struct     Buffer['1]   [ tparams: 0, inference: 1 ]
type 2168 function   fn(Buffer['1], u64, u64) -> Buffer['1]   [ tparams: 0, inference: 2 ]
type 2169 function   fn(Buffer[char], Buffer[char], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2170 hole       '0   [ tparams: 0, inference: 1 ]
type 2171 reference  '0*   [ tparams: 0, inference: 1 ]
type 2172 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2173 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2174 hole       '0   [ tparams: 0, inference: 1 ]
type 2175 reference  '0*   [ tparams: 0, inference: 1 ]
type 2176 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2177 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2178 function   fn(u64) -> List[List[char]]   [ tparams: 0, inference: 0 ]
type 2179 hole       '0   [ tparams: 0, inference: 1 ]
type 2180 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2181 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2182 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2183 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2184 hole       '0   [ tparams: 0, inference: 1 ]
type 2185 reference  '0*   [ tparams: 0, inference: 1 ]
type 2186 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2187 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2188 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2189 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2190 function   fn(List[List[char]]) -> u64   [ tparams: 0, inference: 0 ]
type 2191 hole       '0   [ tparams: 0, inference: 1 ]
type 2192 reference  '0*   [ tparams: 0, inference: 1 ]
type 2193 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2194 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2195 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2196 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 2197 function   fn(List[List[char]]*) -> unit   [ tparams: 0, inference: 0 ]
type 2198 hole       '0   [ tparams: 0, inference: 1 ]
type 2199 reference  '0*   [ tparams: 0, inference: 1 ]
type 2200 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2201 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2202 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2203 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2204 function   fn(List[List[char]], u64, List[char]) -> unit   [ tparams: 0, inference: 0 ]
type 2205 hole       '0   [ tparams: 0, inference: 1 ]
type 2206 reference  '0*   [ tparams: 0, inference: 1 ]
type 2207 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2208 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2209 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2210 function   fn(List[List[char]]) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2211 hole       '0   [ tparams: 0, inference: 1 ]
type 2212 reference  '0*   [ tparams: 0, inference: 1 ]
type 2213 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2214 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2215 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2216 function   fn(Buffer[List[char]]) -> BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 2217 hole       '0   [ tparams: 0, inference: 1 ]
type 2218 reference  '0*   [ tparams: 0, inference: 1 ]
type 2219 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2220 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2221 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2222 hole       '0   [ tparams: 0, inference: 1 ]
type 2223 reference  '0*   [ tparams: 0, inference: 1 ]
type 2224 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2225 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 2226 function   fn(Buffer[List[char]], u64) -> List[char]   [ tparams: 0, inference: 0 ]
type 2227 hole       '0   [ tparams: 0, inference: 1 ]
type 2228 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2229 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2230 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2231 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2232 function   fn(List[char]) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 2233 hole       '0   [ tparams: 0, inference: 1 ]
type 2234 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2235 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2236 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2237 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2238 hole       '0   [ tparams: 0, inference: 1 ]
type 2239 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2240 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2241 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2242 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2243 function   fn() -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 2244 hole       '0   [ tparams: 0, inference: 1 ]
type 2245 reference  '0*   [ tparams: 0, inference: 1 ]
type 2246 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2247 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2248 function   fn(u64) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2249 hole       '0   [ tparams: 0, inference: 1 ]
type 2250 reference  '0*   [ tparams: 0, inference: 1 ]
type 2251 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2252 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2253 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2254 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2255 function   fn(List[enum Char(char) | String(string)]) -> u64   [ tparams: 0, inference: 0 ]
type 2256 hole       '0   [ tparams: 0, inference: 1 ]
type 2257 reference  '0*   [ tparams: 0, inference: 1 ]
type 2258 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2259 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2260 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2261 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 2262 function   fn(List[enum Char(char) | String(string)]*) -> unit   [ tparams: 0, inference: 0 ]
type 2263 hole       '0   [ tparams: 0, inference: 1 ]
type 2264 reference  '0*   [ tparams: 0, inference: 1 ]
type 2265 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2266 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2267 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2268 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2269 function   fn(List[enum Char(char) | String(string)], u64, enum Char(char) | String(string)) -> unit   [ tparams: 0, inference: 0 ]
type 2270 hole       '0   [ tparams: 0, inference: 1 ]
type 2271 reference  '0*   [ tparams: 0, inference: 1 ]
type 2272 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2273 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2274 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2275 function   fn(List[enum Char(char) | String(string)]) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2276 hole       '0   [ tparams: 0, inference: 1 ]
type 2277 reference  '0*   [ tparams: 0, inference: 1 ]
type 2278 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2279 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2280 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2281 function   fn(Buffer[enum Char(char) | String(string)]) -> BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2282 hole       '0   [ tparams: 0, inference: 1 ]
type 2283 reference  '0*   [ tparams: 0, inference: 1 ]
type 2284 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2285 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2286 function   fn(List['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2287 hole       '0   [ tparams: 0, inference: 1 ]
type 2288 reference  '0*   [ tparams: 0, inference: 1 ]
type 2289 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2290 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 2291 function   fn(Buffer[enum Char(char) | String(string)], u64) -> enum Char(char) | String(string)   [ tparams: 0, inference: 0 ]
type 2292 hole       '0   [ tparams: 0, inference: 1 ]
type 2293 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2294 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2295 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2296 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2297 function   fn(enum Char(char) | String(string)) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2298 hole       '0   [ tparams: 0, inference: 1 ]
type 2299 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2300 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2301 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2302 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 2303 hole       '0   [ tparams: 0, inference: 1 ]
type 2304 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2305 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2306 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2307 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2308 function   fn(u64) -> Buffer[Arena]   [ tparams: 0, inference: 0 ]
type 2309 hole       '0   [ tparams: 0, inference: 1 ]
type 2310 reference  '0*   [ tparams: 0, inference: 1 ]
type 2311 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2312 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2313 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2314 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2315 function   fn(List[Arena]) -> u64   [ tparams: 0, inference: 0 ]
type 2316 hole       '0   [ tparams: 0, inference: 1 ]
type 2317 reference  '0*   [ tparams: 0, inference: 1 ]
type 2318 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2319 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2320 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2321 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 2322 function   fn(List[Arena]*) -> unit   [ tparams: 0, inference: 0 ]
type 2323 hole       '0   [ tparams: 0, inference: 1 ]
type 2324 reference  '0*   [ tparams: 0, inference: 1 ]
type 2325 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2326 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2327 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2328 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2329 function   fn(List[Arena], u64, Arena) -> unit   [ tparams: 0, inference: 0 ]
type 2330 function   fn(u64) -> Buffer[ObjectPool]   [ tparams: 0, inference: 0 ]
type 2331 function   fn(Buffer[Arena], u64) -> Arena*   [ tparams: 0, inference: 0 ]
type 2332 hole       '0   [ tparams: 0, inference: 1 ]
type 2333 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2334 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2335 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2336 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2337 hole       '0   [ tparams: 0, inference: 1 ]
type 2338 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2339 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2340 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2341 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2342 hole       '0   [ tparams: 0, inference: 1 ]
type 2343 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2344 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2345 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2346 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2347 function   fn(u64) -> Buffer[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 2348 hole       '0   [ tparams: 0, inference: 1 ]
type 2349 reference  '0*   [ tparams: 0, inference: 1 ]
type 2350 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2351 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2352 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2353 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2354 function   fn(List[Opt[WeirdPoint]]) -> u64   [ tparams: 0, inference: 0 ]
type 2355 hole       '0   [ tparams: 0, inference: 1 ]
type 2356 reference  '0*   [ tparams: 0, inference: 1 ]
type 2357 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2358 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2359 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2360 function   fn(List['0]*) -> unit   [ tparams: 0, inference: 1 ]
type 2361 function   fn(List[Opt[WeirdPoint]]*) -> unit   [ tparams: 0, inference: 0 ]
type 2362 hole       '0   [ tparams: 0, inference: 1 ]
type 2363 reference  '0*   [ tparams: 0, inference: 1 ]
type 2364 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2365 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2366 function   fn(List['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2367 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2368 function   fn(List[Opt[WeirdPoint]], u64, Opt[WeirdPoint]) -> unit   [ tparams: 0, inference: 0 ]
type 2369 hole       '0   [ tparams: 0, inference: 1 ]
type 2370 reference  '0*   [ tparams: 0, inference: 1 ]
type 2371 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2372 function   fn(Buffer['0], u64) -> '0   [ tparams: 0, inference: 2 ]
type 2373 function   fn(Buffer[Opt[WeirdPoint]], u64) -> Opt[WeirdPoint]   [ tparams: 0, inference: 0 ]
type 2374 hole       '0   [ tparams: 0, inference: 1 ]
type 2375 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2376 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2377 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2378 function   fn(Opt['0], Opt['0]) -> bool   [ tparams: 0, inference: 2 ]
type 2379 function   fn(Opt[i64], Opt[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 2380 hole       '0   [ tparams: 0, inference: 1 ]
type 2381 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2382 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2383 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2384 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2385 hole       '0   [ tparams: 0, inference: 1 ]
type 2386 reference  '0*   [ tparams: 0, inference: 1 ]
type 2387 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2388 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2389 function   fn(Buffer[Pointer]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2390 function   fn(Pointer, u64) -> Pointer*   [ tparams: 0, inference: 0 ]
type 2391 hole       '0   [ tparams: 0, inference: 1 ]
type 2392 reference  '0*   [ tparams: 0, inference: 1 ]
type 2393 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2394 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2395 hole       '0   [ tparams: 0, inference: 1 ]
type 2396 reference  '0*   [ tparams: 0, inference: 1 ]
type 2397 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2398 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 2399 function   fn(Buffer[string]) -> bool   [ tparams: 0, inference: 0 ]
type 2400 hole       '0   [ tparams: 0, inference: 1 ]
type 2401 reference  '0*   [ tparams: 0, inference: 1 ]
type 2402 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2403 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2404 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2405 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2406 hole       '0   [ tparams: 0, inference: 1 ]
type 2407 reference  '0*   [ tparams: 0, inference: 1 ]
type 2408 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2409 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2410 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2411 function   fn(List['0]*, u64) -> unit   [ tparams: 0, inference: 1 ]
type 2412 function   fn(List[string]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2413 hole       '0   [ tparams: 0, inference: 1 ]
type 2414 reference  '0*   [ tparams: 0, inference: 1 ]
type 2415 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2416 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2417 function   fn(Buffer[string], u64, string) -> unit   [ tparams: 0, inference: 0 ]
type 2418 function   fn() -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 2419 hole       '0   [ tparams: 0, inference: 1 ]
type 2420 reference  '0*   [ tparams: 0, inference: 1 ]
type 2421 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2422 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2423 function   fn(Buffer[string], u64) -> string*   [ tparams: 0, inference: 0 ]
type 2424 hole       '0   [ tparams: 0, inference: 1 ]
type 2425 reference  '0*   [ tparams: 0, inference: 1 ]
type 2426 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2427 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2428 function   fn(Pointer, u64) -> u8*   [ tparams: 0, inference: 0 ]
type 2429 hole       '0   [ tparams: 0, inference: 1 ]
type 2430 reference  '0*   [ tparams: 0, inference: 1 ]
type 2431 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2432 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2433 hole       '0   [ tparams: 0, inference: 1 ]
type 2434 reference  '0*   [ tparams: 0, inference: 1 ]
type 2435 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2436 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 2437 function   fn(Buffer[char]) -> bool   [ tparams: 0, inference: 0 ]
type 2438 hole       '0   [ tparams: 0, inference: 1 ]
type 2439 reference  '0*   [ tparams: 0, inference: 1 ]
type 2440 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2441 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2442 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2443 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2444 hole       '0   [ tparams: 0, inference: 1 ]
type 2445 reference  '0*   [ tparams: 0, inference: 1 ]
type 2446 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2447 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2448 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2449 function   fn(List['0]*, u64) -> unit   [ tparams: 0, inference: 1 ]
type 2450 function   fn(List[char]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2451 hole       '0   [ tparams: 0, inference: 1 ]
type 2452 reference  '0*   [ tparams: 0, inference: 1 ]
type 2453 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2454 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2455 hole       '0   [ tparams: 0, inference: 1 ]
type 2456 reference  '0*   [ tparams: 0, inference: 1 ]
type 2457 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2458 function   fn(Buffer['0]) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2459 hole       '0   [ tparams: 0, inference: 1 ]
type 2460 reference  '0*   [ tparams: 0, inference: 1 ]
type 2461 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2462 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2463 function   fn(List['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2464 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2465 function   fn(List[char], u64) -> char*   [ tparams: 0, inference: 0 ]
type 2466 hole       '0   [ tparams: 0, inference: 1 ]
type 2467 reference  '0*   [ tparams: 0, inference: 1 ]
type 2468 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2469 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2470 function   fn(List['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2471 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2472 hole       '0   [ tparams: 0, inference: 1 ]
type 2473 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2474 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2475 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2476 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2477 hole       '0   [ tparams: 0, inference: 1 ]
type 2478 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 2479 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 2480 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 2481 function   fn(Opt['0]) -> '0   [ tparams: 0, inference: 2 ]
type 2482 hole       '0   [ tparams: 0, inference: 1 ]
type 2483 reference  '0*   [ tparams: 0, inference: 1 ]
type 2484 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2485 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 2486 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 2487 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2488 hole       '0   [ tparams: 0, inference: 1 ]
type 2489 reference  '0*   [ tparams: 0, inference: 1 ]
type 2490 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2491 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 2492 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 2493 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2494 hole       '0   [ tparams: 0, inference: 1 ]
type 2495 reference  '0*   [ tparams: 0, inference: 1 ]
type 2496 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2497 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 2498 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 2499 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2500 function   fn() -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 2501 hole       '0   [ tparams: 0, inference: 1 ]
type 2502 reference  '0*   [ tparams: 0, inference: 1 ]
type 2503 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2504 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2505 function   fn() -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 2506 hole       '0   [ tparams: 0, inference: 1 ]
type 2507 reference  '0*   [ tparams: 0, inference: 1 ]
type 2508 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2509 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2510 function   fn(Buffer[i64], u64) -> i64*   [ tparams: 0, inference: 0 ]
type 2511 hole       '0   [ tparams: 0, inference: 1 ]
type 2512 reference  '0*   [ tparams: 0, inference: 1 ]
type 2513 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2514 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 2515 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 2516 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2517 hole       '0   [ tparams: 0, inference: 1 ]
type 2518 reference  '0*   [ tparams: 0, inference: 1 ]
type 2519 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2520 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2521 hole       '0   [ tparams: 0, inference: 1 ]
type 2522 reference  '0*   [ tparams: 0, inference: 1 ]
type 2523 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2524 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2525 hole       '0   [ tparams: 0, inference: 1 ]
type 2526 reference  '0*   [ tparams: 0, inference: 1 ]
type 2527 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2528 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2529 hole       '0   [ tparams: 0, inference: 1 ]
type 2530 reference  '0*   [ tparams: 0, inference: 1 ]
type 2531 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2532 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2533 function   fn(u64) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2534 hole       '0   [ tparams: 0, inference: 1 ]
type 2535 reference  '0*   [ tparams: 0, inference: 1 ]
type 2536 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2537 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 2538 function   fn(Buffer[List[char]]) -> bool   [ tparams: 0, inference: 0 ]
type 2539 hole       '0   [ tparams: 0, inference: 1 ]
type 2540 reference  '0*   [ tparams: 0, inference: 1 ]
type 2541 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2542 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2543 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2544 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2545 hole       '0   [ tparams: 0, inference: 1 ]
type 2546 reference  '0*   [ tparams: 0, inference: 1 ]
type 2547 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2548 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2549 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2550 function   fn(List['0]*, u64) -> unit   [ tparams: 0, inference: 1 ]
type 2551 function   fn(List[List[char]]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2552 hole       '0   [ tparams: 0, inference: 1 ]
type 2553 reference  '0*   [ tparams: 0, inference: 1 ]
type 2554 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2555 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2556 function   fn(Buffer[List[char]], u64, List[char]) -> unit   [ tparams: 0, inference: 0 ]
type 2557 hole       '0   [ tparams: 0, inference: 1 ]
type 2558 reference  '0*   [ tparams: 0, inference: 1 ]
type 2559 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2560 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2561 function   fn(Buffer[List[char]], u64, u64) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2562 hole       '0   [ tparams: 0, inference: 1 ]
type 2563 reference  '0*   [ tparams: 0, inference: 1 ]
type 2564 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2565 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 2566 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 2567 function   fn(Buffer[List[char]]) -> BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 2568 hole       '0   [ tparams: 0, inference: 1 ]
type 2569 reference  '0*   [ tparams: 0, inference: 1 ]
type 2570 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2571 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2572 function   fn(Buffer[List[char]], u64) -> List[char]*   [ tparams: 0, inference: 0 ]
type 2573 hole       '0   [ tparams: 0, inference: 1 ]
type 2574 reference  '0*   [ tparams: 0, inference: 1 ]
type 2575 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2576 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 2577 function   fn(Buffer[enum Char(char) | String(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 2578 hole       '0   [ tparams: 0, inference: 1 ]
type 2579 reference  '0*   [ tparams: 0, inference: 1 ]
type 2580 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2581 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2582 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2583 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2584 hole       '0   [ tparams: 0, inference: 1 ]
type 2585 reference  '0*   [ tparams: 0, inference: 1 ]
type 2586 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2587 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2588 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2589 function   fn(List['0]*, u64) -> unit   [ tparams: 0, inference: 1 ]
type 2590 function   fn(List[enum Char(char) | String(string)]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2591 hole       '0   [ tparams: 0, inference: 1 ]
type 2592 reference  '0*   [ tparams: 0, inference: 1 ]
type 2593 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2594 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2595 function   fn(Buffer[enum Char(char) | String(string)], u64, enum Char(char) | String(string)) -> unit   [ tparams: 0, inference: 0 ]
type 2596 hole       '0   [ tparams: 0, inference: 1 ]
type 2597 reference  '0*   [ tparams: 0, inference: 1 ]
type 2598 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2599 function   fn(Buffer['0], u64, u64) -> Buffer['0]   [ tparams: 0, inference: 2 ]
type 2600 function   fn(Buffer[enum Char(char) | String(string)], u64, u64) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2601 hole       '0   [ tparams: 0, inference: 1 ]
type 2602 reference  '0*   [ tparams: 0, inference: 1 ]
type 2603 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2604 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 2605 function   fn(Buffer['0]) -> BufferIterator['0]   [ tparams: 0, inference: 2 ]
type 2606 function   fn(Buffer[enum Char(char) | String(string)]) -> BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2607 hole       '0   [ tparams: 0, inference: 1 ]
type 2608 reference  '0*   [ tparams: 0, inference: 1 ]
type 2609 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2610 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2611 function   fn(Buffer[enum Char(char) | String(string)], u64) -> enum Char(char) | String(string)*   [ tparams: 0, inference: 0 ]
type 2612 hole       '0   [ tparams: 0, inference: 1 ]
type 2613 reference  '0*   [ tparams: 0, inference: 1 ]
type 2614 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2615 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 2616 function   fn(Buffer[Arena]) -> bool   [ tparams: 0, inference: 0 ]
type 2617 hole       '0   [ tparams: 0, inference: 1 ]
type 2618 reference  '0*   [ tparams: 0, inference: 1 ]
type 2619 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2620 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2621 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2622 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2623 hole       '0   [ tparams: 0, inference: 1 ]
type 2624 reference  '0*   [ tparams: 0, inference: 1 ]
type 2625 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2626 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2627 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2628 function   fn(List['0]*, u64) -> unit   [ tparams: 0, inference: 1 ]
type 2629 function   fn(List[Arena]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2630 hole       '0   [ tparams: 0, inference: 1 ]
type 2631 reference  '0*   [ tparams: 0, inference: 1 ]
type 2632 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2633 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2634 function   fn(Buffer[Arena], u64, Arena) -> unit   [ tparams: 0, inference: 0 ]
type 2635 hole       '0   [ tparams: 0, inference: 1 ]
type 2636 reference  '0*   [ tparams: 0, inference: 1 ]
type 2637 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2638 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2639 function   fn(Buffer[Arena]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2640 function   fn(Pointer, u64) -> Arena*   [ tparams: 0, inference: 0 ]
type 2641 hole       '0   [ tparams: 0, inference: 1 ]
type 2642 reference  '0*   [ tparams: 0, inference: 1 ]
type 2643 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2644 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2645 hole       '0   [ tparams: 0, inference: 1 ]
type 2646 reference  '0*   [ tparams: 0, inference: 1 ]
type 2647 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2648 function   fn(Buffer['0]) -> bool   [ tparams: 0, inference: 1 ]
type 2649 function   fn(Buffer[Opt[WeirdPoint]]) -> bool   [ tparams: 0, inference: 0 ]
type 2650 hole       '0   [ tparams: 0, inference: 1 ]
type 2651 reference  '0*   [ tparams: 0, inference: 1 ]
type 2652 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2653 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2654 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2655 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2656 hole       '0   [ tparams: 0, inference: 1 ]
type 2657 reference  '0*   [ tparams: 0, inference: 1 ]
type 2658 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2659 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2660 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 2661 function   fn(List['0]*, u64) -> unit   [ tparams: 0, inference: 1 ]
type 2662 function   fn(List[Opt[WeirdPoint]]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2663 hole       '0   [ tparams: 0, inference: 1 ]
type 2664 reference  '0*   [ tparams: 0, inference: 1 ]
type 2665 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2666 function   fn(Buffer['0], u64, '0) -> unit   [ tparams: 0, inference: 2 ]
type 2667 function   fn(Buffer[Opt[WeirdPoint]], u64, Opt[WeirdPoint]) -> unit   [ tparams: 0, inference: 0 ]
type 2668 hole       '0   [ tparams: 0, inference: 1 ]
type 2669 reference  '0*   [ tparams: 0, inference: 1 ]
type 2670 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2671 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2672 function   fn(Buffer[Opt[WeirdPoint]], u64) -> Opt[WeirdPoint]*   [ tparams: 0, inference: 0 ]
type 2673 hole       '0   [ tparams: 0, inference: 1 ]
type 2674 reference  '0*   [ tparams: 0, inference: 1 ]
type 2675 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2676 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2677 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2678 function   fn(Buffer[string], u64) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 2679 reference  Buffer[string]*   [ tparams: 0, inference: 0 ]
type 2680 hole       '0   [ tparams: 0, inference: 1 ]
type 2681 reference  '0*   [ tparams: 0, inference: 1 ]
type 2682 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2683 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2684 hole       '0   [ tparams: 0, inference: 1 ]
type 2685 reference  '0*   [ tparams: 0, inference: 1 ]
type 2686 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2687 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2688 function   fn(Buffer[string]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2689 function   fn(Pointer, u64) -> string*   [ tparams: 0, inference: 0 ]
type 2690 hole       '0   [ tparams: 0, inference: 1 ]
type 2691 reference  '0*   [ tparams: 0, inference: 1 ]
type 2692 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2693 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2694 hole       '0   [ tparams: 0, inference: 1 ]
type 2695 reference  '0*   [ tparams: 0, inference: 1 ]
type 2696 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2697 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2698 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2699 reference  Buffer[char]*   [ tparams: 0, inference: 0 ]
type 2700 function   fn(u64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 2701 hole       '0   [ tparams: 0, inference: 1 ]
type 2702 reference  '0*   [ tparams: 0, inference: 1 ]
type 2703 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2704 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2705 function   fn(Pointer, u64) -> i64*   [ tparams: 0, inference: 0 ]
type 2706 hole       '0   [ tparams: 0, inference: 1 ]
type 2707 reference  '0*   [ tparams: 0, inference: 1 ]
type 2708 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2709 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2710 hole       '0   [ tparams: 0, inference: 1 ]
type 2711 reference  '0*   [ tparams: 0, inference: 1 ]
type 2712 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2713 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2714 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2715 function   fn(Buffer[List[char]], u64) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2716 reference  Buffer[List[char]]*   [ tparams: 0, inference: 0 ]
type 2717 hole       '0   [ tparams: 0, inference: 1 ]
type 2718 reference  '0*   [ tparams: 0, inference: 1 ]
type 2719 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2720 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2721 function   fn() -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2722 hole       '0   [ tparams: 0, inference: 1 ]
type 2723 reference  '0*   [ tparams: 0, inference: 1 ]
type 2724 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2725 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2726 hole       '0   [ tparams: 0, inference: 1 ]
type 2727 reference  '0*   [ tparams: 0, inference: 1 ]
type 2728 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2729 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2730 function   fn(Buffer[List[char]]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2731 function   fn(Pointer, u64) -> List[char]*   [ tparams: 0, inference: 0 ]
type 2732 hole       '0   [ tparams: 0, inference: 1 ]
type 2733 reference  '0*   [ tparams: 0, inference: 1 ]
type 2734 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2735 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2736 hole       '0   [ tparams: 0, inference: 1 ]
type 2737 reference  '0*   [ tparams: 0, inference: 1 ]
type 2738 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2739 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2740 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2741 function   fn(Buffer[enum Char(char) | String(string)], u64) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2742 reference  Buffer[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 2743 hole       '0   [ tparams: 0, inference: 1 ]
type 2744 reference  '0*   [ tparams: 0, inference: 1 ]
type 2745 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2746 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2747 function   fn() -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2748 hole       '0   [ tparams: 0, inference: 1 ]
type 2749 reference  '0*   [ tparams: 0, inference: 1 ]
type 2750 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2751 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2752 hole       '0   [ tparams: 0, inference: 1 ]
type 2753 reference  '0*   [ tparams: 0, inference: 1 ]
type 2754 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2755 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2756 function   fn(Buffer[enum Char(char) | String(string)]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2757 function   fn(Pointer, u64) -> enum Char(char) | String(string)*   [ tparams: 0, inference: 0 ]
type 2758 hole       '0   [ tparams: 0, inference: 1 ]
type 2759 reference  '0*   [ tparams: 0, inference: 1 ]
type 2760 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2761 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2762 hole       '0   [ tparams: 0, inference: 1 ]
type 2763 reference  '0*   [ tparams: 0, inference: 1 ]
type 2764 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2765 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2766 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2767 function   fn(Buffer[Arena], u64) -> Buffer[Arena]   [ tparams: 0, inference: 0 ]
type 2768 reference  Buffer[Arena]*   [ tparams: 0, inference: 0 ]
type 2769 hole       '0   [ tparams: 0, inference: 1 ]
type 2770 reference  '0*   [ tparams: 0, inference: 1 ]
type 2771 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2772 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2773 hole       '0   [ tparams: 0, inference: 1 ]
type 2774 reference  '0*   [ tparams: 0, inference: 1 ]
type 2775 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2776 struct     List['0]   [ tparams: 0, inference: 1 ]
type 2777 function   fn(List['0]) -> u64   [ tparams: 0, inference: 1 ]
type 2778 function   fn(Buffer[Opt[WeirdPoint]], u64) -> Buffer[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 2779 reference  Buffer[Opt[WeirdPoint]]*   [ tparams: 0, inference: 0 ]
type 2780 hole       '0   [ tparams: 0, inference: 1 ]
type 2781 reference  '0*   [ tparams: 0, inference: 1 ]
type 2782 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2783 function   fn(Buffer['0], u64) -> '0*   [ tparams: 0, inference: 2 ]
type 2784 hole       '0   [ tparams: 0, inference: 1 ]
type 2785 reference  '0*   [ tparams: 0, inference: 1 ]
type 2786 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2787 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2788 function   fn(Buffer[Opt[WeirdPoint]]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2789 function   fn(Pointer, u64) -> Opt[WeirdPoint]*   [ tparams: 0, inference: 0 ]
type 2790 hole       '0   [ tparams: 0, inference: 1 ]
type 2791 reference  '0*   [ tparams: 0, inference: 1 ]
type 2792 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2793 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2794 function   fn(Buffer[string], Buffer[string], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2795 function   fn(Buffer[List[char]], Buffer[List[char]], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2796 function   fn(Buffer[enum Char(char) | String(string)], Buffer[enum Char(char) | String(string)], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2797 function   fn(Buffer[Arena], Buffer[Arena], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2798 function   fn(Buffer[Opt[WeirdPoint]], Buffer[Opt[WeirdPoint]], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2799 hole       '0   [ tparams: 0, inference: 1 ]
type 2800 reference  '0*   [ tparams: 0, inference: 1 ]
type 2801 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2802 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2803 hole       '0   [ tparams: 0, inference: 1 ]
type 2804 reference  '0*   [ tparams: 0, inference: 1 ]
type 2805 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2806 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2807 hole       '0   [ tparams: 0, inference: 1 ]
type 2808 reference  '0*   [ tparams: 0, inference: 1 ]
type 2809 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2810 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2811 hole       '0   [ tparams: 0, inference: 1 ]
type 2812 reference  '0*   [ tparams: 0, inference: 1 ]
type 2813 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2814 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2815 hole       '0   [ tparams: 0, inference: 1 ]
type 2816 reference  '0*   [ tparams: 0, inference: 1 ]
type 2817 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2818 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2819 hole       '0   [ tparams: 0, inference: 1 ]
type 2820 reference  '0*   [ tparams: 0, inference: 1 ]
type 2821 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2822 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2823 hole       '0   [ tparams: 0, inference: 1 ]
type 2824 reference  '0*   [ tparams: 0, inference: 1 ]
type 2825 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2826 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2827 hole       '0   [ tparams: 0, inference: 1 ]
type 2828 reference  '0*   [ tparams: 0, inference: 1 ]
type 2829 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2830 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2831 hole       '0   [ tparams: 0, inference: 1 ]
type 2832 reference  '0*   [ tparams: 0, inference: 1 ]
type 2833 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2834 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
type 2835 hole       '0   [ tparams: 0, inference: 1 ]
type 2836 reference  '0*   [ tparams: 0, inference: 1 ]
type 2837 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 2838 function   fn(Buffer['0]) -> Pointer   [ tparams: 0, inference: 1 ]
--- Namespaces ---
ns 00 _root
ns 01 compiler
ns 02 bool
ns 03 libc
ns 04 Pointer
ns 05 sys
ns 06 files
ns 07 unix
ns 08 char
ns 09 u8
ns 10 Buffer
ns 11 BufferIterator
ns 12 Opt
ns 13 List
ns 14 CString
ns 15 string
ns 16 types
ns 17 StringBuilder
ns 18 Bits
ns 19 Arena
ns 20 Allocator
ns 21 IntRange
ns 22 IntRangeIterator
ns 23 Equals
ns 24 Show
ns 25 Bitwise
ns 26 Comparable
ns 27 Unwrap
ns 28 Try
ns 29 Iterator
ns 30 Iterable
ns 31 TextWriter
--- Functions ---
fn 00 fn equals[Self](self: Self, other: Self): bool
fn 01 fn show[Self](self: Self): string
fn 02 intern fn sizeOf[T](): u64
fn 03 intern fn sizeOfStride[T](): u64
fn 04 intern fn alignOf[T](): u64
fn 05 intern fn location(): SourceLocation
fn 06 fn bitNot[Self](self: Self): Self
fn 07 fn bitAnd[Self](self: Self, other: Self): Self
fn 08 fn bitOr[Self](self: Self, other: Self): Self
fn 09 fn xor[Self](self: Self, other: Self): Self
fn 10 fn shiftLeft[Self](self: Self, other: Self): Self
fn 11 fn shiftRight[Self](self: Self, other: Self): Self
fn 12 fn compare[Self](self: Self, other: Self): Ordering
fn 13 fn hasValue[Self](self: Self): bool
fn 14 fn unwrap[Self](self: Self): Inner
fn 15 fn make[Self](inner: Inner): Self
fn 16 fn makeError[Self](e: E): Self
fn 17 fn makeOk[Self](t: T): Self
fn 18 fn isOk[Self](self: Self): bool
fn 19 fn getError[Self](self: Self): E
fn 20 fn getOk[Self](self: Self): T
fn 21 fn next[Self](self: Self*): Opt[Item]
fn 22 fn sizeHint[Self](self: Self): {atLeast: u64, atMost: Opt[u64]}
fn 23 fn advanceBy[Self](self: Self*, n: u64): unit
fn 24 fn nth[Self](self: Self*, n: u64): Opt[Item]
fn 25 fn Iterator_I_next(self: I*): Opt[Item]
fn 26 fn Iterator_I_sizeHint(self: I): {atLeast: u64, atMost: Opt[u64]}
fn 27 fn Iterator_I_advanceBy(self: I*, n: u64): unit
fn 28 fn Iterator_I_nth(self: I*, n: u64): Opt[Item]
fn 29 fn iterator[Self](self: Self): I
fn 30 intern fn negated(self: bool): bool
fn 31 fn Equals_bool_equals(self: bool, other: bool): bool
fn 32 fn discard[T](t: T): unit
fn 33 extern fn exit(code: i32): never
fn 34 extern fn read(fileNo: i32, buffer: Pointer, count: u64, offset: u64): i64
fn 35 extern fn write(fileNo: i32, data: Pointer, count: u64, offset: u64): u64
fn 36 extern fn memcpy(dst: Pointer, src: Pointer, count: u64): Pointer
fn 37 extern fn memset(src: Pointer, value: u32, count: u64): Pointer
fn 38 extern fn memcmp(s1: Pointer, s2: Pointer, size: u64): i32
fn 39 extern fn calloc(count: u64, size: u64): Pointer
fn 40 extern fn malloc(size: u64): Pointer
fn 41 extern fn free(ptr: Pointer): unit
fn 42 extern fn realloc(ptr: Pointer, size: u64): Pointer
fn 43 extern fn arc4random_uniform(upperBound: u32): u32
fn 44 extern fn abort(): never
fn 45 fn assert(locn: SourceLocation, value: bool): unit
fn 46 fn crash(locn: SourceLocation, msg: string): never
fn 47 fn Show_T_show(self: T): string
fn 48 fn Equals_T_equals(self: T, other: T): bool
fn 49 fn assertEquals[T](locn: SourceLocation, a: T, b: T): unit
fn 50 fn null(): Pointer
fn 51 fn isNull(self: Pointer): bool
fn 52 intern fn refAtIndex[T](self: Pointer, index: u64): T*
fn 53 fn Equals_Pointer_equals(self: Pointer, other: Pointer): bool
fn 54 fn new[T](value: T): T*
fn 55 fn identity[T](value: T): T
fn 56 fn ignore[T](value: T): unit
fn 57 fn Show_T_show(self: T): string
fn 58 fn printIt[T](value: T): unit
fn 59 fn print(s: string): unit
fn 60 fn println(s: string): unit
fn 61 fn eprint(s: string): unit
fn 62 fn eprintln(s: string): unit
fn 63 extern fn _k1_show_backtrace(): unit
fn 64 fn printBacktrace(): unit
fn 65 fn exit(code: i32): never
fn 66 fn parseMainArgs(argCount: u32, args: Pointer): Buffer[string]
fn 67 fn readLine(maxLengthBytes: u64): Result[string, string]
fn 68 extern fn fopen(pathCString: Pointer, modeCString: Pointer): Pointer
fn 69 extern fn fseek(fileDesc: Pointer, offset: u64, whence: i32): i32
fn 70 extern fn fread(buffer: Pointer, size: u64, num: u64, stream: Pointer): u64
fn 71 extern fn fclose(fileDesc: Pointer): i32
fn 72 extern fn ftell(fileDesc: Pointer): u64
fn 73 fn readToString(alloc: Allocator, path: string): string
fn 74 fn assertMsg(locn: SourceLocation, msg: string, value: bool): unit
fn 75 fn toString(self: char): string
fn 76 fn toDigitValue(self: char): Opt[u8]
fn 77 fn writeChar[Self](self: Self*, value: char): unit
fn 78 fn writeString[Self](self: Self*, value: string): unit
fn 79 fn writeBuffer[Self](self: Self*, buffer: Buffer[char]): unit
fn 80 fn Show_bool_show(self: bool): string
fn 81 fn Show_char_show(self: char): string
fn 82 fn Show_i64_show(self: i64): string
fn 83 fn Comparable_i64_compare(self: i64, other: i64): Ordering
fn 84 fn Comparable_u64_compare(self: u64, other: u64): Ordering
fn 85 fn Comparable_u8_compare(self: u8, other: u8): Ordering
fn 86 fn toAsciiDigit(v: u8): char
fn 87 fn TextWriter_W_writeChar(self: W*, value: char): unit
fn 88 fn TextWriter_W_writeString(self: W*, value: string): unit
fn 89 fn TextWriter_W_writeBuffer(self: W*, buffer: Buffer[char]): unit
fn 90 fn formatUInt[W](w: W*, value: u64, base: u64): unit
fn 91 fn Show_u64_show(self: u64): string
fn 92 fn Show_u32_show(self: u32): string
fn 93 fn Show_u8_show(self: u8): string
fn 94 fn Show_i32_show(self: i32): string
fn 95 fn Show_i16_show(self: i16): string
fn 96 fn Show_i8_show(self: i8): string
fn 97 fn Equals_i64_equals(self: i64, other: i64): bool
fn 98 fn Try_Result[S, F]_makeError(e: F): Result[S, F]
fn 99 fn Try_Result[S, F]_makeOk(t: S): Result[S, F]
fn 100 fn Try_Result[S, F]_isOk(self: Result[S, F]): bool
fn 101 fn Try_Result[S, F]_getError(self: Result[S, F]): F
fn 102 fn Try_Result[S, F]_getOk(self: Result[S, F]): S
fn 103 fn Unwrap_Result[S, F]_hasValue(self: Result[S, F]): bool
fn 104 fn Unwrap_Result[S, F]_unwrap(self: Result[S, F]): S
fn 105 fn Unwrap_Result[S, F]_make(inner: S): Result[S, F]
fn 106 fn bufferLenBytes[T](count: u64): u64
fn 107 fn dataPointer[T](self: Buffer[T]): Pointer
fn 108 fn fromRawParts[T](len: u64, data: Pointer): Buffer[T]
fn 109 fn fromBaseAndCount[T](len: u64, data: T*): Buffer[T]
fn 110 fn _allocate[T](count: u64): Buffer[T]
fn 111 fn _copyFrom[T](source: Buffer[T], dest: Buffer[T], count: u64): unit
fn 112 fn _enlargedClone[T](self: Buffer[T], newCount: u64): Buffer[T]
fn 113 fn lenBytes[T](self: Buffer[T]): u64
fn 114 fn empty[T](): Buffer[T]
fn 115 fn filled[T](size: u64, value: T): Buffer[T]
fn 116 fn slice[T](self: Buffer[T], start: u64, end: u64): Buffer[T]
fn 117 fn take[T](self: Buffer[T], count: u64): Buffer[T]
fn 118 fn drop[T](self: Buffer[T], count: u64): Buffer[T]
fn 119 fn getRef[T](self: Buffer[T], index: u64): T*
fn 120 fn set[T](self: Buffer[T], index: u64, elem: T): unit
fn 121 fn get[T](self: Buffer[T], index: u64): T
fn 122 fn cloned[T](self: Buffer[T]): Buffer[T]
fn 123 fn isEmpty[T](self: Buffer[T]): bool
fn 124 fn nonEmpty[T](self: Buffer[T]): bool
fn 125 fn firstRef[T](self: Buffer[T]): Opt[T*]
fn 126 fn first[T](self: Buffer[T]): Opt[T]
fn 127 fn lastRef[T](self: Buffer[T]): Opt[T*]
fn 128 fn last[T](self: Buffer[T]): Opt[T]
fn 129 fn concat[T](self: Buffer[T], other: Buffer[T]): Buffer[T]
fn 130 fn swap[T](self: Buffer[T]*, indexA: u64, indexB: u64): unit
fn 131 fn Comparable_T_compare(self: T, other: T): Ordering
fn 132 fn sorted[T](self: Buffer[T]): Buffer[T]
fn 133 fn Equals_Buffer[u8]_equals(self: Buffer[u8], other: Buffer[u8]): bool
fn 134 fn Equals_Buffer[char]_equals(self: Buffer[char], other: Buffer[char]): bool
fn 135 fn Equals_Buffer[i64]_equals(self: Buffer[i64], other: Buffer[i64]): bool
fn 136 fn fromBuffer[T](buf: Buffer[T]): BufferIterator[T]
fn 137 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 138 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 139 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 140 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 141 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 142 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 143 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 144 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 145 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 146 fn isSome[T](self: Opt[T]): bool
fn 147 fn isNone[T](self: Opt[T]): bool
fn 148 fn get[T](self: Opt[T]): T
fn 149 fn Equals_T_equals(self: T, other: T): bool
fn 150 fn opt_equals[T](a: Opt[T], b: Opt[T]): bool
fn 151 fn none[T](): Opt[T].None
fn 152 fn some[T](value: T): Opt[T].Some(T)
fn 153 fn Equals_T_equals(self: T, other: T): bool
fn 154 fn Equals_Opt[T]_equals(self: Opt[T], other: Opt[T]): bool
fn 155 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 156 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 157 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 158 fn Show_T_show(self: T): string
fn 159 fn Show_Opt[T]_show(self: Opt[T]): string
fn 160 fn empty[T](): List[T]
fn 161 fn filled[T](size: u64, value: T): List[T]
fn 162 fn withCapacity[T](cap: u64): List[T]
fn 163 fn reserve[T](self: List[T]*, count: u64): unit
fn 164 fn single[T](value: T): List[T]
fn 165 fn wrapBuffer[T](buffer: Buffer[T]): List[T]
fn 166 fn toBuffer[T](self: List[T]): Buffer[T]
fn 167 fn innerBuffer[T](self: List[T]): Buffer[T]
fn 168 fn cap[T](self: List[T]): u64
fn 169 fn getRef[T](self: List[T], index: u64): T*
fn 170 fn set[T](self: List[T], index: u64, elem: T): unit
fn 171 fn get[T](self: List[T], index: u64): T
fn 172 fn getOpt[T](self: List[T], index: u64): Opt[T]
fn 173 fn _grow[T](self: List[T]*): unit
fn 174 fn cloned[T](self: List[T]): List[T]
fn 175 fn push[T](self: List[T]*, elem: T): unit
fn 176 fn slice[T](self: List[T], start: u64, end: u64): Buffer[T]
fn 177 fn isEmpty[T](self: List[T]): bool
fn 178 fn nonEmpty[T](self: List[T]): bool
fn 179 fn firstRef[T](self: List[T]): Opt[T*]
fn 180 fn first[T](self: List[T]): Opt[T]
fn 181 fn lastRef[T](self: List[T]): Opt[T*]
fn 182 fn last[T](self: List[T]): Opt[T]
fn 183 fn reverse[T](self: List[T]*): unit
fn 184 fn reversed[T](self: List[T]): List[T]
fn 185 fn concat[T](self: List[T]*, other: List[T]): unit
fn 186 fn swap[T](self: List[T]*, indexA: u64, indexB: u64): unit
fn 187 fn Comparable_T_compare(self: T, other: T): Ordering
fn 188 fn sort[T](input: List[T]*): unit
fn 189 fn Comparable_T_compare(self: T, other: T): Ordering
fn 190 fn sorted[T](self: List[T]): List[T]
fn 191 fn Show_T_show(self: T): string
fn 192 fn join[T](self: List[T], sep: string): string
fn 193 fn Equals_List[u8]_equals(self: List[u8], other: List[u8]): bool
fn 194 fn Equals_List[i64]_equals(self: List[i64], other: List[i64]): bool
fn 195 fn Equals_T_equals(self: T, other: T): bool
fn 196 fn Equals_List[T]_equals(self: List[T], other: List[T]): bool
fn 197 fn Show_T_show(self: T): string
fn 198 fn Show_List[T]_show(self: List[T]): string
fn 199 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 200 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 201 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 202 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 203 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 204 fn get(self: string, index: u64): char
fn 205 fn toBytes(self: string): Buffer[u8]
fn 206 fn innerBuffer(self: string): Buffer[char]
fn 207 fn toBuffer(self: string): Buffer[char]
fn 208 fn toList(self: string): List[char]
fn 209 fn wrapList(list: List[char]): string
fn 210 fn wrapBuffer(buffer: Buffer[char]): string
fn 211 fn wrapBytes(buffer: Buffer[u8]): string
fn 212 fn fromBytes(buffer: Buffer[u8]): string
fn 213 fn fromBuffer(buffer: Buffer[char]): string
fn 214 fn len(self: string): u64
fn 215 fn isEmpty(self: string): bool
fn 216 fn nonEmpty(self: string): bool
fn 217 fn first(self: string): Opt[char]
fn 218 fn indexOf(self: string, c: char): i64
fn 219 fn concat(self: string, other: string): string
fn 220 fn appendChar(self: string, c: char): string
fn 221 fn splitByChar(self: string, delim: char): List[string]
fn 222 fn indexOfString(self: string, target: string): Opt[u64]
fn 223 fn substring(self: string, start: u64, end: u64): string
fn 224 fn take(self: string, count: u64): string
fn 225 fn drop(self: string, count: u64): string
fn 226 fn startsWith(self: string, other: string): bool
fn 227 fn toCString(self: string): Pointer
fn 228 fn fromCString(cString: Pointer): string
fn 229 fn toInt(self: string): Opt[i64]
fn 230 fn Equals_string_equals(self: string, that: string): bool
fn 231 fn Show_string_show(self: string): string
fn 232 fn Iterator_BufferIterator[char]_next(self: BufferIterator[char]*): Opt[char]
fn 233 fn Iterator_BufferIterator[char]_sizeHint(self: BufferIterator[char]): {atLeast: u64, atMost: Opt[u64]}
fn 234 fn Iterator_BufferIterator[char]_advanceBy(self: BufferIterator[char]*, n: u64): unit
fn 235 fn Iterator_BufferIterator[char]_nth(self: BufferIterator[char]*, n: u64): Opt[char]
fn 236 fn Iterable_string_iterator(self: string): BufferIterator[char]
fn 237 fn Iterable_string*_iterator(self: string*): BufferIterator[char]
fn 238 intern fn typeId[T](): u64
fn 239 fn withCapacity(cap: u64): StringBuilder
fn 240 fn new(): StringBuilder
fn 241 fn putChar(self: StringBuilder, c: char): unit
fn 242 fn putString(self: StringBuilder, s: string): unit
fn 243 fn putByte(self: StringBuilder, b: u8): unit
fn 244 fn len(self: StringBuilder): u64
fn 245 fn build(self: StringBuilder): string
fn 246 intern fn bitNot(a: i64): i64
fn 247 intern fn bitAnd(a: i64, b: i64): i64
fn 248 intern fn bitOr(a: i64, b: i64): i64
fn 249 intern fn xor(a: i64, b: i64): i64
fn 250 intern fn shiftLeft(a: i64, b: i64): i64
fn 251 intern fn shiftRight(a: i64, b: i64): i64
fn 252 intern fn Bitwise_u8_bitNot(self: u8): u8
fn 253 intern fn Bitwise_u8_bitAnd(self: u8, other: u8): u8
fn 254 intern fn Bitwise_u8_bitOr(self: u8, other: u8): u8
fn 255 intern fn Bitwise_u8_xor(self: u8, other: u8): u8
fn 256 intern fn Bitwise_u8_shiftLeft(self: u8, other: u8): u8
fn 257 intern fn Bitwise_u8_shiftRight(self: u8, other: u8): u8
fn 258 intern fn Bitwise_u16_bitNot(self: u16): u16
fn 259 intern fn Bitwise_u16_bitAnd(self: u16, other: u16): u16
fn 260 intern fn Bitwise_u16_bitOr(self: u16, other: u16): u16
fn 261 intern fn Bitwise_u16_xor(self: u16, other: u16): u16
fn 262 intern fn Bitwise_u16_shiftLeft(self: u16, other: u16): u16
fn 263 intern fn Bitwise_u16_shiftRight(self: u16, other: u16): u16
fn 264 intern fn Bitwise_u32_bitNot(self: u32): u32
fn 265 intern fn Bitwise_u32_bitAnd(self: u32, other: u32): u32
fn 266 intern fn Bitwise_u32_bitOr(self: u32, other: u32): u32
fn 267 intern fn Bitwise_u32_xor(self: u32, other: u32): u32
fn 268 intern fn Bitwise_u32_shiftLeft(self: u32, other: u32): u32
fn 269 intern fn Bitwise_u32_shiftRight(self: u32, other: u32): u32
fn 270 intern fn Bitwise_u64_bitNot(self: u64): u64
fn 271 intern fn Bitwise_u64_bitAnd(self: u64, other: u64): u64
fn 272 intern fn Bitwise_u64_bitOr(self: u64, other: u64): u64
fn 273 intern fn Bitwise_u64_xor(self: u64, other: u64): u64
fn 274 intern fn Bitwise_u64_shiftLeft(self: u64, other: u64): u64
fn 275 intern fn Bitwise_u64_shiftRight(self: u64, other: u64): u64
fn 276 intern fn Bitwise_i8_bitNot(self: i8): i8
fn 277 intern fn Bitwise_i8_bitAnd(self: i8, other: i8): i8
fn 278 intern fn Bitwise_i8_bitOr(self: i8, other: i8): i8
fn 279 intern fn Bitwise_i8_xor(self: i8, other: i8): i8
fn 280 intern fn Bitwise_i8_shiftLeft(self: i8, other: i8): i8
fn 281 intern fn Bitwise_i8_shiftRight(self: i8, other: i8): i8
fn 282 intern fn Bitwise_i16_bitNot(self: i16): i16
fn 283 intern fn Bitwise_i16_bitAnd(self: i16, other: i16): i16
fn 284 intern fn Bitwise_i16_bitOr(self: i16, other: i16): i16
fn 285 intern fn Bitwise_i16_xor(self: i16, other: i16): i16
fn 286 intern fn Bitwise_i16_shiftLeft(self: i16, other: i16): i16
fn 287 intern fn Bitwise_i16_shiftRight(self: i16, other: i16): i16
fn 288 intern fn Bitwise_i32_bitNot(self: i32): i32
fn 289 intern fn Bitwise_i32_bitAnd(self: i32, other: i32): i32
fn 290 intern fn Bitwise_i32_bitOr(self: i32, other: i32): i32
fn 291 intern fn Bitwise_i32_xor(self: i32, other: i32): i32
fn 292 intern fn Bitwise_i32_shiftLeft(self: i32, other: i32): i32
fn 293 intern fn Bitwise_i32_shiftRight(self: i32, other: i32): i32
fn 294 intern fn Bitwise_i64_bitNot(self: i64): i64
fn 295 intern fn Bitwise_i64_bitAnd(self: i64, other: i64): i64
fn 296 intern fn Bitwise_i64_bitOr(self: i64, other: i64): i64
fn 297 intern fn Bitwise_i64_xor(self: i64, other: i64): i64
fn 298 intern fn Bitwise_i64_shiftLeft(self: i64, other: i64): i64
fn 299 intern fn Bitwise_i64_shiftRight(self: i64, other: i64): i64
fn 300 fn regionSizeBytes(self: Arena): u64
fn 301 fn alignTo(baseAddress: u64, alignBytes: u64): u64
fn 302 fn new(id: string, initialMb: u64): Arena
fn 303 fn pushRaw(self: Arena*, size: u64, align: u64): Pointer
fn 304 fn push[T](self: Arena*, t: T): T*
fn 305 fn pushBytes(self: Arena*, count: u64): Pointer
fn 306 fn freeAll(self: Arena*): unit
fn 307 fn initDefault(): Allocator
fn 308 fn tempArena(self: Allocator): Arena*
fn 309 fn make(start: i64, end: i64): IntRange
fn 310 fn upTo(end: i64): IntRange
fn 311 fn make(range: IntRange): IntRangeIterator
fn 312 fn position(self: IntRangeIterator): i64
fn 313 fn size(self: IntRangeIterator): i64
fn 314 fn stepBy(self: IntRangeIterator*, n: u64): bool
fn 315 fn current(self: IntRangeIterator): i64
fn 316 fn Iterator_IntRangeIterator_next(self: IntRangeIterator*): Opt[i64]
fn 317 fn Iterator_IntRangeIterator_sizeHint(self: IntRangeIterator): {atLeast: u64, atMost: Opt[u64]}
fn 318 fn Iterator_IntRangeIterator_advanceBy(self: IntRangeIterator*, n: u64): unit
fn 319 fn Iterator_IntRangeIterator_nth(self: IntRangeIterator*, n: u64): Opt[i64]
fn 320 fn Iterable_IntRange_iterator(self: IntRange): IntRangeIterator
fn 321 fn testBasics(): i64
fn 322 fn testCoalesceAccessor(): unit
fn 323 fn testComplex(): i64
fn 324 fn noNum(): Opt[i64]
fn 325 fn someNum(): Opt[i64]
fn 326 fn optElseOperator(): unit
fn 327 fn blanketImpls(): unit
fn 328 fn main(): i64
fn 329 intern fn sizeOf_spec_T_1(): u64
fn 330 fn fromRawParts_spec_Pointer_1(len: u64, data: Pointer): Buffer[Pointer]
fn 331 fn withCapacity_spec_string_1(cap: u64): List[string]
fn 332 fn Iterable_Buffer[Pointer]_iterator(self: Buffer[Pointer]): BufferIterator[Pointer]
fn 333 fn Iterator_BufferIterator[Pointer]_next(self: BufferIterator[Pointer]*): Opt[Pointer]
fn 334 fn Iterator_BufferIterator[Pointer]_sizeHint(self: BufferIterator[Pointer]): {atLeast: u64, atMost: Opt[u64]}
fn 335 fn Iterator_BufferIterator[Pointer]_advanceBy(self: BufferIterator[Pointer]*, n: u64): unit
fn 336 fn Iterator_BufferIterator[Pointer]_nth(self: BufferIterator[Pointer]*, n: u64): Opt[Pointer]
fn 337 fn Unwrap_Opt[Pointer]_hasValue(self: Opt[Pointer]): bool
fn 338 fn Unwrap_Opt[Pointer]_unwrap(self: Opt[Pointer]): Pointer
fn 339 fn Unwrap_Opt[Pointer]_make(t: Pointer): Opt[Pointer]
fn 340 fn get_spec_Pointer_1(self: Buffer[Pointer], index: u64): Pointer
fn 341 fn push_spec_string_1(self: List[string]*, elem: string): unit
fn 342 fn isSome_spec_Pointer_1(self: Opt[Pointer]): bool
fn 343 fn toBuffer_spec_string_1(self: List[string]): Buffer[string]
fn 344 fn _allocate_spec_u8_1(count: u64): Buffer[u8]
fn 345 fn get_spec_u8_2(self: Buffer[u8], index: u64): u8
fn 346 fn set_spec_u8_1(self: Buffer[u8], index: u64, elem: u8): unit
fn 347 fn fromRawParts_spec_char_2(len: u64, data: Pointer): Buffer[char]
fn 348 fn withCapacity_spec_char_2(cap: u64): List[char]
fn 349 fn push_spec_char_2(self: List[char]*, elem: char): unit
fn 350 fn reversed_spec_char_1(self: List[char]): List[char]
fn 351 fn reverse_spec_char_1(self: List[char]*): unit
fn 352 fn toBuffer_spec_char_2(self: List[char]): Buffer[char]
fn 353 fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool
fn 354 fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F)
fn 355 fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)]
fn 356 fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool
fn 357 fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S)
fn 358 fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)]
fn 359 fn Try_Result[S, F]_makeError(e: F): Result[S, F]
fn 360 fn Try_Result[S, F]_makeOk(t: S): Result[S, F]
fn 361 fn Try_Result[S, F]_isOk(self: Result[S, F]): bool
fn 362 fn Try_Result[S, F]_getError(self: Result[S, F]): F
fn 363 fn Try_Result[S, F]_getOk(self: Result[S, F]): S
fn 364 intern fn sizeOfStride_spec_T_1(): u64
fn 365 fn bufferLenBytes_spec_T_1(count: u64): u64
fn 366 fn bufferLenBytes_spec_T_2(count: u64): u64
fn 367 fn dataPointer_spec_T_1(self: Buffer[T]): Pointer
fn 368 fn _allocate_spec_T_2(count: u64): Buffer[T]
fn 369 fn _copyFrom_spec_T_1(source: Buffer[T], dest: Buffer[T], count: u64): unit
fn 370 fn bufferLenBytes_spec_T_3(count: u64): u64
fn 371 fn _allocate_spec_T_3(count: u64): Buffer[T]
fn 372 fn _allocate_spec_T_4(count: u64): Buffer[T]
fn 373 fn set_spec_T_2(self: Buffer[T], index: u64, elem: T): unit
fn 374 fn empty_spec_T_1(): Buffer[T]
fn 375 fn getRef_spec_T_1(self: Buffer[T], index: u64): T*
fn 376 fn slice_spec_T_1(self: Buffer[T], start: u64, end: u64): Buffer[T]
fn 377 fn slice_spec_T_2(self: Buffer[T], start: u64, end: u64): Buffer[T]
fn 378 fn dataPointer_spec_T_2(self: Buffer[T]): Pointer
fn 379 intern fn refAtIndex_spec_T_1(self: Pointer, index: u64): T*
fn 380 fn getRef_spec_T_2(self: Buffer[T], index: u64): T*
fn 381 fn getRef_spec_T_3(self: Buffer[T], index: u64): T*
fn 382 fn lenBytes_spec_T_1(self: Buffer[T]): u64
fn 383 fn dataPointer_spec_T_3(self: Buffer[T]): Pointer
fn 384 fn isEmpty_spec_T_1(self: Buffer[T]): bool
fn 385 fn getRef_spec_T_4(self: Buffer[T], index: u64): T*
fn 386 fn firstRef_spec_T_1(self: Buffer[T]): Opt[T*]
fn 387 fn isEmpty_spec_T_2(self: Buffer[T]): bool
fn 388 fn getRef_spec_T_5(self: Buffer[T], index: u64): T*
fn 389 fn lastRef_spec_T_1(self: Buffer[T]): Opt[T*]
fn 390 fn _enlargedClone_spec_T_1(self: Buffer[T], newCount: u64): Buffer[T]
fn 391 fn slice_spec_T_3(self: Buffer[T], start: u64, end: u64): Buffer[T]
fn 392 fn _copyFrom_spec_T_2(source: Buffer[T], dest: Buffer[T], count: u64): unit
fn 393 fn getRef_spec_T_6(self: Buffer[T], index: u64): T*
fn 394 fn wrapBuffer_spec_T_1(buffer: Buffer[T]): List[T]
fn 395 fn sort_spec_T_1(input: List[T]*): unit
fn 396 fn toBuffer_spec_T_3(self: List[T]): Buffer[T]
fn 397 fn dataPointer_spec_u8_4(self: Buffer[u8]): Pointer
fn 398 fn lenBytes_spec_u8_2(self: Buffer[u8]): u64
fn 399 fn dataPointer_spec_char_5(self: Buffer[char]): Pointer
fn 400 fn lenBytes_spec_char_3(self: Buffer[char]): u64
fn 401 fn dataPointer_spec_i64_6(self: Buffer[i64]): Pointer
fn 402 fn lenBytes_spec_i64_4(self: Buffer[i64]): u64
fn 403 fn get_spec_T_3(self: Buffer[T], index: u64): T
fn 404 fn some_spec_T_1(value: T): Opt[T]
fn 405 fn some_spec_u64_2(value: u64): Opt[u64]
fn 406 fn fromBuffer_spec_T_1(buf: Buffer[T]): BufferIterator[T]
fn 407 fn opt_equals_spec_T_1(a: Opt[T], b: Opt[T]): bool
fn 408 fn get_spec_T_1(self: Opt[T]): T
fn 409 fn withCapacity_spec_T_3(cap: u64): List[T]
fn 410 fn filled_spec_T_1(size: u64, value: T): Buffer[T]
fn 411 fn _allocate_spec_T_5(count: u64): Buffer[T]
fn 412 fn cap_spec_T_1(self: List[T]): u64
fn 413 fn _enlargedClone_spec_T_2(self: Buffer[T], newCount: u64): Buffer[T]
fn 414 fn filled_spec_T_1(size: u64, value: T): List[T]
fn 415 fn slice_spec_T_4(self: Buffer[T], start: u64, end: u64): Buffer[T]
fn 416 fn getRef_spec_T_7(self: Buffer[T], index: u64): T*
fn 417 fn set_spec_T_3(self: Buffer[T], index: u64, elem: T): unit
fn 418 fn get_spec_T_4(self: Buffer[T], index: u64): T
fn 419 fn get_spec_T_5(self: Buffer[T], index: u64): T
fn 420 intern fn sizeOf_spec_T_2(): u64
fn 421 fn isEmpty_spec_T_3(self: Buffer[T]): bool
fn 422 fn cap_spec_T_2(self: List[T]): u64
fn 423 fn reserve_spec_T_1(self: List[T]*, count: u64): unit
fn 424 fn cloned_spec_T_1(self: Buffer[T]): Buffer[T]
fn 425 fn cap_spec_T_3(self: List[T]): u64
fn 426 fn _grow_spec_T_1(self: List[T]*): unit
fn 427 fn set_spec_T_1(self: List[T], index: u64, elem: T): unit
fn 428 fn empty_spec_T_2(): Buffer[T]
fn 429 fn slice_spec_T_5(self: Buffer[T], start: u64, end: u64): Buffer[T]
fn 430 fn nonEmpty_spec_T_1(self: List[T]): bool
fn 431 fn getRef_spec_T_1(self: List[T], index: u64): T*
fn 432 fn firstRef_spec_T_1(self: List[T]): Opt[T*]
fn 433 fn nonEmpty_spec_T_2(self: List[T]): bool
fn 434 fn getRef_spec_T_2(self: List[T], index: u64): T*
fn 435 fn lastRef_spec_T_1(self: List[T]): Opt[T*]
fn 436 fn swap_spec_T_1(self: List[T]*, indexA: u64, indexB: u64): unit
fn 437 fn cloned_spec_T_1(self: List[T]): List[T]
fn 438 fn reverse_spec_T_2(self: List[T]*): unit
fn 439 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 440 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 441 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 442 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 443 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 444 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 445 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 446 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 447 fn push_spec_T_3(self: List[T]*, elem: T): unit
fn 448 fn isSome_spec_T_2(self: Opt[T]): bool
fn 449 fn getRef_spec_T_3(self: List[T], index: u64): T*
fn 450 fn get_spec_T_1(self: List[T], index: u64): T
fn 451 fn withCapacity_spec_T_4(cap: u64): List[T]
fn 452 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 453 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 454 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 455 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 456 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 457 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 458 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 459 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 460 fn push_spec_T_4(self: List[T]*, elem: T): unit
fn 461 fn isSome_spec_T_3(self: Opt[T]): bool
fn 462 fn sort_spec_T_2(input: List[T]*): unit
fn 463 fn set_spec_T_2(self: List[T], index: u64, elem: T): unit
fn 464 fn cloned_spec_T_2(self: List[T]): List[T]
fn 465 fn sort_spec_T_3(input: List[T]*): unit
fn 466 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 467 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 468 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 469 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 470 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 471 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 472 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 473 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 474 fn isSome_spec_T_4(self: Opt[T]): bool
fn 475 fn toBuffer_spec_u8_4(self: List[u8]): Buffer[u8]
fn 476 fn toBuffer_spec_i64_5(self: List[i64]): Buffer[i64]
fn 477 fn get_spec_T_2(self: List[T], index: u64): T
fn 478 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 479 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 480 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 481 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 482 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 483 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 484 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 485 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 486 fn isSome_spec_T_5(self: Opt[T]): bool
fn 487 fn toBuffer_spec_T_6(self: List[T]): Buffer[T]
fn 488 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 489 fn get_spec_char_6(self: Buffer[char], index: u64): char
fn 490 fn fromRawParts_spec_u8_3(len: u64, data: Pointer): Buffer[u8]
fn 491 fn cloned_spec_char_2(self: Buffer[char]): Buffer[char]
fn 492 fn wrapBuffer_spec_char_2(buffer: Buffer[char]): List[char]
fn 493 fn cloned_spec_u8_3(self: Buffer[u8]): Buffer[u8]
fn 494 fn concat_spec_char_1(self: Buffer[char], other: Buffer[char]): Buffer[char]
fn 495 fn _enlargedClone_spec_char_3(self: Buffer[char], newCount: u64): Buffer[char]
fn 496 fn set_spec_char_4(self: Buffer[char], index: u64, elem: char): unit
fn 497 fn empty_spec_List[char]_1(): List[List[char]]
fn 498 fn empty_spec_char_2(): List[char]
fn 499 fn Unwrap_Opt[char]_hasValue(self: Opt[char]): bool
fn 500 fn Unwrap_Opt[char]_unwrap(self: Opt[char]): char
fn 501 fn Unwrap_Opt[char]_make(t: char): Opt[char]
fn 502 fn nonEmpty_spec_char_3(self: List[char]): bool
fn 503 fn push_spec_List[char]_5(self: List[List[char]]*, elem: List[char]): unit
fn 504 fn isSome_spec_char_6(self: Opt[char]): bool
fn 505 fn Iterable_List[List[char]]_iterator(self: List[List[char]]): BufferIterator[List[char]]
fn 506 fn Iterator_BufferIterator[List[char]]_next(self: BufferIterator[List[char]]*): Opt[List[char]]
fn 507 fn Iterator_BufferIterator[List[char]]_sizeHint(self: BufferIterator[List[char]]): {atLeast: u64, atMost: Opt[u64]}
fn 508 fn Iterator_BufferIterator[List[char]]_advanceBy(self: BufferIterator[List[char]]*, n: u64): unit
fn 509 fn Iterator_BufferIterator[List[char]]_nth(self: BufferIterator[List[char]]*, n: u64): Opt[List[char]]
fn 510 fn Unwrap_Opt[List[char]]_hasValue(self: Opt[List[char]]): bool
fn 511 fn Unwrap_Opt[List[char]]_unwrap(self: Opt[List[char]]): List[char]
fn 512 fn Unwrap_Opt[List[char]]_make(t: List[char]): Opt[List[char]]
fn 513 fn isSome_spec_List[char]_7(self: Opt[List[char]]): bool
fn 514 fn slice_spec_char_6(self: Buffer[char], start: u64, end: u64): Buffer[char]
fn 515 intern fn refAtIndex_spec_char_2(self: Pointer, index: u64): char*
fn 516 fn some_spec_i64_3(value: i64): Opt[i64]
fn 517 fn fromBuffer_spec_char_2(buf: Buffer[char]): BufferIterator[char]
fn 518 fn withCapacity_spec_enum Char(char) | String(string)_5(cap: u64): List[enum Char(char) | String(string)]
fn 519 fn new_spec_List[enum Char(char) | String(string)]_1(value: List[enum Char(char) | String(string)]): List[enum Char(char) | String(string)]*
fn 520 fn push_spec_enum Char(char) | String(string)_6(self: List[enum Char(char) | String(string)]*, elem: enum Char(char) | String(string)): unit
fn 521 fn Iterable_List[enum Char(char) | String(string)]_iterator(self: List[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)]
fn 522 fn Iterator_BufferIterator[enum Char(char) | String(string)]_next(self: BufferIterator[enum Char(char) | String(string)]*): Opt[enum Char(char) | String(string)]
fn 523 fn Iterator_BufferIterator[enum Char(char) | String(string)]_sizeHint(self: BufferIterator[enum Char(char) | String(string)]): {atLeast: u64, atMost: Opt[u64]}
fn 524 fn Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): unit
fn 525 fn Iterator_BufferIterator[enum Char(char) | String(string)]_nth(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): Opt[enum Char(char) | String(string)]
fn 526 fn Unwrap_Opt[enum Char(char) | String(string)]_hasValue(self: Opt[enum Char(char) | String(string)]): bool
fn 527 fn Unwrap_Opt[enum Char(char) | String(string)]_unwrap(self: Opt[enum Char(char) | String(string)]): enum Char(char) | String(string)
fn 528 fn Unwrap_Opt[enum Char(char) | String(string)]_make(t: enum Char(char) | String(string)): Opt[enum Char(char) | String(string)]
fn 529 fn isSome_spec_enum Char(char) | String(string)_8(self: Opt[enum Char(char) | String(string)]): bool
fn 530 intern fn sizeOf_spec_T_3(): u64
fn 531 intern fn alignOf_spec_T_1(): u64
fn 532 fn withCapacity_spec_Arena_6(cap: u64): List[Arena]
fn 533 fn push_spec_Arena_7(self: List[Arena]*, elem: Arena): unit
fn 534 fn withCapacity_spec_ObjectPool_7(cap: u64): List[ObjectPool]
fn 535 fn getRef_spec_Arena_4(self: List[Arena], index: u64): Arena*
fn 536 fn Unwrap_Opt[PointMaybeY]_hasValue(self: Opt[PointMaybeY]): bool
fn 537 fn Unwrap_Opt[PointMaybeY]_unwrap(self: Opt[PointMaybeY]): PointMaybeY
fn 538 fn Unwrap_Opt[PointMaybeY]_make(t: PointMaybeY): Opt[PointMaybeY]
fn 539 fn Unwrap_Opt[i64]_hasValue(self: Opt[i64]): bool
fn 540 fn Unwrap_Opt[i64]_unwrap(self: Opt[i64]): i64
fn 541 fn Unwrap_Opt[i64]_make(t: i64): Opt[i64]
fn 542 fn isSome_spec_bool_9(self: Opt[bool]): bool
fn 543 fn isSome_spec_i64_10(self: Opt[i64]): bool
fn 544 intern fn typeId_spec_i64_1(): u64
fn 545 fn isSome_spec_{name: string, age: i64}_11(self: Opt[{name: string, age: i64}]): bool
fn 546 fn get_spec_{name: string, age: i64}_2(self: Opt[{name: string, age: i64}]): {name: string, age: i64}
fn 547 fn Unwrap_Opt[string]_hasValue(self: Opt[string]): bool
fn 548 fn Unwrap_Opt[string]_unwrap(self: Opt[string]): string
fn 549 fn Unwrap_Opt[string]_make(t: string): Opt[string]
fn 550 fn withCapacity_spec_Opt[WeirdPoint]_8(cap: u64): List[Opt[WeirdPoint]]
fn 551 fn push_spec_Opt[WeirdPoint]_8(self: List[Opt[WeirdPoint]]*, elem: Opt[WeirdPoint]): unit
fn 552 fn get_spec_Opt[WeirdPoint]_3(self: List[Opt[WeirdPoint]], index: u64): Opt[WeirdPoint]
fn 553 fn Equals_Opt[i64]_equals(self: Opt[i64], other: Opt[i64]): bool
fn 554 fn some_spec_bool_4(value: bool): Opt[bool]
fn 555 fn Unwrap_Opt[bool]_hasValue(self: Opt[bool]): bool
fn 556 fn Unwrap_Opt[bool]_unwrap(self: Opt[bool]): bool
fn 557 fn Unwrap_Opt[bool]_make(t: bool): Opt[bool]
fn 558 fn get_spec_T_7(self: Buffer[T], index: u64): T
fn 559 fn some_spec_T_5(value: T): Opt[T]
fn 560 fn get_spec_T_8(self: Buffer[T], index: u64): T
fn 561 fn some_spec_T_6(value: T): Opt[T]
fn 562 fn some_spec_char_7(value: char): Opt[char]
fn 563 fn _allocate_spec_string_6(count: u64): Buffer[string]
fn 564 fn fromBuffer_spec_Pointer_3(buf: Buffer[Pointer]): BufferIterator[Pointer]
fn 565 fn some_spec_Pointer_8(value: Pointer): Opt[Pointer]
fn 566 fn get_spec_Pointer_3(self: Opt[Pointer]): Pointer
fn 567 fn getRef_spec_Pointer_8(self: Buffer[Pointer], index: u64): Pointer*
fn 568 fn cap_spec_string_4(self: List[string]): u64
fn 569 fn _grow_spec_string_2(self: List[string]*): unit
fn 570 fn set_spec_string_3(self: List[string], index: u64, elem: string): unit
fn 571 fn slice_spec_string_7(self: Buffer[string], start: u64, end: u64): Buffer[string]
fn 572 fn bufferLenBytes_spec_u8_4(count: u64): u64
fn 573 fn getRef_spec_u8_9(self: Buffer[u8], index: u64): u8*
fn 574 fn _allocate_spec_char_7(count: u64): Buffer[char]
fn 575 fn cap_spec_char_5(self: List[char]): u64
fn 576 fn _grow_spec_char_3(self: List[char]*): unit
fn 577 fn set_spec_char_4(self: List[char], index: u64, elem: char): unit
fn 578 fn cloned_spec_char_3(self: List[char]): List[char]
fn 579 fn swap_spec_char_2(self: List[char]*, indexA: u64, indexB: u64): unit
fn 580 fn get_spec_Result[S, F].Err(F)_4(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F)
fn 581 fn get_spec_Result[S, F].Ok(S)_5(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S)
fn 582 fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool
fn 583 fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F)
fn 584 fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)]
fn 585 fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool
fn 586 fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S)
fn 587 fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)]
fn 588 intern fn sizeOfStride_spec_T_2(): u64
fn 589 intern fn sizeOfStride_spec_T_3(): u64
fn 590 intern fn sizeOfStride_spec_T_4(): u64
fn 591 fn bufferLenBytes_spec_char_5(count: u64): u64
fn 592 fn bufferLenBytes_spec_i64_6(count: u64): u64
fn 593 fn toBuffer_spec_T_7(self: List[T]): Buffer[T]
fn 594 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 595 fn get_spec_T_9(self: Buffer[T], index: u64): T
fn 596 fn some_spec_T_9(value: T): Opt[T]
fn 597 fn get_spec_T_6(self: Opt[T]): T
fn 598 fn toBuffer_spec_T_8(self: List[T]): Buffer[T]
fn 599 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 600 fn get_spec_T_10(self: Buffer[T], index: u64): T
fn 601 fn some_spec_T_10(value: T): Opt[T]
fn 602 fn get_spec_T_7(self: Opt[T]): T
fn 603 fn toBuffer_spec_T_9(self: List[T]): Buffer[T]
fn 604 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 605 fn get_spec_T_11(self: Buffer[T], index: u64): T
fn 606 fn some_spec_T_11(value: T): Opt[T]
fn 607 fn get_spec_T_8(self: Opt[T]): T
fn 608 fn slice_spec_u8_8(self: Buffer[u8], start: u64, end: u64): Buffer[u8]
fn 609 fn slice_spec_i64_9(self: Buffer[i64], start: u64, end: u64): Buffer[i64]
fn 610 fn toBuffer_spec_T_10(self: List[T]): Buffer[T]
fn 611 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 612 fn get_spec_T_12(self: Buffer[T], index: u64): T
fn 613 fn some_spec_T_12(value: T): Opt[T]
fn 614 fn get_spec_T_9(self: Opt[T]): T
fn 615 fn fromBuffer_spec_T_4(buf: Buffer[T]): BufferIterator[T]
fn 616 fn getRef_spec_char_10(self: Buffer[char], index: u64): char*
fn 617 fn _copyFrom_spec_char_3(source: Buffer[char], dest: Buffer[char], count: u64): unit
fn 618 fn withCapacity_spec_List[char]_9(cap: u64): List[List[char]]
fn 619 fn get_spec_char_10(self: Opt[char]): char
fn 620 fn cap_spec_List[char]_6(self: List[List[char]]): u64
fn 621 fn _grow_spec_List[char]_4(self: List[List[char]]*): unit
fn 622 fn set_spec_List[char]_5(self: List[List[char]], index: u64, elem: List[char]): unit
fn 623 fn toBuffer_spec_List[char]_11(self: List[List[char]]): Buffer[List[char]]
fn 624 fn Iterable_Buffer[List[char]]_iterator(self: Buffer[List[char]]): BufferIterator[List[char]]
fn 625 fn get_spec_List[char]_13(self: Buffer[List[char]], index: u64): List[char]
fn 626 fn some_spec_List[char]_13(value: List[char]): Opt[List[char]]
fn 627 fn get_spec_List[char]_11(self: Opt[List[char]]): List[char]
fn 628 fn empty_spec_char_3(): Buffer[char]
fn 629 fn _allocate_spec_enum Char(char) | String(string)_8(count: u64): Buffer[enum Char(char) | String(string)]
fn 630 intern fn sizeOf_spec_List[enum Char(char) | String(string)]_4(): u64
fn 631 fn cap_spec_enum Char(char) | String(string)_7(self: List[enum Char(char) | String(string)]): u64
fn 632 fn _grow_spec_enum Char(char) | String(string)_5(self: List[enum Char(char) | String(string)]*): unit
fn 633 fn set_spec_enum Char(char) | String(string)_6(self: List[enum Char(char) | String(string)], index: u64, elem: enum Char(char) | String(string)): unit
fn 634 fn toBuffer_spec_enum Char(char) | String(string)_12(self: List[enum Char(char) | String(string)]): Buffer[enum Char(char) | String(string)]
fn 635 fn Iterable_Buffer[enum Char(char) | String(string)]_iterator(self: Buffer[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)]
fn 636 fn get_spec_enum Char(char) | String(string)_14(self: Buffer[enum Char(char) | String(string)], index: u64): enum Char(char) | String(string)
fn 637 fn some_spec_enum Char(char) | String(string)_14(value: enum Char(char) | String(string)): Opt[enum Char(char) | String(string)]
fn 638 fn get_spec_enum Char(char) | String(string)_12(self: Opt[enum Char(char) | String(string)]): enum Char(char) | String(string)
fn 639 fn _allocate_spec_Arena_9(count: u64): Buffer[Arena]
fn 640 fn cap_spec_Arena_8(self: List[Arena]): u64
fn 641 fn _grow_spec_Arena_6(self: List[Arena]*): unit
fn 642 fn set_spec_Arena_7(self: List[Arena], index: u64, elem: Arena): unit
fn 643 fn _allocate_spec_ObjectPool_10(count: u64): Buffer[ObjectPool]
fn 644 fn getRef_spec_Arena_11(self: Buffer[Arena], index: u64): Arena*
fn 645 fn get_spec_PointMaybeY_13(self: Opt[PointMaybeY]): PointMaybeY
fn 646 fn get_spec_i64_14(self: Opt[i64]): i64
fn 647 fn get_spec_string_15(self: Opt[string]): string
fn 648 fn _allocate_spec_Opt[WeirdPoint]_11(count: u64): Buffer[Opt[WeirdPoint]]
fn 649 fn cap_spec_Opt[WeirdPoint]_9(self: List[Opt[WeirdPoint]]): u64
fn 650 fn _grow_spec_Opt[WeirdPoint]_7(self: List[Opt[WeirdPoint]]*): unit
fn 651 fn set_spec_Opt[WeirdPoint]_8(self: List[Opt[WeirdPoint]], index: u64, elem: Opt[WeirdPoint]): unit
fn 652 fn get_spec_Opt[WeirdPoint]_15(self: Buffer[Opt[WeirdPoint]], index: u64): Opt[WeirdPoint]
fn 653 fn opt_equals_spec_i64_2(a: Opt[i64], b: Opt[i64]): bool
fn 654 fn get_spec_bool_16(self: Opt[bool]): bool
fn 655 fn bufferLenBytes_spec_string_7(count: u64): u64
fn 656 fn dataPointer_spec_Pointer_7(self: Buffer[Pointer]): Pointer
fn 657 intern fn refAtIndex_spec_Pointer_3(self: Pointer, index: u64): Pointer*
fn 658 intern fn sizeOf_spec_string_5(): u64
fn 659 fn isEmpty_spec_string_4(self: Buffer[string]): bool
fn 660 fn reserve_spec_string_2(self: List[string]*, count: u64): unit
fn 661 fn set_spec_string_5(self: Buffer[string], index: u64, elem: string): unit
fn 662 fn empty_spec_string_4(): Buffer[string]
fn 663 fn getRef_spec_string_12(self: Buffer[string], index: u64): string*
fn 664 intern fn sizeOfStride_spec_u8_5(): u64
fn 665 intern fn refAtIndex_spec_u8_4(self: Pointer, index: u64): u8*
fn 666 intern fn sizeOf_spec_char_6(): u64
fn 667 fn isEmpty_spec_char_5(self: Buffer[char]): bool
fn 668 fn reserve_spec_char_3(self: List[char]*, count: u64): unit
fn 669 fn getRef_spec_char_5(self: List[char], index: u64): char*
fn 670 fn get_spec_Result[S, F].Err(F)_17(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F)
fn 671 fn get_spec_Result[S, F].Ok(S)_18(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S)
fn 672 intern fn sizeOfStride_spec_char_6(): u64
fn 673 intern fn sizeOfStride_spec_i64_7(): u64
fn 674 fn fromBuffer_spec_T_5(buf: Buffer[T]): BufferIterator[T]
fn 675 fn fromBuffer_spec_T_6(buf: Buffer[T]): BufferIterator[T]
fn 676 fn fromBuffer_spec_T_7(buf: Buffer[T]): BufferIterator[T]
fn 677 fn empty_spec_u8_5(): Buffer[u8]
fn 678 fn empty_spec_i64_6(): Buffer[i64]
fn 679 fn getRef_spec_i64_13(self: Buffer[i64], index: u64): i64*
fn 680 fn fromBuffer_spec_T_8(buf: Buffer[T]): BufferIterator[T]
fn 681 fn _allocate_spec_List[char]_12(count: u64): Buffer[List[char]]
fn 682 intern fn sizeOf_spec_List[char]_7(): u64
fn 683 fn isEmpty_spec_List[char]_6(self: Buffer[List[char]]): bool
fn 684 fn reserve_spec_List[char]_4(self: List[List[char]]*, count: u64): unit
fn 685 fn set_spec_List[char]_6(self: Buffer[List[char]], index: u64, elem: List[char]): unit
fn 686 fn slice_spec_List[char]_10(self: Buffer[List[char]], start: u64, end: u64): Buffer[List[char]]
fn 687 fn fromBuffer_spec_List[char]_9(buf: Buffer[List[char]]): BufferIterator[List[char]]
fn 688 fn getRef_spec_List[char]_14(self: Buffer[List[char]], index: u64): List[char]*
fn 689 fn bufferLenBytes_spec_enum Char(char) | String(string)_8(count: u64): u64
fn 690 intern fn sizeOf_spec_enum Char(char) | String(string)_8(): u64
fn 691 fn isEmpty_spec_enum Char(char) | String(string)_7(self: Buffer[enum Char(char) | String(string)]): bool
fn 692 fn reserve_spec_enum Char(char) | String(string)_5(self: List[enum Char(char) | String(string)]*, count: u64): unit
fn 693 fn set_spec_enum Char(char) | String(string)_7(self: Buffer[enum Char(char) | String(string)], index: u64, elem: enum Char(char) | String(string)): unit
fn 694 fn slice_spec_enum Char(char) | String(string)_11(self: Buffer[enum Char(char) | String(string)], start: u64, end: u64): Buffer[enum Char(char) | String(string)]
fn 695 fn fromBuffer_spec_enum Char(char) | String(string)_10(buf: Buffer[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)]
fn 696 fn getRef_spec_enum Char(char) | String(string)_15(self: Buffer[enum Char(char) | String(string)], index: u64): enum Char(char) | String(string)*
fn 697 fn bufferLenBytes_spec_Arena_9(count: u64): u64
fn 698 intern fn sizeOf_spec_Arena_9(): u64
fn 699 fn isEmpty_spec_Arena_8(self: Buffer[Arena]): bool
fn 700 fn reserve_spec_Arena_6(self: List[Arena]*, count: u64): unit
fn 701 fn set_spec_Arena_8(self: Buffer[Arena], index: u64, elem: Arena): unit
fn 702 fn bufferLenBytes_spec_ObjectPool_10(count: u64): u64
fn 703 fn dataPointer_spec_Arena_8(self: Buffer[Arena]): Pointer
fn 704 intern fn refAtIndex_spec_Arena_5(self: Pointer, index: u64): Arena*
fn 705 fn bufferLenBytes_spec_Opt[WeirdPoint]_11(count: u64): u64
fn 706 intern fn sizeOf_spec_Opt[WeirdPoint]_10(): u64
fn 707 fn isEmpty_spec_Opt[WeirdPoint]_9(self: Buffer[Opt[WeirdPoint]]): bool
fn 708 fn reserve_spec_Opt[WeirdPoint]_7(self: List[Opt[WeirdPoint]]*, count: u64): unit
fn 709 fn set_spec_Opt[WeirdPoint]_9(self: Buffer[Opt[WeirdPoint]], index: u64, elem: Opt[WeirdPoint]): unit
fn 710 fn getRef_spec_Opt[WeirdPoint]_16(self: Buffer[Opt[WeirdPoint]], index: u64): Opt[WeirdPoint]*
fn 711 intern fn sizeOfStride_spec_string_8(): u64
fn 712 fn _enlargedClone_spec_string_4(self: Buffer[string], newCount: u64): Buffer[string]
fn 713 fn dataPointer_spec_string_9(self: Buffer[string]): Pointer
fn 714 intern fn refAtIndex_spec_string_6(self: Pointer, index: u64): string*
fn 715 fn _allocate_spec_i64_13(count: u64): Buffer[i64]
fn 716 intern fn refAtIndex_spec_i64_7(self: Pointer, index: u64): i64*
fn 717 fn bufferLenBytes_spec_List[char]_12(count: u64): u64
fn 718 fn _enlargedClone_spec_List[char]_5(self: Buffer[List[char]], newCount: u64): Buffer[List[char]]
fn 719 fn empty_spec_List[char]_7(): Buffer[List[char]]
fn 720 fn dataPointer_spec_List[char]_10(self: Buffer[List[char]]): Pointer
fn 721 intern fn refAtIndex_spec_List[char]_8(self: Pointer, index: u64): List[char]*
fn 722 intern fn sizeOfStride_spec_enum Char(char) | String(string)_9(): u64
fn 723 fn _enlargedClone_spec_enum Char(char) | String(string)_6(self: Buffer[enum Char(char) | String(string)], newCount: u64): Buffer[enum Char(char) | String(string)]
fn 724 fn empty_spec_enum Char(char) | String(string)_8(): Buffer[enum Char(char) | String(string)]
fn 725 fn dataPointer_spec_enum Char(char) | String(string)_11(self: Buffer[enum Char(char) | String(string)]): Pointer
fn 726 intern fn refAtIndex_spec_enum Char(char) | String(string)_9(self: Pointer, index: u64): enum Char(char) | String(string)*
fn 727 intern fn sizeOfStride_spec_Arena_10(): u64
fn 728 fn _enlargedClone_spec_Arena_7(self: Buffer[Arena], newCount: u64): Buffer[Arena]
fn 729 intern fn sizeOfStride_spec_ObjectPool_11(): u64
fn 730 intern fn sizeOfStride_spec_Opt[WeirdPoint]_12(): u64
fn 731 fn _enlargedClone_spec_Opt[WeirdPoint]_8(self: Buffer[Opt[WeirdPoint]], newCount: u64): Buffer[Opt[WeirdPoint]]
fn 732 fn dataPointer_spec_Opt[WeirdPoint]_12(self: Buffer[Opt[WeirdPoint]]): Pointer
fn 733 intern fn refAtIndex_spec_Opt[WeirdPoint]_10(self: Pointer, index: u64): Opt[WeirdPoint]*
fn 734 fn _copyFrom_spec_string_4(source: Buffer[string], dest: Buffer[string], count: u64): unit
fn 735 intern fn sizeOfStride_spec_List[char]_13(): u64
fn 736 fn _copyFrom_spec_List[char]_5(source: Buffer[List[char]], dest: Buffer[List[char]], count: u64): unit
fn 737 fn _copyFrom_spec_enum Char(char) | String(string)_6(source: Buffer[enum Char(char) | String(string)], dest: Buffer[enum Char(char) | String(string)], count: u64): unit
fn 738 fn _copyFrom_spec_Arena_7(source: Buffer[Arena], dest: Buffer[Arena], count: u64): unit
fn 739 fn _copyFrom_spec_Opt[WeirdPoint]_8(source: Buffer[Opt[WeirdPoint]], dest: Buffer[Opt[WeirdPoint]], count: u64): unit
--- Ability Impls ---
impls for u8
	concrete   Comparable for u8 {
		fn Comparable_u8_compare(self: u8, other: u8): Ordering return(switch  {
  (self == other) -> .Equal,
  (true) -> switch  {
  (self > other) -> .Greater,
  (true) -> .Less
}
})

	concrete   Show for u8 {
		fn Show_u8_show(self: u8): string return(Show_u64_show(self as(iext) u64))

	concrete   Bitwise for u8 {
		intern fn Bitwise_u8_bitNot(self: u8): u8 {no_block}
		intern fn Bitwise_u8_bitAnd(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_bitOr(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_xor(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_shiftLeft(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_shiftRight(self: u8, other: u8): u8 {no_block}

impls for List[Iterable_impl_List[T].'T]({len: u64, buffer: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})})
	blanket    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer_spec_T_6(self)))

impls for Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer_spec_T_8(self))

impls for Opt[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})))
	derived    Unwrap[impl Inner := List[char]] for Opt[List[char]] {
		fn Unwrap_Opt[List[char]]_hasValue(self: Opt[List[char]]): bool return(switch let __match_subject_1231: Opt[List[char]] = self;  {
  let __payload_Some_1232: List[char] = __match_subject_1231.payload[Some]  Some(_)(__match_subject_1231.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[List[char]]_unwrap(self: Opt[List[char]]): List[char] return(get_spec_List[char]_11(self))
		fn Unwrap_Opt[List[char]]_make(t: List[char]): Opt[List[char]] return(.Some(t))

impls for BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})
	derived    Iterator[impl Item := enum Char(char) | String(string)] for BufferIterator[enum Char(char) | String(string)] {
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_next(self: BufferIterator[enum Char(char) | String(string)]*): Opt[enum Char(char) | String(string)] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: enum Char(char) | String(string) = get_spec_enum Char(char) | String(string)_14(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_enum Char(char) | String(string)_14(item)
}: Opt[enum Char(char) | String(string)],
  (true) -> .None
})
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_sizeHint(self: BufferIterator[enum Char(char) | String(string)]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_nth(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): Opt[enum Char(char) | String(string)] {
  Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy(self, n);
  return(Iterator_BufferIterator[enum Char(char) | String(string)]_next(self))
}: Opt[enum Char(char) | String(string)]

impls for string({buffer: Buffer[char]({len: u64, data: char*})})*
	concrete   Iterable[impl Item := charI := BufferIterator[char]] for string* {
		fn Iterable_string*_iterator(self: string*): BufferIterator[char] return(Iterable_string_iterator(self.*))

impls for Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F](enum Ok(Unwrap_impl_Result[S, F].'S) | Err(Unwrap_impl_Result[S, F].'F))
	blanket    Unwrap[impl Inner := S] for Result[S, F] {
		fn Unwrap_Result[S, F]_hasValue(self: Result[S, F]): bool return(switch let __match_subject_581: Result[S, F] = self;  {
  let __payload_Ok_582: S = __match_subject_581.payload[Ok]  Ok(_)(__match_subject_581.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 310u64
}, "Match Error")
})
		fn Unwrap_Result[S, F]_unwrap(self: Result[S, F]): S return(Try_Result[S, F]_getOk(self))
		fn Unwrap_Result[S, F]_make(inner: S): Result[S, F] return(Try_Result[S, F]_makeOk(inner))

	derived    Try[impl T := SE := F] for Result[S, F] {
		fn Try_Result[S, F]_makeError(e: F): Result[S, F] return(.Err(e))
		fn Try_Result[S, F]_makeOk(t: S): Result[S, F] return(.Ok(t))
		fn Try_Result[S, F]_isOk(self: Result[S, F]): bool return(switch let __match_subject_1142: Result[S, F] = self;  {
  let __payload_Ok_1143: S = __match_subject_1142.payload[Ok]  Ok(_)(__match_subject_1142.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 304u64
}, "Match Error")
})
		fn Try_Result[S, F]_getError(self: Result[S, F]): F return(Unwrap_Opt[Result[S, F].Err(F)]_unwrap(if self.is[.Err]() .Some(self as(noop) Result[S, F].Err(F)) else .None).payload[Err])
		fn Try_Result[S, F]_getOk(self: Result[S, F]): S return(Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(if self.is[.Ok]() .Some(self as(noop) Result[S, F].Ok(S)) else .None).payload[Ok])

impls for Buffer[Pointer]({len: u64, data: Pointer*})
	derived    Iterable[impl Item := PointerI := BufferIterator[Pointer]] for Buffer[Pointer] {
		fn Iterable_Buffer[Pointer]_iterator(self: Buffer[Pointer]): BufferIterator[Pointer] return(fromBuffer_spec_Pointer_3(self))

impls for Buffer[char]({len: u64, data: char*})
	concrete   Equals for Buffer[char] {
		fn Equals_Buffer[char]_equals(self: Buffer[char], other: Buffer[char]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> memcmp(dataPointer_spec_char_5(self), dataPointer_spec_char_5(other), lenBytes_spec_char_3(self)) == 0i32
})

impls for Opt.opt_equals.'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Buffer[List.concat.'T]({len: u64, data: List.concat.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer_spec_T_5(self))

impls for i64
	concrete   Show for i64 {
		fn Show_i64_show(self: i64): string {
  switch  {
    (self == 0i64) -> return("0"),
    (true) -> ()
  };
  let neg: bool = self < 0i64;
  let mut remaining: i64 = switch  {
    (neg) -> self * -1i64,
    (true) -> self
  };
  let* buf: List[char]* = withCapacity_spec_char_2(8u64);
  while remaining > 0i64 {
    let d: i64 = remaining % 10i64;
    let c: char = d + 48i64 as(itrunc) u8 as(i8tochar) char;
    push_spec_char_2(buf, c);
    remaining = remaining / 10i64
  }: unit;
  switch  {
    (neg) -> push_spec_char_2(buf, '45'),
    (true) -> ()
  };
  let rev: List[char] = reversed_spec_char_1(buf.*);
  return(wrapList(rev))
}: string

	concrete   Comparable for i64 {
		fn Comparable_i64_compare(self: i64, other: i64): Ordering return(switch  {
  (self == other) -> .Equal,
  (true) -> switch  {
  (self > other) -> .Greater,
  (true) -> .Less
}
})

	concrete   Equals for i64 {
		fn Equals_i64_equals(self: i64, other: i64): bool return(self == other)

	concrete   Bitwise for i64 {
		intern fn Bitwise_i64_bitNot(self: i64): i64 {no_block}
		intern fn Bitwise_i64_bitAnd(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_bitOr(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_xor(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_shiftLeft(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_shiftRight(self: i64, other: i64): i64 {no_block}

impls for u16
	concrete   Bitwise for u16 {
		intern fn Bitwise_u16_bitNot(self: u16): u16 {no_block}
		intern fn Bitwise_u16_bitAnd(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_bitOr(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_xor(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_shiftLeft(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_shiftRight(self: u16, other: u16): u16 {no_block}

impls for BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get_spec_T_8(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_T_6(item)
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for List[Show_impl_List[T].'T]({len: u64, buffer: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})})
	blanket    Show for List[T] {
		fn Show_List[T]_show(self: List[T]): string {
  let b: StringBuilder = new();
  putChar(b, '91');
  {
    let mut itIndex: u64 = 0u64;
    let* __iter_865: BufferIterator[T]* = Iterable_List[T]_iterator(self);
    loop {
      let __next_872: Opt[T] = Iterator_BufferIterator[T]_next(__iter_865);
      if isSome_spec_T_5(__next_872) {
        let s: T = Unwrap_Opt[T]_unwrap(__next_872);
        let __block_expr_val_878: unit = {
          putString(b, Show_T_show(s));
          let last: bool = itIndex == self.len - 1u64;
          switch  {
            (negated(last)) -> putString(b, ","),
            (true) -> ()
          }
        }: unit
      }: unit else break(());
      itIndex = itIndex + 1u64
    }: unit
  }: unit;
  putChar(b, '93');
  return(build(b))
}: string

	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer_spec_T_10(self)))

impls for Show_impl_Opt[T].'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for List[Equals_impl_List[T].'T]({len: u64, buffer: Buffer[Equals_impl_List[T].'T]({len: u64, data: Equals_impl_List[T].'T*})})
	blanket    Equals for List[T] {
		fn Equals_List[T]_equals(self: List[T], other: List[T]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> {
  let mut i: u64 = 0u64;
  while i < self.len {
    switch  {
      (negated(get_spec_T_2(self, i) == get_spec_T_2(other, i))) -> return(false),
      (true) -> ()
    };
    i = i + 1u64
  }: unit;
  true
}: bool
})

impls for Opt[Unwrap_impl_Opt[T].'T](enum None | Some(Unwrap_impl_Opt[T].'T))
	blanket    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_695: Opt[T] = self;  {
  let __payload_Some_696: T = __match_subject_695.payload[Some]  Some(_)(__match_subject_695.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get_spec_T_1(self))
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for List[i64]({len: u64, buffer: Buffer[i64]({len: u64, data: i64*})})
	concrete   Equals for List[i64] {
		fn Equals_List[i64]_equals(self: List[i64], other: List[i64]): bool return(Equals_Buffer[i64]_equals(toBuffer_spec_i64_5(self), toBuffer_spec_i64_5(other)))

impls for Opt[List.sort.'T](enum None | Some(List.sort.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_1169: Opt[T] = self;  {
  let __payload_Some_1170: T = __match_subject_1169.payload[Some]  Some(_)(__match_subject_1169.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get_spec_T_7(self))
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})
	derived    Iterator[impl Item := List[char]] for BufferIterator[List[char]] {
		fn Iterator_BufferIterator[List[char]]_next(self: BufferIterator[List[char]]*): Opt[List[char]] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: List[char] = get_spec_List[char]_13(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_List[char]_13(item)
}: Opt[List[char]],
  (true) -> .None
})
		fn Iterator_BufferIterator[List[char]]_sizeHint(self: BufferIterator[List[char]]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[List[char]]_advanceBy(self: BufferIterator[List[char]]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[List[char]]_nth(self: BufferIterator[List[char]]*, n: u64): Opt[List[char]] {
  Iterator_BufferIterator[List[char]]_advanceBy(self, n);
  return(Iterator_BufferIterator[List[char]]_next(self))
}: Opt[List[char]]

impls for printIt.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for Buffer[u8]({len: u64, data: u8*})
	concrete   Equals for Buffer[u8] {
		fn Equals_Buffer[u8]_equals(self: Buffer[u8], other: Buffer[u8]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> memcmp(dataPointer_spec_u8_4(self), dataPointer_spec_u8_4(other), lenBytes_spec_u8_2(self)) == 0i32
})

impls for string({buffer: Buffer[char]({len: u64, data: char*})})
	concrete   Equals for string {
		fn Equals_string_equals(self: string, that: string): bool return(Equals_Buffer[char]_equals(self.buffer, that.buffer))

	concrete   Show for string {
		fn Show_string_show(self: string): string return(self)

	concrete   Iterable[impl Item := charI := BufferIterator[char]] for string {
		fn Iterable_string_iterator(self: string): BufferIterator[char] return(fromBuffer_spec_char_2(self.buffer))

impls for Buffer.sorted.'T
	constraint Comparable for T {
		fn Comparable_T_compare(self: T, other: T): Ordering {no_block}

impls for Opt[string({buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(string({buffer: Buffer[char]({len: u64, data: char*})})))
	derived    Unwrap[impl Inner := string] for Opt[string] {
		fn Unwrap_Opt[string]_hasValue(self: Opt[string]): bool return(switch let __match_subject_1289: Opt[string] = self;  {
  let __payload_Some_1290: string = __match_subject_1289.payload[Some]  Some(_)(__match_subject_1289.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[string]_unwrap(self: Opt[string]): string return(get_spec_string_15(self))
		fn Unwrap_Opt[string]_make(t: string): Opt[string] return(.Some(t))

impls for Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer_spec_T_6(self))

impls for Opt[PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})](enum None | Some(PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})))
	derived    Unwrap[impl Inner := PointMaybeY] for Opt[PointMaybeY] {
		fn Unwrap_Opt[PointMaybeY]_hasValue(self: Opt[PointMaybeY]): bool return(switch let __match_subject_1274: Opt[PointMaybeY] = self;  {
  let __payload_Some_1275: PointMaybeY = __match_subject_1274.payload[Some]  Some(_)(__match_subject_1274.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[PointMaybeY]_unwrap(self: Opt[PointMaybeY]): PointMaybeY return(get_spec_PointMaybeY_13(self))
		fn Unwrap_Opt[PointMaybeY]_make(t: PointMaybeY): Opt[PointMaybeY] return(.Some(t))

impls for List[List.concat.'T]({len: u64, buffer: Buffer[List.concat.'T]({len: u64, data: List.concat.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer_spec_T_7(self)))

impls for Opt[i64](enum None | Some(i64))
	derived    Unwrap[impl Inner := i64] for Opt[i64] {
		fn Unwrap_Opt[i64]_hasValue(self: Opt[i64]): bool return(switch let __match_subject_1277: Opt[i64] = self;  {
  let __payload_Some_1278: i64 = __match_subject_1277.payload[Some]  Some(_)(__match_subject_1277.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[i64]_unwrap(self: Opt[i64]): i64 return(get_spec_i64_14(self))
		fn Unwrap_Opt[i64]_make(t: i64): Opt[i64] return(.Some(t))

	derived    Equals for Opt[i64] {
		fn Equals_Opt[i64]_equals(self: Opt[i64], other: Opt[i64]): bool return(opt_equals_spec_i64_2(self, other))

impls for u32
	concrete   Show for u32 {
		fn Show_u32_show(self: u32): string return(Show_u64_show(self as(iext) u64))

	concrete   Bitwise for u32 {
		intern fn Bitwise_u32_bitNot(self: u32): u32 {no_block}
		intern fn Bitwise_u32_bitAnd(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_bitOr(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_xor(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_shiftLeft(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_shiftRight(self: u32, other: u32): u32 {no_block}

impls for Opt[Equals_impl_Opt[T].'T](enum None | Some(Equals_impl_Opt[T].'T))
	blanket    Equals for Opt[T] {
		fn Equals_Opt[T]_equals(self: Opt[T], other: Opt[T]): bool return(opt_equals_spec_T_1(self, other))

impls for Buffer[List.join.'T]({len: u64, data: List.join.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer_spec_T_7(self))

impls for BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get_spec_T_10(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_T_10(item)
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for List[List.sort.'T]({len: u64, buffer: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer_spec_T_8(self)))

impls for Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)))
	derived    Unwrap[impl Inner := Result[S, F].Ok(S)] for Opt[Result[S, F].Ok(S)] {
		fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool return(switch let __match_subject_1139: Opt[Result[S, F].Ok(S)] = self;  {
  let __payload_Some_1140: Result[S, F].Ok(S) = __match_subject_1139.payload[Some]  Some(_)(__match_subject_1139.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S) return(get_spec_Result[S, F].Ok(S)_5(self))
		fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)] return(.Some(t))

impls for assertEquals.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)))
	derived    Unwrap[impl Inner := Result[S, F].Err(F)] for Opt[Result[S, F].Err(F)] {
		fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool return(switch let __match_subject_1136: Opt[Result[S, F].Err(F)] = self;  {
  let __payload_Some_1137: Result[S, F].Err(F) = __match_subject_1136.payload[Some]  Some(_)(__match_subject_1136.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F) return(get_spec_Result[S, F].Err(F)_4(self))
		fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)] return(.Some(t))

impls for char
	concrete   Show for char {
		fn Show_char_show(self: char): string return(toString(self))

impls for u64
	concrete   Comparable for u64 {
		fn Comparable_u64_compare(self: u64, other: u64): Ordering return(switch  {
  (self == other) -> .Equal,
  (true) -> switch  {
  (self > other) -> .Greater,
  (true) -> .Less
}
})

	concrete   Show for u64 {
		fn Show_u64_show(self: u64): string {
  switch  {
    (self == 0u64) -> return("0"),
    (true) -> ()
  };
  let mut remaining: u64 = self;
  let* buf: List[char]* = withCapacity_spec_char_2(8u64);
  while remaining > 0u64 {
    let d: u64 = remaining % 10u64;
    let c: char = d + 48u64 as(itrunc) u8 as(i8tochar) char;
    push_spec_char_2(buf, c);
    remaining = remaining / 10u64
  }: unit;
  reverse_spec_char_1(buf);
  return(wrapList(buf.*))
}: string

	concrete   Bitwise for u64 {
		intern fn Bitwise_u64_bitNot(self: u64): u64 {no_block}
		intern fn Bitwise_u64_bitAnd(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_bitOr(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_xor(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_shiftLeft(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_shiftRight(self: u64, other: u64): u64 {no_block}

impls for Opt[List.concat.'T](enum None | Some(List.concat.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_1159: Opt[T] = self;  {
  let __payload_Some_1160: T = __match_subject_1159.payload[Some]  Some(_)(__match_subject_1159.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get_spec_T_6(self))
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})
	derived    Iterable[impl Item := enum Char(char) | String(string)I := BufferIterator[enum Char(char) | String(string)]] for Buffer[enum Char(char) | String(string)] {
		fn Iterable_Buffer[enum Char(char) | String(string)]_iterator(self: Buffer[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)] return(fromBuffer_spec_enum Char(char) | String(string)_10(self))

impls for Show_impl_List[T].'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for BufferIterator[Iterator_impl_BufferIterator[T].'T]({buf: Buffer[Iterator_impl_BufferIterator[T].'T]({len: u64, data: Iterator_impl_BufferIterator[T].'T*}), pos: u64})
	blanket    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get_spec_T_3(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_T_1(item)
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for Equals_impl_List[T].'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Opt[Pointer](enum None | Some(Pointer))
	derived    Unwrap[impl Inner := Pointer] for Opt[Pointer] {
		fn Unwrap_Opt[Pointer]_hasValue(self: Opt[Pointer]): bool return(switch let __match_subject_1096: Opt[Pointer] = self;  {
  let __payload_Some_1097: Pointer = __match_subject_1096.payload[Some]  Some(_)(__match_subject_1096.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Pointer]_unwrap(self: Opt[Pointer]): Pointer return(get_spec_Pointer_3(self))
		fn Unwrap_Opt[Pointer]_make(t: Pointer): Opt[Pointer] return(.Some(t))

impls for BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})
	derived    Iterator[impl Item := char] for BufferIterator[char] {
		fn Iterator_BufferIterator[char]_next(self: BufferIterator[char]*): Opt[char] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: char = get_spec_char_6(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_char_7(item)
}: Opt[char],
  (true) -> .None
})
		fn Iterator_BufferIterator[char]_sizeHint(self: BufferIterator[char]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[char]_advanceBy(self: BufferIterator[char]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[char]_nth(self: BufferIterator[char]*, n: u64): Opt[char] {
  Iterator_BufferIterator[char]_advanceBy(self, n);
  return(Iterator_BufferIterator[char]_next(self))
}: Opt[char]

impls for List[List.join.'T]({len: u64, buffer: Buffer[List.join.'T]({len: u64, data: List.join.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer_spec_T_9(self)))

impls for bool
	concrete   Equals for bool {
		fn Equals_bool_equals(self: bool, other: bool): bool return(self == other)

	concrete   Show for bool {
		fn Show_bool_show(self: bool): string return(switch  {
  (self) -> "true",
  (true) -> "false"
})

impls for i8
	concrete   Show for i8 {
		fn Show_i8_show(self: i8): string return(Show_i64_show(self as(iext) i64))

	concrete   Bitwise for i8 {
		intern fn Bitwise_i8_bitNot(self: i8): i8 {no_block}
		intern fn Bitwise_i8_bitAnd(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_bitOr(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_xor(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_shiftLeft(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_shiftRight(self: i8, other: i8): i8 {no_block}

impls for IntRange({start: i64, end: i64})
	concrete   Iterable[impl Item := i64I := IntRangeIterator] for IntRange {
		fn Iterable_IntRange_iterator(self: IntRange): IntRangeIterator return(make(self))

impls for Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})
	derived    Iterable[impl Item := List[char]I := BufferIterator[List[char]]] for Buffer[List[char]] {
		fn Iterable_Buffer[List[char]]_iterator(self: Buffer[List[char]]): BufferIterator[List[char]] return(fromBuffer_spec_List[char]_9(self))

impls for Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*})
	blanket    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer_spec_T_1(self))

impls for BufferIterator[List.concat.'T]({buf: Buffer[List.concat.'T]({len: u64, data: List.concat.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get_spec_T_9(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_T_9(item)
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for Opt[List.join.'T](enum None | Some(List.join.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_1179: Opt[T] = self;  {
  let __payload_Some_1180: T = __match_subject_1179.payload[Some]  Some(_)(__match_subject_1179.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get_spec_T_8(self))
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Opt[Show_impl_List[T].'T](enum None | Some(Show_impl_List[T].'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_1195: Opt[T] = self;  {
  let __payload_Some_1196: T = __match_subject_1195.payload[Some]  Some(_)(__match_subject_1195.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get_spec_T_9(self))
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})
	derived    Iterable[impl Item := enum Char(char) | String(string)I := BufferIterator[enum Char(char) | String(string)]] for List[enum Char(char) | String(string)] {
		fn Iterable_List[enum Char(char) | String(string)]_iterator(self: List[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)] return(Iterable_Buffer[enum Char(char) | String(string)]_iterator(toBuffer_spec_enum Char(char) | String(string)_12(self)))

impls for BufferIterator[Pointer]({buf: Buffer[Pointer]({len: u64, data: Pointer*}), pos: u64})
	derived    Iterator[impl Item := Pointer] for BufferIterator[Pointer] {
		fn Iterator_BufferIterator[Pointer]_next(self: BufferIterator[Pointer]*): Opt[Pointer] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: Pointer = get_spec_Pointer_1(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_Pointer_8(item)
}: Opt[Pointer],
  (true) -> .None
})
		fn Iterator_BufferIterator[Pointer]_sizeHint(self: BufferIterator[Pointer]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[Pointer]_advanceBy(self: BufferIterator[Pointer]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[Pointer]_nth(self: BufferIterator[Pointer]*, n: u64): Opt[Pointer] {
  Iterator_BufferIterator[Pointer]_advanceBy(self, n);
  return(Iterator_BufferIterator[Pointer]_next(self))
}: Opt[Pointer]

impls for Equals_impl_Opt[T].'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Opt[bool](enum None | Some(bool))
	derived    Unwrap[impl Inner := bool] for Opt[bool] {
		fn Unwrap_Opt[bool]_hasValue(self: Opt[bool]): bool return(switch let __match_subject_1304: Opt[bool] = self;  {
  let __payload_Some_1305: bool = __match_subject_1304.payload[Some]  Some(_)(__match_subject_1304.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[bool]_unwrap(self: Opt[bool]): bool return(get_spec_bool_16(self))
		fn Unwrap_Opt[bool]_make(t: bool): Opt[bool] return(.Some(t))

impls for Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F](enum Ok(Try_impl_Result[S, F].'S) | Err(Try_impl_Result[S, F].'F))
	blanket    Try[impl T := SE := F] for Result[S, F] {
		fn Try_Result[S, F]_makeError(e: F): Result[S, F] return(.Err(e))
		fn Try_Result[S, F]_makeOk(t: S): Result[S, F] return(.Ok(t))
		fn Try_Result[S, F]_isOk(self: Result[S, F]): bool return(switch let __match_subject_573: Result[S, F] = self;  {
  let __payload_Ok_574: S = __match_subject_573.payload[Ok]  Ok(_)(__match_subject_573.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 304u64
}, "Match Error")
})
		fn Try_Result[S, F]_getError(self: Result[S, F]): F return(Unwrap_Opt[Result[S, F].Err(F)]_unwrap(if self.is[.Err]() .Some(self as(noop) Result[S, F].Err(F)) else .None).payload[Err])
		fn Try_Result[S, F]_getOk(self: Result[S, F]): S return(Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(if self.is[.Ok]() .Some(self as(noop) Result[S, F].Ok(S)) else .None).payload[Ok])

impls for List.sort.'T
	constraint Comparable for T {
		fn Comparable_T_compare(self: T, other: T): Ordering {no_block}

impls for i16
	concrete   Show for i16 {
		fn Show_i16_show(self: i16): string return(Show_i64_show(self as(iext) i64))

	concrete   Bitwise for i16 {
		intern fn Bitwise_i16_bitNot(self: i16): i16 {no_block}
		intern fn Bitwise_i16_bitAnd(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_bitOr(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_xor(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_shiftLeft(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_shiftRight(self: i16, other: i16): i16 {no_block}

impls for IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})
	concrete   Iterator[impl Item := i64] for IntRangeIterator {
		fn Iterator_IntRangeIterator_next(self: IntRangeIterator*): Opt[i64] return(switch  {
  (position(self.*) >= self.*.range.end) -> .None,
  (true) -> {
  let current: i64 = current(self.*);
  self.offset <- self.*.offset + 1i64;
  .Some(current)
}: Opt[i64]
})
		fn Iterator_IntRangeIterator_sizeHint(self: IntRangeIterator): {atLeast: u64, atMost: Opt[u64]} {
  let remaining: i64 = self.range.end - position(self);
  return({
    atLeast: remaining as(noop) u64,
    atMost: .Some(remaining as(noop) u64)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_IntRangeIterator_advanceBy(self: IntRangeIterator*, n: u64): unit {
  stepBy(self, n);
  return(())
}: unit
		fn Iterator_IntRangeIterator_nth(self: IntRangeIterator*, n: u64): Opt[i64] {
  stepBy(self, n);
  return(Iterator_IntRangeIterator_next(self))
}: Opt[i64]

impls for List[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})})
	derived    Iterable[impl Item := List[char]I := BufferIterator[List[char]]] for List[List[char]] {
		fn Iterable_List[List[char]]_iterator(self: List[List[char]]): BufferIterator[List[char]] return(Iterable_Buffer[List[char]]_iterator(toBuffer_spec_List[char]_11(self)))

impls for BufferIterator[Iterable_impl_Buffer[T].'T]({buf: Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get_spec_T_7(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_T_5(item)
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for Opt[Show_impl_Opt[T].'T](enum None | Some(Show_impl_Opt[T].'T))
	blanket    Show for Opt[T] {
		fn Show_Opt[T]_show(self: Opt[T]): string return(switch  {
  let __if_target_698: Opt[T] = self
  let __payload_Some_699: T = __if_target_698.payload[Some]  (__if_target_698.is[.Some]())  let v: T = __payload_Some_699 -> {
  let __sb_701: StringBuilder = withCapacity(3u64);
  putString(__sb_701, "Some(");
  putString(__sb_701, Show_T_show(v));
  putString(__sb_701, ")");
  build(__sb_701)
}: string,
  (true) -> "None"
})

impls for Iterable.'I
	constraint Iterator[impl Item := Item] for I {
		fn Iterator_I_next(self: I*): Opt[Item] {no_block}
		fn Iterator_I_sizeHint(self: I): {atLeast: u64, atMost: Opt[u64]} {no_block}
		fn Iterator_I_advanceBy(self: I*, n: u64): unit {no_block}
		fn Iterator_I_nth(self: I*, n: u64): Opt[Item] {no_block}

impls for Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer_spec_T_4(self))

impls for BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get_spec_T_11(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_T_11(item)
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get_spec_T_12(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_T_12(item)
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_2(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for List[u8]({len: u64, buffer: Buffer[u8]({len: u64, data: u8*})})
	concrete   Equals for List[u8] {
		fn Equals_List[u8]_equals(self: List[u8], other: List[u8]): bool return(Equals_Buffer[u8]_equals(toBuffer_spec_u8_4(self), toBuffer_spec_u8_4(other)))

impls for Opt[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))))
	derived    Unwrap[impl Inner := enum Char(char) | String(string)] for Opt[enum Char(char) | String(string)] {
		fn Unwrap_Opt[enum Char(char) | String(string)]_hasValue(self: Opt[enum Char(char) | String(string)]): bool return(switch let __match_subject_1257: Opt[enum Char(char) | String(string)] = self;  {
  let __payload_Some_1258: enum Char(char) | String(string) = __match_subject_1257.payload[Some]  Some(_)(__match_subject_1257.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[enum Char(char) | String(string)]_unwrap(self: Opt[enum Char(char) | String(string)]): enum Char(char) | String(string) return(get_spec_enum Char(char) | String(string)_12(self))
		fn Unwrap_Opt[enum Char(char) | String(string)]_make(t: enum Char(char) | String(string)): Opt[enum Char(char) | String(string)] return(.Some(t))

impls for Buffer[i64]({len: u64, data: i64*})
	concrete   Equals for Buffer[i64] {
		fn Equals_Buffer[i64]_equals(self: Buffer[i64], other: Buffer[i64]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> memcmp(dataPointer_spec_i64_6(self), dataPointer_spec_i64_6(other), lenBytes_spec_i64_4(self)) == 0i32
})

impls for List.join.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for List.sorted.'T
	constraint Comparable for T {
		fn Comparable_T_compare(self: T, other: T): Ordering {no_block}

impls for Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)))
	derived    Unwrap[impl Inner := Result[S, F].Err(F)] for Opt[Result[S, F].Err(F)] {
		fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool return(switch let __match_subject_1347: Opt[Result[S, F].Err(F)] = self;  {
  let __payload_Some_1348: Result[S, F].Err(F) = __match_subject_1347.payload[Some]  Some(_)(__match_subject_1347.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F) return(get_spec_Result[S, F].Err(F)_17(self))
		fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)] return(.Some(t))

impls for Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)))
	derived    Unwrap[impl Inner := Result[S, F].Ok(S)] for Opt[Result[S, F].Ok(S)] {
		fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool return(switch let __match_subject_1350: Opt[Result[S, F].Ok(S)] = self;  {
  let __payload_Some_1351: Result[S, F].Ok(S) = __match_subject_1350.payload[Some]  Some(_)(__match_subject_1350.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S) return(get_spec_Result[S, F].Ok(S)_18(self))
		fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)] return(.Some(t))

impls for Opt[char](enum None | Some(char))
	derived    Unwrap[impl Inner := char] for Opt[char] {
		fn Unwrap_Opt[char]_hasValue(self: Opt[char]): bool return(switch let __match_subject_1213: Opt[char] = self;  {
  let __payload_Some_1214: char = __match_subject_1213.payload[Some]  Some(_)(__match_subject_1213.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[char]_unwrap(self: Opt[char]): char return(get_spec_char_10(self))
		fn Unwrap_Opt[char]_make(t: char): Opt[char] return(.Some(t))

impls for Pointer
	concrete   Equals for Pointer {
		fn Equals_Pointer_equals(self: Pointer, other: Pointer): bool return(self as(ptrtoint) u64 == other as(ptrtoint) u64)

impls for i32
	concrete   Show for i32 {
		fn Show_i32_show(self: i32): string return(Show_i64_show(self as(iext) i64))

	concrete   Bitwise for i32 {
		intern fn Bitwise_i32_bitNot(self: i32): i32 {no_block}
		intern fn Bitwise_i32_bitAnd(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_bitOr(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_xor(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_shiftLeft(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_shiftRight(self: i32, other: i32): i32 {no_block}

impls for formatUInt.'W
	constraint TextWriter for W {
		fn TextWriter_W_writeChar(self: W*, value: char): unit {no_block}
		fn TextWriter_W_writeString(self: W*, value: string): unit {no_block}
		fn TextWriter_W_writeBuffer(self: W*, buffer: Buffer[char]): unit {no_block}

--- Scopes ---
scope 00  ns (parent: _ROOT_)
	VARS
	K1_TEST -> K1_TEST: bool
	K1_OS -> K1_OS: string
	K1_NO_STD -> K1_NO_STD: bool
	FUNCTIONS
	assertEquals -> fn assertEquals[T](locn: SourceLocation, a: T, b: T): unit
	assertMsg -> fn assertMsg(locn: SourceLocation, msg: string, value: bool): unit
	alignOf -> intern fn alignOf[T](): u64
	testComplex -> fn testComplex(): i64
	optElseOperator -> fn optElseOperator(): unit
	none -> fn none[T](): Opt[T].None
	eprintln -> fn eprintln(s: string): unit
	print -> fn print(s: string): unit
	crash -> fn crash(locn: SourceLocation, msg: string): never
	identity -> fn identity[T](value: T): T
	eprint -> fn eprint(s: string): unit
	discard -> fn discard[T](t: T): unit
	sizeOfStride -> intern fn sizeOfStride[T](): u64
	assert -> fn assert(locn: SourceLocation, value: bool): unit
	testBasics -> fn testBasics(): i64
	someNum -> fn someNum(): Opt[i64]
	printIt -> fn printIt[T](value: T): unit
	new -> fn new[T](value: T): T*
	some -> fn some[T](value: T): Opt[T].Some(T)
	blanketImpls -> fn blanketImpls(): unit
	noNum -> fn noNum(): Opt[i64]
	main -> fn main(): i64
	sizeOf -> intern fn sizeOf[T](): u64
	testCoalesceAccessor -> fn testCoalesceAccessor(): unit
	formatUInt -> fn formatUInt[W](w: W*, value: u64, base: u64): unit
	println -> fn println(s: string): unit
	ignore -> fn ignore[T](value: T): unit
	TYPES
	StringBuilder -> StringBuilder({parts: List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})*})
	ObjectPool -> ObjectPool({})
	Opt -> Opt[T](enum None | Some(Opt.'T))
	List -> List[T]({len: u64, buffer: Buffer[List.'T]({len: u64, data: List.'T*})})
	f64 -> f64
	never -> never
	i32 -> i32
	u64 -> u64
	u8 -> u8
	Arena -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})
	WeirdPoint -> WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})
	uint -> u64
	unit -> unit
	Ordering -> Ordering(enum Less | Equal | Greater)
	Buffer -> Buffer[T]({len: u64, data: Buffer.'T*})
	CString -> Pointer
	Pointer -> Pointer
	i64 -> i64
	i8 -> i8
	u16 -> u16
	byte -> u8
	char -> char
	Result -> Result[T, E](enum Ok(Result.'T) | Err(Result.'E))
	IntRange -> IntRange({start: i64, end: i64})
	IntRangeIterator -> IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})
	f32 -> f32
	bool -> bool
	i16 -> i16
	u32 -> u32
	BufferIterator -> BufferIterator[T]({buf: Buffer[BufferIterator.'T]({len: u64, data: BufferIterator.'T*}), pos: u64})
	Allocator -> Allocator({arenas: List[Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})]({len: u64, buffer: Buffer[Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})]({len: u64, data: Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})*})}), pools: List[ObjectPool({})]({len: u64, buffer: Buffer[ObjectPool({})]({len: u64, data: ObjectPool({})*})})})
	PointMaybeY -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})
	int -> i64
	string -> string({buffer: Buffer[char]({len: u64, data: char*})})
	NAMESPACES
319 -> StringBuilder
60 -> compiler
57 -> Opt
54 -> List
362 -> Arena
36 -> u8
94 -> Unwrap
219 -> TextWriter
149 -> sys
85 -> Bitwise
79 -> Show
52 -> Buffer
116 -> Iterable
46 -> Pointer
174 -> CString
107 -> Iterator
357 -> Bits
348 -> types
92 -> Comparable
208 -> files
4 -> char
385 -> IntRange
388 -> IntRangeIterator
44 -> bool
35 -> _root
288 -> BufferIterator
99 -> Try
145 -> libc
75 -> Equals
203 -> Allocator
5 -> string

scope 01 compiler ns (parent: )
	FUNCTIONS
	location -> intern fn location(): SourceLocation
	TYPES
	SourceLocation -> SourceLocation({filename: string({buffer: Buffer[char]({len: u64, data: char*})}), line: u64})

scope 02 bool ns (parent: )
	FUNCTIONS
	negated -> intern fn negated(self: bool): bool

scope 03 libc ns (parent: )
	FUNCTIONS
	write -> extern fn write(fileNo: i32, data: Pointer, count: u64, offset: u64): u64
	exit -> extern fn exit(code: i32): never
	calloc -> extern fn calloc(count: u64, size: u64): Pointer
	memset -> extern fn memset(src: Pointer, value: u32, count: u64): Pointer
	memcpy -> extern fn memcpy(dst: Pointer, src: Pointer, count: u64): Pointer
	realloc -> extern fn realloc(ptr: Pointer, size: u64): Pointer
	malloc -> extern fn malloc(size: u64): Pointer
	abort -> extern fn abort(): never
	arc4random_uniform -> extern fn arc4random_uniform(upperBound: u32): u32
	read -> extern fn read(fileNo: i32, buffer: Pointer, count: u64, offset: u64): i64
	free -> extern fn free(ptr: Pointer): unit
	memcmp -> extern fn memcmp(s1: Pointer, s2: Pointer, size: u64): i32

scope 04 Pointer ns (parent: )
	FUNCTIONS
	null -> fn null(): Pointer
	isNull -> fn isNull(self: Pointer): bool
	refAtIndex -> intern fn refAtIndex[T](self: Pointer, index: u64): T*

scope 05 sys ns (parent: )
	FUNCTIONS
	readLine -> fn readLine(maxLengthBytes: u64): Result[string, string]
	exit -> fn exit(code: i32): never
	printBacktrace -> fn printBacktrace(): unit
	parseMainArgs -> fn parseMainArgs(argCount: u32, args: Pointer): Buffer[string]
	_k1_show_backtrace -> extern fn _k1_show_backtrace(): unit

scope 06 files ns (parent: )
	FUNCTIONS
	readToString -> fn readToString(alloc: Allocator, path: string): string
	NAMESPACES
201 -> unix

scope 07 files.unix ns (parent: files)
	VARS
	SEEK_END -> SEEK_END: i32
	SEEK_SET -> SEEK_SET: i32
	FUNCTIONS
	fclose -> extern fn fclose(fileDesc: Pointer): i32
	fread -> extern fn fread(buffer: Pointer, size: u64, num: u64, stream: Pointer): u64
	fseek -> extern fn fseek(fileDesc: Pointer, offset: u64, whence: i32): i32
	fopen -> extern fn fopen(pathCString: Pointer, modeCString: Pointer): Pointer
	ftell -> extern fn ftell(fileDesc: Pointer): u64

scope 08 char ns (parent: )
	FUNCTIONS
	toString -> fn toString(self: char): string
	toDigitValue -> fn toDigitValue(self: char): Opt[u8]

scope 09 u8 ns (parent: )
	FUNCTIONS
	toAsciiDigit -> fn toAsciiDigit(v: u8): char

scope 10 Buffer ns (parent: )
	FUNCTIONS
	_enlargedClone -> fn _enlargedClone[T](self: Buffer[T], newCount: u64): Buffer[T]
	sorted -> fn sorted[T](self: Buffer[T]): Buffer[T]
	fromBaseAndCount -> fn fromBaseAndCount[T](len: u64, data: T*): Buffer[T]
	_allocate -> fn _allocate[T](count: u64): Buffer[T]
	set -> fn set[T](self: Buffer[T], index: u64, elem: T): unit
	isEmpty -> fn isEmpty[T](self: Buffer[T]): bool
	fromRawParts -> fn fromRawParts[T](len: u64, data: Pointer): Buffer[T]
	lastRef -> fn lastRef[T](self: Buffer[T]): Opt[T*]
	swap -> fn swap[T](self: Buffer[T]*, indexA: u64, indexB: u64): unit
	filled -> fn filled[T](size: u64, value: T): Buffer[T]
	_copyFrom -> fn _copyFrom[T](source: Buffer[T], dest: Buffer[T], count: u64): unit
	dataPointer -> fn dataPointer[T](self: Buffer[T]): Pointer
	concat -> fn concat[T](self: Buffer[T], other: Buffer[T]): Buffer[T]
	firstRef -> fn firstRef[T](self: Buffer[T]): Opt[T*]
	cloned -> fn cloned[T](self: Buffer[T]): Buffer[T]
	drop -> fn drop[T](self: Buffer[T], count: u64): Buffer[T]
	getRef -> fn getRef[T](self: Buffer[T], index: u64): T*
	first -> fn first[T](self: Buffer[T]): Opt[T]
	empty -> fn empty[T](): Buffer[T]
	bufferLenBytes -> fn bufferLenBytes[T](count: u64): u64
	last -> fn last[T](self: Buffer[T]): Opt[T]
	nonEmpty -> fn nonEmpty[T](self: Buffer[T]): bool
	take -> fn take[T](self: Buffer[T], count: u64): Buffer[T]
	get -> fn get[T](self: Buffer[T], index: u64): T
	slice -> fn slice[T](self: Buffer[T], start: u64, end: u64): Buffer[T]
	lenBytes -> fn lenBytes[T](self: Buffer[T]): u64

scope 11 BufferIterator ns (parent: )
	FUNCTIONS
	fromBuffer -> fn fromBuffer[T](buf: Buffer[T]): BufferIterator[T]

scope 12 Opt ns (parent: )
	FUNCTIONS
	opt_equals -> fn opt_equals[T](a: Opt[T], b: Opt[T]): bool
	isNone -> fn isNone[T](self: Opt[T]): bool
	get -> fn get[T](self: Opt[T]): T
	isSome -> fn isSome[T](self: Opt[T]): bool

scope 13 List ns (parent: )
	FUNCTIONS
	set -> fn set[T](self: List[T], index: u64, elem: T): unit
	toBuffer -> fn toBuffer[T](self: List[T]): Buffer[T]
	_grow -> fn _grow[T](self: List[T]*): unit
	single -> fn single[T](value: T): List[T]
	reversed -> fn reversed[T](self: List[T]): List[T]
	sort -> fn sort[T](input: List[T]*): unit
	wrapBuffer -> fn wrapBuffer[T](buffer: Buffer[T]): List[T]
	firstRef -> fn firstRef[T](self: List[T]): Opt[T*]
	withCapacity -> fn withCapacity[T](cap: u64): List[T]
	cloned -> fn cloned[T](self: List[T]): List[T]
	getRef -> fn getRef[T](self: List[T], index: u64): T*
	concat -> fn concat[T](self: List[T]*, other: List[T]): unit
	empty -> fn empty[T](): List[T]
	join -> fn join[T](self: List[T], sep: string): string
	reverse -> fn reverse[T](self: List[T]*): unit
	innerBuffer -> fn innerBuffer[T](self: List[T]): Buffer[T]
	cap -> fn cap[T](self: List[T]): u64
	sorted -> fn sorted[T](self: List[T]): List[T]
	swap -> fn swap[T](self: List[T]*, indexA: u64, indexB: u64): unit
	lastRef -> fn lastRef[T](self: List[T]): Opt[T*]
	isEmpty -> fn isEmpty[T](self: List[T]): bool
	filled -> fn filled[T](size: u64, value: T): List[T]
	getOpt -> fn getOpt[T](self: List[T], index: u64): Opt[T]
	reserve -> fn reserve[T](self: List[T]*, count: u64): unit
	first -> fn first[T](self: List[T]): Opt[T]
	push -> fn push[T](self: List[T]*, elem: T): unit
	last -> fn last[T](self: List[T]): Opt[T]
	nonEmpty -> fn nonEmpty[T](self: List[T]): bool
	get -> fn get[T](self: List[T], index: u64): T
	slice -> fn slice[T](self: List[T], start: u64, end: u64): Buffer[T]

scope 14 CString ns (parent: )

scope 15 string ns (parent: )
	FUNCTIONS
	toCString -> fn toCString(self: string): Pointer
	toInt -> fn toInt(self: string): Opt[i64]
	toBuffer -> fn toBuffer(self: string): Buffer[char]
	isEmpty -> fn isEmpty(self: string): bool
	indexOfString -> fn indexOfString(self: string, target: string): Opt[u64]
	indexOf -> fn indexOf(self: string, c: char): i64
	fromBuffer -> fn fromBuffer(buffer: Buffer[char]): string
	wrapList -> fn wrapList(list: List[char]): string
	wrapBuffer -> fn wrapBuffer(buffer: Buffer[char]): string
	len -> fn len(self: string): u64
	concat -> fn concat(self: string, other: string): string
	first -> fn first(self: string): Opt[char]
	fromBytes -> fn fromBytes(buffer: Buffer[u8]): string
	appendChar -> fn appendChar(self: string, c: char): string
	splitByChar -> fn splitByChar(self: string, delim: char): List[string]
	substring -> fn substring(self: string, start: u64, end: u64): string
	drop -> fn drop(self: string, count: u64): string
	wrapBytes -> fn wrapBytes(buffer: Buffer[u8]): string
	fromCString -> fn fromCString(cString: Pointer): string
	startsWith -> fn startsWith(self: string, other: string): bool
	nonEmpty -> fn nonEmpty(self: string): bool
	innerBuffer -> fn innerBuffer(self: string): Buffer[char]
	take -> fn take(self: string, count: u64): string
	toList -> fn toList(self: string): List[char]
	toBytes -> fn toBytes(self: string): Buffer[u8]
	get -> fn get(self: string, index: u64): char

scope 16 types ns (parent: )
	FUNCTIONS
	typeId -> intern fn typeId[T](): u64

scope 17 StringBuilder ns (parent: )
	FUNCTIONS
	withCapacity -> fn withCapacity(cap: u64): StringBuilder
	build -> fn build(self: StringBuilder): string
	putByte -> fn putByte(self: StringBuilder, b: u8): unit
	putChar -> fn putChar(self: StringBuilder, c: char): unit
	new -> fn new(): StringBuilder
	putString -> fn putString(self: StringBuilder, s: string): unit
	len -> fn len(self: StringBuilder): u64
	TYPES
	Part -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 18 Bits ns (parent: )
	FUNCTIONS
	bitAnd -> intern fn bitAnd(a: i64, b: i64): i64
	xor -> intern fn xor(a: i64, b: i64): i64
	bitNot -> intern fn bitNot(a: i64): i64
	shiftRight -> intern fn shiftRight(a: i64, b: i64): i64
	bitOr -> intern fn bitOr(a: i64, b: i64): i64
	shiftLeft -> intern fn shiftLeft(a: i64, b: i64): i64

scope 19 Arena ns (parent: )
	VARS
	mb -> mb: u64
	gb -> gb: u64
	FUNCTIONS
	freeAll -> fn freeAll(self: Arena*): unit
	pushBytes -> fn pushBytes(self: Arena*, count: u64): Pointer
	alignTo -> fn alignTo(baseAddress: u64, alignBytes: u64): u64
	pushRaw -> fn pushRaw(self: Arena*, size: u64, align: u64): Pointer
	new -> fn new(id: string, initialMb: u64): Arena
	regionSizeBytes -> fn regionSizeBytes(self: Arena): u64
	push -> fn push[T](self: Arena*, t: T): T*

scope 20 Allocator ns (parent: )
	FUNCTIONS
	initDefault -> fn initDefault(): Allocator
	tempArena -> fn tempArena(self: Allocator): Arena*

scope 21 IntRange ns (parent: )
	FUNCTIONS
	make -> fn make(start: i64, end: i64): IntRange
	upTo -> fn upTo(end: i64): IntRange

scope 22 IntRangeIterator ns (parent: )
	FUNCTIONS
	make -> fn make(range: IntRange): IntRangeIterator
	stepBy -> fn stepBy(self: IntRangeIterator*, n: u64): bool
	size -> fn size(self: IntRangeIterator): i64
	position -> fn position(self: IntRangeIterator): i64
	current -> fn current(self: IntRangeIterator): i64

scope 23 u8 type_defn (parent: )

scope 24 u16 type_defn (parent: )

scope 25 u32 type_defn (parent: )

scope 26 u64 type_defn (parent: )

scope 27 i8 type_defn (parent: )

scope 28 i16 type_defn (parent: )

scope 29 i32 type_defn (parent: )

scope 30 i64 type_defn (parent: )

scope 31 unit type_defn (parent: )

scope 32 char type_defn (parent: )

scope 33 bool type_defn (parent: )

scope 34 never type_defn (parent: )

scope 35 Pointer type_defn (parent: )

scope 36 f32 type_defn (parent: )

scope 37 f64 type_defn (parent: )

scope 38 Buffer type_defn (parent: )
	TYPES
	T -> Buffer.'T

scope 39 Buffer.ability_impl ability_impl (parent: Buffer)

scope 40 List type_defn (parent: )
	TYPES
	T -> List.'T

scope 41 List.ability_impl ability_impl (parent: List)

scope 42 string type_defn (parent: )

scope 43 Opt type_defn (parent: )
	TYPES
	T -> Opt.'T

scope 44 Opt.ability_impl ability_impl (parent: Opt)

scope 45 compiler.SourceLocation type_defn (parent: compiler)

scope 46 Ordering type_defn (parent: )

scope 47 Result type_defn (parent: )
	TYPES
	T -> Result.'T
	E -> Result.'E

scope 48 Result.ability_impl ability_impl (parent: Result)

scope 49 Result.ability_impl ability_impl (parent: Result)

scope 50 int type_defn (parent: )

scope 51 uint type_defn (parent: )

scope 52 byte type_defn (parent: )

scope 53 BufferIterator type_defn (parent: )
	TYPES
	T -> BufferIterator.'T

scope 54 BufferIterator.ability_impl ability_impl (parent: BufferIterator)

scope 55 CString type_defn (parent: )

scope 56 StringBuilder type_defn (parent: )

scope 57 StringBuilder.Part type_defn (parent: StringBuilder)

scope 58 Arena type_defn (parent: )

scope 59 ObjectPool type_defn (parent: )

scope 60 Allocator type_defn (parent: )

scope 61 IntRange type_defn (parent: )

scope 62 IntRangeIterator type_defn (parent: )

scope 63 PointMaybeY type_defn (parent: )

scope 64 WeirdPoint type_defn (parent: )

scope 65 Equals ability_defn (parent: )
	FUNCTIONS
	equals -> fn equals[Self](self: Self, other: Self): bool
	TYPES
	Self -> Equals.'Self

scope 66 Equals.ability_impl ability_impl (parent: Equals)

scope 67 Equals.equals fn (parent: Equals)
	VARS
	self -> self: Self
	other -> other: Self

scope 68 Show ability_defn (parent: )
	FUNCTIONS
	show -> fn show[Self](self: Self): string
	TYPES
	Self -> Show.'Self

scope 69 Show.ability_impl ability_impl (parent: Show)

scope 70 Show.show fn (parent: Show)
	VARS
	self -> self: Self

scope 71 sizeOf fn (parent: )
	TYPES
	T -> sizeOf.'T

scope 72 sizeOf.ability_impl ability_impl (parent: sizeOf)

scope 73 sizeOfStride fn (parent: )
	TYPES
	T -> sizeOfStride.'T

scope 74 sizeOfStride.ability_impl ability_impl (parent: sizeOfStride)

scope 75 alignOf fn (parent: )
	TYPES
	T -> alignOf.'T

scope 76 alignOf.ability_impl ability_impl (parent: alignOf)

scope 77 compiler.location fn (parent: compiler)

scope 78 Bitwise ability_defn (parent: )
	FUNCTIONS
	bitAnd -> fn bitAnd[Self](self: Self, other: Self): Self
	xor -> fn xor[Self](self: Self, other: Self): Self
	bitNot -> fn bitNot[Self](self: Self): Self
	shiftRight -> fn shiftRight[Self](self: Self, other: Self): Self
	bitOr -> fn bitOr[Self](self: Self, other: Self): Self
	shiftLeft -> fn shiftLeft[Self](self: Self, other: Self): Self
	TYPES
	Self -> Bitwise.'Self

scope 79 Bitwise.ability_impl ability_impl (parent: Bitwise)

scope 80 Bitwise.bitNot fn (parent: Bitwise)
	VARS
	self -> self: Self

scope 81 Bitwise.bitAnd fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 82 Bitwise.bitOr fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 83 Bitwise.xor fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 84 Bitwise.shiftLeft fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 85 Bitwise.shiftRight fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 86 Comparable ability_defn (parent: )
	FUNCTIONS
	compare -> fn compare[Self](self: Self, other: Self): Ordering
	TYPES
	Self -> Comparable.'Self

scope 87 Comparable.ability_impl ability_impl (parent: Comparable)

scope 88 Comparable.compare fn (parent: Comparable)
	VARS
	self -> self: Self
	other -> other: Self

scope 89 Unwrap ability_defn (parent: )
	FUNCTIONS
	hasValue -> fn hasValue[Self](self: Self): bool
	unwrap -> fn unwrap[Self](self: Self): Inner
	make -> fn make[Self](inner: Inner): Self
	TYPES
	Inner -> Unwrap.'Inner
	Self -> Unwrap.'Self

scope 90 Unwrap.ability_impl ability_impl (parent: Unwrap)

scope 91 Unwrap.ability_impl ability_impl (parent: Unwrap)

scope 92 Unwrap.hasValue fn (parent: Unwrap)
	VARS
	self -> self: Self

scope 93 Unwrap.unwrap fn (parent: Unwrap)
	VARS
	self -> self: Self

scope 94 Unwrap.make fn (parent: Unwrap)
	VARS
	inner -> inner: Inner

scope 95 Try ability_defn (parent: )
	FUNCTIONS
	makeError -> fn makeError[Self](e: E): Self
	getError -> fn getError[Self](self: Self): E
	makeOk -> fn makeOk[Self](t: T): Self
	isOk -> fn isOk[Self](self: Self): bool
	getOk -> fn getOk[Self](self: Self): T
	TYPES
	E -> Try.'E
	Self -> Try.'Self
	T -> Try.'T

scope 96 Try.ability_impl ability_impl (parent: Try)

scope 97 Try.ability_impl ability_impl (parent: Try)

scope 98 Try.ability_impl ability_impl (parent: Try)

scope 99 Try.makeError fn (parent: Try)
	VARS
	e -> e: E

scope 100 Try.makeOk fn (parent: Try)
	VARS
	t -> t: T

scope 101 Try.isOk fn (parent: Try)
	VARS
	self -> self: Self

scope 102 Try.getError fn (parent: Try)
	VARS
	self -> self: Self

scope 103 Try.getOk fn (parent: Try)
	VARS
	self -> self: Self

scope 104 Iterator ability_defn (parent: )
	FUNCTIONS
	advanceBy -> fn advanceBy[Self](self: Self*, n: u64): unit
	sizeHint -> fn sizeHint[Self](self: Self): {atLeast: u64, atMost: Opt[u64]}
	nth -> fn nth[Self](self: Self*, n: u64): Opt[Item]
	next -> fn next[Self](self: Self*): Opt[Item]
	TYPES
	Item -> Iterator.'Item
	Self -> Iterator.'Self

scope 105 Iterator.ability_impl ability_impl (parent: Iterator)

scope 106 Iterator.ability_impl ability_impl (parent: Iterator)

scope 107 Iterator.next fn (parent: Iterator)
	VARS
	self -> self: Self*

scope 108 Iterator.sizeHint fn (parent: Iterator)
	VARS
	self -> self: Self

scope 109 Iterator.advanceBy fn (parent: Iterator)
	VARS
	self -> self: Self*
	n -> n: u64

scope 110 Iterator.nth fn (parent: Iterator)
	VARS
	self -> self: Self*
	n -> n: u64

scope 111 Iterable ability_defn (parent: )
	FUNCTIONS
	iterator -> fn iterator[Self](self: Self): I
	TYPES
	Item -> Iterable.'Item
	Self -> Iterable.'Self
	I -> Iterable.'I

scope 112 Iterable.ability_impl ability_impl (parent: Iterable)

scope 113 Iterable.ability_impl ability_impl (parent: Iterable)

scope 114 Iterable.ability_impl ability_impl (parent: Iterable)
	TYPES
	Item -> Iterable.'Item
	Self -> Iterable.'I

scope 115 Iterable.ability_impl.Iterator_I_next fn (parent: Iterable.ability_impl)
	VARS
	self -> self: I*

scope 116 Iterable.ability_impl.Iterator_I_sizeHint fn (parent: Iterable.ability_impl)
	VARS
	self -> self: I

scope 117 Iterable.ability_impl.Iterator_I_advanceBy fn (parent: Iterable.ability_impl)
	VARS
	self -> self: I*
	n -> n: u64

scope 118 Iterable.ability_impl.Iterator_I_nth fn (parent: Iterable.ability_impl)
	VARS
	self -> self: I*
	n -> n: u64

scope 119 Iterable.iterator fn (parent: Iterable)
	VARS
	self -> self: Self

scope 120 bool.negated fn (parent: bool)
	VARS
	self -> self: bool

scope 121 Equals_impl_bool ability_impl (parent: )
	TYPES
	Self -> bool

scope 122 Equals_impl_bool.Equals_bool_equals fn (parent: Equals_impl_bool)
	VARS
	self -> self: bool
	other -> other: bool

scope 123 discard fn (parent: )
	VARS
	t -> t: T
	TYPES
	T -> discard.'T

scope 124 discard.ability_impl ability_impl (parent: discard)

scope 125 libc.exit fn (parent: libc)
	VARS
	code -> code: i32

scope 126 libc.read fn (parent: libc)
	VARS
	fileNo -> fileNo: i32
	offset -> offset: u64
	buffer -> buffer: Pointer
	count -> count: u64

scope 127 libc.write fn (parent: libc)
	VARS
	fileNo -> fileNo: i32
	offset -> offset: u64
	data -> data: Pointer
	count -> count: u64

scope 128 libc.memcpy fn (parent: libc)
	VARS
	count -> count: u64
	dst -> dst: Pointer
	src -> src: Pointer

scope 129 libc.memset fn (parent: libc)
	VARS
	value -> value: u32
	count -> count: u64
	src -> src: Pointer

scope 130 libc.memcmp fn (parent: libc)
	VARS
	s2 -> s2: Pointer
	size -> size: u64
	s1 -> s1: Pointer

scope 131 libc.calloc fn (parent: libc)
	VARS
	size -> size: u64
	count -> count: u64

scope 132 libc.malloc fn (parent: libc)
	VARS
	size -> size: u64

scope 133 libc.free fn (parent: libc)
	VARS
	ptr -> ptr: Pointer

scope 134 libc.realloc fn (parent: libc)
	VARS
	ptr -> ptr: Pointer
	size -> size: u64

scope 135 libc.arc4random_uniform fn (parent: libc)
	VARS
	upperBound -> upperBound: u32

scope 136 libc.abort fn (parent: libc)

scope 137 assert fn (parent: )
	VARS
	locn -> locn: SourceLocation
	value -> value: bool

scope 138 crash fn (parent: )
	VARS
	locn -> locn: SourceLocation
	msg -> msg: string

scope 139 assertEquals fn (parent: )
	VARS
	locn -> locn: SourceLocation
	b -> b: T
	a -> a: T
	TYPES
	T -> assertEquals.'T

scope 140 assertEquals.ability_impl ability_impl (parent: assertEquals)
	TYPES
	Self -> assertEquals.'T

scope 141 assertEquals.ability_impl.Show_T_show fn (parent: assertEquals.ability_impl)
	VARS
	self -> self: T

scope 142 assertEquals.ability_impl.Equals_T_equals fn (parent: assertEquals.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 143 Pointer.null fn (parent: Pointer)

scope 144 Pointer.isNull fn (parent: Pointer)
	VARS
	self -> self: Pointer

scope 145 Pointer.refAtIndex fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Pointer.refAtIndex.'T

scope 146 Pointer.refAtIndex.ability_impl ability_impl (parent: Pointer.refAtIndex)

scope 147 Equals_impl_Pointer ability_impl (parent: )
	TYPES
	Self -> Pointer

scope 148 Equals_impl_Pointer.Equals_Pointer_equals fn (parent: Equals_impl_Pointer)
	VARS
	self -> self: Pointer
	other -> other: Pointer

scope 149 new fn (parent: )
	VARS
	t -> t: T*
	value -> value: T
	ptr -> ptr: Pointer
	TYPES
	T -> new.'T

scope 150 new.ability_impl ability_impl (parent: new)

scope 151 identity fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> identity.'T

scope 152 identity.ability_impl ability_impl (parent: identity)

scope 153 ignore fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> ignore.'T

scope 154 ignore.ability_impl ability_impl (parent: ignore)

scope 155 printIt fn (parent: )
	VARS
	s -> s: string
	value -> value: T
	TYPES
	T -> printIt.'T

scope 156 printIt.ability_impl ability_impl (parent: printIt)
	TYPES
	Self -> printIt.'T

scope 157 printIt.ability_impl.Show_T_show fn (parent: printIt.ability_impl)
	VARS
	self -> self: T

scope 158 print fn (parent: )
	VARS
	s -> s: string

scope 159 println fn (parent: )
	VARS
	s -> s: string

scope 160 eprint fn (parent: )
	VARS
	s -> s: string

scope 161 eprintln fn (parent: )
	VARS
	s -> s: string

scope 162 sys._k1_show_backtrace fn (parent: sys)

scope 163 sys.printBacktrace fn (parent: sys)

scope 164 sys.exit fn (parent: sys)
	VARS
	code -> code: i32

scope 165 sys.parseMainArgs fn (parent: sys)
	VARS
	buf -> buf: Buffer[Pointer]
	i -> mut i: u32
	args -> args: Pointer
	strings -> strings: List[string]
	argCount -> argCount: u32

scope 166 sys.readLine fn (parent: sys)
	VARS
	bytesRead -> bytesRead: i64
	length -> length: u64
	result -> result: string
	maxLengthBytes -> maxLengthBytes: u64
	buffer -> buffer: Buffer[u8]*

scope 167 files.unix.fopen fn (parent: files.unix)
	VARS
	pathCString -> pathCString: Pointer
	modeCString -> modeCString: Pointer

scope 168 files.unix.fseek fn (parent: files.unix)
	VARS
	offset -> offset: u64
	whence -> whence: i32
	fileDesc -> fileDesc: Pointer

scope 169 files.unix.fread fn (parent: files.unix)
	VARS
	stream -> stream: Pointer
	size -> size: u64
	buffer -> buffer: Pointer
	num -> num: u64

scope 170 files.unix.fclose fn (parent: files.unix)
	VARS
	fileDesc -> fileDesc: Pointer

scope 171 files.unix.ftell fn (parent: files.unix)
	VARS
	fileDesc -> fileDesc: Pointer

scope 172 files.readToString fn (parent: files)
	VARS
	filenameCString -> filenameCString: Pointer
	alloc -> alloc: Allocator
	file -> file: Pointer
	buf -> buf: Pointer
	string -> string: string
	path -> path: string
	fileSizeBytes -> fileSizeBytes: u64

scope 173 assertMsg fn (parent: )
	VARS
	locn -> locn: SourceLocation
	msg -> msg: string
	value -> value: bool

scope 174 char.toString fn (parent: char)
	VARS
	self -> self: char

scope 175 char.toDigitValue fn (parent: char)
	VARS
	self -> self: char
	i_code -> i_code: u8

scope 176 TextWriter ability_defn (parent: )
	FUNCTIONS
	writeChar -> fn writeChar[Self](self: Self*, value: char): unit
	writeString -> fn writeString[Self](self: Self*, value: string): unit
	writeBuffer -> fn writeBuffer[Self](self: Self*, buffer: Buffer[char]): unit
	TYPES
	Self -> TextWriter.'Self

scope 177 TextWriter.ability_impl ability_impl (parent: TextWriter)

scope 178 TextWriter.writeChar fn (parent: TextWriter)
	VARS
	value -> value: char
	self -> self: Self*

scope 179 TextWriter.writeString fn (parent: TextWriter)
	VARS
	value -> value: string
	self -> self: Self*

scope 180 TextWriter.writeBuffer fn (parent: TextWriter)
	VARS
	self -> self: Self*
	buffer -> buffer: Buffer[char]

scope 181 Show_impl_bool ability_impl (parent: )
	TYPES
	Self -> bool

scope 182 Show_impl_bool.Show_bool_show fn (parent: Show_impl_bool)
	VARS
	self -> self: bool

scope 183 Show_impl_char ability_impl (parent: )
	TYPES
	Self -> char

scope 184 Show_impl_char.Show_char_show fn (parent: Show_impl_char)
	VARS
	self -> self: char

scope 185 Show_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 186 Show_impl_i64.Show_i64_show fn (parent: Show_impl_i64)
	VARS
	neg -> neg: bool
	buf -> buf: List[char]*
	self -> self: i64
	remaining -> mut remaining: i64
	rev -> rev: List[char]

scope 187 Comparable_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 188 Comparable_impl_i64.Comparable_i64_compare fn (parent: Comparable_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 189 Comparable_impl_u64 ability_impl (parent: )
	TYPES
	Self -> u64

scope 190 Comparable_impl_u64.Comparable_u64_compare fn (parent: Comparable_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 191 Comparable_impl_u8 ability_impl (parent: )
	TYPES
	Self -> u8

scope 192 Comparable_impl_u8.Comparable_u8_compare fn (parent: Comparable_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 193 u8.toAsciiDigit fn (parent: u8)
	VARS
	v -> v: u8

scope 194 formatUInt fn (parent: )
	VARS
	base -> base: u64
	value -> value: u64
	w -> w: W*
	TYPES
	W -> formatUInt.'W

scope 195 formatUInt.ability_impl ability_impl (parent: formatUInt)
	TYPES
	Self -> formatUInt.'W

scope 196 formatUInt.ability_impl.TextWriter_W_writeChar fn (parent: formatUInt.ability_impl)
	VARS
	value -> value: char
	self -> self: W*

scope 197 formatUInt.ability_impl.TextWriter_W_writeString fn (parent: formatUInt.ability_impl)
	VARS
	value -> value: string
	self -> self: W*

scope 198 formatUInt.ability_impl.TextWriter_W_writeBuffer fn (parent: formatUInt.ability_impl)
	VARS
	self -> self: W*
	buffer -> buffer: Buffer[char]

scope 199 Show_impl_u64 ability_impl (parent: )
	TYPES
	Self -> u64

scope 200 Show_impl_u64.Show_u64_show fn (parent: Show_impl_u64)
	VARS
	buf -> buf: List[char]*
	remaining -> mut remaining: u64
	self -> self: u64

scope 201 Show_impl_u32 ability_impl (parent: )
	TYPES
	Self -> u32

scope 202 Show_impl_u32.Show_u32_show fn (parent: Show_impl_u32)
	VARS
	self -> self: u32

scope 203 Show_impl_u8 ability_impl (parent: )
	TYPES
	Self -> u8

scope 204 Show_impl_u8.Show_u8_show fn (parent: Show_impl_u8)
	VARS
	self -> self: u8

scope 205 Show_impl_i32 ability_impl (parent: )
	TYPES
	Self -> i32

scope 206 Show_impl_i32.Show_i32_show fn (parent: Show_impl_i32)
	VARS
	self -> self: i32

scope 207 Show_impl_i16 ability_impl (parent: )
	TYPES
	Self -> i16

scope 208 Show_impl_i16.Show_i16_show fn (parent: Show_impl_i16)
	VARS
	self -> self: i16

scope 209 Show_impl_i8 ability_impl (parent: )
	TYPES
	Self -> i8

scope 210 Show_impl_i8.Show_i8_show fn (parent: Show_impl_i8)
	VARS
	self -> self: i8

scope 211 Equals_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 212 Equals_impl_i64.Equals_i64_equals fn (parent: Equals_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 213 Try_impl_Result[S, F] ability_impl (parent: )
	TYPES
	T -> Try_impl_Result[S, F].'S
	E -> Try_impl_Result[S, F].'F
	F -> Try_impl_Result[S, F].'F
	Self -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F](enum Ok(Try_impl_Result[S, F].'S) | Err(Try_impl_Result[S, F].'F))
	S -> Try_impl_Result[S, F].'S

scope 214 Try_impl_Result[S, F].ability_impl ability_impl (parent: Try_impl_Result[S, F])

scope 215 Try_impl_Result[S, F].ability_impl ability_impl (parent: Try_impl_Result[S, F])

scope 216 Try_impl_Result[S, F].Try_Result[S, F]_makeError fn (parent: Try_impl_Result[S, F])
	VARS
	e -> e: F

scope 217 Try_impl_Result[S, F].Try_Result[S, F]_makeOk fn (parent: Try_impl_Result[S, F])
	VARS
	t -> t: S

scope 218 Try_impl_Result[S, F].Try_Result[S, F]_isOk fn (parent: Try_impl_Result[S, F])
	VARS
	__match_subject_573 -> __match_subject_573: Result[S, F]
	self -> self: Result[S, F]

scope 219 Try_impl_Result[S, F].Try_Result[S, F]_getError fn (parent: Try_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]

scope 220 Try_impl_Result[S, F].Try_Result[S, F]_getOk fn (parent: Try_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]

scope 221 Unwrap_impl_Result[S, F] ability_impl (parent: )
	TYPES
	Inner -> Unwrap_impl_Result[S, F].'S
	F -> Unwrap_impl_Result[S, F].'F
	Self -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F](enum Ok(Unwrap_impl_Result[S, F].'S) | Err(Unwrap_impl_Result[S, F].'F))
	S -> Unwrap_impl_Result[S, F].'S

scope 222 Unwrap_impl_Result[S, F].ability_impl ability_impl (parent: Unwrap_impl_Result[S, F])

scope 223 Unwrap_impl_Result[S, F].ability_impl ability_impl (parent: Unwrap_impl_Result[S, F])

scope 224 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue fn (parent: Unwrap_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]
	__match_subject_581 -> __match_subject_581: Result[S, F]

scope 225 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_unwrap fn (parent: Unwrap_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]

scope 226 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_make fn (parent: Unwrap_impl_Result[S, F])
	VARS
	inner -> inner: S

scope 227 Buffer.bufferLenBytes fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer.bufferLenBytes.'T

scope 228 Buffer.bufferLenBytes.ability_impl ability_impl (parent: Buffer.bufferLenBytes)

scope 229 Buffer.dataPointer fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.dataPointer.'T

scope 230 Buffer.dataPointer.ability_impl ability_impl (parent: Buffer.dataPointer)

scope 231 Buffer.fromRawParts fn (parent: Buffer)
	VARS
	data -> data: Pointer
	len -> len: u64
	TYPES
	T -> Buffer.fromRawParts.'T

scope 232 Buffer.fromRawParts.ability_impl ability_impl (parent: Buffer.fromRawParts)

scope 233 Buffer.fromBaseAndCount fn (parent: Buffer)
	VARS
	data -> data: T*
	len -> len: u64
	TYPES
	T -> Buffer.fromBaseAndCount.'T

scope 234 Buffer.fromBaseAndCount.ability_impl ability_impl (parent: Buffer.fromBaseAndCount)

scope 235 Buffer._allocate fn (parent: Buffer)
	VARS
	data -> data: T*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> Buffer._allocate.'T

scope 236 Buffer._allocate.ability_impl ability_impl (parent: Buffer._allocate)

scope 237 Buffer._copyFrom fn (parent: Buffer)
	VARS
	source -> source: Buffer[T]
	numBytes -> numBytes: u64
	dest -> dest: Buffer[T]
	count -> count: u64
	TYPES
	T -> Buffer._copyFrom.'T

scope 238 Buffer._copyFrom.ability_impl ability_impl (parent: Buffer._copyFrom)

scope 239 Buffer._enlargedClone fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[T]
	newBuffer -> newBuffer: Buffer[T]
	TYPES
	T -> Buffer._enlargedClone.'T

scope 240 Buffer._enlargedClone.ability_impl ability_impl (parent: Buffer._enlargedClone)

scope 241 Buffer.lenBytes fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.lenBytes.'T

scope 242 Buffer.lenBytes.ability_impl ability_impl (parent: Buffer.lenBytes)

scope 243 Buffer.empty fn (parent: Buffer)
	TYPES
	T -> Buffer.empty.'T

scope 244 Buffer.empty.ability_impl ability_impl (parent: Buffer.empty)

scope 245 Buffer.filled fn (parent: Buffer)
	VARS
	buf -> buf: Buffer[T]
	value -> value: T
	i -> mut i: u64
	size -> size: u64
	TYPES
	T -> Buffer.filled.'T

scope 246 Buffer.filled.ability_impl ability_impl (parent: Buffer.filled)

scope 247 Buffer.slice fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[T]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: T*
	TYPES
	T -> Buffer.slice.'T

scope 248 Buffer.slice.ability_impl ability_impl (parent: Buffer.slice)

scope 249 Buffer.take fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	count -> count: u64
	TYPES
	T -> Buffer.take.'T

scope 250 Buffer.take.ability_impl ability_impl (parent: Buffer.take)

scope 251 Buffer.drop fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	count -> count: u64
	TYPES
	T -> Buffer.drop.'T

scope 252 Buffer.drop.ability_impl ability_impl (parent: Buffer.drop)

scope 253 Buffer.getRef fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.getRef.'T

scope 254 Buffer.getRef.ability_impl ability_impl (parent: Buffer.getRef)

scope 255 Buffer.set fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	tRef -> tRef: T*
	elem -> elem: T
	TYPES
	T -> Buffer.set.'T

scope 256 Buffer.set.ability_impl ability_impl (parent: Buffer.set)

scope 257 Buffer.get fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	tRef -> tRef: T*
	TYPES
	T -> Buffer.get.'T

scope 258 Buffer.get.ability_impl ability_impl (parent: Buffer.get)

scope 259 Buffer.cloned fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[T]
	numBytes -> numBytes: u64
	TYPES
	T -> Buffer.cloned.'T

scope 260 Buffer.cloned.ability_impl ability_impl (parent: Buffer.cloned)

scope 261 Buffer.isEmpty fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.isEmpty.'T

scope 262 Buffer.isEmpty.ability_impl ability_impl (parent: Buffer.isEmpty)

scope 263 Buffer.nonEmpty fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.nonEmpty.'T

scope 264 Buffer.nonEmpty.ability_impl ability_impl (parent: Buffer.nonEmpty)

scope 265 Buffer.firstRef fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.firstRef.'T

scope 266 Buffer.firstRef.ability_impl ability_impl (parent: Buffer.firstRef)

scope 267 Buffer.first fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	__match_subject_639 -> __match_subject_639: Opt[T*]
	TYPES
	T -> Buffer.first.'T

scope 268 Buffer.first.ability_impl ability_impl (parent: Buffer.first)

scope 269 Buffer.lastRef fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.lastRef.'T

scope 270 Buffer.lastRef.ability_impl ability_impl (parent: Buffer.lastRef)

scope 271 Buffer.last fn (parent: Buffer)
	VARS
	__match_subject_646 -> __match_subject_646: Opt[T*]
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.last.'T

scope 272 Buffer.last.ability_impl ability_impl (parent: Buffer.last)

scope 273 Buffer.concat fn (parent: Buffer)
	VARS
	new -> new: Buffer[T]
	self -> self: Buffer[T]
	other -> other: Buffer[T]
	TYPES
	T -> Buffer.concat.'T

scope 274 Buffer.concat.ability_impl ability_impl (parent: Buffer.concat)

scope 275 Buffer.swap fn (parent: Buffer)
	VARS
	indexA -> indexA: u64
	self -> self: Buffer[T]*
	aRef -> aRef: T*
	bValue -> bValue: T
	indexB -> indexB: u64
	bRef -> bRef: T*
	TYPES
	T -> Buffer.swap.'T

scope 276 Buffer.swap.ability_impl ability_impl (parent: Buffer.swap)

scope 277 Buffer.sorted fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	list -> list: List[T]*
	TYPES
	T -> Buffer.sorted.'T

scope 278 Buffer.sorted.ability_impl ability_impl (parent: Buffer.sorted)
	TYPES
	Self -> Buffer.sorted.'T

scope 279 Buffer.sorted.ability_impl.Comparable_T_compare fn (parent: Buffer.sorted.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 280 Equals_impl_Buffer[u8] ability_impl (parent: )
	TYPES
	Self -> Buffer[u8]({len: u64, data: u8*})

scope 281 Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals fn (parent: Equals_impl_Buffer[u8])
	VARS
	self -> self: Buffer[u8]
	other -> other: Buffer[u8]

scope 282 Equals_impl_Buffer[char] ability_impl (parent: )
	TYPES
	Self -> Buffer[char]({len: u64, data: char*})

scope 283 Equals_impl_Buffer[char].Equals_Buffer[char]_equals fn (parent: Equals_impl_Buffer[char])
	VARS
	self -> self: Buffer[char]
	other -> other: Buffer[char]

scope 284 Equals_impl_Buffer[i64] ability_impl (parent: )
	TYPES
	Self -> Buffer[i64]({len: u64, data: i64*})

scope 285 Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals fn (parent: Equals_impl_Buffer[i64])
	VARS
	self -> self: Buffer[i64]
	other -> other: Buffer[i64]

scope 286 BufferIterator.fromBuffer fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> BufferIterator.fromBuffer.'T

scope 287 BufferIterator.fromBuffer.ability_impl ability_impl (parent: BufferIterator.fromBuffer)

scope 288 Iterator_impl_BufferIterator[T] ability_impl (parent: )
	TYPES
	Item -> Iterator_impl_BufferIterator[T].'T
	T -> Iterator_impl_BufferIterator[T].'T
	Self -> BufferIterator[Iterator_impl_BufferIterator[T].'T]({buf: Buffer[Iterator_impl_BufferIterator[T].'T]({len: u64, data: Iterator_impl_BufferIterator[T].'T*}), pos: u64})

scope 289 Iterator_impl_BufferIterator[T].ability_impl ability_impl (parent: Iterator_impl_BufferIterator[T])

scope 290 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	self -> self: BufferIterator[T]*

scope 291 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_sizeHint fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 292 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_advanceBy fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 293 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_nth fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 294 Iterable_impl_Buffer[T] ability_impl (parent: )
	TYPES
	Item -> Iterable_impl_Buffer[T].'T
	T -> Iterable_impl_Buffer[T].'T
	Self -> Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*})
	I -> BufferIterator[Iterable_impl_Buffer[T].'T]({buf: Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*}), pos: u64})

scope 295 Iterable_impl_Buffer[T].ability_impl ability_impl (parent: Iterable_impl_Buffer[T])

scope 296 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_Buffer[T].'T

scope 297 ability_impl ability_impl (parent: )
	TYPES
	Item -> Iterable_impl_Buffer[T].'T
	T -> Iterable_impl_Buffer[T].'T
	Self -> BufferIterator[Iterable_impl_Buffer[T].'T]({buf: Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*}), pos: u64})

scope 298 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 299 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 300 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 301 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 302 Iterable_impl_Buffer[T].Iterable_Buffer[T]_iterator fn (parent: Iterable_impl_Buffer[T])
	VARS
	self -> self: Buffer[T]

scope 303 Opt.isSome fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	__match_subject_680 -> __match_subject_680: Opt[T]
	TYPES
	T -> Opt.isSome.'T

scope 304 Opt.isSome.ability_impl ability_impl (parent: Opt.isSome)

scope 305 Opt.isNone fn (parent: Opt)
	VARS
	__match_subject_682 -> __match_subject_682: Opt[T]
	self -> self: Opt[T]
	TYPES
	T -> Opt.isNone.'T

scope 306 Opt.isNone.ability_impl ability_impl (parent: Opt.isNone)

scope 307 Opt.get fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> Opt.get.'T

scope 308 Opt.get.ability_impl ability_impl (parent: Opt.get)

scope 309 Opt.opt_equals fn (parent: Opt)
	VARS
	b -> b: Opt[T]
	a -> a: Opt[T]
	TYPES
	T -> Opt.opt_equals.'T

scope 310 Opt.opt_equals.ability_impl ability_impl (parent: Opt.opt_equals)
	TYPES
	Self -> Opt.opt_equals.'T

scope 311 Opt.opt_equals.ability_impl.Equals_T_equals fn (parent: Opt.opt_equals.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 312 none fn (parent: )
	TYPES
	T -> none.'T

scope 313 none.ability_impl ability_impl (parent: none)

scope 314 some fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> some.'T

scope 315 some.ability_impl ability_impl (parent: some)

scope 316 Equals_impl_Opt[T] ability_impl (parent: )
	TYPES
	T -> Equals_impl_Opt[T].'T
	Self -> Opt[Equals_impl_Opt[T].'T](enum None | Some(Equals_impl_Opt[T].'T))

scope 317 Equals_impl_Opt[T].ability_impl ability_impl (parent: Equals_impl_Opt[T])

scope 318 Equals_impl_Opt[T].ability_impl ability_impl (parent: Equals_impl_Opt[T])
	TYPES
	Self -> Equals_impl_Opt[T].'T

scope 319 Equals_impl_Opt[T].ability_impl.Equals_T_equals fn (parent: Equals_impl_Opt[T].ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 320 Equals_impl_Opt[T].Equals_Opt[T]_equals fn (parent: Equals_impl_Opt[T])
	VARS
	self -> self: Opt[T]
	other -> other: Opt[T]

scope 321 Unwrap_impl_Opt[T] ability_impl (parent: )
	TYPES
	Inner -> Unwrap_impl_Opt[T].'T
	T -> Unwrap_impl_Opt[T].'T
	Self -> Opt[Unwrap_impl_Opt[T].'T](enum None | Some(Unwrap_impl_Opt[T].'T))

scope 322 Unwrap_impl_Opt[T].ability_impl ability_impl (parent: Unwrap_impl_Opt[T])

scope 323 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue fn (parent: Unwrap_impl_Opt[T])
	VARS
	self -> self: Opt[T]
	__match_subject_695 -> __match_subject_695: Opt[T]

scope 324 Unwrap_impl_Opt[T].Unwrap_Opt[T]_unwrap fn (parent: Unwrap_impl_Opt[T])
	VARS
	self -> self: Opt[T]

scope 325 Unwrap_impl_Opt[T].Unwrap_Opt[T]_make fn (parent: Unwrap_impl_Opt[T])
	VARS
	t -> t: T

scope 326 Show_impl_Opt[T] ability_impl (parent: )
	TYPES
	T -> Show_impl_Opt[T].'T
	Self -> Opt[Show_impl_Opt[T].'T](enum None | Some(Show_impl_Opt[T].'T))

scope 327 Show_impl_Opt[T].ability_impl ability_impl (parent: Show_impl_Opt[T])

scope 328 Show_impl_Opt[T].ability_impl ability_impl (parent: Show_impl_Opt[T])
	TYPES
	Self -> Show_impl_Opt[T].'T

scope 329 Show_impl_Opt[T].ability_impl.Show_T_show fn (parent: Show_impl_Opt[T].ability_impl)
	VARS
	self -> self: T

scope 330 Show_impl_Opt[T].Show_Opt[T]_show fn (parent: Show_impl_Opt[T])
	VARS
	self -> self: Opt[T]

scope 331 List.empty fn (parent: List)
	TYPES
	T -> List.empty.'T

scope 332 List.empty.ability_impl ability_impl (parent: List.empty)

scope 333 List.filled fn (parent: List)
	VARS
	size -> size: u64
	value -> value: T
	buffer -> buffer: Buffer[T]
	TYPES
	T -> List.filled.'T

scope 334 List.filled.ability_impl ability_impl (parent: List.filled)

scope 335 List.withCapacity fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[T]
	TYPES
	T -> List.withCapacity.'T

scope 336 List.withCapacity.ability_impl ability_impl (parent: List.withCapacity)

scope 337 List.reserve fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[T]
	self -> self: List[T]*
	count -> count: u64
	TYPES
	T -> List.reserve.'T

scope 338 List.reserve.ability_impl ability_impl (parent: List.reserve)

scope 339 List.single fn (parent: List)
	VARS
	value -> value: T
	TYPES
	T -> List.single.'T

scope 340 List.single.ability_impl ability_impl (parent: List.single)

scope 341 List.wrapBuffer fn (parent: List)
	VARS
	buffer -> buffer: Buffer[T]
	TYPES
	T -> List.wrapBuffer.'T

scope 342 List.wrapBuffer.ability_impl ability_impl (parent: List.wrapBuffer)

scope 343 List.toBuffer fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.toBuffer.'T

scope 344 List.toBuffer.ability_impl ability_impl (parent: List.toBuffer)

scope 345 List.innerBuffer fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.innerBuffer.'T

scope 346 List.innerBuffer.ability_impl ability_impl (parent: List.innerBuffer)

scope 347 List.cap fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.cap.'T

scope 348 List.cap.ability_impl ability_impl (parent: List.cap)

scope 349 List.getRef fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.getRef.'T

scope 350 List.getRef.ability_impl ability_impl (parent: List.getRef)

scope 351 List.set fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	elem -> elem: T
	TYPES
	T -> List.set.'T

scope 352 List.set.ability_impl ability_impl (parent: List.set)

scope 353 List.get fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.get.'T

scope 354 List.get.ability_impl ability_impl (parent: List.get)

scope 355 List.getOpt fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.getOpt.'T

scope 356 List.getOpt.ability_impl ability_impl (parent: List.getOpt)

scope 357 List._grow fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[T]*
	elemSize -> elemSize: u64
	TYPES
	T -> List._grow.'T

scope 358 List._grow.ability_impl ability_impl (parent: List._grow)

scope 359 List.cloned fn (parent: List)
	VARS
	self -> self: List[T]
	newBuffer -> newBuffer: Buffer[T]
	TYPES
	T -> List.cloned.'T

scope 360 List.cloned.ability_impl ability_impl (parent: List.cloned)

scope 361 List.push fn (parent: List)
	VARS
	startLength -> startLength: u64
	self -> self: List[T]*
	elem -> elem: T
	TYPES
	T -> List.push.'T

scope 362 List.push.ability_impl ability_impl (parent: List.push)

scope 363 List.slice fn (parent: List)
	VARS
	end -> end: u64
	self -> self: List[T]
	start -> start: u64
	TYPES
	T -> List.slice.'T

scope 364 List.slice.ability_impl ability_impl (parent: List.slice)

scope 365 List.isEmpty fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.isEmpty.'T

scope 366 List.isEmpty.ability_impl ability_impl (parent: List.isEmpty)

scope 367 List.nonEmpty fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.nonEmpty.'T

scope 368 List.nonEmpty.ability_impl ability_impl (parent: List.nonEmpty)

scope 369 List.firstRef fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.firstRef.'T

scope 370 List.firstRef.ability_impl ability_impl (parent: List.firstRef)

scope 371 List.first fn (parent: List)
	VARS
	self -> self: List[T]
	__match_subject_748 -> __match_subject_748: Opt[T*]
	TYPES
	T -> List.first.'T

scope 372 List.first.ability_impl ability_impl (parent: List.first)

scope 373 List.lastRef fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.lastRef.'T

scope 374 List.lastRef.ability_impl ability_impl (parent: List.lastRef)

scope 375 List.last fn (parent: List)
	VARS
	__match_subject_755 -> __match_subject_755: Opt[T*]
	self -> self: List[T]
	TYPES
	T -> List.last.'T

scope 376 List.last.ability_impl ability_impl (parent: List.last)

scope 377 List.reverse fn (parent: List)
	VARS
	i -> mut i: u64
	self -> self: List[T]*
	TYPES
	T -> List.reverse.'T

scope 378 List.reverse.ability_impl ability_impl (parent: List.reverse)

scope 379 List.reversed fn (parent: List)
	VARS
	self -> self: List[T]
	clone -> clone: List[T]*
	TYPES
	T -> List.reversed.'T

scope 380 List.reversed.ability_impl ability_impl (parent: List.reversed)

scope 381 List.concat fn (parent: List)
	VARS
	self -> self: List[T]*
	other -> other: List[T]
	TYPES
	T -> List.concat.'T

scope 382 List.concat.ability_impl ability_impl (parent: List.concat)

scope 383 List.swap fn (parent: List)
	VARS
	indexA -> indexA: u64
	self -> self: List[T]*
	aRef -> aRef: T*
	bValue -> bValue: T
	indexB -> indexB: u64
	bRef -> bRef: T*
	TYPES
	T -> List.swap.'T

scope 384 List.swap.ability_impl ability_impl (parent: List.swap)

scope 385 List.sort fn (parent: List)
	VARS
	halfIndex -> halfIndex: u64
	i -> mut i: u64
	left -> left: List[T]*
	input -> input: List[T]*
	equal -> equal: List[T]*
	pivot -> pivot: T
	right -> right: List[T]*
	TYPES
	T -> List.sort.'T

scope 386 List.sort.ability_impl ability_impl (parent: List.sort)
	TYPES
	Self -> List.sort.'T

scope 387 List.sort.ability_impl.Comparable_T_compare fn (parent: List.sort.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 388 List.sorted fn (parent: List)
	VARS
	copy -> copy: List[T]*
	self -> self: List[T]
	TYPES
	T -> List.sorted.'T

scope 389 List.sorted.ability_impl ability_impl (parent: List.sorted)
	TYPES
	Self -> List.sorted.'T

scope 390 List.sorted.ability_impl.Comparable_T_compare fn (parent: List.sorted.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 391 List.join fn (parent: List)
	VARS
	b -> b: StringBuilder
	self -> self: List[T]
	sep -> sep: string
	TYPES
	T -> List.join.'T

scope 392 List.join.ability_impl ability_impl (parent: List.join)
	TYPES
	Self -> List.join.'T

scope 393 List.join.ability_impl.Show_T_show fn (parent: List.join.ability_impl)
	VARS
	self -> self: T

scope 394 Equals_impl_List[u8] ability_impl (parent: )
	TYPES
	Self -> List[u8]({len: u64, buffer: Buffer[u8]({len: u64, data: u8*})})

scope 395 Equals_impl_List[u8].Equals_List[u8]_equals fn (parent: Equals_impl_List[u8])
	VARS
	self -> self: List[u8]
	other -> other: List[u8]

scope 396 Equals_impl_List[i64] ability_impl (parent: )
	TYPES
	Self -> List[i64]({len: u64, buffer: Buffer[i64]({len: u64, data: i64*})})

scope 397 Equals_impl_List[i64].Equals_List[i64]_equals fn (parent: Equals_impl_List[i64])
	VARS
	self -> self: List[i64]
	other -> other: List[i64]

scope 398 Equals_impl_List[T] ability_impl (parent: )
	TYPES
	T -> Equals_impl_List[T].'T
	Self -> List[Equals_impl_List[T].'T]({len: u64, buffer: Buffer[Equals_impl_List[T].'T]({len: u64, data: Equals_impl_List[T].'T*})})

scope 399 Equals_impl_List[T].ability_impl ability_impl (parent: Equals_impl_List[T])

scope 400 Equals_impl_List[T].ability_impl ability_impl (parent: Equals_impl_List[T])
	TYPES
	Self -> Equals_impl_List[T].'T

scope 401 Equals_impl_List[T].ability_impl.Equals_T_equals fn (parent: Equals_impl_List[T].ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 402 Equals_impl_List[T].Equals_List[T]_equals fn (parent: Equals_impl_List[T])
	VARS
	self -> self: List[T]
	other -> other: List[T]

scope 403 Show_impl_List[T] ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T
	Self -> List[Show_impl_List[T].'T]({len: u64, buffer: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})})

scope 404 Show_impl_List[T].ability_impl ability_impl (parent: Show_impl_List[T])

scope 405 Show_impl_List[T].ability_impl ability_impl (parent: Show_impl_List[T])
	TYPES
	Self -> Show_impl_List[T].'T

scope 406 Show_impl_List[T].ability_impl.Show_T_show fn (parent: Show_impl_List[T].ability_impl)
	VARS
	self -> self: T

scope 407 Show_impl_List[T].Show_List[T]_show fn (parent: Show_impl_List[T])
	VARS
	b -> b: StringBuilder
	self -> self: List[T]

scope 408 Iterable_impl_List[T] ability_impl (parent: )
	TYPES
	Item -> Iterable_impl_List[T].'T
	T -> Iterable_impl_List[T].'T
	Self -> List[Iterable_impl_List[T].'T]({len: u64, buffer: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})})
	I -> BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})

scope 409 Iterable_impl_List[T].ability_impl ability_impl (parent: Iterable_impl_List[T])

scope 410 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_List[T].'T

scope 411 ability_impl ability_impl (parent: )
	TYPES
	Item -> Iterable_impl_List[T].'T
	T -> Iterable_impl_List[T].'T
	Self -> BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})

scope 412 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 413 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 414 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 415 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 416 Iterable_impl_List[T].Iterable_List[T]_iterator fn (parent: Iterable_impl_List[T])
	VARS
	self -> self: List[T]

scope 417 string.get fn (parent: string)
	VARS
	index -> index: u64
	self -> self: string

scope 418 string.toBytes fn (parent: string)
	VARS
	sneakyCasted -> sneakyCasted: Buffer[u8]
	self -> self: string
	copied -> copied: Buffer[char]

scope 419 string.innerBuffer fn (parent: string)
	VARS
	self -> self: string

scope 420 string.toBuffer fn (parent: string)
	VARS
	self -> self: string

scope 421 string.toList fn (parent: string)
	VARS
	self -> self: string

scope 422 string.wrapList fn (parent: string)
	VARS
	list -> list: List[char]

scope 423 string.wrapBuffer fn (parent: string)
	VARS
	buffer -> buffer: Buffer[char]

scope 424 string.wrapBytes fn (parent: string)
	VARS
	sneakyCasted -> sneakyCasted: Buffer[char]
	buffer -> buffer: Buffer[u8]

scope 425 string.fromBytes fn (parent: string)
	VARS
	buffer -> buffer: Buffer[u8]
	copied -> copied: Buffer[u8]

scope 426 string.fromBuffer fn (parent: string)
	VARS
	buffer -> buffer: Buffer[char]
	copied -> copied: Buffer[char]

scope 427 string.len fn (parent: string)
	VARS
	self -> self: string

scope 428 string.isEmpty fn (parent: string)
	VARS
	self -> self: string

scope 429 string.nonEmpty fn (parent: string)
	VARS
	self -> self: string

scope 430 string.first fn (parent: string)
	VARS
	self -> self: string

scope 431 string.indexOf fn (parent: string)
	VARS
	i -> mut i: u64
	self -> self: string
	c -> c: char

scope 432 string.concat fn (parent: string)
	VARS
	self -> self: string
	other -> other: string

scope 433 string.appendChar fn (parent: string)
	VARS
	self -> self: string
	newBuffer -> newBuffer: Buffer[char]
	newLength -> newLength: u64
	c -> c: char

scope 434 string.splitByChar fn (parent: string)
	VARS
	accum -> accum: List[char]*
	self -> self: string
	results -> results: List[List[char]]*
	delim -> delim: char

scope 435 string.indexOfString fn (parent: string)
	VARS
	i -> mut i: u64
	self -> self: string
	target -> target: string

scope 436 string.substring fn (parent: string)
	VARS
	end -> end: u64
	self -> self: string
	start -> start: u64

scope 437 string.take fn (parent: string)
	VARS
	self -> self: string
	count -> count: u64

scope 438 string.drop fn (parent: string)
	VARS
	self -> self: string
	count -> count: u64

scope 439 string.startsWith fn (parent: string)
	VARS
	self -> self: string
	other -> other: string

scope 440 string.toCString fn (parent: string)
	VARS
	self -> self: string

scope 441 string.fromCString fn (parent: string)
	VARS
	i -> mut i: u64
	cString -> cString: Pointer
	self -> self: List[char]*

scope 442 string.toInt fn (parent: string)
	VARS
	neg -> neg: bool
	i -> mut i: u64
	self -> self: string
	total -> mut total: u64

scope 443 Equals_impl_string ability_impl (parent: )
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 444 Equals_impl_string.Equals_string_equals fn (parent: Equals_impl_string)
	VARS
	self -> self: string
	that -> that: string

scope 445 Show_impl_string ability_impl (parent: )
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 446 Show_impl_string.Show_string_show fn (parent: Show_impl_string)
	VARS
	self -> self: string

scope 447 Iterable_impl_string ability_impl (parent: )
	TYPES
	Item -> char
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})
	I -> BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})

scope 448 ability_impl ability_impl (parent: )
	TYPES
	T -> char

scope 449 ability_impl ability_impl (parent: )
	TYPES
	Item -> char
	T -> char
	Self -> BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})

scope 450 ability_impl.Iterator_BufferIterator[char]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[char]*

scope 451 ability_impl.Iterator_BufferIterator[char]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[char]

scope 452 ability_impl.Iterator_BufferIterator[char]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[char]*
	n -> n: u64

scope 453 ability_impl.Iterator_BufferIterator[char]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[char]*
	n -> n: u64

scope 454 Iterable_impl_string.Iterable_string_iterator fn (parent: Iterable_impl_string)
	VARS
	self -> self: string

scope 455 Iterable_impl_string* ability_impl (parent: )
	TYPES
	Item -> char
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})*
	I -> BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})

scope 456 Iterable_impl_string*.Iterable_string*_iterator fn (parent: Iterable_impl_string*)
	VARS
	self -> self: string*

scope 457 types.typeId fn (parent: types)
	TYPES
	T -> types.typeId.'T

scope 458 types.typeId.ability_impl ability_impl (parent: types.typeId)

scope 459 StringBuilder.withCapacity fn (parent: StringBuilder)
	VARS
	cap -> cap: u64
	parts -> parts: List[enum Char(char) | String(string)]*

scope 460 StringBuilder.new fn (parent: StringBuilder)

scope 461 StringBuilder.putChar fn (parent: StringBuilder)
	VARS
	self -> self: StringBuilder
	c -> c: char

scope 462 StringBuilder.putString fn (parent: StringBuilder)
	VARS
	s -> s: string
	self -> self: StringBuilder

scope 463 StringBuilder.putByte fn (parent: StringBuilder)
	VARS
	b -> b: u8
	self -> self: StringBuilder

scope 464 StringBuilder.len fn (parent: StringBuilder)
	VARS
	self -> self: StringBuilder
	len -> mut len: u64

scope 465 StringBuilder.build fn (parent: StringBuilder)
	VARS
	bytes -> bytes: List[char]*
	self -> self: StringBuilder

scope 466 Bits.bitNot fn (parent: Bits)
	VARS
	a -> a: i64

scope 467 Bits.bitAnd fn (parent: Bits)
	VARS
	b -> b: i64
	a -> a: i64

scope 468 Bits.bitOr fn (parent: Bits)
	VARS
	b -> b: i64
	a -> a: i64

scope 469 Bits.xor fn (parent: Bits)
	VARS
	b -> b: i64
	a -> a: i64

scope 470 Bits.shiftLeft fn (parent: Bits)
	VARS
	b -> b: i64
	a -> a: i64

scope 471 Bits.shiftRight fn (parent: Bits)
	VARS
	b -> b: i64
	a -> a: i64

scope 472 Bitwise_impl_u8 ability_impl (parent: )
	TYPES
	Self -> u8

scope 473 Bitwise_impl_u8.Bitwise_u8_bitNot fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8

scope 474 Bitwise_impl_u8.Bitwise_u8_bitAnd fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 475 Bitwise_impl_u8.Bitwise_u8_bitOr fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 476 Bitwise_impl_u8.Bitwise_u8_xor fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 477 Bitwise_impl_u8.Bitwise_u8_shiftLeft fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 478 Bitwise_impl_u8.Bitwise_u8_shiftRight fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 479 Bitwise_impl_u16 ability_impl (parent: )
	TYPES
	Self -> u16

scope 480 Bitwise_impl_u16.Bitwise_u16_bitNot fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16

scope 481 Bitwise_impl_u16.Bitwise_u16_bitAnd fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 482 Bitwise_impl_u16.Bitwise_u16_bitOr fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 483 Bitwise_impl_u16.Bitwise_u16_xor fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 484 Bitwise_impl_u16.Bitwise_u16_shiftLeft fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 485 Bitwise_impl_u16.Bitwise_u16_shiftRight fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 486 Bitwise_impl_u32 ability_impl (parent: )
	TYPES
	Self -> u32

scope 487 Bitwise_impl_u32.Bitwise_u32_bitNot fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32

scope 488 Bitwise_impl_u32.Bitwise_u32_bitAnd fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 489 Bitwise_impl_u32.Bitwise_u32_bitOr fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 490 Bitwise_impl_u32.Bitwise_u32_xor fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 491 Bitwise_impl_u32.Bitwise_u32_shiftLeft fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 492 Bitwise_impl_u32.Bitwise_u32_shiftRight fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 493 Bitwise_impl_u64 ability_impl (parent: )
	TYPES
	Self -> u64

scope 494 Bitwise_impl_u64.Bitwise_u64_bitNot fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64

scope 495 Bitwise_impl_u64.Bitwise_u64_bitAnd fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 496 Bitwise_impl_u64.Bitwise_u64_bitOr fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 497 Bitwise_impl_u64.Bitwise_u64_xor fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 498 Bitwise_impl_u64.Bitwise_u64_shiftLeft fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 499 Bitwise_impl_u64.Bitwise_u64_shiftRight fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 500 Bitwise_impl_i8 ability_impl (parent: )
	TYPES
	Self -> i8

scope 501 Bitwise_impl_i8.Bitwise_i8_bitNot fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8

scope 502 Bitwise_impl_i8.Bitwise_i8_bitAnd fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 503 Bitwise_impl_i8.Bitwise_i8_bitOr fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 504 Bitwise_impl_i8.Bitwise_i8_xor fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 505 Bitwise_impl_i8.Bitwise_i8_shiftLeft fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 506 Bitwise_impl_i8.Bitwise_i8_shiftRight fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 507 Bitwise_impl_i16 ability_impl (parent: )
	TYPES
	Self -> i16

scope 508 Bitwise_impl_i16.Bitwise_i16_bitNot fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16

scope 509 Bitwise_impl_i16.Bitwise_i16_bitAnd fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 510 Bitwise_impl_i16.Bitwise_i16_bitOr fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 511 Bitwise_impl_i16.Bitwise_i16_xor fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 512 Bitwise_impl_i16.Bitwise_i16_shiftLeft fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 513 Bitwise_impl_i16.Bitwise_i16_shiftRight fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 514 Bitwise_impl_i32 ability_impl (parent: )
	TYPES
	Self -> i32

scope 515 Bitwise_impl_i32.Bitwise_i32_bitNot fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32

scope 516 Bitwise_impl_i32.Bitwise_i32_bitAnd fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 517 Bitwise_impl_i32.Bitwise_i32_bitOr fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 518 Bitwise_impl_i32.Bitwise_i32_xor fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 519 Bitwise_impl_i32.Bitwise_i32_shiftLeft fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 520 Bitwise_impl_i32.Bitwise_i32_shiftRight fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 521 Bitwise_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 522 Bitwise_impl_i64.Bitwise_i64_bitNot fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64

scope 523 Bitwise_impl_i64.Bitwise_i64_bitAnd fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 524 Bitwise_impl_i64.Bitwise_i64_bitOr fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 525 Bitwise_impl_i64.Bitwise_i64_xor fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 526 Bitwise_impl_i64.Bitwise_i64_shiftLeft fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 527 Bitwise_impl_i64.Bitwise_i64_shiftRight fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 528 Arena.regionSizeBytes fn (parent: Arena)
	VARS
	self -> self: Arena

scope 529 Arena.alignTo fn (parent: Arena)
	VARS
	baseAddress -> baseAddress: u64
	mask -> mask: u64
	aligned -> aligned: u64
	alignBytes -> alignBytes: u64
	sum -> sum: u64

scope 530 Arena.new fn (parent: Arena)
	VARS
	basePtr -> basePtr: Pointer
	initialMb -> initialMb: u64
	id -> id: string
	capacity -> capacity: u64

scope 531 Arena.pushRaw fn (parent: Arena)
	VARS
	align -> align: u64
	self -> self: Arena*
	newEnd -> newEnd: u64
	size -> size: u64
	dataStart -> dataStart: u64

scope 532 Arena.push fn (parent: Arena)
	VARS
	t -> t: T
	self -> self: Arena*
	dataStart -> dataStart: Pointer
	ref -> ref: T*
	TYPES
	T -> Arena.push.'T

scope 533 Arena.push.ability_impl ability_impl (parent: Arena.push)

scope 534 Arena.pushBytes fn (parent: Arena)
	VARS
	self -> self: Arena*
	newEnd -> newEnd: u64
	dataStart -> dataStart: u64
	count -> count: u64

scope 535 Arena.freeAll fn (parent: Arena)
	VARS
	size -> size: u64
	self -> self: Arena*
	id -> id: string

scope 536 Allocator.initDefault fn (parent: Allocator)
	VARS
	temp_arena -> temp_arena: Arena

scope 537 Allocator.tempArena fn (parent: Allocator)
	VARS
	self -> self: Allocator

scope 538 IntRange.make fn (parent: IntRange)
	VARS
	end -> end: i64
	start -> start: i64

scope 539 IntRange.upTo fn (parent: IntRange)
	VARS
	end -> end: i64

scope 540 IntRangeIterator.make fn (parent: IntRangeIterator)
	VARS
	range -> range: IntRange

scope 541 IntRangeIterator.position fn (parent: IntRangeIterator)
	VARS
	self -> self: IntRangeIterator

scope 542 IntRangeIterator.size fn (parent: IntRangeIterator)
	VARS
	self -> self: IntRangeIterator

scope 543 IntRangeIterator.stepBy fn (parent: IntRangeIterator)
	VARS
	nextPos -> nextPos: i64
	self -> self: IntRangeIterator*
	n -> n: u64

scope 544 IntRangeIterator.current fn (parent: IntRangeIterator)
	VARS
	self -> self: IntRangeIterator

scope 545 Iterator_impl_IntRangeIterator ability_impl (parent: )
	TYPES
	Item -> i64
	Self -> IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})

scope 546 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	self -> self: IntRangeIterator*

scope 547 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_sizeHint fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	remaining -> remaining: i64
	self -> self: IntRangeIterator

scope 548 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_advanceBy fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	self -> self: IntRangeIterator*
	n -> n: u64

scope 549 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_nth fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	self -> self: IntRangeIterator*
	n -> n: u64

scope 550 Iterable_impl_IntRange ability_impl (parent: )
	TYPES
	Item -> i64
	Self -> IntRange({start: i64, end: i64})
	I -> IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})

scope 551 Iterable_impl_IntRange.Iterable_IntRange_iterator fn (parent: Iterable_impl_IntRange)
	VARS
	self -> self: IntRange

scope 552 testBasics fn (parent: )
	VARS
	b -> b: Opt[bool]
	p -> p: Opt[PointMaybeY]
	c -> c: Opt[i64]

scope 553 testCoalesceAccessor fn (parent: )
	VARS
	maybeUser -> maybeUser: Opt[{name: string, age: i64}]

scope 554 testComplex fn (parent: )
	VARS
	my_point -> my_point: WeirdPoint
	my_arr -> mut my_arr: List[Opt[WeirdPoint]]

scope 555 noNum fn (parent: )

scope 556 someNum fn (parent: )

scope 557 optElseOperator fn (parent: )
	VARS
	result -> result: i64

scope 558 blanketImpls fn (parent: )

scope 559 main fn (parent: )

scope 560 assert.block block (parent: assert)

scope 561 assert.block.block block (parent: assert.block)

scope 562 crash.block block (parent: crash)
	VARS
	line -> line: u64
	s -> s: string
	filename -> filename: string

scope 563 crash.block.block block (parent: crash.block)
	VARS
	__sb_494 -> __sb_494: StringBuilder

scope 564 assertEquals.block block (parent: assertEquals)

scope 565 assertEquals.block.block block (parent: assertEquals.block)

scope 566 assertEquals.block.block.block block (parent: assertEquals.block.block)
	VARS
	__sb_496 -> __sb_496: StringBuilder

scope 567 sizeOf_spec_T_1 fn (parent: )
	TYPES
	T -> new.'T

scope 568 Buffer.fromRawParts_spec_Pointer_1 fn (parent: Buffer)
	VARS
	data -> data: Pointer
	len -> len: u64
	TYPES
	T -> Pointer

scope 569 List.withCapacity_spec_string_1 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 570 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer

scope 571 ability_impl ability_impl (parent: )
	TYPES
	Item -> Pointer
	T -> Pointer
	I -> BufferIterator[Pointer]({buf: Buffer[Pointer]({len: u64, data: Pointer*}), pos: u64})
	Self -> Buffer[Pointer]({len: u64, data: Pointer*})

scope 572 ability_impl.Iterable_Buffer[Pointer]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[Pointer]

scope 573 sys.parseMainArgs.for for (parent: sys.parseMainArgs)
	VARS
	__yieldedColl_522 -> __yieldedColl_522: List[string]*
	itIndex -> mut itIndex: u64
	__iter_508 -> __iter_508: BufferIterator[Pointer]*

scope 574 sys.parseMainArgs.for.block block (parent: sys.parseMainArgs.for)
	VARS
	__next_515 -> __next_515: Opt[Pointer]

scope 575 sys.parseMainArgs.for.block.block block (parent: sys.parseMainArgs.for.block)
	VARS
	__block_expr_val_523 -> __block_expr_val_523: string
	cstr -> cstr: Pointer

scope 576 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer

scope 577 ability_impl ability_impl (parent: )
	TYPES
	Item -> Pointer
	T -> Pointer
	Self -> BufferIterator[Pointer]({buf: Buffer[Pointer]({len: u64, data: Pointer*}), pos: u64})

scope 578 ability_impl.Iterator_BufferIterator[Pointer]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[Pointer]*

scope 579 ability_impl.Iterator_BufferIterator[Pointer]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[Pointer]

scope 580 ability_impl.Iterator_BufferIterator[Pointer]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[Pointer]*
	n -> n: u64

scope 581 ability_impl.Iterator_BufferIterator[Pointer]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[Pointer]*
	n -> n: u64

scope 582 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer

scope 583 ability_impl ability_impl (parent: )
	TYPES
	Inner -> Pointer
	T -> Pointer
	Self -> Opt[Pointer](enum None | Some(Pointer))

scope 584 ability_impl.Unwrap_Opt[Pointer]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Pointer]
	__match_subject_1096 -> __match_subject_1096: Opt[Pointer]

scope 585 ability_impl.Unwrap_Opt[Pointer]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Pointer]

scope 586 ability_impl.Unwrap_Opt[Pointer]_make fn (parent: ability_impl)
	VARS
	t -> t: Pointer

scope 587 Buffer.get_spec_Pointer_1 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Pointer]
	tRef -> tRef: Pointer*
	TYPES
	T -> Pointer

scope 588 List.push_spec_string_1 fn (parent: List)
	VARS
	startLength -> startLength: u64
	self -> self: List[string]*
	elem -> elem: string
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 589 Opt.isSome_spec_Pointer_1 fn (parent: Opt)
	VARS
	self -> self: Opt[Pointer]
	__match_subject_1108 -> __match_subject_1108: Opt[Pointer]
	TYPES
	T -> Pointer

scope 590 sys.parseMainArgs.for.block.block block (parent: sys.parseMainArgs.for.block)

scope 591 List.toBuffer_spec_string_1 fn (parent: List)
	VARS
	self -> self: List[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 592 Buffer._allocate_spec_u8_1 fn (parent: Buffer)
	VARS
	data -> data: u8*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> u8

scope 593 sys.readLine.block block (parent: sys.readLine)

scope 594 sys.readLine.block.block block (parent: sys.readLine.block)

scope 595 sys.readLine.block block (parent: sys.readLine)

scope 596 Buffer.get_spec_u8_2 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[u8]
	tRef -> tRef: u8*
	TYPES
	T -> u8

scope 597 sys.readLine.block.block block (parent: sys.readLine.block)

scope 598 Buffer.set_spec_u8_1 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[u8]
	tRef -> tRef: u8*
	elem -> elem: u8
	TYPES
	T -> u8

scope 599 Buffer.fromRawParts_spec_char_2 fn (parent: Buffer)
	VARS
	data -> data: Pointer
	len -> len: u64
	TYPES
	T -> char

scope 600 assertMsg.block block (parent: assertMsg)

scope 601 assertMsg.block.block block (parent: assertMsg.block)

scope 602 assertMsg.block.block.block block (parent: assertMsg.block.block)
	VARS
	__sb_546 -> __sb_546: StringBuilder

scope 603 char.toString.block block (parent: char.toString)
	VARS
	__list_literal_548 -> __list_literal_548: List[char]*

scope 604 List.withCapacity_spec_char_2 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[char]
	TYPES
	T -> char

scope 605 List.push_spec_char_2 fn (parent: List)
	VARS
	startLength -> startLength: u64
	self -> self: List[char]*
	elem -> elem: char
	TYPES
	T -> char

scope 606 char.toDigitValue.block block (parent: char.toDigitValue)

scope 607 char.toDigitValue.block.block block (parent: char.toDigitValue.block)

scope 608 char.toDigitValue.block block (parent: char.toDigitValue)

scope 609 Show_impl_bool.Show_bool_show.block block (parent: Show_impl_bool.Show_bool_show)

scope 610 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 611 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 612 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 613 Show_impl_i64.Show_i64_show.block.while while (parent: Show_impl_i64.Show_i64_show.block)
	VARS
	d -> d: i64
	c -> c: char

scope 614 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 615 Show_impl_i64.Show_i64_show.block.block block (parent: Show_impl_i64.Show_i64_show.block)

scope 616 List.reversed_spec_char_1 fn (parent: List)
	VARS
	self -> self: List[char]
	clone -> clone: List[char]*
	TYPES
	T -> char

scope 617 Comparable_impl_i64.Comparable_i64_compare.block block (parent: Comparable_impl_i64.Comparable_i64_compare)

scope 618 Comparable_impl_i64.Comparable_i64_compare.block block (parent: Comparable_impl_i64.Comparable_i64_compare)

scope 619 Comparable_impl_u64.Comparable_u64_compare.block block (parent: Comparable_impl_u64.Comparable_u64_compare)

scope 620 Comparable_impl_u64.Comparable_u64_compare.block block (parent: Comparable_impl_u64.Comparable_u64_compare)

scope 621 Comparable_impl_u8.Comparable_u8_compare.block block (parent: Comparable_impl_u8.Comparable_u8_compare)

scope 622 Comparable_impl_u8.Comparable_u8_compare.block block (parent: Comparable_impl_u8.Comparable_u8_compare)

scope 623 formatUInt.block block (parent: formatUInt)

scope 624 formatUInt.block.block block (parent: formatUInt.block)

scope 625 formatUInt.block block (parent: formatUInt)

scope 626 formatUInt.block.block block (parent: formatUInt.block)
	VARS
	secondDigit -> secondDigit: char
	first -> first: u64
	firstDigit -> firstDigit: char
	second -> second: u64

scope 627 formatUInt.block block (parent: formatUInt)
	VARS
	remaining -> mut remaining: u64
	digits -> digits: List[char]*

scope 628 formatUInt.block.block block (parent: formatUInt.block)

scope 629 formatUInt.block.block.while while (parent: formatUInt.block.block)
	VARS
	d -> d: u64
	c -> c: char

scope 630 List.reverse_spec_char_1 fn (parent: List)
	VARS
	i -> mut i: u64
	self -> self: List[char]*
	TYPES
	T -> char

scope 631 List.toBuffer_spec_char_2 fn (parent: List)
	VARS
	self -> self: List[char]
	TYPES
	T -> char

scope 632 Show_impl_u64.Show_u64_show.block block (parent: Show_impl_u64.Show_u64_show)

scope 633 Show_impl_u64.Show_u64_show.block block (parent: Show_impl_u64.Show_u64_show)

scope 634 Show_impl_u64.Show_u64_show.block.while while (parent: Show_impl_u64.Show_u64_show.block)
	VARS
	d -> d: u64
	c -> c: char

scope 635 Try_impl_Result[S, F].Try_Result[S, F]_isOk.block block (parent: Try_impl_Result[S, F].Try_Result[S, F]_isOk)

scope 636 Try_impl_Result[S, F].Try_Result[S, F]_isOk.block.match_arm match_arm (parent: Try_impl_Result[S, F].Try_Result[S, F]_isOk.block)
	VARS
	__payload_Ok_574 -> __payload_Ok_574: S

scope 637 Try_impl_Result[S, F].Try_Result[S, F]_isOk.block.match_arm match_arm (parent: Try_impl_Result[S, F].Try_Result[S, F]_isOk.block)

scope 638 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)

scope 639 ability_impl ability_impl (parent: )
	TYPES
	Inner -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)
	Self -> Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)))

scope 640 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_1136 -> __match_subject_1136: Opt[Result[S, F].Err(F)]
	self -> self: Opt[Result[S, F].Err(F)]

scope 641 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]

scope 642 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Err(F)

scope 643 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)

scope 644 ability_impl ability_impl (parent: )
	TYPES
	Inner -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)
	Self -> Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)))

scope 645 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]
	__match_subject_1139 -> __match_subject_1139: Opt[Result[S, F].Ok(S)]

scope 646 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]

scope 647 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Ok(S)

scope 648 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block block (parent: Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue)

scope 649 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block)
	VARS
	__payload_Ok_582 -> __payload_Ok_582: S

scope 650 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block)

scope 651 ability_impl ability_impl (parent: )
	TYPES
	F -> Unwrap_impl_Result[S, F].'F
	S -> Unwrap_impl_Result[S, F].'S

scope 652 ability_impl ability_impl (parent: )
	TYPES
	T -> Unwrap_impl_Result[S, F].'S
	E -> Unwrap_impl_Result[S, F].'F
	F -> Unwrap_impl_Result[S, F].'F
	Self -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F](enum Ok(Unwrap_impl_Result[S, F].'S) | Err(Unwrap_impl_Result[S, F].'F))
	S -> Unwrap_impl_Result[S, F].'S

scope 653 ability_impl.Try_Result[S, F]_makeError fn (parent: ability_impl)
	VARS
	e -> e: F

scope 654 ability_impl.Try_Result[S, F]_makeOk fn (parent: ability_impl)
	VARS
	t -> t: S

scope 655 ability_impl.Try_Result[S, F]_isOk fn (parent: ability_impl)
	VARS
	self -> self: Result[S, F]
	__match_subject_1142 -> __match_subject_1142: Result[S, F]

scope 656 ability_impl.Try_Result[S, F]_getError fn (parent: ability_impl)
	VARS
	self -> self: Result[S, F]

scope 657 ability_impl.Try_Result[S, F]_getOk fn (parent: ability_impl)
	VARS
	self -> self: Result[S, F]

scope 658 sizeOfStride_spec_T_1 fn (parent: )
	TYPES
	T -> Buffer.bufferLenBytes.'T

scope 659 Buffer._allocate.block block (parent: Buffer._allocate)

scope 660 Buffer._allocate.block.block block (parent: Buffer._allocate.block)

scope 661 Buffer._allocate.block block (parent: Buffer._allocate)
	VARS
	sizeBytes -> sizeBytes: u64

scope 662 Buffer.bufferLenBytes_spec_T_1 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer._allocate.'T

scope 663 Buffer._copyFrom.block block (parent: Buffer._copyFrom)

scope 664 Buffer._copyFrom.block.block block (parent: Buffer._copyFrom.block)

scope 665 Buffer._copyFrom.block.block.block block (parent: Buffer._copyFrom.block.block)
	VARS
	__sb_592 -> __sb_592: StringBuilder

scope 666 Buffer._copyFrom.block block (parent: Buffer._copyFrom)

scope 667 Buffer._copyFrom.block.block block (parent: Buffer._copyFrom.block)

scope 668 Buffer._copyFrom.block.block.block block (parent: Buffer._copyFrom.block.block)
	VARS
	__sb_593 -> __sb_593: StringBuilder

scope 669 Buffer.bufferLenBytes_spec_T_2 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer._copyFrom.'T

scope 670 Buffer.dataPointer_spec_T_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer._copyFrom.'T

scope 671 Buffer._allocate_spec_T_2 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer._enlargedClone.'T

scope 672 Buffer._copyFrom_spec_T_1 fn (parent: Buffer)
	VARS
	source -> source: Buffer[T]
	dest -> dest: Buffer[T]
	count -> count: u64
	TYPES
	T -> Buffer._enlargedClone.'T

scope 673 Buffer.bufferLenBytes_spec_T_3 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer.lenBytes.'T

scope 674 Buffer._allocate_spec_T_3 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer.empty.'T

scope 675 Buffer._allocate_spec_T_4 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer.filled.'T

scope 676 Buffer.filled.block block (parent: Buffer.filled)

scope 677 Buffer.filled.block.while while (parent: Buffer.filled.block)

scope 678 Buffer.set_spec_T_2 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	elem -> elem: T
	TYPES
	T -> Buffer.filled.'T

scope 679 Buffer.slice.block block (parent: Buffer.slice)

scope 680 Buffer.slice.block.block block (parent: Buffer.slice.block)

scope 681 Buffer.empty_spec_T_1 fn (parent: Buffer)
	TYPES
	T -> Buffer.slice.'T

scope 682 Buffer.slice.block block (parent: Buffer.slice)

scope 683 Buffer.slice.block.block block (parent: Buffer.slice.block)

scope 684 Buffer.slice.block.block.block block (parent: Buffer.slice.block.block)
	VARS
	__sb_610 -> __sb_610: StringBuilder

scope 685 Buffer.slice.block block (parent: Buffer.slice)

scope 686 Buffer.getRef_spec_T_1 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.slice.'T

scope 687 Buffer.slice_spec_T_1 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[T]
	start -> start: u64
	TYPES
	T -> Buffer.take.'T

scope 688 Buffer.slice_spec_T_2 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[T]
	start -> start: u64
	TYPES
	T -> Buffer.drop.'T

scope 689 Buffer.getRef.block block (parent: Buffer.getRef)

scope 690 Buffer.getRef.block.block block (parent: Buffer.getRef.block)

scope 691 Buffer.dataPointer_spec_T_2 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.getRef.'T

scope 692 Pointer.refAtIndex_spec_T_1 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Buffer.getRef.'T

scope 693 Buffer.getRef_spec_T_2 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.set.'T

scope 694 Buffer.getRef_spec_T_3 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.get.'T

scope 695 Buffer.lenBytes_spec_T_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.cloned.'T

scope 696 Buffer.dataPointer_spec_T_3 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.cloned.'T

scope 697 Buffer.firstRef.block block (parent: Buffer.firstRef)

scope 698 Buffer.isEmpty_spec_T_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.firstRef.'T

scope 699 Buffer.firstRef.block.block block (parent: Buffer.firstRef.block)

scope 700 Buffer.getRef_spec_T_4 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.firstRef.'T

scope 701 Buffer.firstRef.block block (parent: Buffer.firstRef)

scope 702 Buffer.first.block block (parent: Buffer.first)

scope 703 Buffer.firstRef_spec_T_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.first.'T

scope 704 Buffer.first.block.match_arm match_arm (parent: Buffer.first.block)

scope 705 Buffer.first.block.match_arm match_arm (parent: Buffer.first.block)
	VARS
	__payload_Some_640 -> __payload_Some_640: T*
	firstRef -> firstRef: T*

scope 706 Buffer.lastRef.block block (parent: Buffer.lastRef)

scope 707 Buffer.isEmpty_spec_T_2 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.lastRef.'T

scope 708 Buffer.lastRef.block.block block (parent: Buffer.lastRef.block)

scope 709 Buffer.getRef_spec_T_5 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.lastRef.'T

scope 710 Buffer.lastRef.block block (parent: Buffer.lastRef)

scope 711 Buffer.last.block block (parent: Buffer.last)

scope 712 Buffer.lastRef_spec_T_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.last.'T

scope 713 Buffer.last.block.match_arm match_arm (parent: Buffer.last.block)

scope 714 Buffer.last.block.match_arm match_arm (parent: Buffer.last.block)
	VARS
	lastRef -> lastRef: T*
	__payload_Some_647 -> __payload_Some_647: T*

scope 715 Buffer._enlargedClone_spec_T_1 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.concat.'T

scope 716 Buffer.slice_spec_T_3 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[T]
	start -> start: u64
	TYPES
	T -> Buffer.concat.'T

scope 717 Buffer._copyFrom_spec_T_2 fn (parent: Buffer)
	VARS
	source -> source: Buffer[T]
	dest -> dest: Buffer[T]
	count -> count: u64
	TYPES
	T -> Buffer.concat.'T

scope 718 Buffer.getRef_spec_T_6 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.swap.'T

scope 719 List.wrapBuffer_spec_T_1 fn (parent: List)
	VARS
	buffer -> buffer: Buffer[T]
	TYPES
	T -> Buffer.sorted.'T

scope 720 List.sort_spec_T_1 fn (parent: List)
	VARS
	input -> input: List[T]*
	TYPES
	T -> Buffer.sorted.'T

scope 721 List.toBuffer_spec_T_3 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> Buffer.sorted.'T

scope 722 Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals.block block (parent: Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals)

scope 723 Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals.block block (parent: Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals)

scope 724 Buffer.dataPointer_spec_u8_4 fn (parent: Buffer)
	VARS
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 725 Buffer.lenBytes_spec_u8_2 fn (parent: Buffer)
	VARS
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 726 Equals_impl_Buffer[char].Equals_Buffer[char]_equals.block block (parent: Equals_impl_Buffer[char].Equals_Buffer[char]_equals)

scope 727 Equals_impl_Buffer[char].Equals_Buffer[char]_equals.block block (parent: Equals_impl_Buffer[char].Equals_Buffer[char]_equals)

scope 728 Buffer.dataPointer_spec_char_5 fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 729 Buffer.lenBytes_spec_char_3 fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 730 Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals.block block (parent: Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals)

scope 731 Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals.block block (parent: Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals)

scope 732 Buffer.dataPointer_spec_i64_6 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 733 Buffer.lenBytes_spec_i64_4 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 734 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next.block block (parent: Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next)

scope 735 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next.block.block block (parent: Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 736 Buffer.get_spec_T_3 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Iterator_impl_BufferIterator[T].'T

scope 737 some_spec_T_1 fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> Iterator_impl_BufferIterator[T].'T

scope 738 some_spec_u64_2 fn (parent: )
	VARS
	value -> value: u64
	TYPES
	T -> u64

scope 739 BufferIterator.fromBuffer_spec_T_1 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> Iterable_impl_Buffer[T].'T

scope 740 Opt.isSome.block block (parent: Opt.isSome)

scope 741 Opt.isSome.block.match_arm match_arm (parent: Opt.isSome.block)
	VARS
	__payload_Some_681 -> __payload_Some_681: T

scope 742 Opt.isSome.block.match_arm match_arm (parent: Opt.isSome.block)

scope 743 Opt.isNone.block block (parent: Opt.isNone)

scope 744 Opt.isNone.block.match_arm match_arm (parent: Opt.isNone.block)

scope 745 Opt.isNone.block.match_arm match_arm (parent: Opt.isNone.block)

scope 746 Opt.get.block block (parent: Opt.get)
	VARS
	t -> t: T
	__if_target_683 -> __if_target_683: Opt[T]
	__payload_Some_684 -> __payload_Some_684: T

scope 747 Opt.get.block block (parent: Opt.get)

scope 748 Opt.opt_equals.block block (parent: Opt.opt_equals)
	VARS
	__if_target_686 -> __if_target_686: Opt[T]
	__payload_Some_687 -> __payload_Some_687: T
	at -> at: T

scope 749 Opt.opt_equals.block.block block (parent: Opt.opt_equals.block)

scope 750 Opt.opt_equals.block.block.block block (parent: Opt.opt_equals.block.block)
	VARS
	bt -> bt: T
	__if_target_689 -> __if_target_689: Opt[T]
	__payload_Some_690 -> __payload_Some_690: T

scope 751 Opt.opt_equals.block block (parent: Opt.opt_equals)
	VARS
	__match_subject_692 -> __match_subject_692: Opt[T]

scope 752 Opt.opt_equals.block.block block (parent: Opt.opt_equals.block)

scope 753 Opt.opt_equals.block.block.match_arm match_arm (parent: Opt.opt_equals.block.block)

scope 754 Opt.opt_equals.block.block.match_arm match_arm (parent: Opt.opt_equals.block.block)

scope 755 Opt.opt_equals_spec_T_1 fn (parent: Opt)
	VARS
	b -> b: Opt[T]
	a -> a: Opt[T]
	TYPES
	T -> Equals_impl_Opt[T].'T

scope 756 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block block (parent: Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue)

scope 757 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_696 -> __payload_Some_696: T

scope 758 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block)

scope 759 Opt.get_spec_T_1 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> Unwrap_impl_Opt[T].'T

scope 760 Show_impl_Opt[T].Show_Opt[T]_show.block block (parent: Show_impl_Opt[T].Show_Opt[T]_show)
	VARS
	v -> v: T
	__if_target_698 -> __if_target_698: Opt[T]
	__payload_Some_699 -> __payload_Some_699: T

scope 761 Show_impl_Opt[T].Show_Opt[T]_show.block.block block (parent: Show_impl_Opt[T].Show_Opt[T]_show.block)
	VARS
	__sb_701 -> __sb_701: StringBuilder

scope 762 List.withCapacity_spec_T_3 fn (parent: List)
	VARS
	cap -> cap: u64
	TYPES
	T -> List.empty.'T

scope 763 Buffer.filled_spec_T_1 fn (parent: Buffer)
	VARS
	size -> size: u64
	value -> value: T
	TYPES
	T -> List.filled.'T

scope 764 Buffer._allocate_spec_T_5 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> List.withCapacity.'T

scope 765 List.reserve.block block (parent: List.reserve)

scope 766 List.cap_spec_T_1 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.reserve.'T

scope 767 List.reserve.block.block block (parent: List.reserve.block)

scope 768 Buffer._enlargedClone_spec_T_2 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[T]
	TYPES
	T -> List.reserve.'T

scope 769 List.filled_spec_T_1 fn (parent: List)
	VARS
	size -> size: u64
	value -> value: T
	TYPES
	T -> List.single.'T

scope 770 Buffer.slice_spec_T_4 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[T]
	start -> start: u64
	TYPES
	T -> List.toBuffer.'T

scope 771 Buffer.getRef_spec_T_7 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> List.getRef.'T

scope 772 Buffer.set_spec_T_3 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	elem -> elem: T
	TYPES
	T -> List.set.'T

scope 773 List.get.block block (parent: List.get)

scope 774 List.get.block.block block (parent: List.get.block)

scope 775 Buffer.get_spec_T_4 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> List.get.'T

scope 776 List.getOpt.block block (parent: List.getOpt)

scope 777 List.getOpt.block.block block (parent: List.getOpt.block)

scope 778 Buffer.get_spec_T_5 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> List.getOpt.'T

scope 779 sizeOf_spec_T_2 fn (parent: )
	TYPES
	T -> List._grow.'T

scope 780 List._grow.block block (parent: List._grow)

scope 781 Buffer.isEmpty_spec_T_3 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> List._grow.'T

scope 782 List._grow.block.block block (parent: List._grow.block)

scope 783 List._grow.block.block.block block (parent: List._grow.block.block)

scope 784 List._grow.block block (parent: List._grow)

scope 785 List.cap_spec_T_2 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List._grow.'T

scope 786 List.reserve_spec_T_1 fn (parent: List)
	VARS
	self -> self: List[T]*
	count -> count: u64
	TYPES
	T -> List._grow.'T

scope 787 Buffer.cloned_spec_T_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> List.cloned.'T

scope 788 List.push.block block (parent: List.push)

scope 789 List.cap_spec_T_3 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.push.'T

scope 790 List.push.block.block block (parent: List.push.block)

scope 791 List._grow_spec_T_1 fn (parent: List)
	VARS
	self -> self: List[T]*
	TYPES
	T -> List.push.'T

scope 792 List.set_spec_T_1 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	elem -> elem: T
	TYPES
	T -> List.push.'T

scope 793 List.slice.block block (parent: List.slice)

scope 794 Buffer.empty_spec_T_2 fn (parent: Buffer)
	TYPES
	T -> List.slice.'T

scope 795 List.slice.block block (parent: List.slice)

scope 796 List.slice.block.block block (parent: List.slice.block)

scope 797 List.slice.block.block.block block (parent: List.slice.block.block)
	VARS
	__sb_740 -> __sb_740: StringBuilder

scope 798 Buffer.slice_spec_T_5 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[T]
	start -> start: u64
	TYPES
	T -> List.slice.'T

scope 799 List.firstRef.block block (parent: List.firstRef)

scope 800 List.nonEmpty_spec_T_1 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.firstRef.'T

scope 801 List.firstRef.block.block block (parent: List.firstRef.block)

scope 802 List.getRef_spec_T_1 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.firstRef.'T

scope 803 List.firstRef.block block (parent: List.firstRef)

scope 804 List.first.block block (parent: List.first)

scope 805 List.firstRef_spec_T_1 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.first.'T

scope 806 List.first.block.match_arm match_arm (parent: List.first.block)

scope 807 List.first.block.match_arm match_arm (parent: List.first.block)
	VARS
	firstRef -> firstRef: T*
	__payload_Some_749 -> __payload_Some_749: T*

scope 808 List.lastRef.block block (parent: List.lastRef)

scope 809 List.nonEmpty_spec_T_2 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.lastRef.'T

scope 810 List.lastRef.block.block block (parent: List.lastRef.block)

scope 811 List.getRef_spec_T_2 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.lastRef.'T

scope 812 List.lastRef.block block (parent: List.lastRef)

scope 813 List.last.block block (parent: List.last)

scope 814 List.lastRef_spec_T_1 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.last.'T

scope 815 List.last.block.match_arm match_arm (parent: List.last.block)

scope 816 List.last.block.match_arm match_arm (parent: List.last.block)
	VARS
	lastRef -> lastRef: T*
	__payload_Some_756 -> __payload_Some_756: T*

scope 817 List.reverse.block block (parent: List.reverse)

scope 818 List.reverse.block.while while (parent: List.reverse.block)
	VARS
	j -> j: u64

scope 819 List.swap_spec_T_1 fn (parent: List)
	VARS
	indexA -> indexA: u64
	indexB -> indexB: u64
	self -> self: List[T]*
	TYPES
	T -> List.reverse.'T

scope 820 List.cloned_spec_T_1 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.reversed.'T

scope 821 List.reverse_spec_T_2 fn (parent: List)
	VARS
	self -> self: List[T]*
	TYPES
	T -> List.reversed.'T

scope 822 ability_impl ability_impl (parent: )
	TYPES
	T -> List.concat.'T

scope 823 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.concat.'T
	T -> List.concat.'T
	I -> BufferIterator[List.concat.'T]({buf: Buffer[List.concat.'T]({len: u64, data: List.concat.'T*}), pos: u64})
	Self -> List[List.concat.'T]({len: u64, buffer: Buffer[List.concat.'T]({len: u64, data: List.concat.'T*})})

scope 824 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 825 List.concat.for for (parent: List.concat)
	VARS
	__iter_768 -> __iter_768: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 826 List.concat.for.block block (parent: List.concat.for)
	VARS
	__next_775 -> __next_775: Opt[T]

scope 827 List.concat.for.block.block block (parent: List.concat.for.block)
	VARS
	__block_expr_val_782 -> __block_expr_val_782: unit
	e -> e: T

scope 828 ability_impl ability_impl (parent: )
	TYPES
	T -> List.concat.'T

scope 829 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.concat.'T
	T -> List.concat.'T
	Self -> BufferIterator[List.concat.'T]({buf: Buffer[List.concat.'T]({len: u64, data: List.concat.'T*}), pos: u64})

scope 830 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 831 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 832 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 833 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 834 ability_impl ability_impl (parent: )
	TYPES
	T -> List.concat.'T

scope 835 ability_impl ability_impl (parent: )
	TYPES
	Inner -> List.concat.'T
	T -> List.concat.'T
	Self -> Opt[List.concat.'T](enum None | Some(List.concat.'T))

scope 836 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_1159 -> __match_subject_1159: Opt[T]
	self -> self: Opt[T]

scope 837 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 838 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 839 List.push_spec_T_3 fn (parent: List)
	VARS
	self -> self: List[T]*
	elem -> elem: T
	TYPES
	T -> List.concat.'T

scope 840 Opt.isSome_spec_T_2 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> List.concat.'T

scope 841 List.concat.for.block.block block (parent: List.concat.for.block)

scope 842 List.getRef_spec_T_3 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.swap.'T

scope 843 List.sort.block block (parent: List.sort)

scope 844 List.get_spec_T_1 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.sort.'T

scope 845 List.withCapacity_spec_T_4 fn (parent: List)
	VARS
	cap -> cap: u64
	TYPES
	T -> List.sort.'T

scope 846 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 847 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.sort.'T
	T -> List.sort.'T
	I -> BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})
	Self -> List[List.sort.'T]({len: u64, buffer: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})})

scope 848 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 849 List.sort.for for (parent: List.sort)
	VARS
	itIndex -> mut itIndex: u64
	__iter_799 -> __iter_799: BufferIterator[T]*

scope 850 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_806 -> __next_806: Opt[T]

scope 851 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__block_expr_val_814 -> __block_expr_val_814: unit
	__match_subject_811 -> __match_subject_811: Ordering
	item -> item: T

scope 852 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 853 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.sort.'T
	T -> List.sort.'T
	Self -> BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})

scope 854 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 855 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 856 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 857 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 858 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 859 ability_impl ability_impl (parent: )
	TYPES
	Inner -> List.sort.'T
	T -> List.sort.'T
	Self -> Opt[List.sort.'T](enum None | Some(List.sort.'T))

scope 860 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]
	__match_subject_1169 -> __match_subject_1169: Opt[T]

scope 861 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 862 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 863 List.sort.for.block.block.block block (parent: List.sort.for.block.block)

scope 864 List.sort.for.block.block.block.match_arm match_arm (parent: List.sort.for.block.block.block)

scope 865 List.push_spec_T_4 fn (parent: List)
	VARS
	self -> self: List[T]*
	elem -> elem: T
	TYPES
	T -> List.sort.'T

scope 866 List.sort.for.block.block.block.match_arm match_arm (parent: List.sort.for.block.block.block)

scope 867 List.sort.for.block.block.block.match_arm match_arm (parent: List.sort.for.block.block.block)

scope 868 Opt.isSome_spec_T_3 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> List.sort.'T

scope 869 List.sort.for.block.block block (parent: List.sort.for.block)

scope 870 List.sort_spec_T_2 fn (parent: List)
	VARS
	input -> input: List[T]*
	TYPES
	T -> List.sort.'T

scope 871 List.sort.for for (parent: List.sort)
	VARS
	itIndex -> mut itIndex: u64
	__iter_819 -> __iter_819: BufferIterator[T]*

scope 872 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_820 -> __next_820: Opt[T]

scope 873 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__block_expr_val_825 -> __block_expr_val_825: unit
	item -> item: T

scope 874 List.set_spec_T_2 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	elem -> elem: T
	TYPES
	T -> List.sort.'T

scope 875 List.sort.for.block.block block (parent: List.sort.for.block)

scope 876 List.sort.for for (parent: List.sort)
	VARS
	__iter_827 -> __iter_827: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 877 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_828 -> __next_828: Opt[T]

scope 878 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__block_expr_val_830 -> __block_expr_val_830: unit
	item -> item: T

scope 879 List.sort.for.block.block block (parent: List.sort.for.block)

scope 880 List.sort.for for (parent: List.sort)
	VARS
	__iter_832 -> __iter_832: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 881 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_833 -> __next_833: Opt[T]

scope 882 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__block_expr_val_835 -> __block_expr_val_835: unit
	item -> item: T

scope 883 List.sort.for.block.block block (parent: List.sort.for.block)

scope 884 List.cloned_spec_T_2 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.sorted.'T

scope 885 List.sort_spec_T_3 fn (parent: List)
	VARS
	input -> input: List[T]*
	TYPES
	T -> List.sorted.'T

scope 886 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 887 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.join.'T
	T -> List.join.'T
	I -> BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})
	Self -> List[List.join.'T]({len: u64, buffer: Buffer[List.join.'T]({len: u64, data: List.join.'T*})})

scope 888 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 889 List.join.for for (parent: List.join)
	VARS
	__iter_842 -> __iter_842: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 890 List.join.for.block block (parent: List.join.for)
	VARS
	__next_849 -> __next_849: Opt[T]

scope 891 List.join.for.block.block block (parent: List.join.for.block)
	VARS
	s -> s: T
	__block_expr_val_855 -> __block_expr_val_855: unit
	isLast -> isLast: bool

scope 892 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 893 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.join.'T
	T -> List.join.'T
	Self -> BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})

scope 894 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 895 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 896 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 897 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 898 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 899 ability_impl ability_impl (parent: )
	TYPES
	Inner -> List.join.'T
	T -> List.join.'T
	Self -> Opt[List.join.'T](enum None | Some(List.join.'T))

scope 900 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]
	__match_subject_1179 -> __match_subject_1179: Opt[T]

scope 901 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 902 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 903 List.join.for.block.block.block block (parent: List.join.for.block.block)

scope 904 List.join.for.block.block.block.block block (parent: List.join.for.block.block.block)

scope 905 Opt.isSome_spec_T_4 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> List.join.'T

scope 906 List.join.for.block.block block (parent: List.join.for.block)

scope 907 List.toBuffer_spec_u8_4 fn (parent: List)
	VARS
	self -> self: List[u8]
	TYPES
	T -> u8

scope 908 List.toBuffer_spec_i64_5 fn (parent: List)
	VARS
	self -> self: List[i64]
	TYPES
	T -> i64

scope 909 Equals_impl_List[T].Equals_List[T]_equals.block block (parent: Equals_impl_List[T].Equals_List[T]_equals)

scope 910 Equals_impl_List[T].Equals_List[T]_equals.block block (parent: Equals_impl_List[T].Equals_List[T]_equals)
	VARS
	i -> mut i: u64

scope 911 Equals_impl_List[T].Equals_List[T]_equals.block.block block (parent: Equals_impl_List[T].Equals_List[T]_equals.block)

scope 912 Equals_impl_List[T].Equals_List[T]_equals.block.block.while while (parent: Equals_impl_List[T].Equals_List[T]_equals.block.block)

scope 913 Equals_impl_List[T].Equals_List[T]_equals.block.block.while.block block (parent: Equals_impl_List[T].Equals_List[T]_equals.block.block.while)

scope 914 List.get_spec_T_2 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> Equals_impl_List[T].'T

scope 915 Equals_impl_List[T].Equals_List[T]_equals.block.block.while.block.block block (parent: Equals_impl_List[T].Equals_List[T]_equals.block.block.while.block)

scope 916 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 917 ability_impl ability_impl (parent: )
	TYPES
	Item -> Show_impl_List[T].'T
	T -> Show_impl_List[T].'T
	I -> BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})
	Self -> List[Show_impl_List[T].'T]({len: u64, buffer: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})})

scope 918 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 919 Show_impl_List[T].Show_List[T]_show.for for (parent: Show_impl_List[T].Show_List[T]_show)
	VARS
	__iter_865 -> __iter_865: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 920 Show_impl_List[T].Show_List[T]_show.for.block block (parent: Show_impl_List[T].Show_List[T]_show.for)
	VARS
	__next_872 -> __next_872: Opt[T]

scope 921 Show_impl_List[T].Show_List[T]_show.for.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block)
	VARS
	s -> s: T
	last -> last: bool
	__block_expr_val_878 -> __block_expr_val_878: unit

scope 922 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 923 ability_impl ability_impl (parent: )
	TYPES
	Item -> Show_impl_List[T].'T
	T -> Show_impl_List[T].'T
	Self -> BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})

scope 924 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 925 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 926 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 927 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*
	n -> n: u64

scope 928 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 929 ability_impl ability_impl (parent: )
	TYPES
	Inner -> Show_impl_List[T].'T
	T -> Show_impl_List[T].'T
	Self -> Opt[Show_impl_List[T].'T](enum None | Some(Show_impl_List[T].'T))

scope 930 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]
	__match_subject_1195 -> __match_subject_1195: Opt[T]

scope 931 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 932 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 933 Show_impl_List[T].Show_List[T]_show.for.block.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block.block)

scope 934 Show_impl_List[T].Show_List[T]_show.for.block.block.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block.block.block)

scope 935 Opt.isSome_spec_T_5 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> Show_impl_List[T].'T

scope 936 Show_impl_List[T].Show_List[T]_show.for.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block)

scope 937 List.toBuffer_spec_T_6 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> Iterable_impl_List[T].'T

scope 938 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_List[T].'T

scope 939 ability_impl ability_impl (parent: )
	TYPES
	Item -> Iterable_impl_List[T].'T
	T -> Iterable_impl_List[T].'T
	I -> BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})
	Self -> Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})

scope 940 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 941 Buffer.get_spec_char_6 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[char]
	tRef -> tRef: char*
	TYPES
	T -> char

scope 942 Buffer.fromRawParts_spec_u8_3 fn (parent: Buffer)
	VARS
	data -> data: Pointer
	len -> len: u64
	TYPES
	T -> u8

scope 943 Buffer.cloned_spec_char_2 fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[char]
	numBytes -> numBytes: u64
	TYPES
	T -> char

scope 944 List.wrapBuffer_spec_char_2 fn (parent: List)
	VARS
	buffer -> buffer: Buffer[char]
	TYPES
	T -> char

scope 945 Buffer.cloned_spec_u8_3 fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[u8]
	numBytes -> numBytes: u64
	TYPES
	T -> u8

scope 946 string.first.block block (parent: string.first)

scope 947 string.indexOf.block block (parent: string.indexOf)

scope 948 string.indexOf.block.while while (parent: string.indexOf.block)

scope 949 string.indexOf.block.while.block block (parent: string.indexOf.block.while)

scope 950 string.indexOf.block.while.block.block block (parent: string.indexOf.block.while.block)

scope 951 Buffer.concat_spec_char_1 fn (parent: Buffer)
	VARS
	new -> new: Buffer[char]
	self -> self: Buffer[char]
	other -> other: Buffer[char]
	TYPES
	T -> char

scope 952 Buffer._enlargedClone_spec_char_3 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[char]
	newBuffer -> newBuffer: Buffer[char]
	TYPES
	T -> char

scope 953 Buffer.set_spec_char_4 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[char]
	tRef -> tRef: char*
	elem -> elem: char
	TYPES
	T -> char

scope 954 List.empty_spec_List[char]_1 fn (parent: List)
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 955 List.empty_spec_char_2 fn (parent: List)
	TYPES
	T -> char

scope 956 string.splitByChar.for for (parent: string.splitByChar)
	VARS
	itIndex -> mut itIndex: u64
	__iter_907 -> __iter_907: BufferIterator[char]*

scope 957 string.splitByChar.for.block block (parent: string.splitByChar.for)
	VARS
	__next_908 -> __next_908: Opt[char]

scope 958 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)
	VARS
	__block_expr_val_916 -> __block_expr_val_916: unit
	c -> c: char

scope 959 ability_impl ability_impl (parent: )
	TYPES
	T -> char

scope 960 ability_impl ability_impl (parent: )
	TYPES
	Inner -> char
	T -> char
	Self -> Opt[char](enum None | Some(char))

scope 961 ability_impl.Unwrap_Opt[char]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_1213 -> __match_subject_1213: Opt[char]
	self -> self: Opt[char]

scope 962 ability_impl.Unwrap_Opt[char]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[char]

scope 963 ability_impl.Unwrap_Opt[char]_make fn (parent: ability_impl)
	VARS
	t -> t: char

scope 964 string.splitByChar.for.block.block.block block (parent: string.splitByChar.for.block.block)

scope 965 string.splitByChar.for.block.block.block.block block (parent: string.splitByChar.for.block.block.block)

scope 966 string.splitByChar.for.block.block.block.block.block block (parent: string.splitByChar.for.block.block.block.block)

scope 967 List.nonEmpty_spec_char_3 fn (parent: List)
	VARS
	self -> self: List[char]
	TYPES
	T -> char

scope 968 string.splitByChar.for.block.block.block.block.block.block block (parent: string.splitByChar.for.block.block.block.block.block)

scope 969 List.push_spec_List[char]_5 fn (parent: List)
	VARS
	startLength -> startLength: u64
	self -> self: List[List[char]]*
	elem -> elem: List[char]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 970 string.splitByChar.for.block.block.block block (parent: string.splitByChar.for.block.block)

scope 971 Opt.isSome_spec_char_6 fn (parent: Opt)
	VARS
	self -> self: Opt[char]
	__match_subject_1222 -> __match_subject_1222: Opt[char]
	TYPES
	T -> char

scope 972 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)

scope 973 string.splitByChar.block block (parent: string.splitByChar)

scope 974 string.splitByChar.block.block block (parent: string.splitByChar.block)

scope 975 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 976 ability_impl ability_impl (parent: )
	TYPES
	Item -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	I -> BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})
	Self -> List[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})})

scope 977 ability_impl.Iterable_List[List[char]]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[List[char]]

scope 978 string.splitByChar.for for (parent: string.splitByChar)
	VARS
	__iter_920 -> __iter_920: BufferIterator[List[char]]*
	itIndex -> mut itIndex: u64
	__yieldedColl_932 -> __yieldedColl_932: List[string]*

scope 979 string.splitByChar.for.block block (parent: string.splitByChar.for)
	VARS
	__next_927 -> __next_927: Opt[List[char]]

scope 980 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)
	VARS
	list -> list: List[char]
	__block_expr_val_933 -> __block_expr_val_933: string

scope 981 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 982 ability_impl ability_impl (parent: )
	TYPES
	Item -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	Self -> BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})

scope 983 ability_impl.Iterator_BufferIterator[List[char]]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[List[char]]*

scope 984 ability_impl.Iterator_BufferIterator[List[char]]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[List[char]]

scope 985 ability_impl.Iterator_BufferIterator[List[char]]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[List[char]]*
	n -> n: u64

scope 986 ability_impl.Iterator_BufferIterator[List[char]]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[List[char]]*
	n -> n: u64

scope 987 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 988 ability_impl ability_impl (parent: )
	TYPES
	Inner -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	Self -> Opt[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})))

scope 989 ability_impl.Unwrap_Opt[List[char]]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_1231 -> __match_subject_1231: Opt[List[char]]
	self -> self: Opt[List[char]]

scope 990 ability_impl.Unwrap_Opt[List[char]]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[List[char]]

scope 991 ability_impl.Unwrap_Opt[List[char]]_make fn (parent: ability_impl)
	VARS
	t -> t: List[char]

scope 992 Opt.isSome_spec_List[char]_7 fn (parent: Opt)
	VARS
	self -> self: Opt[List[char]]
	__match_subject_1234 -> __match_subject_1234: Opt[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 993 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)

scope 994 string.indexOfString.block block (parent: string.indexOfString)

scope 995 string.indexOfString.block.while while (parent: string.indexOfString.block)
	VARS
	sub -> sub: string

scope 996 string.indexOfString.block.while.block block (parent: string.indexOfString.block.while)

scope 997 string.indexOfString.block.while.block.block block (parent: string.indexOfString.block.while.block)

scope 998 string.indexOfString.block.while.block block (parent: string.indexOfString.block.while)

scope 999 string.indexOfString.block.while.block.block block (parent: string.indexOfString.block.while.block)

scope 1000 Buffer.slice_spec_char_6 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[char]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: char*
	TYPES
	T -> char

scope 1001 string.fromCString.loop loop (parent: string.fromCString)
	VARS
	c -> c: char*

scope 1002 Pointer.refAtIndex_spec_char_2 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> char

scope 1003 string.fromCString.loop.block block (parent: string.fromCString.loop)

scope 1004 string.fromCString.loop.block.block block (parent: string.fromCString.loop.block)

scope 1005 string.fromCString.loop.block block (parent: string.fromCString.loop)

scope 1006 string.toInt.block block (parent: string.toInt)

scope 1007 string.toInt.block.block block (parent: string.toInt.block)

scope 1008 string.toInt.block block (parent: string.toInt)

scope 1009 string.toInt.block block (parent: string.toInt)

scope 1010 string.toInt.block.while while (parent: string.toInt.block)
	VARS
	digit -> digit: Opt[u8]
	c -> c: char

scope 1011 string.toInt.block.while.block block (parent: string.toInt.block.while)
	VARS
	__payload_Some_951 -> __payload_Some_951: u8
	digit -> digit: u8
	__if_target_950 -> __if_target_950: Opt[u8]

scope 1012 string.toInt.block.while.block.block block (parent: string.toInt.block.while.block)

scope 1013 string.toInt.block.while.block block (parent: string.toInt.block.while)

scope 1014 string.toInt.block block (parent: string.toInt)

scope 1015 string.toInt.block.block block (parent: string.toInt.block)

scope 1016 string.toInt.block block (parent: string.toInt)

scope 1017 some_spec_i64_3 fn (parent: )
	VARS
	value -> value: i64
	TYPES
	T -> i64

scope 1018 string.toInt.block block (parent: string.toInt)

scope 1019 string.toInt.block.block block (parent: string.toInt.block)

scope 1020 string.toInt.block block (parent: string.toInt)

scope 1021 BufferIterator.fromBuffer_spec_char_2 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[char]
	TYPES
	T -> char

scope 1022 List.withCapacity_spec_enum Char(char) | String(string)_5 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1023 new_spec_List[enum Char(char) | String(string)]_1 fn (parent: )
	VARS
	t -> t: List[enum Char(char) | String(string)]*
	value -> value: List[enum Char(char) | String(string)]
	ptr -> ptr: Pointer
	TYPES
	T -> List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})

scope 1024 List.push_spec_enum Char(char) | String(string)_6 fn (parent: List)
	VARS
	startLength -> startLength: u64
	self -> self: List[enum Char(char) | String(string)]*
	elem -> elem: enum Char(char) | String(string)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1025 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1026 ability_impl ability_impl (parent: )
	TYPES
	Item -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	I -> BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})
	Self -> List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})

scope 1027 ability_impl.Iterable_List[enum Char(char) | String(string)]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[enum Char(char) | String(string)]

scope 1028 StringBuilder.len.for for (parent: StringBuilder.len)
	VARS
	itIndex -> mut itIndex: u64
	__iter_963 -> __iter_963: BufferIterator[enum Char(char) | String(string)]*

scope 1029 StringBuilder.len.for.block block (parent: StringBuilder.len.for)
	VARS
	__next_970 -> __next_970: Opt[enum Char(char) | String(string)]

scope 1030 StringBuilder.len.for.block.block block (parent: StringBuilder.len.for.block)
	VARS
	__match_subject_975 -> __match_subject_975: enum Char(char) | String(string)
	partLen -> partLen: u64
	__block_expr_val_980 -> __block_expr_val_980: unit
	part -> part: enum Char(char) | String(string)

scope 1031 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1032 ability_impl ability_impl (parent: )
	TYPES
	Item -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})

scope 1033 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[enum Char(char) | String(string)]*

scope 1034 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[enum Char(char) | String(string)]

scope 1035 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[enum Char(char) | String(string)]*
	n -> n: u64

scope 1036 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_nth fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[enum Char(char) | String(string)]*
	n -> n: u64

scope 1037 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1038 ability_impl ability_impl (parent: )
	TYPES
	Inner -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> Opt[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))))

scope 1039 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_1257 -> __match_subject_1257: Opt[enum Char(char) | String(string)]
	self -> self: Opt[enum Char(char) | String(string)]

scope 1040 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[enum Char(char) | String(string)]

scope 1041 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_make fn (parent: ability_impl)
	VARS
	t -> t: enum Char(char) | String(string)

scope 1042 StringBuilder.len.for.block.block.block block (parent: StringBuilder.len.for.block.block)

scope 1043 StringBuilder.len.for.block.block.block.match_arm match_arm (parent: StringBuilder.len.for.block.block.block)
	VARS
	__payload_Char_976 -> __payload_Char_976: char

scope 1044 StringBuilder.len.for.block.block.block.match_arm match_arm (parent: StringBuilder.len.for.block.block.block)
	VARS
	__payload_String_977 -> __payload_String_977: string
	s -> s: string

scope 1045 Opt.isSome_spec_enum Char(char) | String(string)_8 fn (parent: Opt)
	VARS
	self -> self: Opt[enum Char(char) | String(string)]
	__match_subject_1260 -> __match_subject_1260: Opt[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1046 StringBuilder.len.for.block.block block (parent: StringBuilder.len.for.block)

scope 1047 StringBuilder.build.for for (parent: StringBuilder.build)
	VARS
	itIndex -> mut itIndex: u64
	__iter_984 -> __iter_984: BufferIterator[enum Char(char) | String(string)]*

scope 1048 StringBuilder.build.for.block block (parent: StringBuilder.build.for)
	VARS
	__next_985 -> __next_985: Opt[enum Char(char) | String(string)]

scope 1049 StringBuilder.build.for.block.block block (parent: StringBuilder.build.for.block)
	VARS
	__block_expr_val_997 -> __block_expr_val_997: unit
	__match_subject_987 -> __match_subject_987: enum Char(char) | String(string)
	part -> part: enum Char(char) | String(string)

scope 1050 StringBuilder.build.for.block.block.block block (parent: StringBuilder.build.for.block.block)

scope 1051 StringBuilder.build.for.block.block.block.match_arm match_arm (parent: StringBuilder.build.for.block.block.block)
	VARS
	__payload_Char_988 -> __payload_Char_988: char
	c -> c: char

scope 1052 StringBuilder.build.for.block.block.block.match_arm match_arm (parent: StringBuilder.build.for.block.block.block)
	VARS
	s -> s: string
	__payload_String_990 -> __payload_String_990: string

scope 1053 StringBuilder.build.for.block.block.block.match_arm.block block (parent: StringBuilder.build.for.block.block.block.match_arm)

scope 1054 StringBuilder.build.for.block.block.block.match_arm.block.for for (parent: StringBuilder.build.for.block.block.block.match_arm.block)
	VARS
	__iter_993 -> __iter_993: BufferIterator[char]*
	itIndex -> mut itIndex: u64

scope 1055 StringBuilder.build.for.block.block.block.match_arm.block.for.block block (parent: StringBuilder.build.for.block.block.block.match_arm.block.for)
	VARS
	__next_994 -> __next_994: Opt[char]

scope 1056 StringBuilder.build.for.block.block.block.match_arm.block.for.block.block block (parent: StringBuilder.build.for.block.block.block.match_arm.block.for.block)
	VARS
	__block_expr_val_996 -> __block_expr_val_996: unit
	c -> c: char

scope 1057 StringBuilder.build.for.block.block.block.match_arm.block.for.block.block block (parent: StringBuilder.build.for.block.block.block.match_arm.block.for.block)

scope 1058 StringBuilder.build.for.block.block block (parent: StringBuilder.build.for.block)

scope 1059 Arena.alignTo.block block (parent: Arena.alignTo)

scope 1060 Arena.alignTo.block.block block (parent: Arena.alignTo.block)

scope 1061 Arena.alignTo.block.block.block block (parent: Arena.alignTo.block.block)
	VARS
	__sb_1001 -> __sb_1001: StringBuilder

scope 1062 Arena.new.block block (parent: Arena.new)

scope 1063 Arena.pushRaw.block block (parent: Arena.pushRaw)

scope 1064 Arena.pushRaw.block.block block (parent: Arena.pushRaw.block)
	VARS
	id -> id: string

scope 1065 Arena.pushRaw.block.block.block block (parent: Arena.pushRaw.block.block)
	VARS
	__sb_1007 -> __sb_1007: StringBuilder

scope 1066 sizeOf_spec_T_3 fn (parent: )
	TYPES
	T -> Arena.push.'T

scope 1067 alignOf_spec_T_1 fn (parent: )
	TYPES
	T -> Arena.push.'T

scope 1068 Arena.pushBytes.block block (parent: Arena.pushBytes)

scope 1069 Arena.pushBytes.block.block block (parent: Arena.pushBytes.block)
	VARS
	id -> id: string

scope 1070 Arena.pushBytes.block.block.block block (parent: Arena.pushBytes.block.block)
	VARS
	__sb_1013 -> __sb_1013: StringBuilder

scope 1071 Arena.freeAll.block block (parent: Arena.freeAll)
	VARS
	__sb_1016 -> __sb_1016: StringBuilder

scope 1072 Allocator.initDefault.block block (parent: Allocator.initDefault)
	VARS
	__list_literal_1019 -> __list_literal_1019: List[Arena]*

scope 1073 List.withCapacity_spec_Arena_6 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1074 List.push_spec_Arena_7 fn (parent: List)
	VARS
	startLength -> startLength: u64
	self -> self: List[Arena]*
	elem -> elem: Arena
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1075 Allocator.initDefault.block block (parent: Allocator.initDefault)
	VARS
	__list_literal_1023 -> __list_literal_1023: List[ObjectPool]*

scope 1076 List.withCapacity_spec_ObjectPool_7 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[ObjectPool]
	TYPES
	T -> ObjectPool({})

scope 1077 List.getRef_spec_Arena_4 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1078 IntRangeIterator.stepBy.block block (parent: IntRangeIterator.stepBy)

scope 1079 IntRangeIterator.stepBy.block block (parent: IntRangeIterator.stepBy)

scope 1080 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block block (parent: Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next)

scope 1081 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block.block block (parent: Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block)

scope 1082 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block block (parent: Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next)
	VARS
	current -> current: i64

scope 1083 ability_impl ability_impl (parent: )
	TYPES
	T -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})

scope 1084 ability_impl ability_impl (parent: )
	TYPES
	Inner -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})
	T -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})
	Self -> Opt[PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})](enum None | Some(PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})))

scope 1085 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[PointMaybeY]
	__match_subject_1274 -> __match_subject_1274: Opt[PointMaybeY]

scope 1086 ability_impl.Unwrap_Opt[PointMaybeY]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[PointMaybeY]

scope 1087 ability_impl.Unwrap_Opt[PointMaybeY]_make fn (parent: ability_impl)
	VARS
	t -> t: PointMaybeY

scope 1088 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 1089 ability_impl ability_impl (parent: )
	TYPES
	Inner -> i64
	T -> i64
	Self -> Opt[i64](enum None | Some(i64))

scope 1090 ability_impl.Unwrap_Opt[i64]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[i64]
	__match_subject_1277 -> __match_subject_1277: Opt[i64]

scope 1091 ability_impl.Unwrap_Opt[i64]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[i64]

scope 1092 ability_impl.Unwrap_Opt[i64]_make fn (parent: ability_impl)
	VARS
	t -> t: i64

scope 1093 testBasics.block block (parent: testBasics)
	VARS
	x -> x: bool
	__if_target_1037 -> __if_target_1037: Opt[bool]
	__payload_Some_1038 -> __payload_Some_1038: bool

scope 1094 testBasics.block.block block (parent: testBasics.block)

scope 1095 Opt.isSome_spec_bool_9 fn (parent: Opt)
	VARS
	__match_subject_1280 -> __match_subject_1280: Opt[bool]
	self -> self: Opt[bool]
	TYPES
	T -> bool

scope 1096 Opt.isSome_spec_i64_10 fn (parent: Opt)
	VARS
	self -> self: Opt[i64]
	__match_subject_1282 -> __match_subject_1282: Opt[i64]
	TYPES
	T -> i64

scope 1097 types.typeId_spec_i64_1 fn (parent: types)
	TYPES
	T -> i64

scope 1098 testCoalesceAccessor.block block (parent: testCoalesceAccessor)
	VARS
	__age_1044 -> __age_1044: Opt[{name: string, age: i64}]

scope 1099 Opt.isSome_spec_{name: string, age: i64}_11 fn (parent: Opt)
	VARS
	__match_subject_1284 -> __match_subject_1284: Opt[{name: string, age: i64}]
	self -> self: Opt[{name: string, age: i64}]
	TYPES
	T -> {name: string({buffer: Buffer[char]({len: u64, data: char*})}), age: i64}

scope 1100 Opt.get_spec_{name: string, age: i64}_2 fn (parent: Opt)
	VARS
	self -> self: Opt[{name: string, age: i64}]
	TYPES
	T -> {name: string({buffer: Buffer[char]({len: u64, data: char*})}), age: i64}

scope 1101 testCoalesceAccessor.block block (parent: testCoalesceAccessor)
	VARS
	__age_1047 -> __age_1047: Opt[{name: string, age: i64}]

scope 1102 testCoalesceAccessor.block block (parent: testCoalesceAccessor)
	VARS
	__name_1048 -> __name_1048: Opt[{name: string, age: i64}]

scope 1103 ability_impl ability_impl (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1104 ability_impl ability_impl (parent: )
	TYPES
	Inner -> string({buffer: Buffer[char]({len: u64, data: char*})})
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Self -> Opt[string({buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(string({buffer: Buffer[char]({len: u64, data: char*})})))

scope 1105 ability_impl.Unwrap_Opt[string]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_1289 -> __match_subject_1289: Opt[string]
	self -> self: Opt[string]

scope 1106 ability_impl.Unwrap_Opt[string]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[string]

scope 1107 ability_impl.Unwrap_Opt[string]_make fn (parent: ability_impl)
	VARS
	t -> t: string

scope 1108 testCoalesceAccessor.block block (parent: testCoalesceAccessor)
	VARS
	__name_1052 -> __name_1052: Opt[{name: string, age: i64}]

scope 1109 testComplex.block block (parent: testComplex)
	VARS
	__if_target_1054 -> __if_target_1054: Opt[i64]
	__payload_Some_1055 -> __payload_Some_1055: i64
	my_x -> my_x: i64

scope 1110 testComplex.block.block block (parent: testComplex.block)

scope 1111 testComplex.block block (parent: testComplex)

scope 1112 testComplex.block block (parent: testComplex)
	VARS
	__list_literal_1058 -> __list_literal_1058: List[Opt[WeirdPoint]]*

scope 1113 List.withCapacity_spec_Opt[WeirdPoint]_8 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1114 List.push_spec_Opt[WeirdPoint]_8 fn (parent: List)
	VARS
	startLength -> startLength: u64
	self -> self: List[Opt[WeirdPoint]]*
	elem -> elem: Opt[WeirdPoint]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1115 testComplex.block block (parent: testComplex)
	VARS
	a -> a: WeirdPoint
	__if_target_1064 -> __if_target_1064: Opt[WeirdPoint]
	__payload_Some_1065 -> __payload_Some_1065: WeirdPoint

scope 1116 List.get_spec_Opt[WeirdPoint]_3 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1117 testComplex.block.block block (parent: testComplex.block)

scope 1118 optElseOperator.block block (parent: optElseOperator)
	VARS
	__optelse_lhs_1067 -> __optelse_lhs_1067: Opt[i64]

scope 1119 optElseOperator.block block (parent: optElseOperator)
	VARS
	__optelse_lhs_1069 -> __optelse_lhs_1069: Opt[i64]

scope 1120 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 1121 ability_impl ability_impl (parent: )
	TYPES
	T -> i64
	Self -> Opt[i64](enum None | Some(i64))

scope 1122 ability_impl.Equals_Opt[i64]_equals fn (parent: ability_impl)
	VARS
	self -> self: Opt[i64]
	other -> other: Opt[i64]

scope 1123 some_spec_bool_4 fn (parent: )
	VARS
	value -> value: bool
	TYPES
	T -> bool

scope 1124 ability_impl ability_impl (parent: )
	TYPES
	T -> bool

scope 1125 ability_impl ability_impl (parent: )
	TYPES
	Inner -> bool
	T -> bool
	Self -> Opt[bool](enum None | Some(bool))

scope 1126 ability_impl.Unwrap_Opt[bool]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[bool]
	__match_subject_1304 -> __match_subject_1304: Opt[bool]

scope 1127 ability_impl.Unwrap_Opt[bool]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[bool]

scope 1128 ability_impl.Unwrap_Opt[bool]_make fn (parent: ability_impl)
	VARS
	t -> t: bool

scope 1129 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 1130 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 1131 Buffer.get_spec_T_7 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Iterable_impl_Buffer[T].'T

scope 1132 some_spec_T_5 fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> Iterable_impl_Buffer[T].'T

scope 1133 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 1134 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 1135 Buffer.get_spec_T_8 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Iterable_impl_List[T].'T

scope 1136 some_spec_T_6 fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> Iterable_impl_List[T].'T

scope 1137 ability_impl.Iterator_BufferIterator[char]_next.block block (parent: ability_impl.Iterator_BufferIterator[char]_next)

scope 1138 ability_impl.Iterator_BufferIterator[char]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[char]_next.block)
	VARS
	item -> item: char

scope 1139 some_spec_char_7 fn (parent: )
	VARS
	value -> value: char
	TYPES
	T -> char

scope 1140 Buffer._allocate_spec_string_6 fn (parent: Buffer)
	VARS
	data -> data: string*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1141 BufferIterator.fromBuffer_spec_Pointer_3 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[Pointer]
	TYPES
	T -> Pointer

scope 1142 ability_impl.Iterator_BufferIterator[Pointer]_next.block block (parent: ability_impl.Iterator_BufferIterator[Pointer]_next)

scope 1143 ability_impl.Iterator_BufferIterator[Pointer]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[Pointer]_next.block)
	VARS
	item -> item: Pointer

scope 1144 some_spec_Pointer_8 fn (parent: )
	VARS
	value -> value: Pointer
	TYPES
	T -> Pointer

scope 1145 ability_impl.Unwrap_Opt[Pointer]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Pointer]_hasValue)

scope 1146 ability_impl.Unwrap_Opt[Pointer]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Pointer]_hasValue.block)
	VARS
	__payload_Some_1097 -> __payload_Some_1097: Pointer

scope 1147 ability_impl.Unwrap_Opt[Pointer]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Pointer]_hasValue.block)

scope 1148 Opt.get_spec_Pointer_3 fn (parent: Opt)
	VARS
	self -> self: Opt[Pointer]
	TYPES
	T -> Pointer

scope 1149 Buffer.getRef_spec_Pointer_8 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Pointer]
	TYPES
	T -> Pointer

scope 1150 List.push_spec_string_1.block block (parent: List.push_spec_string_1)

scope 1151 List.cap_spec_string_4 fn (parent: List)
	VARS
	self -> self: List[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1152 List.push_spec_string_1.block.block block (parent: List.push_spec_string_1.block)

scope 1153 List._grow_spec_string_2 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[string]*
	elemSize -> elemSize: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1154 List.set_spec_string_3 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[string]
	elem -> elem: string
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1155 Opt.isSome_spec_Pointer_1.block block (parent: Opt.isSome_spec_Pointer_1)

scope 1156 Opt.isSome_spec_Pointer_1.block.match_arm match_arm (parent: Opt.isSome_spec_Pointer_1.block)
	VARS
	__payload_Some_1109 -> __payload_Some_1109: Pointer

scope 1157 Opt.isSome_spec_Pointer_1.block.match_arm match_arm (parent: Opt.isSome_spec_Pointer_1.block)

scope 1158 Buffer.slice_spec_string_7 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[string]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: string*
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1159 Buffer._allocate_spec_u8_1.block block (parent: Buffer._allocate_spec_u8_1)

scope 1160 Buffer._allocate_spec_u8_1.block.block block (parent: Buffer._allocate_spec_u8_1.block)

scope 1161 Buffer._allocate_spec_u8_1.block block (parent: Buffer._allocate_spec_u8_1)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1162 Buffer.bufferLenBytes_spec_u8_4 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> u8

scope 1163 Buffer.getRef_spec_u8_9 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 1164 Buffer._allocate_spec_char_7 fn (parent: Buffer)
	VARS
	data -> data: char*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> char

scope 1165 List.push_spec_char_2.block block (parent: List.push_spec_char_2)

scope 1166 List.cap_spec_char_5 fn (parent: List)
	VARS
	self -> self: List[char]
	TYPES
	T -> char

scope 1167 List.push_spec_char_2.block.block block (parent: List.push_spec_char_2.block)

scope 1168 List._grow_spec_char_3 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[char]*
	elemSize -> elemSize: u64
	TYPES
	T -> char

scope 1169 List.set_spec_char_4 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[char]
	elem -> elem: char
	TYPES
	T -> char

scope 1170 List.cloned_spec_char_3 fn (parent: List)
	VARS
	self -> self: List[char]
	newBuffer -> newBuffer: Buffer[char]
	TYPES
	T -> char

scope 1171 List.reverse_spec_char_1.block block (parent: List.reverse_spec_char_1)

scope 1172 List.reverse_spec_char_1.block.while while (parent: List.reverse_spec_char_1.block)
	VARS
	j -> j: u64

scope 1173 List.swap_spec_char_2 fn (parent: List)
	VARS
	indexA -> indexA: u64
	self -> self: List[char]*
	aRef -> aRef: char*
	bValue -> bValue: char
	indexB -> indexB: u64
	bRef -> bRef: char*
	TYPES
	T -> char

scope 1174 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue)

scope 1175 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)
	VARS
	__payload_Some_1137 -> __payload_Some_1137: Result[S, F].Err(F)

scope 1176 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)

scope 1177 Opt.get_spec_Result[S, F].Err(F)_4 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)

scope 1178 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue)

scope 1179 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)
	VARS
	__payload_Some_1140 -> __payload_Some_1140: Result[S, F].Ok(S)

scope 1180 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)

scope 1181 Opt.get_spec_Result[S, F].Ok(S)_5 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)

scope 1182 ability_impl.Try_Result[S, F]_isOk.block block (parent: ability_impl.Try_Result[S, F]_isOk)

scope 1183 ability_impl.Try_Result[S, F]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[S, F]_isOk.block)
	VARS
	__payload_Ok_1143 -> __payload_Ok_1143: S

scope 1184 ability_impl.Try_Result[S, F]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[S, F]_isOk.block)

scope 1185 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)

scope 1186 ability_impl ability_impl (parent: )
	TYPES
	Inner -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)
	Self -> Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)))

scope 1187 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]
	__match_subject_1347 -> __match_subject_1347: Opt[Result[S, F].Err(F)]

scope 1188 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]

scope 1189 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Err(F)

scope 1190 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)

scope 1191 ability_impl ability_impl (parent: )
	TYPES
	Inner -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)
	Self -> Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)))

scope 1192 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]
	__match_subject_1350 -> __match_subject_1350: Opt[Result[S, F].Ok(S)]

scope 1193 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]

scope 1194 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Ok(S)

scope 1195 sizeOfStride_spec_T_2 fn (parent: )
	TYPES
	T -> Buffer._allocate.'T

scope 1196 sizeOfStride_spec_T_3 fn (parent: )
	TYPES
	T -> Buffer._copyFrom.'T

scope 1197 sizeOfStride_spec_T_4 fn (parent: )
	TYPES
	T -> Buffer.lenBytes.'T

scope 1198 Buffer.bufferLenBytes_spec_char_5 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> char

scope 1199 Buffer.bufferLenBytes_spec_i64_6 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> i64

scope 1200 List.toBuffer_spec_T_7 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.concat.'T

scope 1201 ability_impl ability_impl (parent: )
	TYPES
	T -> List.concat.'T

scope 1202 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.concat.'T
	T -> List.concat.'T
	I -> BufferIterator[List.concat.'T]({buf: Buffer[List.concat.'T]({len: u64, data: List.concat.'T*}), pos: u64})
	Self -> Buffer[List.concat.'T]({len: u64, data: List.concat.'T*})

scope 1203 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 1204 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 1205 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 1206 Buffer.get_spec_T_9 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> List.concat.'T

scope 1207 some_spec_T_9 fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> List.concat.'T

scope 1208 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 1209 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_1160 -> __payload_Some_1160: T

scope 1210 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 1211 Opt.get_spec_T_6 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> List.concat.'T

scope 1212 List.toBuffer_spec_T_8 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.sort.'T

scope 1213 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 1214 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.sort.'T
	T -> List.sort.'T
	I -> BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})
	Self -> Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})

scope 1215 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 1216 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 1217 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 1218 Buffer.get_spec_T_10 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> List.sort.'T

scope 1219 some_spec_T_10 fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> List.sort.'T

scope 1220 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 1221 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_1170 -> __payload_Some_1170: T

scope 1222 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 1223 Opt.get_spec_T_7 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> List.sort.'T

scope 1224 List.toBuffer_spec_T_9 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.join.'T

scope 1225 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 1226 ability_impl ability_impl (parent: )
	TYPES
	Item -> List.join.'T
	T -> List.join.'T
	I -> BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})
	Self -> Buffer[List.join.'T]({len: u64, data: List.join.'T*})

scope 1227 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 1228 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 1229 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 1230 Buffer.get_spec_T_11 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> List.join.'T

scope 1231 some_spec_T_11 fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> List.join.'T

scope 1232 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 1233 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_1180 -> __payload_Some_1180: T

scope 1234 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 1235 Opt.get_spec_T_8 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> List.join.'T

scope 1236 Buffer.slice_spec_u8_8 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[u8]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: u8*
	TYPES
	T -> u8

scope 1237 Buffer.slice_spec_i64_9 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[i64]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: i64*
	TYPES
	T -> i64

scope 1238 List.toBuffer_spec_T_10 fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> Show_impl_List[T].'T

scope 1239 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 1240 ability_impl ability_impl (parent: )
	TYPES
	Item -> Show_impl_List[T].'T
	T -> Show_impl_List[T].'T
	I -> BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})
	Self -> Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})

scope 1241 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 1242 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 1243 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 1244 Buffer.get_spec_T_12 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Show_impl_List[T].'T

scope 1245 some_spec_T_12 fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> Show_impl_List[T].'T

scope 1246 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 1247 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_1196 -> __payload_Some_1196: T

scope 1248 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 1249 Opt.get_spec_T_9 fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> Show_impl_List[T].'T

scope 1250 BufferIterator.fromBuffer_spec_T_4 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> Iterable_impl_List[T].'T

scope 1251 Buffer.getRef_spec_char_10 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 1252 Buffer._copyFrom_spec_char_3 fn (parent: Buffer)
	VARS
	source -> source: Buffer[char]
	numBytes -> numBytes: u64
	dest -> dest: Buffer[char]
	count -> count: u64
	TYPES
	T -> char

scope 1253 List.withCapacity_spec_List[char]_9 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1254 ability_impl.Unwrap_Opt[char]_hasValue.block block (parent: ability_impl.Unwrap_Opt[char]_hasValue)

scope 1255 ability_impl.Unwrap_Opt[char]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[char]_hasValue.block)
	VARS
	__payload_Some_1214 -> __payload_Some_1214: char

scope 1256 ability_impl.Unwrap_Opt[char]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[char]_hasValue.block)

scope 1257 Opt.get_spec_char_10 fn (parent: Opt)
	VARS
	self -> self: Opt[char]
	TYPES
	T -> char

scope 1258 List.push_spec_List[char]_5.block block (parent: List.push_spec_List[char]_5)

scope 1259 List.cap_spec_List[char]_6 fn (parent: List)
	VARS
	self -> self: List[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1260 List.push_spec_List[char]_5.block.block block (parent: List.push_spec_List[char]_5.block)

scope 1261 List._grow_spec_List[char]_4 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[List[char]]*
	elemSize -> elemSize: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1262 List.set_spec_List[char]_5 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[List[char]]
	elem -> elem: List[char]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1263 Opt.isSome_spec_char_6.block block (parent: Opt.isSome_spec_char_6)

scope 1264 Opt.isSome_spec_char_6.block.match_arm match_arm (parent: Opt.isSome_spec_char_6.block)
	VARS
	__payload_Some_1223 -> __payload_Some_1223: char

scope 1265 Opt.isSome_spec_char_6.block.match_arm match_arm (parent: Opt.isSome_spec_char_6.block)

scope 1266 List.toBuffer_spec_List[char]_11 fn (parent: List)
	VARS
	self -> self: List[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1267 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1268 ability_impl ability_impl (parent: )
	TYPES
	Item -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	I -> BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})
	Self -> Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})

scope 1269 ability_impl.Iterable_Buffer[List[char]]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[List[char]]

scope 1270 ability_impl.Iterator_BufferIterator[List[char]]_next.block block (parent: ability_impl.Iterator_BufferIterator[List[char]]_next)

scope 1271 ability_impl.Iterator_BufferIterator[List[char]]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[List[char]]_next.block)
	VARS
	item -> item: List[char]

scope 1272 Buffer.get_spec_List[char]_13 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[List[char]]
	tRef -> tRef: List[char]*
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1273 some_spec_List[char]_13 fn (parent: )
	VARS
	value -> value: List[char]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1274 ability_impl.Unwrap_Opt[List[char]]_hasValue.block block (parent: ability_impl.Unwrap_Opt[List[char]]_hasValue)

scope 1275 ability_impl.Unwrap_Opt[List[char]]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[List[char]]_hasValue.block)
	VARS
	__payload_Some_1232 -> __payload_Some_1232: List[char]

scope 1276 ability_impl.Unwrap_Opt[List[char]]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[List[char]]_hasValue.block)

scope 1277 Opt.get_spec_List[char]_11 fn (parent: Opt)
	VARS
	self -> self: Opt[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1278 Opt.isSome_spec_List[char]_7.block block (parent: Opt.isSome_spec_List[char]_7)

scope 1279 Opt.isSome_spec_List[char]_7.block.match_arm match_arm (parent: Opt.isSome_spec_List[char]_7.block)
	VARS
	__payload_Some_1235 -> __payload_Some_1235: List[char]

scope 1280 Opt.isSome_spec_List[char]_7.block.match_arm match_arm (parent: Opt.isSome_spec_List[char]_7.block)

scope 1281 Buffer.slice_spec_char_6.block block (parent: Buffer.slice_spec_char_6)

scope 1282 Buffer.slice_spec_char_6.block.block block (parent: Buffer.slice_spec_char_6.block)

scope 1283 Buffer.empty_spec_char_3 fn (parent: Buffer)
	TYPES
	T -> char

scope 1284 Buffer.slice_spec_char_6.block block (parent: Buffer.slice_spec_char_6)

scope 1285 Buffer.slice_spec_char_6.block.block block (parent: Buffer.slice_spec_char_6.block)

scope 1286 Buffer.slice_spec_char_6.block.block.block block (parent: Buffer.slice_spec_char_6.block.block)
	VARS
	__sb_1236 -> __sb_1236: StringBuilder

scope 1287 Buffer.slice_spec_char_6.block block (parent: Buffer.slice_spec_char_6)

scope 1288 Buffer._allocate_spec_enum Char(char) | String(string)_8 fn (parent: Buffer)
	VARS
	data -> data: enum Char(char) | String(string)*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1289 sizeOf_spec_List[enum Char(char) | String(string)]_4 fn (parent: )
	TYPES
	T -> List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})

scope 1290 List.push_spec_enum Char(char) | String(string)_6.block block (parent: List.push_spec_enum Char(char) | String(string)_6)

scope 1291 List.cap_spec_enum Char(char) | String(string)_7 fn (parent: List)
	VARS
	self -> self: List[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1292 List.push_spec_enum Char(char) | String(string)_6.block.block block (parent: List.push_spec_enum Char(char) | String(string)_6.block)

scope 1293 List._grow_spec_enum Char(char) | String(string)_5 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[enum Char(char) | String(string)]*
	elemSize -> elemSize: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1294 List.set_spec_enum Char(char) | String(string)_6 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[enum Char(char) | String(string)]
	elem -> elem: enum Char(char) | String(string)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1295 List.toBuffer_spec_enum Char(char) | String(string)_12 fn (parent: List)
	VARS
	self -> self: List[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1296 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1297 ability_impl ability_impl (parent: )
	TYPES
	Item -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	I -> BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})
	Self -> Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})

scope 1298 ability_impl.Iterable_Buffer[enum Char(char) | String(string)]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[enum Char(char) | String(string)]

scope 1299 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next.block block (parent: ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next)

scope 1300 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next.block)
	VARS
	item -> item: enum Char(char) | String(string)

scope 1301 Buffer.get_spec_enum Char(char) | String(string)_14 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	tRef -> tRef: enum Char(char) | String(string)*
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1302 some_spec_enum Char(char) | String(string)_14 fn (parent: )
	VARS
	value -> value: enum Char(char) | String(string)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1303 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue)

scope 1304 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block)
	VARS
	__payload_Some_1258 -> __payload_Some_1258: enum Char(char) | String(string)

scope 1305 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block)

scope 1306 Opt.get_spec_enum Char(char) | String(string)_12 fn (parent: Opt)
	VARS
	self -> self: Opt[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1307 Opt.isSome_spec_enum Char(char) | String(string)_8.block block (parent: Opt.isSome_spec_enum Char(char) | String(string)_8)

scope 1308 Opt.isSome_spec_enum Char(char) | String(string)_8.block.match_arm match_arm (parent: Opt.isSome_spec_enum Char(char) | String(string)_8.block)
	VARS
	__payload_Some_1261 -> __payload_Some_1261: enum Char(char) | String(string)

scope 1309 Opt.isSome_spec_enum Char(char) | String(string)_8.block.match_arm match_arm (parent: Opt.isSome_spec_enum Char(char) | String(string)_8.block)

scope 1310 Buffer._allocate_spec_Arena_9 fn (parent: Buffer)
	VARS
	data -> data: Arena*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1311 List.push_spec_Arena_7.block block (parent: List.push_spec_Arena_7)

scope 1312 List.cap_spec_Arena_8 fn (parent: List)
	VARS
	self -> self: List[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1313 List.push_spec_Arena_7.block.block block (parent: List.push_spec_Arena_7.block)

scope 1314 List._grow_spec_Arena_6 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[Arena]*
	elemSize -> elemSize: u64
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1315 List.set_spec_Arena_7 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Arena]
	elem -> elem: Arena
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1316 Buffer._allocate_spec_ObjectPool_10 fn (parent: Buffer)
	VARS
	data -> data: ObjectPool*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> ObjectPool({})

scope 1317 Buffer.getRef_spec_Arena_11 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1318 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block block (parent: ability_impl.Unwrap_Opt[PointMaybeY]_hasValue)

scope 1319 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block)
	VARS
	__payload_Some_1275 -> __payload_Some_1275: PointMaybeY

scope 1320 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block)

scope 1321 Opt.get_spec_PointMaybeY_13 fn (parent: Opt)
	VARS
	self -> self: Opt[PointMaybeY]
	TYPES
	T -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})

scope 1322 ability_impl.Unwrap_Opt[i64]_hasValue.block block (parent: ability_impl.Unwrap_Opt[i64]_hasValue)

scope 1323 ability_impl.Unwrap_Opt[i64]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[i64]_hasValue.block)
	VARS
	__payload_Some_1278 -> __payload_Some_1278: i64

scope 1324 ability_impl.Unwrap_Opt[i64]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[i64]_hasValue.block)

scope 1325 Opt.get_spec_i64_14 fn (parent: Opt)
	VARS
	self -> self: Opt[i64]
	TYPES
	T -> i64

scope 1326 Opt.isSome_spec_bool_9.block block (parent: Opt.isSome_spec_bool_9)

scope 1327 Opt.isSome_spec_bool_9.block.match_arm match_arm (parent: Opt.isSome_spec_bool_9.block)
	VARS
	__payload_Some_1281 -> __payload_Some_1281: bool

scope 1328 Opt.isSome_spec_bool_9.block.match_arm match_arm (parent: Opt.isSome_spec_bool_9.block)

scope 1329 Opt.isSome_spec_i64_10.block block (parent: Opt.isSome_spec_i64_10)

scope 1330 Opt.isSome_spec_i64_10.block.match_arm match_arm (parent: Opt.isSome_spec_i64_10.block)
	VARS
	__payload_Some_1283 -> __payload_Some_1283: i64

scope 1331 Opt.isSome_spec_i64_10.block.match_arm match_arm (parent: Opt.isSome_spec_i64_10.block)

scope 1332 Opt.isSome_spec_{name: string, age: i64}_11.block block (parent: Opt.isSome_spec_{name: string, age: i64}_11)

scope 1333 Opt.isSome_spec_{name: string, age: i64}_11.block.match_arm match_arm (parent: Opt.isSome_spec_{name: string, age: i64}_11.block)
	VARS
	__payload_Some_1285 -> __payload_Some_1285: {name: string, age: i64}

scope 1334 Opt.isSome_spec_{name: string, age: i64}_11.block.match_arm match_arm (parent: Opt.isSome_spec_{name: string, age: i64}_11.block)

scope 1335 Opt.get_spec_{name: string, age: i64}_2.block block (parent: Opt.get_spec_{name: string, age: i64}_2)
	VARS
	__payload_Some_1287 -> __payload_Some_1287: {name: string, age: i64}
	t -> t: {name: string, age: i64}
	__if_target_1286 -> __if_target_1286: Opt[{name: string, age: i64}]

scope 1336 Opt.get_spec_{name: string, age: i64}_2.block block (parent: Opt.get_spec_{name: string, age: i64}_2)

scope 1337 ability_impl.Unwrap_Opt[string]_hasValue.block block (parent: ability_impl.Unwrap_Opt[string]_hasValue)

scope 1338 ability_impl.Unwrap_Opt[string]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[string]_hasValue.block)
	VARS
	__payload_Some_1290 -> __payload_Some_1290: string

scope 1339 ability_impl.Unwrap_Opt[string]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[string]_hasValue.block)

scope 1340 Opt.get_spec_string_15 fn (parent: Opt)
	VARS
	self -> self: Opt[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1341 Buffer._allocate_spec_Opt[WeirdPoint]_11 fn (parent: Buffer)
	VARS
	data -> data: Opt[WeirdPoint]*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1342 List.push_spec_Opt[WeirdPoint]_8.block block (parent: List.push_spec_Opt[WeirdPoint]_8)

scope 1343 List.cap_spec_Opt[WeirdPoint]_9 fn (parent: List)
	VARS
	self -> self: List[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1344 List.push_spec_Opt[WeirdPoint]_8.block.block block (parent: List.push_spec_Opt[WeirdPoint]_8.block)

scope 1345 List._grow_spec_Opt[WeirdPoint]_7 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[Opt[WeirdPoint]]*
	elemSize -> elemSize: u64
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1346 List.set_spec_Opt[WeirdPoint]_8 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Opt[WeirdPoint]]
	elem -> elem: Opt[WeirdPoint]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1347 List.get_spec_Opt[WeirdPoint]_3.block block (parent: List.get_spec_Opt[WeirdPoint]_3)

scope 1348 List.get_spec_Opt[WeirdPoint]_3.block.block block (parent: List.get_spec_Opt[WeirdPoint]_3.block)

scope 1349 Buffer.get_spec_Opt[WeirdPoint]_15 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Opt[WeirdPoint]]
	tRef -> tRef: Opt[WeirdPoint]*
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1350 Opt.opt_equals_spec_i64_2 fn (parent: Opt)
	VARS
	b -> b: Opt[i64]
	a -> a: Opt[i64]
	TYPES
	T -> i64

scope 1351 ability_impl.Unwrap_Opt[bool]_hasValue.block block (parent: ability_impl.Unwrap_Opt[bool]_hasValue)

scope 1352 ability_impl.Unwrap_Opt[bool]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[bool]_hasValue.block)
	VARS
	__payload_Some_1305 -> __payload_Some_1305: bool

scope 1353 ability_impl.Unwrap_Opt[bool]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[bool]_hasValue.block)

scope 1354 Opt.get_spec_bool_16 fn (parent: Opt)
	VARS
	self -> self: Opt[bool]
	TYPES
	T -> bool

scope 1355 Buffer._allocate_spec_string_6.block block (parent: Buffer._allocate_spec_string_6)

scope 1356 Buffer._allocate_spec_string_6.block.block block (parent: Buffer._allocate_spec_string_6.block)

scope 1357 Buffer._allocate_spec_string_6.block block (parent: Buffer._allocate_spec_string_6)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1358 Buffer.bufferLenBytes_spec_string_7 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1359 Opt.get_spec_Pointer_3.block block (parent: Opt.get_spec_Pointer_3)
	VARS
	t -> t: Pointer
	__if_target_1311 -> __if_target_1311: Opt[Pointer]
	__payload_Some_1312 -> __payload_Some_1312: Pointer

scope 1360 Opt.get_spec_Pointer_3.block block (parent: Opt.get_spec_Pointer_3)

scope 1361 Buffer.getRef_spec_Pointer_8.block block (parent: Buffer.getRef_spec_Pointer_8)

scope 1362 Buffer.getRef_spec_Pointer_8.block.block block (parent: Buffer.getRef_spec_Pointer_8.block)

scope 1363 Buffer.dataPointer_spec_Pointer_7 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Pointer]
	TYPES
	T -> Pointer

scope 1364 Pointer.refAtIndex_spec_Pointer_3 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Pointer

scope 1365 sizeOf_spec_string_5 fn (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1366 List._grow_spec_string_2.block block (parent: List._grow_spec_string_2)

scope 1367 Buffer.isEmpty_spec_string_4 fn (parent: Buffer)
	VARS
	self -> self: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1368 List._grow_spec_string_2.block.block block (parent: List._grow_spec_string_2.block)

scope 1369 List._grow_spec_string_2.block.block.block block (parent: List._grow_spec_string_2.block.block)

scope 1370 List._grow_spec_string_2.block block (parent: List._grow_spec_string_2)

scope 1371 List.reserve_spec_string_2 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[string]
	self -> self: List[string]*
	count -> count: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1372 Buffer.set_spec_string_5 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[string]
	tRef -> tRef: string*
	elem -> elem: string
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1373 Buffer.slice_spec_string_7.block block (parent: Buffer.slice_spec_string_7)

scope 1374 Buffer.slice_spec_string_7.block.block block (parent: Buffer.slice_spec_string_7.block)

scope 1375 Buffer.empty_spec_string_4 fn (parent: Buffer)
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1376 Buffer.slice_spec_string_7.block block (parent: Buffer.slice_spec_string_7)

scope 1377 Buffer.slice_spec_string_7.block.block block (parent: Buffer.slice_spec_string_7.block)

scope 1378 Buffer.slice_spec_string_7.block.block.block block (parent: Buffer.slice_spec_string_7.block.block)
	VARS
	__sb_1325 -> __sb_1325: StringBuilder

scope 1379 Buffer.slice_spec_string_7.block block (parent: Buffer.slice_spec_string_7)

scope 1380 Buffer.getRef_spec_string_12 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1381 sizeOfStride_spec_u8_5 fn (parent: )
	TYPES
	T -> u8

scope 1382 Buffer.getRef_spec_u8_9.block block (parent: Buffer.getRef_spec_u8_9)

scope 1383 Buffer.getRef_spec_u8_9.block.block block (parent: Buffer.getRef_spec_u8_9.block)

scope 1384 Pointer.refAtIndex_spec_u8_4 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> u8

scope 1385 Buffer._allocate_spec_char_7.block block (parent: Buffer._allocate_spec_char_7)

scope 1386 Buffer._allocate_spec_char_7.block.block block (parent: Buffer._allocate_spec_char_7.block)

scope 1387 Buffer._allocate_spec_char_7.block block (parent: Buffer._allocate_spec_char_7)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1388 sizeOf_spec_char_6 fn (parent: )
	TYPES
	T -> char

scope 1389 List._grow_spec_char_3.block block (parent: List._grow_spec_char_3)

scope 1390 Buffer.isEmpty_spec_char_5 fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 1391 List._grow_spec_char_3.block.block block (parent: List._grow_spec_char_3.block)

scope 1392 List._grow_spec_char_3.block.block.block block (parent: List._grow_spec_char_3.block.block)

scope 1393 List._grow_spec_char_3.block block (parent: List._grow_spec_char_3)

scope 1394 List.reserve_spec_char_3 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[char]
	self -> self: List[char]*
	count -> count: u64
	TYPES
	T -> char

scope 1395 List.getRef_spec_char_5 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[char]
	TYPES
	T -> char

scope 1396 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue)

scope 1397 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)
	VARS
	__payload_Some_1348 -> __payload_Some_1348: Result[S, F].Err(F)

scope 1398 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)

scope 1399 Opt.get_spec_Result[S, F].Err(F)_17 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)

scope 1400 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue)

scope 1401 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)
	VARS
	__payload_Some_1351 -> __payload_Some_1351: Result[S, F].Ok(S)

scope 1402 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)

scope 1403 Opt.get_spec_Result[S, F].Ok(S)_18 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)

scope 1404 sizeOfStride_spec_char_6 fn (parent: )
	TYPES
	T -> char

scope 1405 sizeOfStride_spec_i64_7 fn (parent: )
	TYPES
	T -> i64

scope 1406 BufferIterator.fromBuffer_spec_T_5 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> List.concat.'T

scope 1407 BufferIterator.fromBuffer_spec_T_6 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> List.sort.'T

scope 1408 BufferIterator.fromBuffer_spec_T_7 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> List.join.'T

scope 1409 Buffer.slice_spec_u8_8.block block (parent: Buffer.slice_spec_u8_8)

scope 1410 Buffer.slice_spec_u8_8.block.block block (parent: Buffer.slice_spec_u8_8.block)

scope 1411 Buffer.empty_spec_u8_5 fn (parent: Buffer)
	TYPES
	T -> u8

scope 1412 Buffer.slice_spec_u8_8.block block (parent: Buffer.slice_spec_u8_8)

scope 1413 Buffer.slice_spec_u8_8.block.block block (parent: Buffer.slice_spec_u8_8.block)

scope 1414 Buffer.slice_spec_u8_8.block.block.block block (parent: Buffer.slice_spec_u8_8.block.block)
	VARS
	__sb_1356 -> __sb_1356: StringBuilder

scope 1415 Buffer.slice_spec_u8_8.block block (parent: Buffer.slice_spec_u8_8)

scope 1416 Buffer.slice_spec_i64_9.block block (parent: Buffer.slice_spec_i64_9)

scope 1417 Buffer.slice_spec_i64_9.block.block block (parent: Buffer.slice_spec_i64_9.block)

scope 1418 Buffer.empty_spec_i64_6 fn (parent: Buffer)
	TYPES
	T -> i64

scope 1419 Buffer.slice_spec_i64_9.block block (parent: Buffer.slice_spec_i64_9)

scope 1420 Buffer.slice_spec_i64_9.block.block block (parent: Buffer.slice_spec_i64_9.block)

scope 1421 Buffer.slice_spec_i64_9.block.block.block block (parent: Buffer.slice_spec_i64_9.block.block)
	VARS
	__sb_1360 -> __sb_1360: StringBuilder

scope 1422 Buffer.slice_spec_i64_9.block block (parent: Buffer.slice_spec_i64_9)

scope 1423 Buffer.getRef_spec_i64_13 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 1424 BufferIterator.fromBuffer_spec_T_8 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> Show_impl_List[T].'T

scope 1425 Buffer.getRef_spec_char_10.block block (parent: Buffer.getRef_spec_char_10)

scope 1426 Buffer.getRef_spec_char_10.block.block block (parent: Buffer.getRef_spec_char_10.block)

scope 1427 Buffer._copyFrom_spec_char_3.block block (parent: Buffer._copyFrom_spec_char_3)

scope 1428 Buffer._copyFrom_spec_char_3.block.block block (parent: Buffer._copyFrom_spec_char_3.block)

scope 1429 Buffer._copyFrom_spec_char_3.block.block.block block (parent: Buffer._copyFrom_spec_char_3.block.block)
	VARS
	__sb_1367 -> __sb_1367: StringBuilder

scope 1430 Buffer._copyFrom_spec_char_3.block block (parent: Buffer._copyFrom_spec_char_3)

scope 1431 Buffer._copyFrom_spec_char_3.block.block block (parent: Buffer._copyFrom_spec_char_3.block)

scope 1432 Buffer._copyFrom_spec_char_3.block.block.block block (parent: Buffer._copyFrom_spec_char_3.block.block)
	VARS
	__sb_1368 -> __sb_1368: StringBuilder

scope 1433 Buffer._allocate_spec_List[char]_12 fn (parent: Buffer)
	VARS
	data -> data: List[char]*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1434 Opt.get_spec_char_10.block block (parent: Opt.get_spec_char_10)
	VARS
	__payload_Some_1373 -> __payload_Some_1373: char
	t -> t: char
	__if_target_1372 -> __if_target_1372: Opt[char]

scope 1435 Opt.get_spec_char_10.block block (parent: Opt.get_spec_char_10)

scope 1436 sizeOf_spec_List[char]_7 fn (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1437 List._grow_spec_List[char]_4.block block (parent: List._grow_spec_List[char]_4)

scope 1438 Buffer.isEmpty_spec_List[char]_6 fn (parent: Buffer)
	VARS
	self -> self: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1439 List._grow_spec_List[char]_4.block.block block (parent: List._grow_spec_List[char]_4.block)

scope 1440 List._grow_spec_List[char]_4.block.block.block block (parent: List._grow_spec_List[char]_4.block.block)

scope 1441 List._grow_spec_List[char]_4.block block (parent: List._grow_spec_List[char]_4)

scope 1442 List.reserve_spec_List[char]_4 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[List[char]]
	self -> self: List[List[char]]*
	count -> count: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1443 Buffer.set_spec_List[char]_6 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[List[char]]
	tRef -> tRef: List[char]*
	elem -> elem: List[char]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1444 Buffer.slice_spec_List[char]_10 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[List[char]]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: List[char]*
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1445 BufferIterator.fromBuffer_spec_List[char]_9 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1446 Buffer.getRef_spec_List[char]_14 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1447 Opt.get_spec_List[char]_11.block block (parent: Opt.get_spec_List[char]_11)
	VARS
	__if_target_1390 -> __if_target_1390: Opt[List[char]]
	__payload_Some_1391 -> __payload_Some_1391: List[char]
	t -> t: List[char]

scope 1448 Opt.get_spec_List[char]_11.block block (parent: Opt.get_spec_List[char]_11)

scope 1449 Buffer._allocate_spec_enum Char(char) | String(string)_8.block block (parent: Buffer._allocate_spec_enum Char(char) | String(string)_8)

scope 1450 Buffer._allocate_spec_enum Char(char) | String(string)_8.block.block block (parent: Buffer._allocate_spec_enum Char(char) | String(string)_8.block)

scope 1451 Buffer._allocate_spec_enum Char(char) | String(string)_8.block block (parent: Buffer._allocate_spec_enum Char(char) | String(string)_8)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1452 Buffer.bufferLenBytes_spec_enum Char(char) | String(string)_8 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1453 sizeOf_spec_enum Char(char) | String(string)_8 fn (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1454 List._grow_spec_enum Char(char) | String(string)_5.block block (parent: List._grow_spec_enum Char(char) | String(string)_5)

scope 1455 Buffer.isEmpty_spec_enum Char(char) | String(string)_7 fn (parent: Buffer)
	VARS
	self -> self: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1456 List._grow_spec_enum Char(char) | String(string)_5.block.block block (parent: List._grow_spec_enum Char(char) | String(string)_5.block)

scope 1457 List._grow_spec_enum Char(char) | String(string)_5.block.block.block block (parent: List._grow_spec_enum Char(char) | String(string)_5.block.block)

scope 1458 List._grow_spec_enum Char(char) | String(string)_5.block block (parent: List._grow_spec_enum Char(char) | String(string)_5)

scope 1459 List.reserve_spec_enum Char(char) | String(string)_5 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[enum Char(char) | String(string)]
	self -> self: List[enum Char(char) | String(string)]*
	count -> count: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1460 Buffer.set_spec_enum Char(char) | String(string)_7 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	tRef -> tRef: enum Char(char) | String(string)*
	elem -> elem: enum Char(char) | String(string)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1461 Buffer.slice_spec_enum Char(char) | String(string)_11 fn (parent: Buffer)
	VARS
	end -> end: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: enum Char(char) | String(string)*
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1462 BufferIterator.fromBuffer_spec_enum Char(char) | String(string)_10 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1463 Buffer.getRef_spec_enum Char(char) | String(string)_15 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1464 Opt.get_spec_enum Char(char) | String(string)_12.block block (parent: Opt.get_spec_enum Char(char) | String(string)_12)
	VARS
	t -> t: enum Char(char) | String(string)
	__if_target_1412 -> __if_target_1412: Opt[enum Char(char) | String(string)]
	__payload_Some_1413 -> __payload_Some_1413: enum Char(char) | String(string)

scope 1465 Opt.get_spec_enum Char(char) | String(string)_12.block block (parent: Opt.get_spec_enum Char(char) | String(string)_12)

scope 1466 Buffer._allocate_spec_Arena_9.block block (parent: Buffer._allocate_spec_Arena_9)

scope 1467 Buffer._allocate_spec_Arena_9.block.block block (parent: Buffer._allocate_spec_Arena_9.block)

scope 1468 Buffer._allocate_spec_Arena_9.block block (parent: Buffer._allocate_spec_Arena_9)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1469 Buffer.bufferLenBytes_spec_Arena_9 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1470 sizeOf_spec_Arena_9 fn (parent: )
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1471 List._grow_spec_Arena_6.block block (parent: List._grow_spec_Arena_6)

scope 1472 Buffer.isEmpty_spec_Arena_8 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1473 List._grow_spec_Arena_6.block.block block (parent: List._grow_spec_Arena_6.block)

scope 1474 List._grow_spec_Arena_6.block.block.block block (parent: List._grow_spec_Arena_6.block.block)

scope 1475 List._grow_spec_Arena_6.block block (parent: List._grow_spec_Arena_6)

scope 1476 List.reserve_spec_Arena_6 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[Arena]
	self -> self: List[Arena]*
	count -> count: u64
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1477 Buffer.set_spec_Arena_8 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Arena]
	tRef -> tRef: Arena*
	elem -> elem: Arena
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1478 Buffer._allocate_spec_ObjectPool_10.block block (parent: Buffer._allocate_spec_ObjectPool_10)

scope 1479 Buffer._allocate_spec_ObjectPool_10.block.block block (parent: Buffer._allocate_spec_ObjectPool_10.block)

scope 1480 Buffer._allocate_spec_ObjectPool_10.block block (parent: Buffer._allocate_spec_ObjectPool_10)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1481 Buffer.bufferLenBytes_spec_ObjectPool_10 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> ObjectPool({})

scope 1482 Buffer.getRef_spec_Arena_11.block block (parent: Buffer.getRef_spec_Arena_11)

scope 1483 Buffer.getRef_spec_Arena_11.block.block block (parent: Buffer.getRef_spec_Arena_11.block)

scope 1484 Buffer.dataPointer_spec_Arena_8 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1485 Pointer.refAtIndex_spec_Arena_5 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1486 Opt.get_spec_PointMaybeY_13.block block (parent: Opt.get_spec_PointMaybeY_13)
	VARS
	__if_target_1434 -> __if_target_1434: Opt[PointMaybeY]
	__payload_Some_1435 -> __payload_Some_1435: PointMaybeY
	t -> t: PointMaybeY

scope 1487 Opt.get_spec_PointMaybeY_13.block block (parent: Opt.get_spec_PointMaybeY_13)

scope 1488 Opt.get_spec_i64_14.block block (parent: Opt.get_spec_i64_14)
	VARS
	t -> t: i64
	__if_target_1437 -> __if_target_1437: Opt[i64]
	__payload_Some_1438 -> __payload_Some_1438: i64

scope 1489 Opt.get_spec_i64_14.block block (parent: Opt.get_spec_i64_14)

scope 1490 Opt.get_spec_string_15.block block (parent: Opt.get_spec_string_15)
	VARS
	__if_target_1440 -> __if_target_1440: Opt[string]
	__payload_Some_1441 -> __payload_Some_1441: string
	t -> t: string

scope 1491 Opt.get_spec_string_15.block block (parent: Opt.get_spec_string_15)

scope 1492 Buffer._allocate_spec_Opt[WeirdPoint]_11.block block (parent: Buffer._allocate_spec_Opt[WeirdPoint]_11)

scope 1493 Buffer._allocate_spec_Opt[WeirdPoint]_11.block.block block (parent: Buffer._allocate_spec_Opt[WeirdPoint]_11.block)

scope 1494 Buffer._allocate_spec_Opt[WeirdPoint]_11.block block (parent: Buffer._allocate_spec_Opt[WeirdPoint]_11)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1495 Buffer.bufferLenBytes_spec_Opt[WeirdPoint]_11 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1496 sizeOf_spec_Opt[WeirdPoint]_10 fn (parent: )
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1497 List._grow_spec_Opt[WeirdPoint]_7.block block (parent: List._grow_spec_Opt[WeirdPoint]_7)

scope 1498 Buffer.isEmpty_spec_Opt[WeirdPoint]_9 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1499 List._grow_spec_Opt[WeirdPoint]_7.block.block block (parent: List._grow_spec_Opt[WeirdPoint]_7.block)

scope 1500 List._grow_spec_Opt[WeirdPoint]_7.block.block.block block (parent: List._grow_spec_Opt[WeirdPoint]_7.block.block)

scope 1501 List._grow_spec_Opt[WeirdPoint]_7.block block (parent: List._grow_spec_Opt[WeirdPoint]_7)

scope 1502 List.reserve_spec_Opt[WeirdPoint]_7 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[Opt[WeirdPoint]]
	self -> self: List[Opt[WeirdPoint]]*
	count -> count: u64
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1503 Buffer.set_spec_Opt[WeirdPoint]_9 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Opt[WeirdPoint]]
	tRef -> tRef: Opt[WeirdPoint]*
	elem -> elem: Opt[WeirdPoint]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1504 Buffer.getRef_spec_Opt[WeirdPoint]_16 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1505 Opt.opt_equals_spec_i64_2.block block (parent: Opt.opt_equals_spec_i64_2)
	VARS
	__if_target_1458 -> __if_target_1458: Opt[i64]
	__payload_Some_1459 -> __payload_Some_1459: i64
	at -> at: i64

scope 1506 Opt.opt_equals_spec_i64_2.block.block block (parent: Opt.opt_equals_spec_i64_2.block)

scope 1507 Opt.opt_equals_spec_i64_2.block.block.block block (parent: Opt.opt_equals_spec_i64_2.block.block)
	VARS
	bt -> bt: i64
	__if_target_1461 -> __if_target_1461: Opt[i64]
	__payload_Some_1462 -> __payload_Some_1462: i64

scope 1508 Opt.opt_equals_spec_i64_2.block block (parent: Opt.opt_equals_spec_i64_2)
	VARS
	__match_subject_1464 -> __match_subject_1464: Opt[i64]

scope 1509 Opt.opt_equals_spec_i64_2.block.block block (parent: Opt.opt_equals_spec_i64_2.block)

scope 1510 Opt.opt_equals_spec_i64_2.block.block.match_arm match_arm (parent: Opt.opt_equals_spec_i64_2.block.block)

scope 1511 Opt.opt_equals_spec_i64_2.block.block.match_arm match_arm (parent: Opt.opt_equals_spec_i64_2.block.block)

scope 1512 Opt.get_spec_bool_16.block block (parent: Opt.get_spec_bool_16)
	VARS
	t -> t: bool
	__if_target_1465 -> __if_target_1465: Opt[bool]
	__payload_Some_1466 -> __payload_Some_1466: bool

scope 1513 Opt.get_spec_bool_16.block block (parent: Opt.get_spec_bool_16)

scope 1514 sizeOfStride_spec_string_8 fn (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1515 List.reserve_spec_string_2.block block (parent: List.reserve_spec_string_2)

scope 1516 List.reserve_spec_string_2.block.block block (parent: List.reserve_spec_string_2.block)

scope 1517 Buffer._enlargedClone_spec_string_4 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[string]
	newBuffer -> newBuffer: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1518 Buffer.getRef_spec_string_12.block block (parent: Buffer.getRef_spec_string_12)

scope 1519 Buffer.getRef_spec_string_12.block.block block (parent: Buffer.getRef_spec_string_12.block)

scope 1520 Buffer.dataPointer_spec_string_9 fn (parent: Buffer)
	VARS
	self -> self: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1521 Pointer.refAtIndex_spec_string_6 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1522 List.reserve_spec_char_3.block block (parent: List.reserve_spec_char_3)

scope 1523 List.reserve_spec_char_3.block.block block (parent: List.reserve_spec_char_3.block)

scope 1524 Buffer._allocate_spec_i64_13 fn (parent: Buffer)
	VARS
	data -> data: i64*
	ptr -> ptr: Pointer
	count -> count: u64
	TYPES
	T -> i64

scope 1525 Buffer.getRef_spec_i64_13.block block (parent: Buffer.getRef_spec_i64_13)

scope 1526 Buffer.getRef_spec_i64_13.block.block block (parent: Buffer.getRef_spec_i64_13.block)

scope 1527 Pointer.refAtIndex_spec_i64_7 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> i64

scope 1528 Buffer._allocate_spec_List[char]_12.block block (parent: Buffer._allocate_spec_List[char]_12)

scope 1529 Buffer._allocate_spec_List[char]_12.block.block block (parent: Buffer._allocate_spec_List[char]_12.block)

scope 1530 Buffer._allocate_spec_List[char]_12.block block (parent: Buffer._allocate_spec_List[char]_12)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1531 Buffer.bufferLenBytes_spec_List[char]_12 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1532 List.reserve_spec_List[char]_4.block block (parent: List.reserve_spec_List[char]_4)

scope 1533 List.reserve_spec_List[char]_4.block.block block (parent: List.reserve_spec_List[char]_4.block)

scope 1534 Buffer._enlargedClone_spec_List[char]_5 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[List[char]]
	newBuffer -> newBuffer: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1535 Buffer.slice_spec_List[char]_10.block block (parent: Buffer.slice_spec_List[char]_10)

scope 1536 Buffer.slice_spec_List[char]_10.block.block block (parent: Buffer.slice_spec_List[char]_10.block)

scope 1537 Buffer.empty_spec_List[char]_7 fn (parent: Buffer)
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1538 Buffer.slice_spec_List[char]_10.block block (parent: Buffer.slice_spec_List[char]_10)

scope 1539 Buffer.slice_spec_List[char]_10.block.block block (parent: Buffer.slice_spec_List[char]_10.block)

scope 1540 Buffer.slice_spec_List[char]_10.block.block.block block (parent: Buffer.slice_spec_List[char]_10.block.block)
	VARS
	__sb_1487 -> __sb_1487: StringBuilder

scope 1541 Buffer.slice_spec_List[char]_10.block block (parent: Buffer.slice_spec_List[char]_10)

scope 1542 Buffer.getRef_spec_List[char]_14.block block (parent: Buffer.getRef_spec_List[char]_14)

scope 1543 Buffer.getRef_spec_List[char]_14.block.block block (parent: Buffer.getRef_spec_List[char]_14.block)

scope 1544 Buffer.dataPointer_spec_List[char]_10 fn (parent: Buffer)
	VARS
	self -> self: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1545 Pointer.refAtIndex_spec_List[char]_8 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1546 sizeOfStride_spec_enum Char(char) | String(string)_9 fn (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1547 List.reserve_spec_enum Char(char) | String(string)_5.block block (parent: List.reserve_spec_enum Char(char) | String(string)_5)

scope 1548 List.reserve_spec_enum Char(char) | String(string)_5.block.block block (parent: List.reserve_spec_enum Char(char) | String(string)_5.block)

scope 1549 Buffer._enlargedClone_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	newBuffer -> newBuffer: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1550 Buffer.slice_spec_enum Char(char) | String(string)_11.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_11)

scope 1551 Buffer.slice_spec_enum Char(char) | String(string)_11.block.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_11.block)

scope 1552 Buffer.empty_spec_enum Char(char) | String(string)_8 fn (parent: Buffer)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1553 Buffer.slice_spec_enum Char(char) | String(string)_11.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_11)

scope 1554 Buffer.slice_spec_enum Char(char) | String(string)_11.block.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_11.block)

scope 1555 Buffer.slice_spec_enum Char(char) | String(string)_11.block.block.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_11.block.block)
	VARS
	__sb_1498 -> __sb_1498: StringBuilder

scope 1556 Buffer.slice_spec_enum Char(char) | String(string)_11.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_11)

scope 1557 Buffer.getRef_spec_enum Char(char) | String(string)_15.block block (parent: Buffer.getRef_spec_enum Char(char) | String(string)_15)

scope 1558 Buffer.getRef_spec_enum Char(char) | String(string)_15.block.block block (parent: Buffer.getRef_spec_enum Char(char) | String(string)_15.block)

scope 1559 Buffer.dataPointer_spec_enum Char(char) | String(string)_11 fn (parent: Buffer)
	VARS
	self -> self: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1560 Pointer.refAtIndex_spec_enum Char(char) | String(string)_9 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1561 sizeOfStride_spec_Arena_10 fn (parent: )
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1562 List.reserve_spec_Arena_6.block block (parent: List.reserve_spec_Arena_6)

scope 1563 List.reserve_spec_Arena_6.block.block block (parent: List.reserve_spec_Arena_6.block)

scope 1564 Buffer._enlargedClone_spec_Arena_7 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[Arena]
	newBuffer -> newBuffer: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1565 sizeOfStride_spec_ObjectPool_11 fn (parent: )
	TYPES
	T -> ObjectPool({})

scope 1566 sizeOfStride_spec_Opt[WeirdPoint]_12 fn (parent: )
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1567 List.reserve_spec_Opt[WeirdPoint]_7.block block (parent: List.reserve_spec_Opt[WeirdPoint]_7)

scope 1568 List.reserve_spec_Opt[WeirdPoint]_7.block.block block (parent: List.reserve_spec_Opt[WeirdPoint]_7.block)

scope 1569 Buffer._enlargedClone_spec_Opt[WeirdPoint]_8 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	self -> self: Buffer[Opt[WeirdPoint]]
	newBuffer -> newBuffer: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1570 Buffer.getRef_spec_Opt[WeirdPoint]_16.block block (parent: Buffer.getRef_spec_Opt[WeirdPoint]_16)

scope 1571 Buffer.getRef_spec_Opt[WeirdPoint]_16.block.block block (parent: Buffer.getRef_spec_Opt[WeirdPoint]_16.block)

scope 1572 Buffer.dataPointer_spec_Opt[WeirdPoint]_12 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1573 Pointer.refAtIndex_spec_Opt[WeirdPoint]_10 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1574 Buffer._copyFrom_spec_string_4 fn (parent: Buffer)
	VARS
	source -> source: Buffer[string]
	numBytes -> numBytes: u64
	dest -> dest: Buffer[string]
	count -> count: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1575 Buffer._allocate_spec_i64_13.block block (parent: Buffer._allocate_spec_i64_13)

scope 1576 Buffer._allocate_spec_i64_13.block.block block (parent: Buffer._allocate_spec_i64_13.block)

scope 1577 Buffer._allocate_spec_i64_13.block block (parent: Buffer._allocate_spec_i64_13)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1578 sizeOfStride_spec_List[char]_13 fn (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1579 Buffer._copyFrom_spec_List[char]_5 fn (parent: Buffer)
	VARS
	source -> source: Buffer[List[char]]
	numBytes -> numBytes: u64
	dest -> dest: Buffer[List[char]]
	count -> count: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1580 Buffer._copyFrom_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	source -> source: Buffer[enum Char(char) | String(string)]
	numBytes -> numBytes: u64
	dest -> dest: Buffer[enum Char(char) | String(string)]
	count -> count: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1581 Buffer._copyFrom_spec_Arena_7 fn (parent: Buffer)
	VARS
	source -> source: Buffer[Arena]
	numBytes -> numBytes: u64
	dest -> dest: Buffer[Arena]
	count -> count: u64
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1582 Buffer._copyFrom_spec_Opt[WeirdPoint]_8 fn (parent: Buffer)
	VARS
	source -> source: Buffer[Opt[WeirdPoint]]
	numBytes -> numBytes: u64
	dest -> dest: Buffer[Opt[WeirdPoint]]
	count -> count: u64
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 1583 Buffer._copyFrom_spec_string_4.block block (parent: Buffer._copyFrom_spec_string_4)

scope 1584 Buffer._copyFrom_spec_string_4.block.block block (parent: Buffer._copyFrom_spec_string_4.block)

scope 1585 Buffer._copyFrom_spec_string_4.block.block.block block (parent: Buffer._copyFrom_spec_string_4.block.block)
	VARS
	__sb_1539 -> __sb_1539: StringBuilder

scope 1586 Buffer._copyFrom_spec_string_4.block block (parent: Buffer._copyFrom_spec_string_4)

scope 1587 Buffer._copyFrom_spec_string_4.block.block block (parent: Buffer._copyFrom_spec_string_4.block)

scope 1588 Buffer._copyFrom_spec_string_4.block.block.block block (parent: Buffer._copyFrom_spec_string_4.block.block)
	VARS
	__sb_1540 -> __sb_1540: StringBuilder

scope 1589 Buffer._copyFrom_spec_List[char]_5.block block (parent: Buffer._copyFrom_spec_List[char]_5)

scope 1590 Buffer._copyFrom_spec_List[char]_5.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block)

scope 1591 Buffer._copyFrom_spec_List[char]_5.block.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block.block)
	VARS
	__sb_1542 -> __sb_1542: StringBuilder

scope 1592 Buffer._copyFrom_spec_List[char]_5.block block (parent: Buffer._copyFrom_spec_List[char]_5)

scope 1593 Buffer._copyFrom_spec_List[char]_5.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block)

scope 1594 Buffer._copyFrom_spec_List[char]_5.block.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block.block)
	VARS
	__sb_1543 -> __sb_1543: StringBuilder

scope 1595 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6)

scope 1596 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block)

scope 1597 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block)
	VARS
	__sb_1545 -> __sb_1545: StringBuilder

scope 1598 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6)

scope 1599 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block)

scope 1600 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block)
	VARS
	__sb_1546 -> __sb_1546: StringBuilder

scope 1601 Buffer._copyFrom_spec_Arena_7.block block (parent: Buffer._copyFrom_spec_Arena_7)

scope 1602 Buffer._copyFrom_spec_Arena_7.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block)

scope 1603 Buffer._copyFrom_spec_Arena_7.block.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block.block)
	VARS
	__sb_1548 -> __sb_1548: StringBuilder

scope 1604 Buffer._copyFrom_spec_Arena_7.block block (parent: Buffer._copyFrom_spec_Arena_7)

scope 1605 Buffer._copyFrom_spec_Arena_7.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block)

scope 1606 Buffer._copyFrom_spec_Arena_7.block.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block.block)
	VARS
	__sb_1549 -> __sb_1549: StringBuilder

scope 1607 Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_8)

scope 1608 Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block)

scope 1609 Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block.block)
	VARS
	__sb_1551 -> __sb_1551: StringBuilder

scope 1610 Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_8)

scope 1611 Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block)

scope 1612 Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_8.block.block)
	VARS
	__sb_1552 -> __sb_1552: StringBuilder


