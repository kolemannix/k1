Module core
--- TYPES ---
type 01 integer    u8   [ tparams: 0, inference: 0 ]
type 02 integer    u16   [ tparams: 0, inference: 0 ]
type 03 integer    u32   [ tparams: 0, inference: 0 ]
type 04 integer    u64   [ tparams: 0, inference: 0 ]
type 05 integer    i8   [ tparams: 0, inference: 0 ]
type 06 integer    i16   [ tparams: 0, inference: 0 ]
type 07 integer    i32   [ tparams: 0, inference: 0 ]
type 08 integer    i64   [ tparams: 0, inference: 0 ]
type 09 scalar     unit   [ tparams: 0, inference: 0 ]
type 10 char       char   [ tparams: 0, inference: 0 ]
type 11 bool       bool   [ tparams: 0, inference: 0 ]
type 12 never      never   [ tparams: 0, inference: 0 ]
type 13 pointer    Pointer   [ tparams: 0, inference: 0 ]
type 14 float      f32   [ tparams: 0, inference: 0 ]
type 15 float      f64   [ tparams: 0, inference: 0 ]
type 16 param      T   [ tparams: 1, inference: 0 ]
type 17 reference  T*   [ tparams: 1, inference: 0 ]
type 18 struct     {len: u64, data: T*}   [ tparams: 1, inference: 0 ]
type 19 generic    Buffer[T]   [ tparams: 0, inference: 0 ]
type 20 param      T   [ tparams: 1, inference: 0 ]
type 21 reference  T*   [ tparams: 1, inference: 0 ]
type 22 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 23 struct     {len: u64, buffer: Buffer[T]}   [ tparams: 1, inference: 0 ]
type 24 generic    List[T]   [ tparams: 0, inference: 0 ]
type 25 reference  char*   [ tparams: 0, inference: 0 ]
type 26 struct     Buffer[char]   [ tparams: 0, inference: 0 ]
type 27 struct     string   [ tparams: 0, inference: 0 ]
type 28 param      T   [ tparams: 1, inference: 0 ]
type 29 variant    None   [ tparams: 0, inference: 0 ]
type 30 variant    Some(T)   [ tparams: 1, inference: 0 ]
type 31 enum       enum None | Some(T)   [ tparams: 1, inference: 0 ]
type 32 generic    Opt[T]   [ tparams: 0, inference: 0 ]
type 33 struct     SourceLocation   [ tparams: 0, inference: 0 ]
type 34 variant    Ordering.Less   [ tparams: 0, inference: 0 ]
type 35 variant    Ordering.Equal   [ tparams: 0, inference: 0 ]
type 36 variant    Ordering.Greater   [ tparams: 0, inference: 0 ]
type 37 enum       Ordering   [ tparams: 0, inference: 0 ]
type 38 param      T   [ tparams: 1, inference: 0 ]
type 39 param      E   [ tparams: 1, inference: 0 ]
type 40 variant    Ok(T)   [ tparams: 1, inference: 0 ]
type 41 variant    Err(E)   [ tparams: 1, inference: 0 ]
type 42 enum       enum Ok(T) | Err(E)   [ tparams: 2, inference: 0 ]
type 43 generic    Result[T, E]   [ tparams: 0, inference: 0 ]
type 44 param      T   [ tparams: 1, inference: 0 ]
type 45 reference  T*   [ tparams: 1, inference: 0 ]
type 46 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 47 struct     {buf: Buffer[T], pos: u64}   [ tparams: 1, inference: 0 ]
type 48 generic    BufferIterator[T]   [ tparams: 0, inference: 0 ]
type 49 variant    Char(char)   [ tparams: 0, inference: 0 ]
type 50 variant    String(string)   [ tparams: 0, inference: 0 ]
type 51 enum       enum Char(char) | String(string)   [ tparams: 0, inference: 0 ]
type 52 reference  enum Char(char) | String(string)*   [ tparams: 0, inference: 0 ]
type 53 struct     Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 54 struct     List[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 55 reference  List[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 56 struct     StringBuilder   [ tparams: 0, inference: 0 ]
type 57 struct     Arena   [ tparams: 0, inference: 0 ]
type 58 struct     ObjectPool   [ tparams: 0, inference: 0 ]
type 59 reference  Arena*   [ tparams: 0, inference: 0 ]
type 60 struct     Buffer[Arena]   [ tparams: 0, inference: 0 ]
type 61 struct     List[Arena]   [ tparams: 0, inference: 0 ]
type 62 reference  ObjectPool*   [ tparams: 0, inference: 0 ]
type 63 struct     Buffer[ObjectPool]   [ tparams: 0, inference: 0 ]
type 64 struct     List[ObjectPool]   [ tparams: 0, inference: 0 ]
type 65 struct     Allocator   [ tparams: 0, inference: 0 ]
type 66 struct     IntRange   [ tparams: 0, inference: 0 ]
type 67 struct     IntRangeIterator   [ tparams: 0, inference: 0 ]
type 68 struct     Point   [ tparams: 0, inference: 0 ]
type 69 variant    Tool.True   [ tparams: 0, inference: 0 ]
type 70 variant    Tool.False   [ tparams: 0, inference: 0 ]
type 71 variant    Tool.Iono   [ tparams: 0, inference: 0 ]
type 72 enum       Tool   [ tparams: 0, inference: 0 ]
type 73 param      T   [ tparams: 1, inference: 0 ]
type 74 struct     {x: T, y: T}   [ tparams: 2, inference: 0 ]
type 75 generic    GenericPoint[T]   [ tparams: 0, inference: 0 ]
type 76 struct     MyString   [ tparams: 0, inference: 0 ]
type 77 struct     Foo   [ tparams: 0, inference: 0 ]
type 78 param      T   [ tparams: 1, inference: 0 ]
type 79 struct     {value: T}   [ tparams: 1, inference: 0 ]
type 80 generic    MyBox[T]   [ tparams: 0, inference: 0 ]
type 81 variant    Maybe.A   [ tparams: 0, inference: 0 ]
type 82 variant    Maybe.B(char)   [ tparams: 0, inference: 0 ]
type 83 variant    Maybe.C(string)   [ tparams: 0, inference: 0 ]
type 84 enum       Maybe   [ tparams: 0, inference: 0 ]
type 85 param      T   [ tparams: 1, inference: 0 ]
type 86 param      E   [ tparams: 1, inference: 0 ]
type 87 variant    Ok(T)   [ tparams: 1, inference: 0 ]
type 88 variant    Err(E)   [ tparams: 1, inference: 0 ]
type 89 enum       enum Ok(T) | Err(E)   [ tparams: 2, inference: 0 ]
type 90 generic    MyResult[T, E]   [ tparams: 0, inference: 0 ]
type 91 variant    State.On(unit)   [ tparams: 0, inference: 0 ]
type 92 variant    State.Off(unit)   [ tparams: 0, inference: 0 ]
type 93 variant    State.Zilch   [ tparams: 0, inference: 0 ]
type 94 enum       State   [ tparams: 0, inference: 0 ]
type 95 variant    Opt[i64].None   [ tparams: 0, inference: 0 ]
type 96 variant    Opt[i64].Some(i64)   [ tparams: 0, inference: 0 ]
type 97 enum       Opt[i64]   [ tparams: 0, inference: 0 ]
type 98 variant    StateHard.On(Opt[i64])   [ tparams: 0, inference: 0 ]
type 99 variant    StateHard.Off(Opt[i64])   [ tparams: 0, inference: 0 ]
type 100 enum       StateHard   [ tparams: 0, inference: 0 ]
type 101 param      A   [ tparams: 1, inference: 0 ]
type 102 param      B   [ tparams: 1, inference: 0 ]
type 103 struct     {a: A, b: B}   [ tparams: 2, inference: 0 ]
type 104 variant    Stuff({a: A, b: B})   [ tparams: 2, inference: 0 ]
type 105 variant    Empty   [ tparams: 0, inference: 0 ]
type 106 enum       enum Stuff({a: A, b: B}) | Empty   [ tparams: 2, inference: 0 ]
type 107 generic    Contrived[A, B]   [ tparams: 0, inference: 0 ]
type 108 variant    E.A(i64)   [ tparams: 0, inference: 0 ]
type 109 variant    E.B   [ tparams: 0, inference: 0 ]
type 110 variant    E.C   [ tparams: 0, inference: 0 ]
type 111 enum       E   [ tparams: 0, inference: 0 ]
type 112 param      T   [ tparams: 1, inference: 0 ]
type 113 struct     {value: T}   [ tparams: 1, inference: 0 ]
type 114 generic    Box[T]   [ tparams: 0, inference: 0 ]
type 115 param      T   [ tparams: 1, inference: 0 ]
type 116 param      U   [ tparams: 1, inference: 0 ]
type 117 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 118 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 119 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 120 variant    Opt[U].None   [ tparams: 0, inference: 0 ]
type 121 variant    Opt[U].Some(U)   [ tparams: 1, inference: 0 ]
type 122 enum       Opt[U]   [ tparams: 1, inference: 0 ]
type 123 struct     {t: Opt[T], u: Opt[U]}   [ tparams: 2, inference: 0 ]
type 124 generic    Pair[T, U]   [ tparams: 0, inference: 0 ]
type 125 recurse    Json   [ tparams: 0, inference: 0 ]
type 126 reference  Json*   [ tparams: 0, inference: 0 ]
type 127 struct     Buffer[Json]   [ tparams: 0, inference: 0 ]
type 128 struct     List[Json]   [ tparams: 0, inference: 0 ]
type 129 struct     {key: string, value: Json}   [ tparams: 0, inference: 0 ]
type 130 reference  {key: string, value: Json}*   [ tparams: 0, inference: 0 ]
type 131 struct     Buffer[{key: string, value: Json}]   [ tparams: 0, inference: 0 ]
type 132 struct     List[{key: string, value: Json}]   [ tparams: 0, inference: 0 ]
type 133 variant    Json.JsStr(string)   [ tparams: 0, inference: 0 ]
type 134 variant    Json.JsNumber(string)   [ tparams: 0, inference: 0 ]
type 135 variant    Json.JsBool(bool)   [ tparams: 0, inference: 0 ]
type 136 variant    Json.JsNull   [ tparams: 0, inference: 0 ]
type 137 variant    Json.JsArray(List[Json])   [ tparams: 0, inference: 0 ]
type 138 variant    Json.JsObject(List[{key: string, value: Json}])   [ tparams: 0, inference: 0 ]
type 139 enum       Json   [ tparams: 0, inference: 0 ]
type 140 struct     Point   [ tparams: 0, inference: 0 ]
type 141 struct     {reason: string}   [ tparams: 0, inference: 0 ]
type 142 variant    TriState.Yes   [ tparams: 0, inference: 0 ]
type 143 variant    TriState.No   [ tparams: 0, inference: 0 ]
type 144 variant    TriState.Failure({reason: string})   [ tparams: 0, inference: 0 ]
type 145 enum       TriState   [ tparams: 0, inference: 0 ]
type 146 variant    Opt[bool].None   [ tparams: 0, inference: 0 ]
type 147 variant    Opt[bool].Some(bool)   [ tparams: 0, inference: 0 ]
type 148 enum       Opt[bool]   [ tparams: 0, inference: 0 ]
type 149 struct     Foo   [ tparams: 0, inference: 0 ]
type 150 struct     Blub   [ tparams: 0, inference: 0 ]
type 151 struct     Baz   [ tparams: 0, inference: 0 ]
type 152 struct     PointMaybeY   [ tparams: 0, inference: 0 ]
type 153 struct     WeirdPoint   [ tparams: 0, inference: 0 ]
type 154 struct     Point3   [ tparams: 0, inference: 0 ]
type 155 struct     Foo   [ tparams: 0, inference: 0 ]
type 156 struct     Foo   [ tparams: 0, inference: 0 ]
type 157 struct     Point   [ tparams: 0, inference: 0 ]
type 158 struct     Foo   [ tparams: 0, inference: 0 ]
type 159 struct     {x: i64, y: i64, width: i64, height: i64}   [ tparams: 0, inference: 0 ]
type 160 struct     Block   [ tparams: 0, inference: 0 ]
type 161 struct     PointNamed   [ tparams: 0, inference: 0 ]
type 162 struct     {x: i64, y: i64}   [ tparams: 0, inference: 0 ]
type 163 struct     Positioned   [ tparams: 0, inference: 0 ]
type 164 struct     {text: string}   [ tparams: 0, inference: 0 ]
type 165 struct     Text   [ tparams: 0, inference: 0 ]
type 166 struct     User   [ tparams: 0, inference: 0 ]
type 167 struct     {password: string}   [ tparams: 0, inference: 0 ]
type 168 struct     UserView   [ tparams: 0, inference: 0 ]
type 169 struct     Foo   [ tparams: 0, inference: 0 ]
type 170 struct     UserId   [ tparams: 0, inference: 0 ]
type 171 reference  {x: i64, y: i64}*   [ tparams: 0, inference: 0 ]
type 172 struct     Buffer[{x: i64, y: i64}]   [ tparams: 0, inference: 0 ]
type 173 struct     List[{x: i64, y: i64}]   [ tparams: 0, inference: 0 ]
type 174 param      Self   [ tparams: 1, inference: 0 ]
type 175 function   fn(Self, Self) -> bool   [ tparams: 2, inference: 0 ]
type 176 param      Self   [ tparams: 1, inference: 0 ]
type 177 reference  Self*   [ tparams: 1, inference: 0 ]
type 178 function   fn(Self*, char) -> unit   [ tparams: 1, inference: 0 ]
type 179 function   fn(Self*, u8) -> unit   [ tparams: 1, inference: 0 ]
type 180 function   fn(Self*, string) -> unit   [ tparams: 1, inference: 0 ]
type 181 reference  u8*   [ tparams: 0, inference: 0 ]
type 182 struct     Buffer[u8]   [ tparams: 0, inference: 0 ]
type 183 function   fn(Self*, Buffer[u8]) -> unit   [ tparams: 1, inference: 0 ]
type 184 param      Self   [ tparams: 1, inference: 0 ]
type 185 param      W   [ tparams: 1, inference: 0 ]
type 186 reference  W*   [ tparams: 1, inference: 0 ]
type 187 function   fn(W*, char) -> unit   [ tparams: 1, inference: 0 ]
type 188 function   fn(W*, u8) -> unit   [ tparams: 1, inference: 0 ]
type 189 function   fn(W*, string) -> unit   [ tparams: 1, inference: 0 ]
type 190 function   fn(W*, Buffer[u8]) -> unit   [ tparams: 1, inference: 0 ]
type 191 function   fn(Self, W*) -> unit   [ tparams: 2, inference: 0 ]
type 192 param      Self   [ tparams: 1, inference: 0 ]
type 193 function   fn(Self) -> string   [ tparams: 1, inference: 0 ]
type 194 param      Self   [ tparams: 1, inference: 0 ]
type 195 function   fn(Self) -> Self   [ tparams: 2, inference: 0 ]
type 196 function   fn(Self, Self) -> Self   [ tparams: 3, inference: 0 ]
type 197 param      Self   [ tparams: 1, inference: 0 ]
type 198 function   fn(Self, Self) -> Ordering   [ tparams: 2, inference: 0 ]
type 199 param      Self   [ tparams: 1, inference: 0 ]
type 200 param      Inner   [ tparams: 1, inference: 0 ]
type 201 function   fn(Self) -> bool   [ tparams: 1, inference: 0 ]
type 202 function   fn(Self) -> Inner   [ tparams: 2, inference: 0 ]
type 203 function   fn(Inner) -> Self   [ tparams: 2, inference: 0 ]
type 204 param      Self   [ tparams: 1, inference: 0 ]
type 205 param      T   [ tparams: 1, inference: 0 ]
type 206 param      E   [ tparams: 1, inference: 0 ]
type 207 function   fn(E) -> Self   [ tparams: 2, inference: 0 ]
type 208 function   fn(T) -> Self   [ tparams: 2, inference: 0 ]
type 209 function   fn(Self) -> bool   [ tparams: 1, inference: 0 ]
type 210 function   fn(Self) -> E   [ tparams: 2, inference: 0 ]
type 211 function   fn(Self) -> T   [ tparams: 2, inference: 0 ]
type 212 param      Self   [ tparams: 1, inference: 0 ]
type 213 param      Item   [ tparams: 1, inference: 0 ]
type 214 reference  Self*   [ tparams: 1, inference: 0 ]
type 215 variant    Opt[Item].None   [ tparams: 0, inference: 0 ]
type 216 variant    Opt[Item].Some(Item)   [ tparams: 1, inference: 0 ]
type 217 enum       Opt[Item]   [ tparams: 1, inference: 0 ]
type 218 function   fn(Self*) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 219 variant    Opt[u64].None   [ tparams: 0, inference: 0 ]
type 220 variant    Opt[u64].Some(u64)   [ tparams: 0, inference: 0 ]
type 221 enum       Opt[u64]   [ tparams: 0, inference: 0 ]
type 222 struct     {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 223 function   fn(Self) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 224 function   fn(Self*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 225 function   fn(Self*, u64) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 226 param      Self   [ tparams: 1, inference: 0 ]
type 227 param      Item   [ tparams: 1, inference: 0 ]
type 228 param      I   [ tparams: 1, inference: 0 ]
type 229 reference  I*   [ tparams: 1, inference: 0 ]
type 230 variant    Opt[Item].None   [ tparams: 0, inference: 0 ]
type 231 variant    Opt[Item].Some(Item)   [ tparams: 1, inference: 0 ]
type 232 enum       Opt[Item]   [ tparams: 1, inference: 0 ]
type 233 function   fn(I*) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 234 function   fn(I) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 235 function   fn(I*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 236 function   fn(I*, u64) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 237 function   fn(Self) -> I   [ tparams: 2, inference: 0 ]
type 238 param      T   [ tparams: 1, inference: 0 ]
type 239 function   fn() -> u64   [ tparams: 0, inference: 0 ]
type 240 param      T   [ tparams: 1, inference: 0 ]
type 241 param      T   [ tparams: 1, inference: 0 ]
type 242 function   fn() -> SourceLocation   [ tparams: 0, inference: 0 ]
type 243 function   fn(bool) -> bool   [ tparams: 0, inference: 0 ]
type 244 function   fn(bool, bool) -> bool   [ tparams: 0, inference: 0 ]
type 245 param      T   [ tparams: 1, inference: 0 ]
type 246 function   fn(T) -> unit   [ tparams: 1, inference: 0 ]
type 247 function   fn(i32) -> never   [ tparams: 0, inference: 0 ]
type 248 function   fn(i32, Pointer, u64, u64) -> i64   [ tparams: 0, inference: 0 ]
type 249 function   fn(i32, Pointer, u64, u64) -> u64   [ tparams: 0, inference: 0 ]
type 250 function   fn(Pointer, Pointer, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 251 function   fn(Pointer, u32, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 252 function   fn(Pointer, Pointer, u64) -> i32   [ tparams: 0, inference: 0 ]
type 253 function   fn(u64, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 254 function   fn(u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 255 function   fn(Pointer) -> unit   [ tparams: 0, inference: 0 ]
type 256 function   fn(Pointer, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 257 function   fn() -> never   [ tparams: 0, inference: 0 ]
type 258 function   fn(SourceLocation, bool) -> unit   [ tparams: 0, inference: 0 ]
type 259 function   fn(SourceLocation, string) -> never   [ tparams: 0, inference: 0 ]
type 260 param      T   [ tparams: 1, inference: 0 ]
type 261 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 262 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 263 function   fn(SourceLocation, T, T) -> unit   [ tparams: 2, inference: 0 ]
type 264 function   fn(Pointer) -> bool   [ tparams: 0, inference: 0 ]
type 265 param      T   [ tparams: 1, inference: 0 ]
type 266 reference  T*   [ tparams: 1, inference: 0 ]
type 267 function   fn(Pointer, u64) -> T*   [ tparams: 1, inference: 0 ]
type 268 function   fn(Pointer, Pointer) -> bool   [ tparams: 0, inference: 0 ]
type 269 param      T   [ tparams: 1, inference: 0 ]
type 270 reference  T*   [ tparams: 1, inference: 0 ]
type 271 function   fn(T) -> T*   [ tparams: 2, inference: 0 ]
type 272 param      T   [ tparams: 1, inference: 0 ]
type 273 function   fn(T) -> T   [ tparams: 2, inference: 0 ]
type 274 param      T   [ tparams: 1, inference: 0 ]
type 275 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 276 function   fn(T) -> unit   [ tparams: 1, inference: 0 ]
type 277 function   fn(string) -> unit   [ tparams: 0, inference: 0 ]
type 278 function   fn() -> unit   [ tparams: 0, inference: 0 ]
type 279 function   fn(u32) -> u32   [ tparams: 0, inference: 0 ]
type 280 reference  string*   [ tparams: 0, inference: 0 ]
type 281 struct     Buffer[string]   [ tparams: 0, inference: 0 ]
type 282 function   fn(u32, Pointer) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 283 variant    Result[string, string].Ok(string)   [ tparams: 0, inference: 0 ]
type 284 variant    Result[string, string].Err(string)   [ tparams: 0, inference: 0 ]
type 285 enum       Result[string, string]   [ tparams: 0, inference: 0 ]
type 286 function   fn(u64) -> Result[string, string]   [ tparams: 0, inference: 0 ]
type 287 function   fn(Pointer, Pointer) -> Pointer   [ tparams: 0, inference: 0 ]
type 288 function   fn(Pointer, u64, i32) -> i32   [ tparams: 0, inference: 0 ]
type 289 function   fn(Pointer, u64, u64, Pointer) -> u64   [ tparams: 0, inference: 0 ]
type 290 function   fn(Pointer) -> i32   [ tparams: 0, inference: 0 ]
type 291 function   fn(Pointer) -> u64   [ tparams: 0, inference: 0 ]
type 292 function   fn(Allocator, string) -> string   [ tparams: 0, inference: 0 ]
type 293 function   fn(SourceLocation, string, bool) -> unit   [ tparams: 0, inference: 0 ]
type 294 function   fn(char) -> string   [ tparams: 0, inference: 0 ]
type 295 variant    Opt[u8].None   [ tparams: 0, inference: 0 ]
type 296 variant    Opt[u8].Some(u8)   [ tparams: 0, inference: 0 ]
type 297 enum       Opt[u8]   [ tparams: 0, inference: 0 ]
type 298 function   fn(char) -> Opt[u8]   [ tparams: 0, inference: 0 ]
type 299 param      T   [ tparams: 1, inference: 0 ]
type 300 param      W   [ tparams: 1, inference: 0 ]
type 301 reference  W*   [ tparams: 1, inference: 0 ]
type 302 function   fn(W*, char) -> unit   [ tparams: 1, inference: 0 ]
type 303 function   fn(W*, u8) -> unit   [ tparams: 1, inference: 0 ]
type 304 function   fn(W*, string) -> unit   [ tparams: 1, inference: 0 ]
type 305 function   fn(W*, Buffer[u8]) -> unit   [ tparams: 1, inference: 0 ]
type 306 function   fn(T, W*) -> unit   [ tparams: 2, inference: 0 ]
type 307 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 308 function   fn(bool) -> string   [ tparams: 0, inference: 0 ]
type 309 function   fn(i64) -> string   [ tparams: 0, inference: 0 ]
type 310 function   fn(i64, i64) -> Ordering   [ tparams: 0, inference: 0 ]
type 311 function   fn(u64, u64) -> Ordering   [ tparams: 0, inference: 0 ]
type 312 function   fn(u8, u8) -> Ordering   [ tparams: 0, inference: 0 ]
type 313 function   fn(u8) -> char   [ tparams: 0, inference: 0 ]
type 314 param      W   [ tparams: 1, inference: 0 ]
type 315 reference  W*   [ tparams: 1, inference: 0 ]
type 316 function   fn(W*, char) -> unit   [ tparams: 1, inference: 0 ]
type 317 function   fn(W*, u8) -> unit   [ tparams: 1, inference: 0 ]
type 318 function   fn(W*, string) -> unit   [ tparams: 1, inference: 0 ]
type 319 function   fn(W*, Buffer[u8]) -> unit   [ tparams: 1, inference: 0 ]
type 320 function   fn(W*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 321 function   fn(u64) -> string   [ tparams: 0, inference: 0 ]
type 322 function   fn(u32) -> string   [ tparams: 0, inference: 0 ]
type 323 function   fn(u8) -> string   [ tparams: 0, inference: 0 ]
type 324 function   fn(i32) -> string   [ tparams: 0, inference: 0 ]
type 325 function   fn(i16) -> string   [ tparams: 0, inference: 0 ]
type 326 function   fn(i8) -> string   [ tparams: 0, inference: 0 ]
type 327 function   fn(i64, i64) -> bool   [ tparams: 0, inference: 0 ]
type 328 param      S   [ tparams: 1, inference: 0 ]
type 329 param      F   [ tparams: 1, inference: 0 ]
type 330 variant    Result[S, F].Ok(S)   [ tparams: 1, inference: 0 ]
type 331 variant    Result[S, F].Err(F)   [ tparams: 1, inference: 0 ]
type 332 enum       Result[S, F]   [ tparams: 2, inference: 0 ]
type 333 function   fn(F) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 334 function   fn(E) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 335 function   fn(S) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 336 function   fn(T) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 337 function   fn(Result[S, F]) -> bool   [ tparams: 2, inference: 0 ]
type 338 function   fn(Result[S, F]) -> F   [ tparams: 3, inference: 0 ]
type 339 function   fn(Result[S, F]) -> E   [ tparams: 3, inference: 0 ]
type 340 function   fn(Result[S, F]) -> S   [ tparams: 3, inference: 0 ]
type 341 function   fn(Result[S, F]) -> T   [ tparams: 3, inference: 0 ]
type 342 param      S   [ tparams: 1, inference: 0 ]
type 343 param      F   [ tparams: 1, inference: 0 ]
type 344 variant    Result[S, F].Ok(S)   [ tparams: 1, inference: 0 ]
type 345 variant    Result[S, F].Err(F)   [ tparams: 1, inference: 0 ]
type 346 enum       Result[S, F]   [ tparams: 2, inference: 0 ]
type 347 function   fn(Result[S, F]) -> bool   [ tparams: 2, inference: 0 ]
type 348 function   fn(Result[S, F]) -> S   [ tparams: 3, inference: 0 ]
type 349 function   fn(Result[S, F]) -> Inner   [ tparams: 3, inference: 0 ]
type 350 function   fn(S) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 351 function   fn(Inner) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 352 param      T   [ tparams: 1, inference: 0 ]
type 353 function   fn(u64) -> u64   [ tparams: 0, inference: 0 ]
type 354 param      T   [ tparams: 1, inference: 0 ]
type 355 reference  T*   [ tparams: 1, inference: 0 ]
type 356 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 357 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 358 param      T   [ tparams: 1, inference: 0 ]
type 359 reference  T*   [ tparams: 1, inference: 0 ]
type 360 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 361 function   fn(u64, Pointer) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 362 param      T   [ tparams: 1, inference: 0 ]
type 363 reference  T*   [ tparams: 1, inference: 0 ]
type 364 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 365 function   fn(u64, T*) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 366 param      T   [ tparams: 1, inference: 0 ]
type 367 reference  T*   [ tparams: 1, inference: 0 ]
type 368 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 369 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 370 param      T   [ tparams: 1, inference: 0 ]
type 371 reference  T*   [ tparams: 1, inference: 0 ]
type 372 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 373 function   fn(Buffer[T], Buffer[T], u64) -> unit   [ tparams: 2, inference: 0 ]
type 374 param      T   [ tparams: 1, inference: 0 ]
type 375 reference  T*   [ tparams: 1, inference: 0 ]
type 376 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 377 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 378 param      T   [ tparams: 1, inference: 0 ]
type 379 reference  T*   [ tparams: 1, inference: 0 ]
type 380 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 381 function   fn(Buffer[T]) -> u64   [ tparams: 1, inference: 0 ]
type 382 param      T   [ tparams: 1, inference: 0 ]
type 383 reference  T*   [ tparams: 1, inference: 0 ]
type 384 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 385 function   fn() -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 386 param      T   [ tparams: 1, inference: 0 ]
type 387 reference  T*   [ tparams: 1, inference: 0 ]
type 388 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 389 function   fn(u64, T) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 390 param      T   [ tparams: 1, inference: 0 ]
type 391 reference  T*   [ tparams: 1, inference: 0 ]
type 392 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 393 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 394 param      T   [ tparams: 1, inference: 0 ]
type 395 reference  T*   [ tparams: 1, inference: 0 ]
type 396 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 397 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 398 param      T   [ tparams: 1, inference: 0 ]
type 399 reference  T*   [ tparams: 1, inference: 0 ]
type 400 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 401 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 402 param      T   [ tparams: 1, inference: 0 ]
type 403 reference  T*   [ tparams: 1, inference: 0 ]
type 404 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 405 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 406 param      T   [ tparams: 1, inference: 0 ]
type 407 reference  T*   [ tparams: 1, inference: 0 ]
type 408 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 409 function   fn(Buffer[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 410 param      T   [ tparams: 1, inference: 0 ]
type 411 reference  T*   [ tparams: 1, inference: 0 ]
type 412 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 413 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 414 param      T   [ tparams: 1, inference: 0 ]
type 415 reference  T*   [ tparams: 1, inference: 0 ]
type 416 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 417 function   fn(Buffer[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 418 param      T   [ tparams: 1, inference: 0 ]
type 419 reference  T*   [ tparams: 1, inference: 0 ]
type 420 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 421 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 422 param      T   [ tparams: 1, inference: 0 ]
type 423 reference  T*   [ tparams: 1, inference: 0 ]
type 424 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 425 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 426 param      T   [ tparams: 1, inference: 0 ]
type 427 reference  T*   [ tparams: 1, inference: 0 ]
type 428 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 429 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 430 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 431 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 432 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 433 param      T   [ tparams: 1, inference: 0 ]
type 434 reference  T*   [ tparams: 1, inference: 0 ]
type 435 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 436 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 437 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 438 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 439 function   fn(Buffer[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 440 param      T   [ tparams: 1, inference: 0 ]
type 441 reference  T*   [ tparams: 1, inference: 0 ]
type 442 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 443 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 444 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 445 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 446 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 447 param      T   [ tparams: 1, inference: 0 ]
type 448 reference  T*   [ tparams: 1, inference: 0 ]
type 449 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 450 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 451 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 452 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 453 function   fn(Buffer[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 454 param      T   [ tparams: 1, inference: 0 ]
type 455 reference  T*   [ tparams: 1, inference: 0 ]
type 456 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 457 function   fn(Buffer[T], Buffer[T]) -> Buffer[T]   [ tparams: 3, inference: 0 ]
type 458 param      T   [ tparams: 1, inference: 0 ]
type 459 reference  T*   [ tparams: 1, inference: 0 ]
type 460 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 461 reference  Buffer[T]*   [ tparams: 1, inference: 0 ]
type 462 function   fn(Buffer[T]*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 463 param      T   [ tparams: 1, inference: 0 ]
type 464 function   fn(T, T) -> Ordering   [ tparams: 2, inference: 0 ]
type 465 reference  T*   [ tparams: 1, inference: 0 ]
type 466 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 467 function   fn(Buffer[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 468 function   fn(Buffer[u8]) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 469 function   fn(Buffer[char]) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 470 function   fn(Buffer[u8], Buffer[u8]) -> bool   [ tparams: 0, inference: 0 ]
type 471 function   fn(Buffer[char], Buffer[char]) -> bool   [ tparams: 0, inference: 0 ]
type 472 reference  i64*   [ tparams: 0, inference: 0 ]
type 473 struct     Buffer[i64]   [ tparams: 0, inference: 0 ]
type 474 function   fn(Buffer[i64], Buffer[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 475 param      T   [ tparams: 1, inference: 0 ]
type 476 reference  T*   [ tparams: 1, inference: 0 ]
type 477 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 478 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 479 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 480 param      T   [ tparams: 1, inference: 0 ]
type 481 reference  T*   [ tparams: 1, inference: 0 ]
type 482 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 483 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 484 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 485 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 486 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 487 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 488 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 489 function   fn(BufferIterator[T]*) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 490 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 491 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 492 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 493 function   fn(BufferIterator[T]*, u64) -> Opt[Item]   [ tparams: 2, inference: 0 ]
type 494 param      T   [ tparams: 1, inference: 0 ]
type 495 reference  T*   [ tparams: 1, inference: 0 ]
type 496 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 497 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 498 hole       '0   [ tparams: 0, inference: 1 ]
type 499 reference  '0*   [ tparams: 0, inference: 1 ]
type 500 struct     Buffer['0]   [ tparams: 0, inference: 1 ]
type 501 struct     BufferIterator['0]   [ tparams: 0, inference: 1 ]
type 502 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 503 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 504 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 505 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 506 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 507 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 508 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 509 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 510 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 511 function   fn(Buffer[T]) -> I   [ tparams: 2, inference: 0 ]
type 512 param      T   [ tparams: 1, inference: 0 ]
type 513 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 514 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 515 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 516 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 517 param      T   [ tparams: 1, inference: 0 ]
type 518 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 519 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 520 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 521 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 522 param      T   [ tparams: 1, inference: 0 ]
type 523 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 524 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 525 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 526 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 527 param      T   [ tparams: 1, inference: 0 ]
type 528 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 529 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 530 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 531 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 532 function   fn(Opt[T], Opt[T]) -> bool   [ tparams: 2, inference: 0 ]
type 533 param      T   [ tparams: 1, inference: 0 ]
type 534 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 535 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 536 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 537 function   fn() -> Opt[T].None   [ tparams: 0, inference: 0 ]
type 538 param      T   [ tparams: 1, inference: 0 ]
type 539 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 540 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 541 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 542 function   fn(T) -> Opt[T].Some(T)   [ tparams: 2, inference: 0 ]
type 543 param      T   [ tparams: 1, inference: 0 ]
type 544 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 545 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 546 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 547 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 548 function   fn(Opt[T], Opt[T]) -> bool   [ tparams: 2, inference: 0 ]
type 549 param      T   [ tparams: 1, inference: 0 ]
type 550 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 551 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 552 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 553 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 554 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 555 function   fn(Opt[T]) -> Inner   [ tparams: 2, inference: 0 ]
type 556 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 557 function   fn(Inner) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 558 param      T   [ tparams: 1, inference: 0 ]
type 559 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 560 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 561 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 562 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 563 function   fn(Opt[T]) -> string   [ tparams: 1, inference: 0 ]
type 564 param      T   [ tparams: 1, inference: 0 ]
type 565 reference  T*   [ tparams: 1, inference: 0 ]
type 566 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 567 struct     List[T]   [ tparams: 1, inference: 0 ]
type 568 function   fn() -> List[T]   [ tparams: 1, inference: 0 ]
type 569 param      T   [ tparams: 1, inference: 0 ]
type 570 reference  T*   [ tparams: 1, inference: 0 ]
type 571 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 572 struct     List[T]   [ tparams: 1, inference: 0 ]
type 573 function   fn(u64, T) -> List[T]   [ tparams: 2, inference: 0 ]
type 574 param      T   [ tparams: 1, inference: 0 ]
type 575 reference  T*   [ tparams: 1, inference: 0 ]
type 576 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 577 struct     List[T]   [ tparams: 1, inference: 0 ]
type 578 function   fn(u64) -> List[T]   [ tparams: 1, inference: 0 ]
type 579 param      T   [ tparams: 1, inference: 0 ]
type 580 reference  T*   [ tparams: 1, inference: 0 ]
type 581 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 582 struct     List[T]   [ tparams: 1, inference: 0 ]
type 583 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 584 function   fn(List[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 585 param      T   [ tparams: 1, inference: 0 ]
type 586 reference  T*   [ tparams: 1, inference: 0 ]
type 587 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 588 struct     List[T]   [ tparams: 1, inference: 0 ]
type 589 function   fn(T) -> List[T]   [ tparams: 2, inference: 0 ]
type 590 param      T   [ tparams: 1, inference: 0 ]
type 591 reference  T*   [ tparams: 1, inference: 0 ]
type 592 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 593 struct     List[T]   [ tparams: 1, inference: 0 ]
type 594 function   fn(Buffer[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 595 param      T   [ tparams: 1, inference: 0 ]
type 596 reference  T*   [ tparams: 1, inference: 0 ]
type 597 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 598 struct     List[T]   [ tparams: 1, inference: 0 ]
type 599 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 600 param      T   [ tparams: 1, inference: 0 ]
type 601 reference  T*   [ tparams: 1, inference: 0 ]
type 602 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 603 struct     List[T]   [ tparams: 1, inference: 0 ]
type 604 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 605 param      T   [ tparams: 1, inference: 0 ]
type 606 reference  T*   [ tparams: 1, inference: 0 ]
type 607 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 608 struct     List[T]   [ tparams: 1, inference: 0 ]
type 609 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 610 param      T   [ tparams: 1, inference: 0 ]
type 611 reference  T*   [ tparams: 1, inference: 0 ]
type 612 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 613 struct     List[T]   [ tparams: 1, inference: 0 ]
type 614 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 615 param      T   [ tparams: 1, inference: 0 ]
type 616 reference  T*   [ tparams: 1, inference: 0 ]
type 617 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 618 struct     List[T]   [ tparams: 1, inference: 0 ]
type 619 function   fn(List[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 620 param      T   [ tparams: 1, inference: 0 ]
type 621 reference  T*   [ tparams: 1, inference: 0 ]
type 622 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 623 struct     List[T]   [ tparams: 1, inference: 0 ]
type 624 function   fn(List[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 625 param      T   [ tparams: 1, inference: 0 ]
type 626 reference  T*   [ tparams: 1, inference: 0 ]
type 627 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 628 struct     List[T]   [ tparams: 1, inference: 0 ]
type 629 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 630 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 631 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 632 function   fn(List[T], u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 633 param      T   [ tparams: 1, inference: 0 ]
type 634 reference  T*   [ tparams: 1, inference: 0 ]
type 635 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 636 struct     List[T]   [ tparams: 1, inference: 0 ]
type 637 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 638 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 639 param      T   [ tparams: 1, inference: 0 ]
type 640 reference  T*   [ tparams: 1, inference: 0 ]
type 641 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 642 struct     List[T]   [ tparams: 1, inference: 0 ]
type 643 function   fn(List[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 644 param      T   [ tparams: 1, inference: 0 ]
type 645 reference  T*   [ tparams: 1, inference: 0 ]
type 646 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 647 struct     List[T]   [ tparams: 1, inference: 0 ]
type 648 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 649 function   fn(List[T]*, T) -> unit   [ tparams: 2, inference: 0 ]
type 650 param      T   [ tparams: 1, inference: 0 ]
type 651 reference  T*   [ tparams: 1, inference: 0 ]
type 652 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 653 struct     List[T]   [ tparams: 1, inference: 0 ]
type 654 function   fn(List[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 655 param      T   [ tparams: 1, inference: 0 ]
type 656 reference  T*   [ tparams: 1, inference: 0 ]
type 657 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 658 struct     List[T]   [ tparams: 1, inference: 0 ]
type 659 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 660 param      T   [ tparams: 1, inference: 0 ]
type 661 reference  T*   [ tparams: 1, inference: 0 ]
type 662 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 663 struct     List[T]   [ tparams: 1, inference: 0 ]
type 664 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 665 param      T   [ tparams: 1, inference: 0 ]
type 666 reference  T*   [ tparams: 1, inference: 0 ]
type 667 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 668 struct     List[T]   [ tparams: 1, inference: 0 ]
type 669 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 670 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 671 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 672 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 673 param      T   [ tparams: 1, inference: 0 ]
type 674 reference  T*   [ tparams: 1, inference: 0 ]
type 675 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 676 struct     List[T]   [ tparams: 1, inference: 0 ]
type 677 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 678 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 679 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 680 function   fn(List[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 681 param      T   [ tparams: 1, inference: 0 ]
type 682 reference  T*   [ tparams: 1, inference: 0 ]
type 683 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 684 struct     List[T]   [ tparams: 1, inference: 0 ]
type 685 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 686 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 687 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 688 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 689 param      T   [ tparams: 1, inference: 0 ]
type 690 reference  T*   [ tparams: 1, inference: 0 ]
type 691 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 692 struct     List[T]   [ tparams: 1, inference: 0 ]
type 693 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 694 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 695 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 696 function   fn(List[T]) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 697 param      T   [ tparams: 1, inference: 0 ]
type 698 reference  T*   [ tparams: 1, inference: 0 ]
type 699 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 700 struct     List[T]   [ tparams: 1, inference: 0 ]
type 701 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 702 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 703 param      T   [ tparams: 1, inference: 0 ]
type 704 reference  T*   [ tparams: 1, inference: 0 ]
type 705 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 706 struct     List[T]   [ tparams: 1, inference: 0 ]
type 707 function   fn(List[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 708 param      T   [ tparams: 1, inference: 0 ]
type 709 reference  T*   [ tparams: 1, inference: 0 ]
type 710 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 711 struct     List[T]   [ tparams: 1, inference: 0 ]
type 712 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 713 function   fn(List[T]*, List[T]) -> unit   [ tparams: 2, inference: 0 ]
type 714 param      T   [ tparams: 1, inference: 0 ]
type 715 reference  T*   [ tparams: 1, inference: 0 ]
type 716 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 717 struct     List[T]   [ tparams: 1, inference: 0 ]
type 718 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 719 function   fn(List[T]*, Buffer[T]) -> unit   [ tparams: 2, inference: 0 ]
type 720 param      T   [ tparams: 1, inference: 0 ]
type 721 reference  T*   [ tparams: 1, inference: 0 ]
type 722 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 723 struct     List[T]   [ tparams: 1, inference: 0 ]
type 724 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 725 function   fn(List[T]*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 726 param      T   [ tparams: 1, inference: 0 ]
type 727 function   fn(T, T) -> Ordering   [ tparams: 2, inference: 0 ]
type 728 reference  T*   [ tparams: 1, inference: 0 ]
type 729 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 730 struct     List[T]   [ tparams: 1, inference: 0 ]
type 731 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 732 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 733 param      T   [ tparams: 1, inference: 0 ]
type 734 function   fn(T, T) -> Ordering   [ tparams: 2, inference: 0 ]
type 735 reference  T*   [ tparams: 1, inference: 0 ]
type 736 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 737 struct     List[T]   [ tparams: 1, inference: 0 ]
type 738 function   fn(List[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 739 param      T   [ tparams: 1, inference: 0 ]
type 740 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 741 reference  T*   [ tparams: 1, inference: 0 ]
type 742 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 743 struct     List[T]   [ tparams: 1, inference: 0 ]
type 744 function   fn(List[T], string) -> string   [ tparams: 1, inference: 0 ]
type 745 param      T   [ tparams: 1, inference: 0 ]
type 746 param      U   [ tparams: 1, inference: 0 ]
type 747 reference  T*   [ tparams: 1, inference: 0 ]
type 748 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 749 struct     List[T]   [ tparams: 1, inference: 0 ]
type 750 function   fn(T) -> U   [ tparams: 2, inference: 0 ]
type 751 ftp        some_fn_779: some fn(T) -> U   [ tparams: 3, inference: 0 ]
type 752 reference  U*   [ tparams: 1, inference: 0 ]
type 753 struct     Buffer[U]   [ tparams: 1, inference: 0 ]
type 754 struct     List[U]   [ tparams: 1, inference: 0 ]
type 755 function   fn(List[T], some_fn_779: some fn(T) -> U) -> List[U]   [ tparams: 5, inference: 0 ]
type 756 param      T   [ tparams: 1, inference: 0 ]
type 757 param      U   [ tparams: 1, inference: 0 ]
type 758 reference  T*   [ tparams: 1, inference: 0 ]
type 759 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 760 struct     List[T]   [ tparams: 1, inference: 0 ]
type 761 reference  U*   [ tparams: 1, inference: 0 ]
type 762 struct     Buffer[U]   [ tparams: 1, inference: 0 ]
type 763 struct     List[U]   [ tparams: 1, inference: 0 ]
type 764 function   fn(T) -> List[U]   [ tparams: 2, inference: 0 ]
type 765 ftp        some_fn_790: some fn(T) -> List[U]   [ tparams: 3, inference: 0 ]
type 766 function   fn(List[T], some_fn_790: some fn(T) -> List[U]) -> List[U]   [ tparams: 5, inference: 0 ]
type 767 param      T   [ tparams: 1, inference: 0 ]
type 768 reference  T*   [ tparams: 1, inference: 0 ]
type 769 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 770 struct     List[T]   [ tparams: 1, inference: 0 ]
type 771 function   fn(T) -> bool   [ tparams: 1, inference: 0 ]
type 772 ftp        some_fn_800: some fn(T) -> bool   [ tparams: 2, inference: 0 ]
type 773 function   fn(List[T], some_fn_800: some fn(T) -> bool) -> List[T]   [ tparams: 4, inference: 0 ]
type 774 struct     List[char]   [ tparams: 0, inference: 0 ]
type 775 reference  List[char]*   [ tparams: 0, inference: 0 ]
type 776 function   fn(List[char]*, char) -> unit   [ tparams: 0, inference: 0 ]
type 777 function   fn(List[char]*, u8) -> unit   [ tparams: 0, inference: 0 ]
type 778 function   fn(List[char]*, string) -> unit   [ tparams: 0, inference: 0 ]
type 779 function   fn(List[char]*, Buffer[u8]) -> unit   [ tparams: 0, inference: 0 ]
type 780 struct     List[u8]   [ tparams: 0, inference: 0 ]
type 781 reference  List[u8]*   [ tparams: 0, inference: 0 ]
type 782 function   fn(List[u8]*, char) -> unit   [ tparams: 0, inference: 0 ]
type 783 function   fn(List[u8]*, u8) -> unit   [ tparams: 0, inference: 0 ]
type 784 function   fn(List[u8]*, string) -> unit   [ tparams: 0, inference: 0 ]
type 785 function   fn(List[u8]*, Buffer[u8]) -> unit   [ tparams: 0, inference: 0 ]
type 786 function   fn(List[u8], List[u8]) -> bool   [ tparams: 0, inference: 0 ]
type 787 struct     List[i64]   [ tparams: 0, inference: 0 ]
type 788 function   fn(List[i64], List[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 789 param      T   [ tparams: 1, inference: 0 ]
type 790 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 791 reference  T*   [ tparams: 1, inference: 0 ]
type 792 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 793 struct     List[T]   [ tparams: 1, inference: 0 ]
type 794 function   fn(List[T], List[T]) -> bool   [ tparams: 2, inference: 0 ]
type 795 param      T   [ tparams: 1, inference: 0 ]
type 796 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 797 reference  T*   [ tparams: 1, inference: 0 ]
type 798 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 799 struct     List[T]   [ tparams: 1, inference: 0 ]
type 800 function   fn(List[T]) -> string   [ tparams: 1, inference: 0 ]
type 801 param      T   [ tparams: 1, inference: 0 ]
type 802 reference  T*   [ tparams: 1, inference: 0 ]
type 803 struct     Buffer[T]   [ tparams: 1, inference: 0 ]
type 804 struct     List[T]   [ tparams: 1, inference: 0 ]
type 805 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 806 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 807 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 808 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 809 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 810 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 811 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 812 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 813 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 814 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 815 function   fn(List[T]) -> I   [ tparams: 2, inference: 0 ]
type 816 function   fn(string, u64) -> char   [ tparams: 0, inference: 0 ]
type 817 function   fn(string) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 818 function   fn(string) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 819 function   fn(string) -> string   [ tparams: 0, inference: 0 ]
type 820 function   fn(string) -> List[char]   [ tparams: 0, inference: 0 ]
type 821 function   fn(List[char]) -> string   [ tparams: 0, inference: 0 ]
type 822 function   fn(Buffer[char]) -> string   [ tparams: 0, inference: 0 ]
type 823 function   fn(Buffer[u8]) -> string   [ tparams: 0, inference: 0 ]
type 824 function   fn(string) -> u64   [ tparams: 0, inference: 0 ]
type 825 function   fn(string) -> bool   [ tparams: 0, inference: 0 ]
type 826 variant    Opt[char].None   [ tparams: 0, inference: 0 ]
type 827 variant    Opt[char].Some(char)   [ tparams: 0, inference: 0 ]
type 828 enum       Opt[char]   [ tparams: 0, inference: 0 ]
type 829 function   fn(string) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 830 function   fn(string, char) -> i64   [ tparams: 0, inference: 0 ]
type 831 function   fn(string, string) -> string   [ tparams: 0, inference: 0 ]
type 832 function   fn(string, char) -> string   [ tparams: 0, inference: 0 ]
type 833 struct     List[string]   [ tparams: 0, inference: 0 ]
type 834 function   fn(string, char) -> List[string]   [ tparams: 0, inference: 0 ]
type 835 function   fn(string, string) -> Opt[u64]   [ tparams: 0, inference: 0 ]
type 836 function   fn(string, u64, u64) -> string   [ tparams: 0, inference: 0 ]
type 837 function   fn(string, u64) -> string   [ tparams: 0, inference: 0 ]
type 838 function   fn(string, string) -> bool   [ tparams: 0, inference: 0 ]
type 839 function   fn(string) -> Pointer   [ tparams: 0, inference: 0 ]
type 840 function   fn(Pointer) -> string   [ tparams: 0, inference: 0 ]
type 841 function   fn(string) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 842 function   fn(string, string) -> bool   [ tparams: 0, inference: 0 ]
type 843 struct     BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 844 reference  BufferIterator[char]*   [ tparams: 0, inference: 0 ]
type 845 function   fn(BufferIterator[char]*) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 846 function   fn(BufferIterator[char]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 847 function   fn(BufferIterator[char]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 848 function   fn(BufferIterator[char]*, u64) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 849 function   fn(string) -> BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 850 function   fn(string) -> I   [ tparams: 1, inference: 0 ]
type 851 function   fn(string*) -> BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 852 function   fn(string*) -> I   [ tparams: 1, inference: 0 ]
type 853 param      T   [ tparams: 1, inference: 0 ]
type 854 function   fn(u64) -> StringBuilder   [ tparams: 0, inference: 0 ]
type 855 function   fn() -> StringBuilder   [ tparams: 0, inference: 0 ]
type 856 function   fn(StringBuilder, char) -> unit   [ tparams: 0, inference: 0 ]
type 857 function   fn(StringBuilder, string) -> unit   [ tparams: 0, inference: 0 ]
type 858 function   fn(StringBuilder, u8) -> unit   [ tparams: 0, inference: 0 ]
type 859 function   fn(StringBuilder) -> u64   [ tparams: 0, inference: 0 ]
type 860 function   fn(StringBuilder) -> string   [ tparams: 0, inference: 0 ]
type 861 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 862 function   fn(i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 863 function   fn(u8) -> u8   [ tparams: 0, inference: 0 ]
type 864 function   fn(u8, u8) -> u8   [ tparams: 0, inference: 0 ]
type 865 function   fn(u16) -> u16   [ tparams: 0, inference: 0 ]
type 866 function   fn(u16, u16) -> u16   [ tparams: 0, inference: 0 ]
type 867 function   fn(u32) -> u32   [ tparams: 0, inference: 0 ]
type 868 function   fn(u32, u32) -> u32   [ tparams: 0, inference: 0 ]
type 869 function   fn(u64) -> u64   [ tparams: 0, inference: 0 ]
type 870 function   fn(u64, u64) -> u64   [ tparams: 0, inference: 0 ]
type 871 function   fn(i8) -> i8   [ tparams: 0, inference: 0 ]
type 872 function   fn(i8, i8) -> i8   [ tparams: 0, inference: 0 ]
type 873 function   fn(i16) -> i16   [ tparams: 0, inference: 0 ]
type 874 function   fn(i16, i16) -> i16   [ tparams: 0, inference: 0 ]
type 875 function   fn(i32) -> i32   [ tparams: 0, inference: 0 ]
type 876 function   fn(i32, i32) -> i32   [ tparams: 0, inference: 0 ]
type 877 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 878 function   fn(i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 879 function   fn(Arena) -> u64   [ tparams: 0, inference: 0 ]
type 880 function   fn(u64, u64) -> u64   [ tparams: 0, inference: 0 ]
type 881 function   fn(string, u64) -> Arena   [ tparams: 0, inference: 0 ]
type 882 function   fn(Arena*, u64, u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 883 param      T   [ tparams: 1, inference: 0 ]
type 884 reference  T*   [ tparams: 1, inference: 0 ]
type 885 function   fn(Arena*, T) -> T*   [ tparams: 2, inference: 0 ]
type 886 function   fn(Arena*) -> unit   [ tparams: 0, inference: 0 ]
type 887 function   fn() -> Allocator   [ tparams: 0, inference: 0 ]
type 888 function   fn(Allocator) -> Arena*   [ tparams: 0, inference: 0 ]
type 889 function   fn(i64, i64) -> IntRange   [ tparams: 0, inference: 0 ]
type 890 function   fn(i64) -> IntRange   [ tparams: 0, inference: 0 ]
type 891 function   fn(IntRange) -> IntRangeIterator   [ tparams: 0, inference: 0 ]
type 892 function   fn(IntRangeIterator) -> i64   [ tparams: 0, inference: 0 ]
type 893 reference  IntRangeIterator*   [ tparams: 0, inference: 0 ]
type 894 function   fn(IntRangeIterator*, u64) -> bool   [ tparams: 0, inference: 0 ]
type 895 function   fn(IntRangeIterator*) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 896 function   fn(IntRangeIterator*) -> Opt[Item]   [ tparams: 1, inference: 0 ]
type 897 function   fn(IntRangeIterator) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 898 function   fn(IntRangeIterator*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 899 function   fn(IntRangeIterator*, u64) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 900 function   fn(IntRangeIterator*, u64) -> Opt[Item]   [ tparams: 1, inference: 0 ]
type 901 function   fn(IntRange) -> IntRangeIterator   [ tparams: 0, inference: 0 ]
type 902 function   fn(IntRange) -> I   [ tparams: 1, inference: 0 ]
type 903 param      Self   [ tparams: 1, inference: 0 ]
type 904 function   fn(Self) -> i32   [ tparams: 1, inference: 0 ]
type 905 function   fn(Point) -> i32   [ tparams: 0, inference: 0 ]
type 906 param      Self   [ tparams: 1, inference: 0 ]
type 907 function   fn() -> u8   [ tparams: 0, inference: 0 ]
type 908 function   fn(Self) -> Buffer[u8]   [ tparams: 1, inference: 0 ]
type 909 function   fn(Buffer[u8]) -> Self   [ tparams: 1, inference: 0 ]
type 910 param      Self   [ tparams: 1, inference: 0 ]
type 911 function   fn(Self) -> i32   [ tparams: 1, inference: 0 ]
type 912 param      T   [ tparams: 1, inference: 0 ]
type 913 function   fn(T) -> i32   [ tparams: 1, inference: 0 ]
type 914 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 915 function   fn(T, T) -> i32   [ tparams: 2, inference: 0 ]
type 916 function   fn(i64) -> i32   [ tparams: 0, inference: 0 ]
type 917 param      Self   [ tparams: 1, inference: 0 ]
type 918 function   fn(Self) -> i32   [ tparams: 1, inference: 0 ]
type 919 param      T   [ tparams: 1, inference: 0 ]
type 920 function   fn(T) -> i32   [ tparams: 1, inference: 0 ]
type 921 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 922 function   fn(T, T) -> i32   [ tparams: 2, inference: 0 ]
type 923 param      Self   [ tparams: 1, inference: 0 ]
type 924 function   fn(Self) -> i32   [ tparams: 1, inference: 0 ]
type 925 param      Self   [ tparams: 1, inference: 0 ]
type 926 param      Rhs   [ tparams: 1, inference: 0 ]
type 927 param      Output   [ tparams: 1, inference: 0 ]
type 928 function   fn(Self, Rhs) -> Output   [ tparams: 3, inference: 0 ]
type 929 param      Self   [ tparams: 1, inference: 0 ]
type 930 function   fn(Self, i32) -> Output   [ tparams: 2, inference: 0 ]
type 931 function   fn(i32, i32) -> i32   [ tparams: 0, inference: 0 ]
type 932 function   fn(i32, i32) -> Output   [ tparams: 1, inference: 0 ]
type 933 param      Self   [ tparams: 1, inference: 0 ]
type 934 function   fn(Self, i64) -> Output   [ tparams: 2, inference: 0 ]
type 935 function   fn(i32, i64) -> i64   [ tparams: 0, inference: 0 ]
type 936 function   fn(i32, i64) -> Output   [ tparams: 1, inference: 0 ]
type 937 function   fn(i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 938 function   fn(i64, i64) -> Output   [ tparams: 1, inference: 0 ]
type 939 param      T   [ tparams: 1, inference: 0 ]
type 940 param      Self   [ tparams: 1, inference: 0 ]
type 941 function   fn(Self, T) -> Output   [ tparams: 3, inference: 0 ]
type 942 function   fn(T, T) -> T   [ tparams: 3, inference: 0 ]
type 943 struct     GenericPoint[T]   [ tparams: 2, inference: 0 ]
type 944 param      Self   [ tparams: 1, inference: 0 ]
type 945 function   fn(Self, GenericPoint[T]) -> Output   [ tparams: 4, inference: 0 ]
type 946 function   fn(GenericPoint[T], GenericPoint[T]) -> GenericPoint[T]   [ tparams: 6, inference: 0 ]
type 947 function   fn(GenericPoint[T], GenericPoint[T]) -> Output   [ tparams: 5, inference: 0 ]
type 948 param      T   [ tparams: 1, inference: 0 ]
type 949 param      Self   [ tparams: 1, inference: 0 ]
type 950 function   fn(Self, T) -> Output   [ tparams: 3, inference: 0 ]
type 951 function   fn(T, T) -> T   [ tparams: 3, inference: 0 ]
type 952 struct     GenericPoint[T]   [ tparams: 2, inference: 0 ]
type 953 param      Self   [ tparams: 1, inference: 0 ]
type 954 function   fn(Self, GenericPoint[T]) -> Output   [ tparams: 4, inference: 0 ]
type 955 function   fn(GenericPoint[T], GenericPoint[T]) -> GenericPoint[T]   [ tparams: 6, inference: 0 ]
type 956 function   fn(GenericPoint[T], GenericPoint[T]) -> Output   [ tparams: 5, inference: 0 ]
type 957 param      Self   [ tparams: 1, inference: 0 ]
type 958 param      F   [ tparams: 1, inference: 0 ]
type 959 function   fn(F) -> Self   [ tparams: 2, inference: 0 ]
type 960 param      Self   [ tparams: 1, inference: 0 ]
type 961 param      To   [ tparams: 1, inference: 0 ]
type 962 function   fn(Self) -> To   [ tparams: 2, inference: 0 ]
type 963 param      T   [ tparams: 1, inference: 0 ]
type 964 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 965 param      Self   [ tparams: 1, inference: 0 ]
type 966 function   fn(Self) -> string   [ tparams: 1, inference: 0 ]
type 967 param      U   [ tparams: 1, inference: 0 ]
type 968 param      T   [ tparams: 1, inference: 0 ]
type 969 param      Self   [ tparams: 1, inference: 0 ]
type 970 function   fn(Self) -> U   [ tparams: 2, inference: 0 ]
type 971 function   fn(T) -> U   [ tparams: 2, inference: 0 ]
type 972 param      Self   [ tparams: 1, inference: 0 ]
type 973 function   fn(T) -> Self   [ tparams: 2, inference: 0 ]
type 974 function   fn(T) -> U   [ tparams: 2, inference: 0 ]
type 975 param      Self   [ tparams: 1, inference: 0 ]
type 976 function   fn(Self) -> char   [ tparams: 1, inference: 0 ]
type 977 function   fn(u8) -> char   [ tparams: 0, inference: 0 ]
type 978 param      Self   [ tparams: 1, inference: 0 ]
type 979 function   fn(Self) -> unit   [ tparams: 1, inference: 0 ]
type 980 function   fn(string) -> unit   [ tparams: 0, inference: 0 ]
type 981 param      Self   [ tparams: 1, inference: 0 ]
type 982 function   fn(Self) -> MyString   [ tparams: 1, inference: 0 ]
type 983 function   fn(Foo) -> MyString   [ tparams: 0, inference: 0 ]
type 984 param      T   [ tparams: 1, inference: 0 ]
type 985 function   fn(T) -> MyString   [ tparams: 1, inference: 0 ]
type 986 function   fn(T) -> MyString   [ tparams: 1, inference: 0 ]
type 987 function   fn(i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 988 param      T   [ tparams: 1, inference: 0 ]
type 989 struct     MyBox[T]   [ tparams: 1, inference: 0 ]
type 990 function   fn(T, T) -> MyBox[T]   [ tparams: 3, inference: 0 ]
type 991 param      T   [ tparams: 1, inference: 0 ]
type 992 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 993 function   fn(T, string, T) -> unit   [ tparams: 2, inference: 0 ]
type 994 param      T   [ tparams: 1, inference: 0 ]
type 995 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 996 function   fn(T, string, T) -> unit   [ tparams: 2, inference: 0 ]
type 997 param      T   [ tparams: 1, inference: 0 ]
type 998 function   fn(T, T) -> bool   [ tparams: 2, inference: 0 ]
type 999 function   fn(T, string, T) -> unit   [ tparams: 2, inference: 0 ]
type 1000 reference  List[string]*   [ tparams: 0, inference: 0 ]
type 1001 function   fn(List[string]*, i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 1002 function   fn(u8, u16, i64, i64) -> i64   [ tparams: 0, inference: 0 ]
type 1003 function   fn() -> i64   [ tparams: 0, inference: 0 ]
type 1004 function   fn() -> bool   [ tparams: 0, inference: 0 ]
type 1005 param      T   [ tparams: 1, inference: 0 ]
type 1006 param      E   [ tparams: 1, inference: 0 ]
type 1007 variant    MyResult[T, E].Ok(T)   [ tparams: 1, inference: 0 ]
type 1008 variant    MyResult[T, E].Err(E)   [ tparams: 1, inference: 0 ]
type 1009 enum       MyResult[T, E]   [ tparams: 2, inference: 0 ]
type 1010 function   fn(MyResult[T, E]) -> T   [ tparams: 3, inference: 0 ]
type 1011 param      T   [ tparams: 1, inference: 0 ]
type 1012 function   fn(T) -> string   [ tparams: 1, inference: 0 ]
type 1013 param      E   [ tparams: 1, inference: 0 ]
type 1014 function   fn(E) -> string   [ tparams: 1, inference: 0 ]
type 1015 variant    MyResult[T, E].Ok(T)   [ tparams: 1, inference: 0 ]
type 1016 variant    MyResult[T, E].Err(E)   [ tparams: 1, inference: 0 ]
type 1017 enum       MyResult[T, E]   [ tparams: 2, inference: 0 ]
type 1018 function   fn(MyResult[T, E]) -> string   [ tparams: 2, inference: 0 ]
type 1019 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 1020 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 1021 param      T   [ tparams: 1, inference: 0 ]
type 1022 param      U   [ tparams: 1, inference: 0 ]
type 1023 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1024 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1025 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1026 variant    Opt[U].None   [ tparams: 0, inference: 0 ]
type 1027 variant    Opt[U].Some(U)   [ tparams: 1, inference: 0 ]
type 1028 enum       Opt[U]   [ tparams: 1, inference: 0 ]
type 1029 struct     Pair[T, U]   [ tparams: 2, inference: 0 ]
type 1030 function   fn(Pair[T, U]) -> Opt[T]   [ tparams: 3, inference: 0 ]
type 1031 param      T   [ tparams: 1, inference: 0 ]
type 1032 struct     Box[T]   [ tparams: 1, inference: 0 ]
type 1033 struct     Box[Box[T]]   [ tparams: 1, inference: 0 ]
type 1034 struct     Box[Box[Box[T]]]   [ tparams: 1, inference: 0 ]
type 1035 function   fn(Box[Box[Box[T]]]) -> T   [ tparams: 2, inference: 0 ]
type 1036 param      T   [ tparams: 1, inference: 0 ]
type 1037 function   fn(T, T) -> T   [ tparams: 3, inference: 0 ]
type 1038 param      T   [ tparams: 1, inference: 0 ]
type 1039 struct     {one: T, two: T}   [ tparams: 2, inference: 0 ]
type 1040 function   fn(T, T, {one: T, two: T}) -> T   [ tparams: 5, inference: 0 ]
type 1041 param      T   [ tparams: 1, inference: 0 ]
type 1042 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1043 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1044 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1045 function   fn(Opt[T], T) -> T   [ tparams: 3, inference: 0 ]
type 1046 param      U   [ tparams: 1, inference: 0 ]
type 1047 variant    Opt[U].None   [ tparams: 0, inference: 0 ]
type 1048 variant    Opt[U].Some(U)   [ tparams: 1, inference: 0 ]
type 1049 enum       Opt[U]   [ tparams: 1, inference: 0 ]
type 1050 function   fn(U) -> Opt[U].Some(U)   [ tparams: 2, inference: 0 ]
type 1051 param      UU   [ tparams: 1, inference: 0 ]
type 1052 variant    Opt[UU].None   [ tparams: 0, inference: 0 ]
type 1053 variant    Opt[UU].Some(UU)   [ tparams: 1, inference: 0 ]
type 1054 enum       Opt[UU]   [ tparams: 1, inference: 0 ]
type 1055 function   fn(Opt[UU]) -> UU   [ tparams: 2, inference: 0 ]
type 1056 param      T   [ tparams: 1, inference: 0 ]
type 1057 function   fn(T) -> T   [ tparams: 2, inference: 0 ]
type 1058 param      T   [ tparams: 1, inference: 0 ]
type 1059 function   fn(T) -> T   [ tparams: 2, inference: 0 ]
type 1060 param      T   [ tparams: 1, inference: 0 ]
type 1061 function   fn(T) -> T   [ tparams: 2, inference: 0 ]
type 1062 struct     {}   [ tparams: 0, inference: 0 ]
type 1063 reference  {}*   [ tparams: 0, inference: 0 ]
type 1064 function   fn((env){}*) -> unit   [ tparams: 0, inference: 0 ]
type 1065 reference  fn((env){}*) -> unit*   [ tparams: 0, inference: 0 ]
type 1066 struct     {fn_ptr: fn((env){}*) -> unit*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1067 lambdaobj  lambda_object(fn((env){}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1068 function   fn(lambda_object(fn((env){}*) -> unit)) -> unit   [ tparams: 0, inference: 0 ]
type 1069 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 1070 ftp        some_fn_1844: some fn(i64) -> i64   [ tparams: 1, inference: 0 ]
type 1071 function   fn(i64, some_fn_1844: some fn(i64) -> i64) -> i64   [ tparams: 1, inference: 0 ]
type 1072 ftp        some_fn_1850: some fn(i64) -> i64   [ tparams: 1, inference: 0 ]
type 1073 ftp        some_fn_1854: some fn(i64) -> i64   [ tparams: 1, inference: 0 ]
type 1074 function   fn(i64, some_fn_1850: some fn(i64) -> i64, some_fn_1854: some fn(i64) -> i64) -> i64   [ tparams: 2, inference: 0 ]
type 1075 param      T   [ tparams: 1, inference: 0 ]
type 1076 function   fn(T) -> T   [ tparams: 2, inference: 0 ]
type 1077 ftp        some_fn_1860: some fn(T) -> T   [ tparams: 3, inference: 0 ]
type 1078 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1079 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1080 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1081 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1082 ftp        some_fn_1865: some fn(T) -> Opt[T]   [ tparams: 3, inference: 0 ]
type 1083 function   fn(T, some_fn_1860: some fn(T) -> T, some_fn_1865: some fn(T) -> Opt[T]) -> Opt[T]   [ tparams: 8, inference: 0 ]
type 1084 lambdaobj  lambda_object(fn((env){}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1085 reference  lambda_object(fn((env){}*) -> unit)*   [ tparams: 0, inference: 0 ]
type 1086 struct     Buffer[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1087 struct     List[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1088 function   fn(List[lambda_object(fn((env){}*) -> unit)]) -> unit   [ tparams: 0, inference: 0 ]
type 1089 struct     {rank: i64, payload: string}   [ tparams: 0, inference: 0 ]
type 1090 function   fn({rank: i64, payload: string}) -> string   [ tparams: 0, inference: 0 ]
type 1091 function   fn({rank: i64, payload: string}, {rank: i64, payload: string}) -> Ordering   [ tparams: 0, inference: 0 ]
type 1092 function   fn({rank: i64, payload: string}, {rank: i64, payload: string}) -> bool   [ tparams: 0, inference: 0 ]
type 1093 function   fn(List[i64], List[i64]) -> unit   [ tparams: 0, inference: 0 ]
type 1094 reference  {rank: i64, payload: string}*   [ tparams: 0, inference: 0 ]
type 1095 struct     Buffer[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 1096 struct     List[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 1097 function   fn(List[{rank: i64, payload: string}], List[{rank: i64, payload: string}]) -> unit   [ tparams: 0, inference: 0 ]
type 1098 function   fn(bool) -> unit   [ tparams: 0, inference: 0 ]
type 1099 variant    Opt[TriState].None   [ tparams: 0, inference: 0 ]
type 1100 variant    Opt[TriState].Some(TriState)   [ tparams: 0, inference: 0 ]
type 1101 enum       Opt[TriState]   [ tparams: 0, inference: 0 ]
type 1102 function   fn(Opt[TriState]) -> unit   [ tparams: 0, inference: 0 ]
type 1103 function   fn(TriState) -> bool   [ tparams: 0, inference: 0 ]
type 1104 function   fn(Opt[bool]) -> unit   [ tparams: 0, inference: 0 ]
type 1105 struct     {a: bool, b: bool}   [ tparams: 0, inference: 0 ]
type 1106 function   fn({a: bool, b: bool}) -> bool   [ tparams: 0, inference: 0 ]
type 1107 function   fn() -> string   [ tparams: 0, inference: 0 ]
type 1108 function   fn(Baz) -> i64   [ tparams: 0, inference: 0 ]
type 1109 function   fn() -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1110 function   fn(Foo) -> i64   [ tparams: 0, inference: 0 ]
type 1111 function   fn(Foo) -> i64   [ tparams: 0, inference: 0 ]
type 1112 struct     {name: string, weight: i64}   [ tparams: 0, inference: 0 ]
type 1113 function   fn({name: string, weight: i64}) -> string   [ tparams: 0, inference: 0 ]
type 1114 function   fn(Foo) -> i64   [ tparams: 0, inference: 0 ]
type 1115 reference  Foo*   [ tparams: 0, inference: 0 ]
type 1116 function   fn(Foo*, i64) -> unit   [ tparams: 0, inference: 0 ]
type 1117 function   fn(i64) -> Foo   [ tparams: 0, inference: 0 ]
type 1118 struct     {a: i64}   [ tparams: 0, inference: 0 ]
type 1119 function   fn({a: i64}, {a: i64}) -> bool   [ tparams: 0, inference: 0 ]
type 1120 function   fn(Block) -> i64   [ tparams: 0, inference: 0 ]
type 1121 function   fn(PointNamed) -> i64   [ tparams: 0, inference: 0 ]
type 1122 function   fn({x: i64, y: i64}) -> i64   [ tparams: 0, inference: 0 ]
type 1123 variant    Result[i64, string].Ok(i64)   [ tparams: 0, inference: 0 ]
type 1124 variant    Result[i64, string].Err(string)   [ tparams: 0, inference: 0 ]
type 1125 enum       Result[i64, string]   [ tparams: 0, inference: 0 ]
type 1126 function   fn() -> Result[i64, string]   [ tparams: 0, inference: 0 ]
type 1127 variant    Result[bool, string].Ok(bool)   [ tparams: 0, inference: 0 ]
type 1128 variant    Result[bool, string].Err(string)   [ tparams: 0, inference: 0 ]
type 1129 enum       Result[bool, string]   [ tparams: 0, inference: 0 ]
type 1130 function   fn() -> Result[bool, string]   [ tparams: 0, inference: 0 ]
type 1131 function   fn(string) -> Foo   [ tparams: 0, inference: 0 ]
type 1132 function   fn(E) -> Foo   [ tparams: 1, inference: 0 ]
type 1133 function   fn(i64) -> Foo   [ tparams: 0, inference: 0 ]
type 1134 function   fn(T) -> Foo   [ tparams: 1, inference: 0 ]
type 1135 function   fn(Foo) -> bool   [ tparams: 0, inference: 0 ]
type 1136 function   fn(Foo) -> string   [ tparams: 0, inference: 0 ]
type 1137 function   fn(Foo) -> E   [ tparams: 1, inference: 0 ]
type 1138 function   fn(Foo) -> i64   [ tparams: 0, inference: 0 ]
type 1139 function   fn(Foo) -> T   [ tparams: 1, inference: 0 ]
type 1140 function   fn(bool) -> Result[bool, string]   [ tparams: 0, inference: 0 ]
type 1141 variant    Result[i32, string].Ok(i32)   [ tparams: 0, inference: 0 ]
type 1142 variant    Result[i32, string].Err(string)   [ tparams: 0, inference: 0 ]
type 1143 enum       Result[i32, string]   [ tparams: 0, inference: 0 ]
type 1144 function   fn() -> Result[i32, string]   [ tparams: 0, inference: 0 ]
type 1145 function   fn(bool, u32) -> u32   [ tparams: 0, inference: 0 ]
type 1146 function   fn(i64) -> UserId   [ tparams: 0, inference: 0 ]
type 1147 function   fn(UserId) -> i64   [ tparams: 0, inference: 0 ]
type 1148 param      Self   [ tparams: 1, inference: 0 ]
type 1149 function   fn(Self) -> {x: i64, y: i64}   [ tparams: 1, inference: 0 ]
type 1150 reference  Pointer*   [ tparams: 0, inference: 0 ]
type 1151 struct     Buffer[Pointer]   [ tparams: 0, inference: 0 ]
type 1152 function   fn(u64, Pointer) -> Buffer[Pointer]   [ tparams: 0, inference: 0 ]
type 1153 function   fn(u64) -> List[string]   [ tparams: 0, inference: 0 ]
type 1154 struct     BufferIterator[Pointer]   [ tparams: 0, inference: 0 ]
type 1155 function   fn(Buffer[Pointer]) -> BufferIterator[Pointer]   [ tparams: 0, inference: 0 ]
type 1156 reference  BufferIterator[Pointer]*   [ tparams: 0, inference: 0 ]
type 1157 variant    Opt[Pointer].None   [ tparams: 0, inference: 0 ]
type 1158 variant    Opt[Pointer].Some(Pointer)   [ tparams: 0, inference: 0 ]
type 1159 enum       Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 1160 function   fn(BufferIterator[Pointer]*) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 1161 function   fn(BufferIterator[Pointer]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 1162 function   fn(BufferIterator[Pointer]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1163 function   fn(BufferIterator[Pointer]*, u64) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 1164 hole       '1   [ tparams: 0, inference: 1 ]
type 1165 variant    Result['0, '1].Ok('0)   [ tparams: 0, inference: 1 ]
type 1166 variant    Result['0, '1].Err('1)   [ tparams: 0, inference: 1 ]
type 1167 enum       Result['0, '1]   [ tparams: 0, inference: 2 ]
type 1168 variant    Opt['0].None   [ tparams: 0, inference: 0 ]
type 1169 variant    Opt['0].Some('0)   [ tparams: 0, inference: 1 ]
type 1170 enum       Opt['0]   [ tparams: 0, inference: 1 ]
type 1171 function   fn(Opt[Pointer]) -> bool   [ tparams: 0, inference: 0 ]
type 1172 function   fn(Opt[Pointer]) -> Pointer   [ tparams: 0, inference: 0 ]
type 1173 function   fn(Pointer) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 1174 function   fn(Buffer[Pointer], u64) -> Pointer   [ tparams: 0, inference: 0 ]
type 1175 function   fn(List[string]*, string) -> unit   [ tparams: 0, inference: 0 ]
type 1176 struct     List['0]   [ tparams: 0, inference: 1 ]
type 1177 function   fn(List[string]) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 1178 function   fn(u64) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 1179 reference  Buffer[u8]*   [ tparams: 0, inference: 0 ]
type 1180 function   fn(Buffer[u8], u64) -> u8   [ tparams: 0, inference: 0 ]
type 1181 function   fn(Buffer[u8], u64, u8) -> unit   [ tparams: 0, inference: 0 ]
type 1182 reference  u64*   [ tparams: 0, inference: 0 ]
type 1183 function   fn(u64, Pointer) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1184 function   fn(u64) -> List[char]   [ tparams: 0, inference: 0 ]
type 1185 function   fn(List[char]*, char) -> unit   [ tparams: 0, inference: 0 ]
type 1186 function   fn(T, List[char]*) -> unit   [ tparams: 1, inference: 0 ]
type 1187 reference  List['0]*   [ tparams: 0, inference: 1 ]
type 1188 function   fn(List[char]) -> List[char]   [ tparams: 0, inference: 0 ]
type 1189 function   fn(List[char]*) -> unit   [ tparams: 0, inference: 0 ]
type 1190 reference  '1*   [ tparams: 0, inference: 1 ]
type 1191 struct     Buffer['1]   [ tparams: 0, inference: 1 ]
type 1192 struct     List['1]   [ tparams: 0, inference: 1 ]
type 1193 function   fn(List[char]) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1194 hole       '2   [ tparams: 0, inference: 1 ]
type 1195 reference  '2*   [ tparams: 0, inference: 1 ]
type 1196 struct     Buffer['2]   [ tparams: 0, inference: 1 ]
type 1197 struct     List['2]   [ tparams: 0, inference: 1 ]
type 1198 variant    Opt[Result[S, F].Err(F)].None   [ tparams: 0, inference: 0 ]
type 1199 variant    Opt[Result[S, F].Err(F)].Some(Result[S, F].Err(F))   [ tparams: 1, inference: 0 ]
type 1200 enum       Opt[Result[S, F].Err(F)]   [ tparams: 1, inference: 0 ]
type 1201 function   fn(Opt[Result[S, F].Err(F)]) -> bool   [ tparams: 1, inference: 0 ]
type 1202 function   fn(Opt[Result[S, F].Err(F)]) -> Result[S, F].Err(F)   [ tparams: 2, inference: 0 ]
type 1203 function   fn(Result[S, F].Err(F)) -> Opt[Result[S, F].Err(F)]   [ tparams: 2, inference: 0 ]
type 1204 variant    Opt[Result[S, F].Ok(S)].None   [ tparams: 0, inference: 0 ]
type 1205 variant    Opt[Result[S, F].Ok(S)].Some(Result[S, F].Ok(S))   [ tparams: 1, inference: 0 ]
type 1206 enum       Opt[Result[S, F].Ok(S)]   [ tparams: 1, inference: 0 ]
type 1207 function   fn(Opt[Result[S, F].Ok(S)]) -> bool   [ tparams: 1, inference: 0 ]
type 1208 function   fn(Opt[Result[S, F].Ok(S)]) -> Result[S, F].Ok(S)   [ tparams: 2, inference: 0 ]
type 1209 function   fn(Result[S, F].Ok(S)) -> Opt[Result[S, F].Ok(S)]   [ tparams: 2, inference: 0 ]
type 1210 function   fn(F) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 1211 function   fn(S) -> Result[S, F]   [ tparams: 3, inference: 0 ]
type 1212 function   fn(Result[S, F]) -> F   [ tparams: 3, inference: 0 ]
type 1213 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 1214 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1215 function   fn(Buffer[T], Buffer[T], u64) -> unit   [ tparams: 2, inference: 0 ]
type 1216 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1217 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1218 function   fn(Buffer[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 1219 function   fn() -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1220 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1221 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1222 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1223 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 1224 function   fn(Pointer, u64) -> T*   [ tparams: 1, inference: 0 ]
type 1225 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1226 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1227 function   fn(Buffer[T]) -> u64   [ tparams: 1, inference: 0 ]
type 1228 function   fn(Buffer[T]) -> Pointer   [ tparams: 1, inference: 0 ]
type 1229 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1230 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1231 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 1232 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 1233 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 1234 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 1235 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1236 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1237 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 1238 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 1239 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 1240 function   fn(Buffer[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 1241 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1242 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1243 function   fn(Buffer[T], Buffer[T], u64) -> unit   [ tparams: 2, inference: 0 ]
type 1244 reference  Buffer['0]*   [ tparams: 0, inference: 1 ]
type 1245 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1246 struct     List[T]   [ tparams: 1, inference: 0 ]
type 1247 function   fn(Buffer[T]) -> List[T]   [ tparams: 2, inference: 0 ]
type 1248 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 1249 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1250 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1251 function   fn(Buffer[u8]) -> Pointer   [ tparams: 0, inference: 0 ]
type 1252 function   fn(u64, Pointer) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 1253 function   fn(Buffer[char]) -> Pointer   [ tparams: 0, inference: 0 ]
type 1254 function   fn(Buffer[u8]) -> u64   [ tparams: 0, inference: 0 ]
type 1255 function   fn(Buffer[char]) -> u64   [ tparams: 0, inference: 0 ]
type 1256 function   fn(Buffer[i64]) -> Pointer   [ tparams: 0, inference: 0 ]
type 1257 function   fn(Buffer[i64]) -> u64   [ tparams: 0, inference: 0 ]
type 1258 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1259 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1260 function   fn(u64) -> Opt[u64]   [ tparams: 0, inference: 0 ]
type 1261 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1262 function   fn(Opt[T], Opt[T]) -> bool   [ tparams: 2, inference: 0 ]
type 1263 variant    None   [ tparams: 0, inference: 0 ]
type 1264 variant    Some('0)   [ tparams: 0, inference: 1 ]
type 1265 enum       enum None | Some('0)   [ tparams: 0, inference: 1 ]
type 1266 function   fn(u64) -> List[T]   [ tparams: 1, inference: 0 ]
type 1267 function   fn(u64, T) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1268 function   fn(u64) -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1269 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 1270 function   fn(Buffer[T], u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1271 reference  Buffer[T]*   [ tparams: 1, inference: 0 ]
type 1272 function   fn(u64, T) -> List[T]   [ tparams: 2, inference: 0 ]
type 1273 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1274 function   fn(Buffer[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1275 function   fn(Buffer[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 1276 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1277 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1278 function   fn(Buffer[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1279 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 1280 function   fn(List[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1281 function   fn(Buffer[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1282 function   fn(List[T]) -> u64   [ tparams: 1, inference: 0 ]
type 1283 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1284 function   fn(List[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 1285 function   fn() -> Buffer[T]   [ tparams: 1, inference: 0 ]
type 1286 function   fn(Buffer[T], u64, u64) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1287 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1288 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1289 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 1290 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 1291 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 1292 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 1293 function   fn(List[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1294 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1295 variant    Opt[T*].None   [ tparams: 0, inference: 0 ]
type 1296 variant    Opt[T*].Some(T*)   [ tparams: 1, inference: 0 ]
type 1297 enum       Opt[T*]   [ tparams: 1, inference: 0 ]
type 1298 function   fn(List[T]) -> Opt[T*]   [ tparams: 2, inference: 0 ]
type 1299 function   fn(List[T]*, u64, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1300 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 1301 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1302 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1303 function   fn(List[T]*, Buffer[T]) -> unit   [ tparams: 2, inference: 0 ]
type 1304 function   fn(List[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1305 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1306 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1307 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1308 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1309 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1310 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1311 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1312 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1313 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1314 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1315 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1316 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1317 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1318 function   fn(List[T]*, T) -> unit   [ tparams: 2, inference: 0 ]
type 1319 function   fn(List[T], u64) -> T*   [ tparams: 2, inference: 0 ]
type 1320 function   fn(List[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1321 function   fn(u64) -> List[T]   [ tparams: 1, inference: 0 ]
type 1322 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1323 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1324 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1325 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1326 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1327 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1328 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1329 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1330 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1331 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1332 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1333 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1334 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1335 function   fn(List[T]*, T) -> unit   [ tparams: 2, inference: 0 ]
type 1336 function   fn(List[T], u64, T) -> unit   [ tparams: 2, inference: 0 ]
type 1337 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 1338 function   fn(List[T]*) -> unit   [ tparams: 1, inference: 0 ]
type 1339 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1340 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1341 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1342 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1343 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1344 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1345 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1346 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1347 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1348 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1349 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1350 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1351 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1352 function   fn(u64) -> List[U]   [ tparams: 1, inference: 0 ]
type 1353 reference  List[U]*   [ tparams: 1, inference: 0 ]
type 1354 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1355 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1356 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1357 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1358 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1359 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1360 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1361 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1362 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1363 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1364 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1365 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1366 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1367 function   fn(List[U]*, U) -> unit   [ tparams: 2, inference: 0 ]
type 1368 function   fn() -> List[U]   [ tparams: 1, inference: 0 ]
type 1369 reference  List[U]*   [ tparams: 1, inference: 0 ]
type 1370 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1371 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1372 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1373 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1374 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1375 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1376 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1377 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1378 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1379 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1380 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1381 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1382 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1383 function   fn(List[U]*, List[U]) -> unit   [ tparams: 2, inference: 0 ]
type 1384 function   fn() -> List[T]   [ tparams: 1, inference: 0 ]
type 1385 reference  List[T]*   [ tparams: 1, inference: 0 ]
type 1386 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1387 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1388 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1389 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1390 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1391 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1392 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1393 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1394 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1395 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1396 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1397 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1398 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1399 function   fn(List[T]*, T) -> unit   [ tparams: 2, inference: 0 ]
type 1400 function   fn(List[char]*, Buffer[char]) -> unit   [ tparams: 0, inference: 0 ]
type 1401 function   fn(List[u8]*, u8) -> unit   [ tparams: 0, inference: 0 ]
type 1402 function   fn(List[u8]*, Buffer[u8]) -> unit   [ tparams: 0, inference: 0 ]
type 1403 function   fn(List[u8]) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 1404 function   fn(List[i64]) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1405 function   fn(List[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1406 struct     BufferIterator[T]   [ tparams: 1, inference: 0 ]
type 1407 function   fn(List[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1408 reference  BufferIterator[T]*   [ tparams: 1, inference: 0 ]
type 1409 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1410 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1411 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1412 function   fn(BufferIterator[T]*) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1413 function   fn(BufferIterator[T]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 1, inference: 0 ]
type 1414 function   fn(BufferIterator[T]*, u64) -> unit   [ tparams: 1, inference: 0 ]
type 1415 function   fn(BufferIterator[T]*, u64) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1416 function   fn(Opt[T]) -> bool   [ tparams: 1, inference: 0 ]
type 1417 function   fn(Opt[T]) -> T   [ tparams: 2, inference: 0 ]
type 1418 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1419 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1420 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1421 function   fn(Buffer[char], u64) -> char   [ tparams: 0, inference: 0 ]
type 1422 function   fn(Buffer[char]) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1423 function   fn(Buffer[char]) -> List[char]   [ tparams: 0, inference: 0 ]
type 1424 function   fn(Buffer[u8]) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 1425 function   fn(Buffer[char], Buffer[char]) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1426 function   fn(Buffer[char], u64) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1427 function   fn(Buffer[char], u64, char) -> unit   [ tparams: 0, inference: 0 ]
type 1428 struct     Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 1429 struct     List[List[char]]   [ tparams: 0, inference: 0 ]
type 1430 function   fn() -> List[List[char]]   [ tparams: 0, inference: 0 ]
type 1431 reference  List[List[char]]*   [ tparams: 0, inference: 0 ]
type 1432 function   fn() -> List[char]   [ tparams: 0, inference: 0 ]
type 1433 function   fn(Opt[char]) -> bool   [ tparams: 0, inference: 0 ]
type 1434 function   fn(Opt[char]) -> char   [ tparams: 0, inference: 0 ]
type 1435 function   fn(char) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 1436 function   fn(List[char]) -> bool   [ tparams: 0, inference: 0 ]
type 1437 function   fn(List[List[char]]*, List[char]) -> unit   [ tparams: 0, inference: 0 ]
type 1438 struct     BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 1439 function   fn(List[List[char]]) -> BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 1440 reference  BufferIterator[List[char]]*   [ tparams: 0, inference: 0 ]
type 1441 variant    Opt[List[char]].None   [ tparams: 0, inference: 0 ]
type 1442 variant    Opt[List[char]].Some(List[char])   [ tparams: 0, inference: 0 ]
type 1443 enum       Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1444 function   fn(BufferIterator[List[char]]*) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1445 function   fn(BufferIterator[List[char]]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 1446 function   fn(BufferIterator[List[char]]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1447 function   fn(BufferIterator[List[char]]*, u64) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1448 function   fn(Opt[List[char]]) -> bool   [ tparams: 0, inference: 0 ]
type 1449 function   fn(Opt[List[char]]) -> List[char]   [ tparams: 0, inference: 0 ]
type 1450 function   fn(List[char]) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 1451 function   fn(Buffer[char], u64, u64) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1452 function   fn(Pointer, u64) -> char*   [ tparams: 0, inference: 0 ]
type 1453 function   fn(i64) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1454 function   fn(Buffer[char]) -> BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 1455 function   fn(u64) -> List[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1456 function   fn(List[enum Char(char) | String(string)]) -> List[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 1457 function   fn(List[enum Char(char) | String(string)]*, enum Char(char) | String(string)) -> unit   [ tparams: 0, inference: 0 ]
type 1458 struct     BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1459 function   fn(List[enum Char(char) | String(string)]) -> BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1460 reference  BufferIterator[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 1461 variant    Opt[enum Char(char) | String(string)].None   [ tparams: 0, inference: 0 ]
type 1462 variant    Opt[enum Char(char) | String(string)].Some(enum Char(char) | String(string))   [ tparams: 0, inference: 0 ]
type 1463 enum       Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1464 function   fn(BufferIterator[enum Char(char) | String(string)]*) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1465 function   fn(BufferIterator[enum Char(char) | String(string)]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 1466 function   fn(BufferIterator[enum Char(char) | String(string)]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1467 function   fn(BufferIterator[enum Char(char) | String(string)]*, u64) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1468 function   fn(Opt[enum Char(char) | String(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 1469 function   fn(Opt[enum Char(char) | String(string)]) -> enum Char(char) | String(string)   [ tparams: 0, inference: 0 ]
type 1470 function   fn(enum Char(char) | String(string)) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 1471 function   fn(u64) -> List[Arena]   [ tparams: 0, inference: 0 ]
type 1472 reference  List[Arena]*   [ tparams: 0, inference: 0 ]
type 1473 function   fn(List[Arena]*, Arena) -> unit   [ tparams: 0, inference: 0 ]
type 1474 function   fn(u64) -> List[ObjectPool]   [ tparams: 0, inference: 0 ]
type 1475 reference  List[ObjectPool]*   [ tparams: 0, inference: 0 ]
type 1476 function   fn(List[Arena], u64) -> Arena*   [ tparams: 0, inference: 0 ]
type 1477 function   fn(u64) -> List[u8]   [ tparams: 0, inference: 0 ]
type 1478 function   fn(i64, i64) -> i32   [ tparams: 0, inference: 0 ]
type 1479 variant    Opt[string].None   [ tparams: 0, inference: 0 ]
type 1480 variant    Opt[string].Some(string)   [ tparams: 0, inference: 0 ]
type 1481 enum       Opt[string]   [ tparams: 0, inference: 0 ]
type 1482 struct     GenericPoint[i32]   [ tparams: 0, inference: 0 ]
type 1483 param      Self   [ tparams: 1, inference: 0 ]
type 1484 function   fn(Self, GenericPoint[i32]) -> Output   [ tparams: 2, inference: 0 ]
type 1485 struct     GenericPoint['0]   [ tparams: 0, inference: 2 ]
type 1486 function   fn(GenericPoint[i32], GenericPoint[i32]) -> GenericPoint[i32]   [ tparams: 0, inference: 0 ]
type 1487 param      Self   [ tparams: 1, inference: 0 ]
type 1488 function   fn(i32) -> Self   [ tparams: 1, inference: 0 ]
type 1489 function   fn(i32) -> string   [ tparams: 0, inference: 0 ]
type 1490 function   fn(Foo) -> MyString   [ tparams: 0, inference: 0 ]
type 1491 reference  bool*   [ tparams: 0, inference: 0 ]
type 1492 function   fn(Arena*, bool) -> bool*   [ tparams: 0, inference: 0 ]
type 1493 function   fn(Arena*, {x: i64, y: i64}) -> {x: i64, y: i64}*   [ tparams: 0, inference: 0 ]
type 1494 function   fn(i64) -> unit   [ tparams: 0, inference: 0 ]
type 1495 function   fn(Arena*, string) -> string*   [ tparams: 0, inference: 0 ]
type 1496 function   fn(bool) -> unit   [ tparams: 0, inference: 0 ]
type 1497 struct     {x: i64}   [ tparams: 0, inference: 0 ]
type 1498 reference  {x: i64}*   [ tparams: 0, inference: 0 ]
type 1499 variant    Yes(i64)   [ tparams: 0, inference: 0 ]
type 1500 variant    No   [ tparams: 0, inference: 0 ]
type 1501 enum       enum Yes(i64) | No   [ tparams: 0, inference: 0 ]
type 1502 reference  enum Yes(i64) | No*   [ tparams: 0, inference: 0 ]
type 1503 reference  Yes(i64)*   [ tparams: 0, inference: 0 ]
type 1504 variant    Opt[Yes(i64)*].None   [ tparams: 0, inference: 0 ]
type 1505 variant    Opt[Yes(i64)*].Some(Yes(i64)*)   [ tparams: 0, inference: 0 ]
type 1506 enum       Opt[Yes(i64)*]   [ tparams: 0, inference: 0 ]
type 1507 function   fn(Opt[Yes(i64)*]) -> bool   [ tparams: 0, inference: 0 ]
type 1508 function   fn(Opt[Yes(i64)*]) -> Yes(i64)*   [ tparams: 0, inference: 0 ]
type 1509 function   fn(Yes(i64)*) -> Opt[Yes(i64)*]   [ tparams: 0, inference: 0 ]
type 1510 variant    Opt[{x: i64}*].None   [ tparams: 0, inference: 0 ]
type 1511 variant    Opt[{x: i64}*].Some({x: i64}*)   [ tparams: 0, inference: 0 ]
type 1512 enum       Opt[{x: i64}*]   [ tparams: 0, inference: 0 ]
type 1513 function   fn() -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1514 function   fn(Buffer[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 1515 function   fn(Buffer[i64]) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1516 function   fn(Opt[i64], Opt[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 1517 function   fn(u64, i64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1518 function   fn(Buffer[i64], u64) -> i64   [ tparams: 0, inference: 0 ]
type 1519 function   fn(Buffer[i64], u64, i64) -> unit   [ tparams: 0, inference: 0 ]
type 1520 function   fn(Buffer[i64], u64, u64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1521 function   fn(Buffer[i64], u64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1522 function   fn(Buffer[i64], Buffer[i64]) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1523 reference  Buffer[i64]*   [ tparams: 0, inference: 0 ]
type 1524 function   fn(Buffer[i64]*, u64, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1525 function   fn(Buffer[i64]) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1526 struct     {b: bool}   [ tparams: 0, inference: 0 ]
type 1527 struct     MyBox[i64]   [ tparams: 0, inference: 0 ]
type 1528 function   fn(i64, i64) -> MyBox[i64]   [ tparams: 0, inference: 0 ]
type 1529 struct     MyBox[bool]   [ tparams: 0, inference: 0 ]
type 1530 function   fn(bool, bool) -> MyBox[bool]   [ tparams: 0, inference: 0 ]
type 1531 struct     MyBox[{b: bool}]   [ tparams: 0, inference: 0 ]
type 1532 function   fn({b: bool}, {b: bool}) -> MyBox[{b: bool}]   [ tparams: 0, inference: 0 ]
type 1533 function   fn(i64, string, i64) -> unit   [ tparams: 0, inference: 0 ]
type 1534 hole       '3   [ tparams: 0, inference: 1 ]
type 1535 hole       '4   [ tparams: 0, inference: 1 ]
type 1536 hole       '5   [ tparams: 0, inference: 1 ]
type 1537 function   fn(List[string]) -> List[string]*   [ tparams: 0, inference: 0 ]
type 1538 function   fn(List[string], List[string]) -> bool   [ tparams: 0, inference: 0 ]
type 1539 variant    Yes   [ tparams: 0, inference: 0 ]
type 1540 variant    No   [ tparams: 0, inference: 0 ]
type 1541 enum       enum Yes | No   [ tparams: 0, inference: 0 ]
type 1542 variant    Opt[Maybe.A].None   [ tparams: 0, inference: 0 ]
type 1543 variant    Opt[Maybe.A].Some(Maybe.A)   [ tparams: 0, inference: 0 ]
type 1544 enum       Opt[Maybe.A]   [ tparams: 0, inference: 0 ]
type 1545 function   fn(Opt[Maybe.A]) -> bool   [ tparams: 0, inference: 0 ]
type 1546 function   fn(Opt[Maybe.A]) -> Maybe.A   [ tparams: 0, inference: 0 ]
type 1547 function   fn(Maybe.A) -> Opt[Maybe.A]   [ tparams: 0, inference: 0 ]
type 1548 variant    Opt[Maybe.B(char)].None   [ tparams: 0, inference: 0 ]
type 1549 variant    Opt[Maybe.B(char)].Some(Maybe.B(char))   [ tparams: 0, inference: 0 ]
type 1550 enum       Opt[Maybe.B(char)]   [ tparams: 0, inference: 0 ]
type 1551 function   fn(Opt[Maybe.B(char)]) -> bool   [ tparams: 0, inference: 0 ]
type 1552 function   fn(Opt[Maybe.B(char)]) -> Maybe.B(char)   [ tparams: 0, inference: 0 ]
type 1553 function   fn(Maybe.B(char)) -> Opt[Maybe.B(char)]   [ tparams: 0, inference: 0 ]
type 1554 variant    Opt[Maybe.C(string)].None   [ tparams: 0, inference: 0 ]
type 1555 variant    Opt[Maybe.C(string)].Some(Maybe.C(string))   [ tparams: 0, inference: 0 ]
type 1556 enum       Opt[Maybe.C(string)]   [ tparams: 0, inference: 0 ]
type 1557 function   fn(Opt[Maybe.C(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 1558 function   fn(Opt[Maybe.C(string)]) -> Maybe.C(string)   [ tparams: 0, inference: 0 ]
type 1559 function   fn(Maybe.C(string)) -> Opt[Maybe.C(string)]   [ tparams: 0, inference: 0 ]
type 1560 variant    Opt[MyResult[T, E].Ok(T)].None   [ tparams: 0, inference: 0 ]
type 1561 variant    Opt[MyResult[T, E].Ok(T)].Some(MyResult[T, E].Ok(T))   [ tparams: 1, inference: 0 ]
type 1562 enum       Opt[MyResult[T, E].Ok(T)]   [ tparams: 1, inference: 0 ]
type 1563 function   fn(Opt[MyResult[T, E].Ok(T)]) -> bool   [ tparams: 1, inference: 0 ]
type 1564 function   fn(Opt[MyResult[T, E].Ok(T)]) -> MyResult[T, E].Ok(T)   [ tparams: 2, inference: 0 ]
type 1565 function   fn(MyResult[T, E].Ok(T)) -> Opt[MyResult[T, E].Ok(T)]   [ tparams: 2, inference: 0 ]
type 1566 variant    MyResult[i64, string].Ok(i64)   [ tparams: 0, inference: 0 ]
type 1567 variant    MyResult[i64, string].Err(string)   [ tparams: 0, inference: 0 ]
type 1568 enum       MyResult[i64, string]   [ tparams: 0, inference: 0 ]
type 1569 variant    Opt[MyResult[i64, string].Ok(i64)].None   [ tparams: 0, inference: 0 ]
type 1570 variant    Opt[MyResult[i64, string].Ok(i64)].Some(MyResult[i64, string].Ok(i64))   [ tparams: 0, inference: 0 ]
type 1571 enum       Opt[MyResult[i64, string].Ok(i64)]   [ tparams: 0, inference: 0 ]
type 1572 function   fn(Opt[MyResult[i64, string].Ok(i64)]) -> bool   [ tparams: 0, inference: 0 ]
type 1573 function   fn(Opt[MyResult[i64, string].Ok(i64)]) -> MyResult[i64, string].Ok(i64)   [ tparams: 0, inference: 0 ]
type 1574 function   fn(MyResult[i64, string].Ok(i64)) -> Opt[MyResult[i64, string].Ok(i64)]   [ tparams: 0, inference: 0 ]
type 1575 variant    MyResult['0, '1].Ok('0)   [ tparams: 0, inference: 1 ]
type 1576 variant    MyResult['0, '1].Err('1)   [ tparams: 0, inference: 1 ]
type 1577 enum       MyResult['0, '1]   [ tparams: 0, inference: 2 ]
type 1578 function   fn(MyResult[i64, string]) -> i64   [ tparams: 0, inference: 0 ]
type 1579 function   fn(MyResult[i64, string]) -> string   [ tparams: 0, inference: 0 ]
type 1580 variant    Opt[i32].None   [ tparams: 0, inference: 0 ]
type 1581 variant    Opt[i32].Some(i32)   [ tparams: 0, inference: 0 ]
type 1582 enum       Opt[i32]   [ tparams: 0, inference: 0 ]
type 1583 struct     {a: '0, b: '1}   [ tparams: 0, inference: 2 ]
type 1584 struct     {a: i64, b: string}   [ tparams: 0, inference: 0 ]
type 1585 variant    Contrived[i64, string].Stuff({a: i64, b: string})   [ tparams: 0, inference: 0 ]
type 1586 variant    Contrived[i64, string].Empty   [ tparams: 0, inference: 0 ]
type 1587 enum       Contrived[i64, string]   [ tparams: 0, inference: 0 ]
type 1588 function   fn(u64) -> List[i64]   [ tparams: 0, inference: 0 ]
type 1589 reference  List[i64]*   [ tparams: 0, inference: 0 ]
type 1590 function   fn(List[i64]*, i64) -> unit   [ tparams: 0, inference: 0 ]
type 1591 function   fn(List[i64], u64) -> i64   [ tparams: 0, inference: 0 ]
type 1592 struct     BufferIterator[i64]   [ tparams: 0, inference: 0 ]
type 1593 function   fn(List[i64]) -> BufferIterator[i64]   [ tparams: 0, inference: 0 ]
type 1594 reference  BufferIterator[i64]*   [ tparams: 0, inference: 0 ]
type 1595 function   fn(BufferIterator[i64]*) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1596 function   fn(BufferIterator[i64]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 1597 function   fn(BufferIterator[i64]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1598 function   fn(BufferIterator[i64]*, u64) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1599 function   fn(Opt[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 1600 function   fn(Opt[i64]) -> i64   [ tparams: 0, inference: 0 ]
type 1601 function   fn(i64) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1602 reference  fn(i64) -> i64*   [ tparams: 0, inference: 0 ]
type 1603 struct     Box[i64]   [ tparams: 0, inference: 0 ]
type 1604 struct     Box[bool]   [ tparams: 0, inference: 0 ]
type 1605 struct     Box[Opt[bool]]   [ tparams: 0, inference: 0 ]
type 1606 struct     Box[bool*]   [ tparams: 0, inference: 0 ]
type 1607 function   fn(bool) -> bool*   [ tparams: 0, inference: 0 ]
type 1608 function   fn(Opt[bool]) -> bool   [ tparams: 0, inference: 0 ]
type 1609 function   fn(bool) -> Opt[bool]   [ tparams: 0, inference: 0 ]
type 1610 struct     Pair[i64, bool]   [ tparams: 0, inference: 0 ]
type 1611 function   fn(bool) -> Opt[bool]   [ tparams: 0, inference: 0 ]
type 1612 function   fn(Pair[i64, bool]) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1613 variant    Opt['1].None   [ tparams: 0, inference: 0 ]
type 1614 variant    Opt['1].Some('1)   [ tparams: 0, inference: 1 ]
type 1615 enum       Opt['1]   [ tparams: 0, inference: 1 ]
type 1616 struct     Pair['0, '1]   [ tparams: 0, inference: 2 ]
type 1617 struct     Box[Box[i64]]   [ tparams: 0, inference: 0 ]
type 1618 struct     Box[Box[Box[i64]]]   [ tparams: 0, inference: 0 ]
type 1619 struct     Box['0]   [ tparams: 0, inference: 1 ]
type 1620 struct     Box[Box['0]]   [ tparams: 0, inference: 1 ]
type 1621 struct     Box[Box[Box['0]]]   [ tparams: 0, inference: 1 ]
type 1622 function   fn(Box[Box[Box[i64]]]) -> i64   [ tparams: 0, inference: 0 ]
type 1623 function   fn(T) -> T   [ tparams: 2, inference: 0 ]
type 1624 variant    Opt[T].None   [ tparams: 0, inference: 0 ]
type 1625 variant    Opt[T].Some(T)   [ tparams: 1, inference: 0 ]
type 1626 enum       Opt[T]   [ tparams: 1, inference: 0 ]
type 1627 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1628 function   fn(T, T) -> T   [ tparams: 3, inference: 0 ]
type 1629 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 1630 struct     Buffer[bool]   [ tparams: 0, inference: 0 ]
type 1631 struct     List[bool]   [ tparams: 0, inference: 0 ]
type 1632 function   fn(u64) -> List[bool]   [ tparams: 0, inference: 0 ]
type 1633 reference  List[bool]*   [ tparams: 0, inference: 0 ]
type 1634 function   fn(List[bool]) -> List[bool]   [ tparams: 0, inference: 0 ]
type 1635 function   fn(i64) -> i64   [ tparams: 0, inference: 0 ]
type 1636 function   fn(bool) -> bool   [ tparams: 0, inference: 0 ]
type 1637 struct     {value: i64}   [ tparams: 0, inference: 0 ]
type 1638 function   fn({value: i64}) -> {value: i64}   [ tparams: 0, inference: 0 ]
type 1639 function   fn(bool) -> bool   [ tparams: 0, inference: 0 ]
type 1640 variant    Opt[u32].None   [ tparams: 0, inference: 0 ]
type 1641 variant    Opt[u32].Some(u32)   [ tparams: 0, inference: 0 ]
type 1642 enum       Opt[u32]   [ tparams: 0, inference: 0 ]
type 1643 function   fn(u32) -> Opt[u32]   [ tparams: 0, inference: 0 ]
type 1644 function   fn(Opt[u32]) -> u32   [ tparams: 0, inference: 0 ]
type 1645 function   fn(u32) -> u32   [ tparams: 0, inference: 0 ]
type 1646 variant    Opt['2].None   [ tparams: 0, inference: 0 ]
type 1647 variant    Opt['2].Some('2)   [ tparams: 0, inference: 1 ]
type 1648 enum       Opt['2]   [ tparams: 0, inference: 1 ]
type 1649 variant    Opt['3].None   [ tparams: 0, inference: 0 ]
type 1650 variant    Opt['3].Some('3)   [ tparams: 0, inference: 1 ]
type 1651 enum       Opt['3]   [ tparams: 0, inference: 1 ]
type 1652 variant    Opt['4].None   [ tparams: 0, inference: 0 ]
type 1653 variant    Opt['4].Some('4)   [ tparams: 0, inference: 1 ]
type 1654 enum       Opt['4]   [ tparams: 0, inference: 1 ]
type 1655 function   fn(u32, u32) -> u32   [ tparams: 0, inference: 0 ]
type 1656 variant    Opt['5].None   [ tparams: 0, inference: 0 ]
type 1657 variant    Opt['5].Some('5)   [ tparams: 0, inference: 1 ]
type 1658 enum       Opt['5]   [ tparams: 0, inference: 1 ]
type 1659 hole       '6   [ tparams: 0, inference: 1 ]
type 1660 variant    Opt['6].None   [ tparams: 0, inference: 0 ]
type 1661 variant    Opt['6].Some('6)   [ tparams: 0, inference: 1 ]
type 1662 enum       Opt['6]   [ tparams: 0, inference: 1 ]
type 1663 hole       '7   [ tparams: 0, inference: 1 ]
type 1664 variant    Opt['7].None   [ tparams: 0, inference: 0 ]
type 1665 variant    Opt['7].Some('7)   [ tparams: 0, inference: 1 ]
type 1666 enum       Opt['7]   [ tparams: 0, inference: 1 ]
type 1667 hole       '8   [ tparams: 0, inference: 1 ]
type 1668 variant    Opt['8].None   [ tparams: 0, inference: 0 ]
type 1669 variant    Opt['8].Some('8)   [ tparams: 0, inference: 1 ]
type 1670 enum       Opt['8]   [ tparams: 0, inference: 1 ]
type 1671 function   fn(Opt[i64], i64) -> i64   [ tparams: 0, inference: 0 ]
type 1672 variant    None   [ tparams: 0, inference: 0 ]
type 1673 variant    Some('1)   [ tparams: 0, inference: 1 ]
type 1674 enum       enum None | Some('1)   [ tparams: 0, inference: 1 ]
type 1675 function   fn(Opt[i64], Opt[i64]) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1676 function   fn(Opt[u32], Opt[u32]) -> Opt[u32]   [ tparams: 0, inference: 0 ]
type 1677 reference  Opt[i64]*   [ tparams: 0, inference: 0 ]
type 1678 struct     {one: '0, two: '0}   [ tparams: 0, inference: 2 ]
type 1679 struct     {one: Opt[i64], two: Opt[i64]}   [ tparams: 0, inference: 0 ]
type 1680 function   fn(Opt[i64], Opt[i64], {one: Opt[i64], two: Opt[i64]}) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1681 struct     {x: i64, y: string}   [ tparams: 0, inference: 0 ]
type 1682 struct     {x: Opt[i64]}   [ tparams: 0, inference: 0 ]
type 1683 variant    Opt[{x: i64}].None   [ tparams: 0, inference: 0 ]
type 1684 variant    Opt[{x: i64}].Some({x: i64})   [ tparams: 0, inference: 0 ]
type 1685 enum       Opt[{x: i64}]   [ tparams: 0, inference: 0 ]
type 1686 function   fn(u64) -> List[Json]   [ tparams: 0, inference: 0 ]
type 1687 reference  List[Json]*   [ tparams: 0, inference: 0 ]
type 1688 function   fn(List[Json]*, Json) -> unit   [ tparams: 0, inference: 0 ]
type 1689 variant    Opt[Json.JsArray(List[Json])].None   [ tparams: 0, inference: 0 ]
type 1690 variant    Opt[Json.JsArray(List[Json])].Some(Json.JsArray(List[Json]))   [ tparams: 0, inference: 0 ]
type 1691 enum       Opt[Json.JsArray(List[Json])]   [ tparams: 0, inference: 0 ]
type 1692 function   fn(Opt[Json.JsArray(List[Json])]) -> bool   [ tparams: 0, inference: 0 ]
type 1693 function   fn(Opt[Json.JsArray(List[Json])]) -> Json.JsArray(List[Json])   [ tparams: 0, inference: 0 ]
type 1694 function   fn(Json.JsArray(List[Json])) -> Opt[Json.JsArray(List[Json])]   [ tparams: 0, inference: 0 ]
type 1695 function   fn(List[Json], u64) -> Json   [ tparams: 0, inference: 0 ]
type 1696 function   fn((env){}*, i64) -> i64   [ tparams: 0, inference: 0 ]
type 1697 lambda     lambda#expr#4055(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1698 reference  fn((env){}*, i64) -> i64*   [ tparams: 0, inference: 0 ]
type 1699 struct     {fn_ptr: fn((env){}*, i64) -> i64*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1700 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1701 struct     {closedOver: i64}   [ tparams: 0, inference: 0 ]
type 1702 reference  {closedOver: i64}*   [ tparams: 0, inference: 0 ]
type 1703 function   fn((env){closedOver: i64}*, i64) -> i64   [ tparams: 0, inference: 0 ]
type 1704 lambda     lambda#expr#4071(fn((env){closedOver: i64}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1705 reference  fn((env){closedOver: i64}*, i64) -> i64*   [ tparams: 0, inference: 0 ]
type 1706 struct     {fn_ptr: fn((env){closedOver: i64}*, i64) -> i64*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1707 lambdaobj  lambda_object(fn((env){closedOver: i64}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1708 function   fn(SourceLocation, i64, i64) -> unit   [ tparams: 0, inference: 0 ]
type 1709 struct     {counter: i64*}   [ tparams: 0, inference: 0 ]
type 1710 reference  {counter: i64*}*   [ tparams: 0, inference: 0 ]
type 1711 function   fn((env){counter: i64*}*, i64) -> unit   [ tparams: 0, inference: 0 ]
type 1712 lambda     lambda#expr#4083(fn((env){counter: i64*}*, i64) -> unit)   [ tparams: 0, inference: 0 ]
type 1713 reference  fn((env){counter: i64*}*, i64) -> unit*   [ tparams: 0, inference: 0 ]
type 1714 struct     {fn_ptr: fn((env){counter: i64*}*, i64) -> unit*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1715 lambdaobj  lambda_object(fn((env){counter: i64*}*, i64) -> unit)   [ tparams: 0, inference: 0 ]
type 1716 function   fn((env){}*) -> i64   [ tparams: 0, inference: 0 ]
type 1717 lambda     lambda#expr#4098(fn((env){}*) -> i64)   [ tparams: 0, inference: 0 ]
type 1718 reference  fn((env){}*) -> i64*   [ tparams: 0, inference: 0 ]
type 1719 struct     {fn_ptr: fn((env){}*) -> i64*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1720 lambdaobj  lambda_object(fn((env){}*) -> i64)   [ tparams: 0, inference: 0 ]
type 1721 lambda     lambda#expr#4100(fn((env){}*) -> i64)   [ tparams: 0, inference: 0 ]
type 1722 lambdaobj  lambda_object(fn((env){}*) -> i64)   [ tparams: 0, inference: 0 ]
type 1723 struct     BufferIterator[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1724 function   fn(List[lambda_object(fn((env){}*) -> unit)]) -> BufferIterator[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1725 reference  BufferIterator[lambda_object(fn((env){}*) -> unit)]*   [ tparams: 0, inference: 0 ]
type 1726 variant    Opt[lambda_object(fn((env){}*) -> unit)].None   [ tparams: 0, inference: 0 ]
type 1727 variant    Opt[lambda_object(fn((env){}*) -> unit)].Some(lambda_object(fn((env){}*) -> unit))   [ tparams: 0, inference: 0 ]
type 1728 enum       Opt[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1729 function   fn(BufferIterator[lambda_object(fn((env){}*) -> unit)]*) -> Opt[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1730 function   fn(BufferIterator[lambda_object(fn((env){}*) -> unit)]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 1731 function   fn(BufferIterator[lambda_object(fn((env){}*) -> unit)]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1732 function   fn(BufferIterator[lambda_object(fn((env){}*) -> unit)]*, u64) -> Opt[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1733 function   fn(Opt[lambda_object(fn((env){}*) -> unit)]) -> bool   [ tparams: 0, inference: 0 ]
type 1734 function   fn(Opt[lambda_object(fn((env){}*) -> unit)]) -> lambda_object(fn((env){}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1735 function   fn(lambda_object(fn((env){}*) -> unit)) -> Opt[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1736 lambdaobj  lambda_object(fn((env){}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1737 reference  lambda_object(fn((env){}*) -> unit)*   [ tparams: 0, inference: 0 ]
type 1738 struct     Buffer[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1739 struct     List[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1740 function   fn((env){counter: i64*}*) -> unit   [ tparams: 0, inference: 0 ]
type 1741 lambda     lambda#expr#4132(fn((env){counter: i64*}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1742 reference  fn((env){counter: i64*}*) -> unit*   [ tparams: 0, inference: 0 ]
type 1743 struct     {fn_ptr: fn((env){counter: i64*}*) -> unit*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1744 lambdaobj  lambda_object(fn((env){counter: i64*}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1745 lambda     lambda#expr#4139(fn((env){counter: i64*}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1746 lambdaobj  lambda_object(fn((env){counter: i64*}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1747 lambda     lambda#expr#4146(fn((env){counter: i64*}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1748 lambdaobj  lambda_object(fn((env){counter: i64*}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1749 reference  lambda_object(fn((env){counter: i64*}*) -> unit)*   [ tparams: 0, inference: 0 ]
type 1750 struct     Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1751 struct     List[lambda_object(fn((env){counter: i64*}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1752 function   fn(u64) -> List[lambda_object(fn((env){counter: i64*}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 1753 reference  List[lambda_object(fn((env){counter: i64*}*) -> unit)]*   [ tparams: 0, inference: 0 ]
type 1754 function   fn(List[lambda_object(fn((env){counter: i64*}*) -> unit)]*, lambda_object(fn((env){counter: i64*}*) -> unit)) -> unit   [ tparams: 0, inference: 0 ]
type 1755 reference  fn(i64) -> i64*   [ tparams: 0, inference: 0 ]
type 1756 function   fn(i64, fn(i64) -> i64*, fn(i64) -> i64*) -> i64   [ tparams: 0, inference: 0 ]
type 1757 function   fn(i64, fn(i64) -> i64*) -> i64   [ tparams: 0, inference: 0 ]
type 1758 function   fn((env){}*, i64) -> i64   [ tparams: 0, inference: 0 ]
type 1759 reference  fn((env){}*, i64) -> i64*   [ tparams: 0, inference: 0 ]
type 1760 struct     {fn_ptr: fn((env){}*, i64) -> i64*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1761 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1762 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1763 function   fn(i64, lambda_object(fn((env){}*, i64) -> i64)) -> i64   [ tparams: 0, inference: 0 ]
type 1764 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1765 struct     {c1: {x: i64}*}   [ tparams: 0, inference: 0 ]
type 1766 reference  {c1: {x: i64}*}*   [ tparams: 0, inference: 0 ]
type 1767 function   fn((env){c1: {x: i64}*}*, i64) -> i64   [ tparams: 0, inference: 0 ]
type 1768 lambda     lambda#expr#4204(fn((env){c1: {x: i64}*}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1769 reference  fn((env){c1: {x: i64}*}*, i64) -> i64*   [ tparams: 0, inference: 0 ]
type 1770 struct     {fn_ptr: fn((env){c1: {x: i64}*}*, i64) -> i64*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1771 lambdaobj  lambda_object(fn((env){c1: {x: i64}*}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1772 struct     {c2: i64}   [ tparams: 0, inference: 0 ]
type 1773 reference  {c2: i64}*   [ tparams: 0, inference: 0 ]
type 1774 function   fn((env){c2: i64}*, i64) -> i64   [ tparams: 0, inference: 0 ]
type 1775 lambda     lambda#expr#4210(fn((env){c2: i64}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1776 reference  fn((env){c2: i64}*, i64) -> i64*   [ tparams: 0, inference: 0 ]
type 1777 struct     {fn_ptr: fn((env){c2: i64}*, i64) -> i64*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1778 lambdaobj  lambda_object(fn((env){c2: i64}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1779 lambdaobj  lambda_object(fn((env){c1: {x: i64}*}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1780 lambdaobj  lambda_object(fn((env){c2: i64}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1781 function   fn(i64, lambda#expr#4204(fn((env){c1: {x: i64}*}*, i64) -> i64), lambda#expr#4210(fn((env){c2: i64}*, i64) -> i64)) -> i64   [ tparams: 0, inference: 0 ]
type 1782 lambdaobj  lambda_object(fn((env){c1: {x: i64}*}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1783 lambdaobj  lambda_object(fn((env){c2: i64}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1784 function   fn('0) -> '0   [ tparams: 0, inference: 2 ]
type 1785 ftp        some_fn_1860: some fn('0) -> '0   [ tparams: 1, inference: 2 ]
type 1786 function   fn(bool) -> bool   [ tparams: 0, inference: 0 ]
type 1787 ftp        some_fn_1860: some fn(bool) -> bool   [ tparams: 1, inference: 0 ]
type 1788 function   fn((env){}*, bool) -> bool   [ tparams: 0, inference: 0 ]
type 1789 lambda     lambda#expr#4228(fn((env){}*, bool) -> bool)   [ tparams: 0, inference: 0 ]
type 1790 reference  fn((env){}*, bool) -> bool*   [ tparams: 0, inference: 0 ]
type 1791 struct     {fn_ptr: fn((env){}*, bool) -> bool*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1792 lambdaobj  lambda_object(fn((env){}*, bool) -> bool)   [ tparams: 0, inference: 0 ]
type 1793 function   fn('0) -> Opt['0]   [ tparams: 0, inference: 2 ]
type 1794 ftp        some_fn_1865: some fn('0) -> Opt['0]   [ tparams: 1, inference: 2 ]
type 1795 function   fn(bool) -> Opt[bool]   [ tparams: 0, inference: 0 ]
type 1796 ftp        some_fn_1865: some fn(bool) -> Opt[bool]   [ tparams: 1, inference: 0 ]
type 1797 function   fn((env){}*, bool) -> Opt[bool]   [ tparams: 0, inference: 0 ]
type 1798 lambda     lambda#expr#4231(fn((env){}*, bool) -> Opt[bool])   [ tparams: 0, inference: 0 ]
type 1799 reference  fn((env){}*, bool) -> Opt[bool]*   [ tparams: 0, inference: 0 ]
type 1800 struct     {fn_ptr: fn((env){}*, bool) -> Opt[bool]*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1801 lambdaobj  lambda_object(fn((env){}*, bool) -> Opt[bool])   [ tparams: 0, inference: 0 ]
type 1802 lambdaobj  lambda_object(fn((env){}*, bool) -> bool)   [ tparams: 0, inference: 0 ]
type 1803 lambdaobj  lambda_object(fn((env){}*, bool) -> Opt[bool])   [ tparams: 0, inference: 0 ]
type 1804 function   fn(bool, lambda#expr#4228(fn((env){}*, bool) -> bool), lambda#expr#4231(fn((env){}*, bool) -> Opt[bool])) -> Opt[bool]   [ tparams: 0, inference: 0 ]
type 1805 lambdaobj  lambda_object(fn((env){}*, bool) -> bool)   [ tparams: 0, inference: 0 ]
type 1806 lambdaobj  lambda_object(fn((env){}*, bool) -> Opt[bool])   [ tparams: 0, inference: 0 ]
type 1807 function   fn(Opt[bool], Opt[bool]) -> bool   [ tparams: 0, inference: 0 ]
type 1808 function   fn('1) -> '2   [ tparams: 0, inference: 2 ]
type 1809 ftp        some_fn_779: some fn('1) -> '2   [ tparams: 1, inference: 2 ]
type 1810 function   fn(i64) -> '2   [ tparams: 0, inference: 1 ]
type 1811 ftp        some_fn_779: some fn(i64) -> '2   [ tparams: 1, inference: 1 ]
type 1812 lambda     lambda#expr#4249(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1813 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1814 ftp        some_fn_779: some fn(i64) -> i64   [ tparams: 1, inference: 0 ]
type 1815 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1816 function   fn(List[i64], lambda#expr#4249(fn((env){}*, i64) -> i64)) -> List[i64]   [ tparams: 0, inference: 0 ]
type 1817 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1818 function   fn('0) -> bool   [ tparams: 0, inference: 1 ]
type 1819 ftp        some_fn_800: some fn('0) -> bool   [ tparams: 1, inference: 1 ]
type 1820 function   fn(i64) -> bool   [ tparams: 0, inference: 0 ]
type 1821 ftp        some_fn_800: some fn(i64) -> bool   [ tparams: 1, inference: 0 ]
type 1822 function   fn((env){}*, i64) -> bool   [ tparams: 0, inference: 0 ]
type 1823 lambda     lambda#expr#4256(fn((env){}*, i64) -> bool)   [ tparams: 0, inference: 0 ]
type 1824 reference  fn((env){}*, i64) -> bool*   [ tparams: 0, inference: 0 ]
type 1825 struct     {fn_ptr: fn((env){}*, i64) -> bool*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1826 lambdaobj  lambda_object(fn((env){}*, i64) -> bool)   [ tparams: 0, inference: 0 ]
type 1827 lambdaobj  lambda_object(fn((env){}*, i64) -> bool)   [ tparams: 0, inference: 0 ]
type 1828 function   fn(List[i64], lambda#expr#4256(fn((env){}*, i64) -> bool)) -> List[i64]   [ tparams: 0, inference: 0 ]
type 1829 function   fn('0) -> '1   [ tparams: 0, inference: 2 ]
type 1830 ftp        some_fn_779: some fn('0) -> '1   [ tparams: 1, inference: 2 ]
type 1831 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1832 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1833 lambdaobj  lambda_object(fn((env){}*, i64) -> i64)   [ tparams: 0, inference: 0 ]
type 1834 lambdaobj  lambda_object(fn((env){}*, i64) -> bool)   [ tparams: 0, inference: 0 ]
type 1835 lambda     lambda#expr#4270(fn((env){}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1836 lambdaobj  lambda_object(fn((env){}*) -> unit)   [ tparams: 0, inference: 0 ]
type 1837 function   fn() -> List[i64]   [ tparams: 0, inference: 0 ]
type 1838 function   fn(List[i64]) -> u64   [ tparams: 0, inference: 0 ]
type 1839 function   fn(List[i64]) -> Opt[i64]   [ tparams: 0, inference: 0 ]
type 1840 function   fn(List[i64]) -> List[i64]   [ tparams: 0, inference: 0 ]
type 1841 function   fn(List[u8]) -> List[u8]   [ tparams: 0, inference: 0 ]
type 1842 function   fn(List[i64], u64, u64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 1843 reference  Point*   [ tparams: 0, inference: 0 ]
type 1844 struct     Buffer[Point]   [ tparams: 0, inference: 0 ]
type 1845 struct     List[Point]   [ tparams: 0, inference: 0 ]
type 1846 function   fn(u64) -> List[Point]   [ tparams: 0, inference: 0 ]
type 1847 reference  List[Point]*   [ tparams: 0, inference: 0 ]
type 1848 function   fn(List[Point]*, Point) -> unit   [ tparams: 0, inference: 0 ]
type 1849 function   fn(List[Point]) -> u64   [ tparams: 0, inference: 0 ]
type 1850 function   fn(List[{rank: i64, payload: string}]) -> List[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 1851 function   fn(List[{rank: i64, payload: string}], List[{rank: i64, payload: string}]) -> bool   [ tparams: 0, inference: 0 ]
type 1852 function   fn(u64) -> List[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 1853 reference  List[{rank: i64, payload: string}]*   [ tparams: 0, inference: 0 ]
type 1854 function   fn(List[{rank: i64, payload: string}]*, {rank: i64, payload: string}) -> unit   [ tparams: 0, inference: 0 ]
type 1855 function   fn(List[i64]*, u64, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1856 function   fn(List[i64]) -> string   [ tparams: 0, inference: 0 ]
type 1857 function   fn(u64) -> unit   [ tparams: 0, inference: 0 ]
type 1858 reference  bool**   [ tparams: 0, inference: 0 ]
type 1859 reference  bool***   [ tparams: 0, inference: 0 ]
type 1860 function   fn(bool**) -> bool***   [ tparams: 0, inference: 0 ]
type 1861 function   fn(bool*) -> bool**   [ tparams: 0, inference: 0 ]
type 1862 function   fn(string) -> Opt[string]   [ tparams: 0, inference: 0 ]
type 1863 struct     {x: Opt[i64], y: Opt[i64]}   [ tparams: 0, inference: 0 ]
type 1864 variant    Opt[{x: Opt[i64], y: Opt[i64]}].None   [ tparams: 0, inference: 0 ]
type 1865 variant    Opt[{x: Opt[i64], y: Opt[i64]}].Some({x: Opt[i64], y: Opt[i64]})   [ tparams: 0, inference: 0 ]
type 1866 enum       Opt[{x: Opt[i64], y: Opt[i64]}]   [ tparams: 0, inference: 0 ]
type 1867 function   fn({x: Opt[i64], y: Opt[i64]}) -> Opt[{x: Opt[i64], y: Opt[i64]}]   [ tparams: 0, inference: 0 ]
type 1868 struct     {point: {x: i64, y: i64}, value: Opt[string]}   [ tparams: 0, inference: 0 ]
type 1869 variant    Opt[{point: {x: i64, y: i64}, value: Opt[string]}].None   [ tparams: 0, inference: 0 ]
type 1870 variant    Opt[{point: {x: i64, y: i64}, value: Opt[string]}].Some({point: {x: i64, y: i64}, value: Opt[string]})   [ tparams: 0, inference: 0 ]
type 1871 enum       Opt[{point: {x: i64, y: i64}, value: Opt[string]}]   [ tparams: 0, inference: 0 ]
type 1872 function   fn({point: {x: i64, y: i64}, value: Opt[string]}) -> Opt[{point: {x: i64, y: i64}, value: Opt[string]}]   [ tparams: 0, inference: 0 ]
type 1873 variant    Opt[{value: i64}].None   [ tparams: 0, inference: 0 ]
type 1874 variant    Opt[{value: i64}].Some({value: i64})   [ tparams: 0, inference: 0 ]
type 1875 enum       Opt[{value: i64}]   [ tparams: 0, inference: 0 ]
type 1876 function   fn({value: i64}) -> Opt[{value: i64}]   [ tparams: 0, inference: 0 ]
type 1877 struct     {outer: i64, inner: Opt[{value: i64}]}   [ tparams: 0, inference: 0 ]
type 1878 variant    Opt[{outer: i64, inner: Opt[{value: i64}]}].None   [ tparams: 0, inference: 0 ]
type 1879 variant    Opt[{outer: i64, inner: Opt[{value: i64}]}].Some({outer: i64, inner: Opt[{value: i64}]})   [ tparams: 0, inference: 0 ]
type 1880 enum       Opt[{outer: i64, inner: Opt[{value: i64}]}]   [ tparams: 0, inference: 0 ]
type 1881 function   fn({outer: i64, inner: Opt[{value: i64}]}) -> Opt[{outer: i64, inner: Opt[{value: i64}]}]   [ tparams: 0, inference: 0 ]
type 1882 function   fn(Opt[string]) -> bool   [ tparams: 0, inference: 0 ]
type 1883 variant    Opt[never].None   [ tparams: 0, inference: 0 ]
type 1884 variant    Opt[never].Some(never)   [ tparams: 0, inference: 0 ]
type 1885 enum       Opt[never]   [ tparams: 0, inference: 0 ]
type 1886 variant    Opt[PointMaybeY].None   [ tparams: 0, inference: 0 ]
type 1887 variant    Opt[PointMaybeY].Some(PointMaybeY)   [ tparams: 0, inference: 0 ]
type 1888 enum       Opt[PointMaybeY]   [ tparams: 0, inference: 0 ]
type 1889 function   fn(Opt[PointMaybeY]) -> bool   [ tparams: 0, inference: 0 ]
type 1890 function   fn(Opt[PointMaybeY]) -> PointMaybeY   [ tparams: 0, inference: 0 ]
type 1891 function   fn(PointMaybeY) -> Opt[PointMaybeY]   [ tparams: 0, inference: 0 ]
type 1892 struct     {name: string, age: i64}   [ tparams: 0, inference: 0 ]
type 1893 variant    Opt[{name: string, age: i64}].None   [ tparams: 0, inference: 0 ]
type 1894 variant    Opt[{name: string, age: i64}].Some({name: string, age: i64})   [ tparams: 0, inference: 0 ]
type 1895 enum       Opt[{name: string, age: i64}]   [ tparams: 0, inference: 0 ]
type 1896 function   fn(Opt[{name: string, age: i64}]) -> bool   [ tparams: 0, inference: 0 ]
type 1897 function   fn(Opt[{name: string, age: i64}]) -> {name: string, age: i64}   [ tparams: 0, inference: 0 ]
type 1898 function   fn(Opt[string]) -> string   [ tparams: 0, inference: 0 ]
type 1899 function   fn(string) -> Opt[string]   [ tparams: 0, inference: 0 ]
type 1900 variant    Opt[WeirdPoint].None   [ tparams: 0, inference: 0 ]
type 1901 variant    Opt[WeirdPoint].Some(WeirdPoint)   [ tparams: 0, inference: 0 ]
type 1902 enum       Opt[WeirdPoint]   [ tparams: 0, inference: 0 ]
type 1903 reference  Opt[WeirdPoint]*   [ tparams: 0, inference: 0 ]
type 1904 struct     Buffer[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 1905 struct     List[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 1906 function   fn(u64) -> List[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 1907 reference  List[Opt[WeirdPoint]]*   [ tparams: 0, inference: 0 ]
type 1908 function   fn(List[Opt[WeirdPoint]]*, Opt[WeirdPoint]) -> unit   [ tparams: 0, inference: 0 ]
type 1909 function   fn(List[Opt[WeirdPoint]], u64) -> Opt[WeirdPoint]   [ tparams: 0, inference: 0 ]
type 1910 reference  Point3*   [ tparams: 0, inference: 0 ]
type 1911 function   fn(Opt[u64]) -> bool   [ tparams: 0, inference: 0 ]
type 1912 function   fn(Opt[u64]) -> u64   [ tparams: 0, inference: 0 ]
type 1913 function   fn(u64) -> Opt[u64]   [ tparams: 0, inference: 0 ]
type 1914 struct     {name: string}   [ tparams: 0, inference: 0 ]
type 1915 function   fn(string) -> Result[bool, string]   [ tparams: 0, inference: 0 ]
type 1916 function   fn(bool) -> Result[bool, string]   [ tparams: 0, inference: 0 ]
type 1917 function   fn(Result[bool, string]) -> bool   [ tparams: 0, inference: 0 ]
type 1918 function   fn(Result[bool, string]) -> string   [ tparams: 0, inference: 0 ]
type 1919 function   fn(string) -> Result[i64, string]   [ tparams: 0, inference: 0 ]
type 1920 function   fn(i64) -> Result[i64, string]   [ tparams: 0, inference: 0 ]
type 1921 function   fn(Result[i64, string]) -> bool   [ tparams: 0, inference: 0 ]
type 1922 function   fn(Result[i64, string]) -> string   [ tparams: 0, inference: 0 ]
type 1923 function   fn(Result[i64, string]) -> i64   [ tparams: 0, inference: 0 ]
type 1924 function   fn(string) -> Result[i32, string]   [ tparams: 0, inference: 0 ]
type 1925 function   fn(i32) -> Result[i32, string]   [ tparams: 0, inference: 0 ]
type 1926 function   fn(Result[i32, string]) -> bool   [ tparams: 0, inference: 0 ]
type 1927 function   fn(Result[i32, string]) -> string   [ tparams: 0, inference: 0 ]
type 1928 function   fn(Result[i32, string]) -> i32   [ tparams: 0, inference: 0 ]
type 1929 function   fn((env){}*, bool) -> Result[bool, string]   [ tparams: 0, inference: 0 ]
type 1930 lambda     lambda#expr#6134(fn((env){}*, bool) -> Result[bool, string])   [ tparams: 0, inference: 0 ]
type 1931 reference  fn((env){}*, bool) -> Result[bool, string]*   [ tparams: 0, inference: 0 ]
type 1932 struct     {fn_ptr: fn((env){}*, bool) -> Result[bool, string]*, env_ptr: {}*}   [ tparams: 0, inference: 0 ]
type 1933 lambdaobj  lambda_object(fn((env){}*, bool) -> Result[bool, string])   [ tparams: 0, inference: 0 ]
type 1934 struct     {x: u64, c: u8}   [ tparams: 0, inference: 0 ]
type 1935 lambda     lambda#expr#6269(fn((env){}*) -> i64)   [ tparams: 0, inference: 0 ]
type 1936 lambdaobj  lambda_object(fn((env){}*) -> i64)   [ tparams: 0, inference: 0 ]
type 1937 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1938 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1939 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1940 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1941 function   fn(char) -> Opt[char]   [ tparams: 0, inference: 0 ]
type 1942 function   fn(u64) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 1943 function   fn(Buffer[Pointer]) -> BufferIterator[Pointer]   [ tparams: 0, inference: 0 ]
type 1944 function   fn(Pointer) -> Opt[Pointer]   [ tparams: 0, inference: 0 ]
type 1945 function   fn(Buffer[Pointer], u64) -> Pointer*   [ tparams: 0, inference: 0 ]
type 1946 function   fn(List[string]) -> u64   [ tparams: 0, inference: 0 ]
type 1947 function   fn(List[string]*) -> unit   [ tparams: 0, inference: 0 ]
type 1948 function   fn(List[string], u64, string) -> unit   [ tparams: 0, inference: 0 ]
type 1949 function   fn(Buffer[string], u64, u64) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 1950 function   fn(Buffer[u8], u64) -> u8*   [ tparams: 0, inference: 0 ]
type 1951 function   fn(u64) -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 1952 function   fn(List[char]) -> u64   [ tparams: 0, inference: 0 ]
type 1953 function   fn(List[char], u64, char) -> unit   [ tparams: 0, inference: 0 ]
type 1954 function   fn(List[char]*, u64, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1955 variant    Opt[Result[S, F].Err(F)].None   [ tparams: 0, inference: 0 ]
type 1956 variant    Opt[Result[S, F].Err(F)].Some(Result[S, F].Err(F))   [ tparams: 1, inference: 0 ]
type 1957 enum       Opt[Result[S, F].Err(F)]   [ tparams: 1, inference: 0 ]
type 1958 function   fn(Opt[Result[S, F].Err(F)]) -> bool   [ tparams: 1, inference: 0 ]
type 1959 function   fn(Opt[Result[S, F].Err(F)]) -> Result[S, F].Err(F)   [ tparams: 2, inference: 0 ]
type 1960 function   fn(Result[S, F].Err(F)) -> Opt[Result[S, F].Err(F)]   [ tparams: 2, inference: 0 ]
type 1961 variant    Opt[Result[S, F].Ok(S)].None   [ tparams: 0, inference: 0 ]
type 1962 variant    Opt[Result[S, F].Ok(S)].Some(Result[S, F].Ok(S))   [ tparams: 1, inference: 0 ]
type 1963 enum       Opt[Result[S, F].Ok(S)]   [ tparams: 1, inference: 0 ]
type 1964 function   fn(Opt[Result[S, F].Ok(S)]) -> bool   [ tparams: 1, inference: 0 ]
type 1965 function   fn(Opt[Result[S, F].Ok(S)]) -> Result[S, F].Ok(S)   [ tparams: 2, inference: 0 ]
type 1966 function   fn(Result[S, F].Ok(S)) -> Opt[Result[S, F].Ok(S)]   [ tparams: 2, inference: 0 ]
type 1967 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1968 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1969 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1970 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1971 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1972 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1973 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1974 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1975 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1976 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1977 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1978 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1979 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1980 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1981 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1982 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1983 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1984 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1985 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1986 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 1987 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 1988 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 1989 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 1990 function   fn(List[char]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1991 function   fn(Buffer[char]) -> BufferIterator[char]   [ tparams: 0, inference: 0 ]
type 1992 function   fn(List[u8]) -> u64   [ tparams: 0, inference: 0 ]
type 1993 function   fn(List[u8]*) -> unit   [ tparams: 0, inference: 0 ]
type 1994 function   fn(List[u8], u64, u8) -> unit   [ tparams: 0, inference: 0 ]
type 1995 function   fn(List[u8]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 1996 struct     BufferIterator[u8]   [ tparams: 0, inference: 0 ]
type 1997 function   fn(Buffer[u8]) -> BufferIterator[u8]   [ tparams: 0, inference: 0 ]
type 1998 reference  BufferIterator[u8]*   [ tparams: 0, inference: 0 ]
type 1999 function   fn(BufferIterator[u8]*) -> Opt[u8]   [ tparams: 0, inference: 0 ]
type 2000 function   fn(BufferIterator[u8]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 2001 function   fn(BufferIterator[u8]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2002 function   fn(BufferIterator[u8]*, u64) -> Opt[u8]   [ tparams: 0, inference: 0 ]
type 2003 function   fn(Opt[u8]) -> bool   [ tparams: 0, inference: 0 ]
type 2004 function   fn(Opt[u8]) -> u8   [ tparams: 0, inference: 0 ]
type 2005 function   fn(u8) -> Opt[u8]   [ tparams: 0, inference: 0 ]
type 2006 function   fn(Buffer[u8], u64, u64) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 2007 function   fn(List[T]) -> Buffer[T]   [ tparams: 2, inference: 0 ]
type 2008 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2009 function   fn(Buffer[T], u64) -> T   [ tparams: 2, inference: 0 ]
type 2010 function   fn(T) -> Opt[T]   [ tparams: 2, inference: 0 ]
type 2011 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2012 function   fn(Buffer[char], u64) -> char*   [ tparams: 0, inference: 0 ]
type 2013 function   fn(Buffer[char], Buffer[char], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2014 function   fn(u64) -> List[List[char]]   [ tparams: 0, inference: 0 ]
type 2015 function   fn(List[List[char]]) -> u64   [ tparams: 0, inference: 0 ]
type 2016 function   fn(List[List[char]]*) -> unit   [ tparams: 0, inference: 0 ]
type 2017 function   fn(List[List[char]], u64, List[char]) -> unit   [ tparams: 0, inference: 0 ]
type 2018 function   fn(List[List[char]]) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2019 function   fn(Buffer[List[char]]) -> BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 2020 function   fn(Buffer[List[char]], u64) -> List[char]   [ tparams: 0, inference: 0 ]
type 2021 function   fn(List[char]) -> Opt[List[char]]   [ tparams: 0, inference: 0 ]
type 2022 function   fn() -> Buffer[char]   [ tparams: 0, inference: 0 ]
type 2023 function   fn(u64) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2024 function   fn(List[enum Char(char) | String(string)]) -> u64   [ tparams: 0, inference: 0 ]
type 2025 function   fn(List[enum Char(char) | String(string)]*) -> unit   [ tparams: 0, inference: 0 ]
type 2026 function   fn(List[enum Char(char) | String(string)], u64, enum Char(char) | String(string)) -> unit   [ tparams: 0, inference: 0 ]
type 2027 function   fn(List[enum Char(char) | String(string)]) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2028 function   fn(Buffer[enum Char(char) | String(string)]) -> BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2029 function   fn(Buffer[enum Char(char) | String(string)], u64) -> enum Char(char) | String(string)   [ tparams: 0, inference: 0 ]
type 2030 function   fn(enum Char(char) | String(string)) -> Opt[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2031 function   fn(u64) -> Buffer[Arena]   [ tparams: 0, inference: 0 ]
type 2032 function   fn(List[Arena]) -> u64   [ tparams: 0, inference: 0 ]
type 2033 function   fn(List[Arena]*) -> unit   [ tparams: 0, inference: 0 ]
type 2034 function   fn(List[Arena], u64, Arena) -> unit   [ tparams: 0, inference: 0 ]
type 2035 function   fn(u64) -> Buffer[ObjectPool]   [ tparams: 0, inference: 0 ]
type 2036 function   fn(Buffer[Arena], u64) -> Arena*   [ tparams: 0, inference: 0 ]
type 2037 function   fn(u64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 2038 variant    Opt[i64*].None   [ tparams: 0, inference: 0 ]
type 2039 variant    Opt[i64*].Some(i64*)   [ tparams: 0, inference: 0 ]
type 2040 enum       Opt[i64*]   [ tparams: 0, inference: 0 ]
type 2041 function   fn(Buffer[i64]) -> Opt[i64*]   [ tparams: 0, inference: 0 ]
type 2042 function   fn(Opt[i64], Opt[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 2043 function   fn(Buffer[i64], u64) -> i64*   [ tparams: 0, inference: 0 ]
type 2044 function   fn(Buffer[i64], u64) -> Buffer[i64]   [ tparams: 0, inference: 0 ]
type 2045 function   fn(Buffer[i64], Buffer[i64], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2046 function   fn(List[string], u64) -> string   [ tparams: 0, inference: 0 ]
type 2047 function   fn(List[i64]*) -> unit   [ tparams: 0, inference: 0 ]
type 2048 function   fn(List[i64], u64, i64) -> unit   [ tparams: 0, inference: 0 ]
type 2049 function   fn(Buffer[i64]) -> BufferIterator[i64]   [ tparams: 0, inference: 0 ]
type 2050 function   fn(u64) -> Buffer[bool]   [ tparams: 0, inference: 0 ]
type 2051 function   fn({value: i64}) -> {value: i64}   [ tparams: 0, inference: 0 ]
type 2052 function   fn(u64) -> Buffer[Json]   [ tparams: 0, inference: 0 ]
type 2053 function   fn(List[Json]) -> u64   [ tparams: 0, inference: 0 ]
type 2054 function   fn(List[Json]*) -> unit   [ tparams: 0, inference: 0 ]
type 2055 function   fn(List[Json], u64, Json) -> unit   [ tparams: 0, inference: 0 ]
type 2056 function   fn(Buffer[Json], u64) -> Json   [ tparams: 0, inference: 0 ]
type 2057 function   fn(List[lambda_object(fn((env){}*) -> unit)]) -> Buffer[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2058 function   fn(Buffer[lambda_object(fn((env){}*) -> unit)]) -> BufferIterator[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2059 function   fn(Buffer[lambda_object(fn((env){}*) -> unit)], u64) -> lambda_object(fn((env){}*) -> unit)   [ tparams: 0, inference: 0 ]
type 2060 function   fn(lambda_object(fn((env){}*) -> unit)) -> Opt[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2061 function   fn(u64) -> Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2062 function   fn(List[lambda_object(fn((env){counter: i64*}*) -> unit)]) -> u64   [ tparams: 0, inference: 0 ]
type 2063 function   fn(List[lambda_object(fn((env){counter: i64*}*) -> unit)]*) -> unit   [ tparams: 0, inference: 0 ]
type 2064 function   fn(List[lambda_object(fn((env){counter: i64*}*) -> unit)], u64, lambda_object(fn((env){counter: i64*}*) -> unit)) -> unit   [ tparams: 0, inference: 0 ]
type 2065 function   fn(Opt[bool], Opt[bool]) -> bool   [ tparams: 0, inference: 0 ]
type 2066 function   fn(List[i64]) -> Opt[i64*]   [ tparams: 0, inference: 0 ]
type 2067 function   fn(u64) -> Buffer[Point]   [ tparams: 0, inference: 0 ]
type 2068 function   fn(List[Point]*) -> unit   [ tparams: 0, inference: 0 ]
type 2069 function   fn(List[Point], u64, Point) -> unit   [ tparams: 0, inference: 0 ]
type 2070 function   fn(List[i64]*) -> unit   [ tparams: 0, inference: 0 ]
type 2071 function   fn(List[{rank: i64, payload: string}]*) -> unit   [ tparams: 0, inference: 0 ]
type 2072 function   fn(List[{rank: i64, payload: string}], u64) -> {rank: i64, payload: string}   [ tparams: 0, inference: 0 ]
type 2073 function   fn(u64) -> Buffer[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2074 function   fn(List[{rank: i64, payload: string}]) -> u64   [ tparams: 0, inference: 0 ]
type 2075 function   fn(List[{rank: i64, payload: string}]*) -> unit   [ tparams: 0, inference: 0 ]
type 2076 function   fn(List[{rank: i64, payload: string}], u64, {rank: i64, payload: string}) -> unit   [ tparams: 0, inference: 0 ]
type 2077 function   fn(List[i64], u64) -> i64*   [ tparams: 0, inference: 0 ]
type 2078 function   fn(u64) -> Buffer[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 2079 function   fn(List[Opt[WeirdPoint]]) -> u64   [ tparams: 0, inference: 0 ]
type 2080 function   fn(List[Opt[WeirdPoint]]*) -> unit   [ tparams: 0, inference: 0 ]
type 2081 function   fn(List[Opt[WeirdPoint]], u64, Opt[WeirdPoint]) -> unit   [ tparams: 0, inference: 0 ]
type 2082 function   fn(Buffer[Opt[WeirdPoint]], u64) -> Opt[WeirdPoint]   [ tparams: 0, inference: 0 ]
type 2083 variant    Opt[Result[bool, string].Err(string)].None   [ tparams: 0, inference: 0 ]
type 2084 variant    Opt[Result[bool, string].Err(string)].Some(Result[bool, string].Err(string))   [ tparams: 0, inference: 0 ]
type 2085 enum       Opt[Result[bool, string].Err(string)]   [ tparams: 0, inference: 0 ]
type 2086 function   fn(Opt[Result[bool, string].Err(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 2087 function   fn(Opt[Result[bool, string].Err(string)]) -> Result[bool, string].Err(string)   [ tparams: 0, inference: 0 ]
type 2088 function   fn(Result[bool, string].Err(string)) -> Opt[Result[bool, string].Err(string)]   [ tparams: 0, inference: 0 ]
type 2089 variant    Opt[Result[bool, string].Ok(bool)].None   [ tparams: 0, inference: 0 ]
type 2090 variant    Opt[Result[bool, string].Ok(bool)].Some(Result[bool, string].Ok(bool))   [ tparams: 0, inference: 0 ]
type 2091 enum       Opt[Result[bool, string].Ok(bool)]   [ tparams: 0, inference: 0 ]
type 2092 function   fn(Opt[Result[bool, string].Ok(bool)]) -> bool   [ tparams: 0, inference: 0 ]
type 2093 function   fn(Opt[Result[bool, string].Ok(bool)]) -> Result[bool, string].Ok(bool)   [ tparams: 0, inference: 0 ]
type 2094 function   fn(Result[bool, string].Ok(bool)) -> Opt[Result[bool, string].Ok(bool)]   [ tparams: 0, inference: 0 ]
type 2095 variant    Opt[Result[i64, string].Err(string)].None   [ tparams: 0, inference: 0 ]
type 2096 variant    Opt[Result[i64, string].Err(string)].Some(Result[i64, string].Err(string))   [ tparams: 0, inference: 0 ]
type 2097 enum       Opt[Result[i64, string].Err(string)]   [ tparams: 0, inference: 0 ]
type 2098 function   fn(Opt[Result[i64, string].Err(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 2099 function   fn(Opt[Result[i64, string].Err(string)]) -> Result[i64, string].Err(string)   [ tparams: 0, inference: 0 ]
type 2100 function   fn(Result[i64, string].Err(string)) -> Opt[Result[i64, string].Err(string)]   [ tparams: 0, inference: 0 ]
type 2101 variant    Opt[Result[i64, string].Ok(i64)].None   [ tparams: 0, inference: 0 ]
type 2102 variant    Opt[Result[i64, string].Ok(i64)].Some(Result[i64, string].Ok(i64))   [ tparams: 0, inference: 0 ]
type 2103 enum       Opt[Result[i64, string].Ok(i64)]   [ tparams: 0, inference: 0 ]
type 2104 function   fn(Opt[Result[i64, string].Ok(i64)]) -> bool   [ tparams: 0, inference: 0 ]
type 2105 function   fn(Opt[Result[i64, string].Ok(i64)]) -> Result[i64, string].Ok(i64)   [ tparams: 0, inference: 0 ]
type 2106 function   fn(Result[i64, string].Ok(i64)) -> Opt[Result[i64, string].Ok(i64)]   [ tparams: 0, inference: 0 ]
type 2107 variant    Opt[Result[i32, string].Err(string)].None   [ tparams: 0, inference: 0 ]
type 2108 variant    Opt[Result[i32, string].Err(string)].Some(Result[i32, string].Err(string))   [ tparams: 0, inference: 0 ]
type 2109 enum       Opt[Result[i32, string].Err(string)]   [ tparams: 0, inference: 0 ]
type 2110 function   fn(Opt[Result[i32, string].Err(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 2111 function   fn(Opt[Result[i32, string].Err(string)]) -> Result[i32, string].Err(string)   [ tparams: 0, inference: 0 ]
type 2112 function   fn(Result[i32, string].Err(string)) -> Opt[Result[i32, string].Err(string)]   [ tparams: 0, inference: 0 ]
type 2113 variant    Opt[Result[i32, string].Ok(i32)].None   [ tparams: 0, inference: 0 ]
type 2114 variant    Opt[Result[i32, string].Ok(i32)].Some(Result[i32, string].Ok(i32))   [ tparams: 0, inference: 0 ]
type 2115 enum       Opt[Result[i32, string].Ok(i32)]   [ tparams: 0, inference: 0 ]
type 2116 function   fn(Opt[Result[i32, string].Ok(i32)]) -> bool   [ tparams: 0, inference: 0 ]
type 2117 function   fn(Opt[Result[i32, string].Ok(i32)]) -> Result[i32, string].Ok(i32)   [ tparams: 0, inference: 0 ]
type 2118 function   fn(Result[i32, string].Ok(i32)) -> Opt[Result[i32, string].Ok(i32)]   [ tparams: 0, inference: 0 ]
type 2119 function   fn(Buffer[Pointer]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2120 function   fn(Pointer, u64) -> Pointer*   [ tparams: 0, inference: 0 ]
type 2121 function   fn(Buffer[string]) -> bool   [ tparams: 0, inference: 0 ]
type 2122 function   fn(List[string]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2123 function   fn(Buffer[string], u64, string) -> unit   [ tparams: 0, inference: 0 ]
type 2124 function   fn() -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 2125 function   fn(Buffer[string], u64) -> string*   [ tparams: 0, inference: 0 ]
type 2126 function   fn(Pointer, u64) -> u8*   [ tparams: 0, inference: 0 ]
type 2127 function   fn(Buffer[char]) -> bool   [ tparams: 0, inference: 0 ]
type 2128 function   fn(List[char], u64) -> char*   [ tparams: 0, inference: 0 ]
type 2129 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2130 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2131 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2132 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2133 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2134 reference  Buffer[char]*   [ tparams: 0, inference: 0 ]
type 2135 function   fn(Buffer[u8]) -> bool   [ tparams: 0, inference: 0 ]
type 2136 function   fn(Buffer[u8], u64) -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 2137 function   fn(Buffer[u8]) -> BufferIterator[u8]   [ tparams: 0, inference: 0 ]
type 2138 function   fn(u8) -> Opt[u8]   [ tparams: 0, inference: 0 ]
type 2139 function   fn() -> Buffer[u8]   [ tparams: 0, inference: 0 ]
type 2140 function   fn(Buffer[T]) -> BufferIterator[T]   [ tparams: 2, inference: 0 ]
type 2141 function   fn(u64) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2142 function   fn(Buffer[List[char]]) -> bool   [ tparams: 0, inference: 0 ]
type 2143 function   fn(List[List[char]]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2144 function   fn(Buffer[List[char]], u64, List[char]) -> unit   [ tparams: 0, inference: 0 ]
type 2145 function   fn(Buffer[List[char]], u64, u64) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2146 function   fn(Buffer[List[char]]) -> BufferIterator[List[char]]   [ tparams: 0, inference: 0 ]
type 2147 function   fn(Buffer[List[char]], u64) -> List[char]*   [ tparams: 0, inference: 0 ]
type 2148 function   fn(Buffer[enum Char(char) | String(string)]) -> bool   [ tparams: 0, inference: 0 ]
type 2149 function   fn(List[enum Char(char) | String(string)]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2150 function   fn(Buffer[enum Char(char) | String(string)], u64, enum Char(char) | String(string)) -> unit   [ tparams: 0, inference: 0 ]
type 2151 function   fn(Buffer[enum Char(char) | String(string)], u64, u64) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2152 function   fn(Buffer[enum Char(char) | String(string)]) -> BufferIterator[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2153 function   fn(Buffer[enum Char(char) | String(string)], u64) -> enum Char(char) | String(string)*   [ tparams: 0, inference: 0 ]
type 2154 function   fn(Buffer[Arena]) -> bool   [ tparams: 0, inference: 0 ]
type 2155 function   fn(List[Arena]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2156 function   fn(Buffer[Arena], u64, Arena) -> unit   [ tparams: 0, inference: 0 ]
type 2157 function   fn(Buffer[Arena]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2158 function   fn(Pointer, u64) -> Arena*   [ tparams: 0, inference: 0 ]
type 2159 function   fn(Pointer, u64) -> i64*   [ tparams: 0, inference: 0 ]
type 2160 function   fn(Buffer[string], u64) -> string   [ tparams: 0, inference: 0 ]
type 2161 function   fn(List[i64]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2162 function   fn(Buffer[i64]) -> BufferIterator[i64]   [ tparams: 0, inference: 0 ]
type 2163 function   fn(Buffer[Json]) -> bool   [ tparams: 0, inference: 0 ]
type 2164 function   fn(List[Json]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2165 function   fn(Buffer[Json], u64, Json) -> unit   [ tparams: 0, inference: 0 ]
type 2166 function   fn(Buffer[Json], u64) -> Json*   [ tparams: 0, inference: 0 ]
type 2167 function   fn(Buffer[lambda_object(fn((env){}*) -> unit)], u64, u64) -> Buffer[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2168 function   fn(Buffer[lambda_object(fn((env){}*) -> unit)]) -> BufferIterator[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2169 function   fn(Buffer[lambda_object(fn((env){}*) -> unit)], u64) -> lambda_object(fn((env){}*) -> unit)*   [ tparams: 0, inference: 0 ]
type 2170 function   fn(Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]) -> bool   [ tparams: 0, inference: 0 ]
type 2171 function   fn(List[lambda_object(fn((env){counter: i64*}*) -> unit)]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2172 function   fn(Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], u64, lambda_object(fn((env){counter: i64*}*) -> unit)) -> unit   [ tparams: 0, inference: 0 ]
type 2173 function   fn(List[i64]) -> bool   [ tparams: 0, inference: 0 ]
type 2174 function   fn(Buffer[Point]) -> bool   [ tparams: 0, inference: 0 ]
type 2175 function   fn(List[Point]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2176 function   fn(Buffer[Point], u64, Point) -> unit   [ tparams: 0, inference: 0 ]
type 2177 function   fn(Buffer[{rank: i64, payload: string}]) -> Buffer[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2178 struct     BufferIterator[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2179 function   fn(List[{rank: i64, payload: string}]) -> BufferIterator[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2180 reference  BufferIterator[{rank: i64, payload: string}]*   [ tparams: 0, inference: 0 ]
type 2181 variant    Opt[{rank: i64, payload: string}].None   [ tparams: 0, inference: 0 ]
type 2182 variant    Opt[{rank: i64, payload: string}].Some({rank: i64, payload: string})   [ tparams: 0, inference: 0 ]
type 2183 enum       Opt[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2184 function   fn(BufferIterator[{rank: i64, payload: string}]*) -> Opt[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2185 function   fn(BufferIterator[{rank: i64, payload: string}]) -> {atLeast: u64, atMost: Opt[u64]}   [ tparams: 0, inference: 0 ]
type 2186 function   fn(BufferIterator[{rank: i64, payload: string}]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2187 function   fn(BufferIterator[{rank: i64, payload: string}]*, u64) -> Opt[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2188 function   fn(Opt[{rank: i64, payload: string}]) -> bool   [ tparams: 0, inference: 0 ]
type 2189 function   fn(Opt[{rank: i64, payload: string}]) -> {rank: i64, payload: string}   [ tparams: 0, inference: 0 ]
type 2190 function   fn({rank: i64, payload: string}) -> Opt[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2191 function   fn(Buffer[{rank: i64, payload: string}], u64) -> {rank: i64, payload: string}   [ tparams: 0, inference: 0 ]
type 2192 function   fn(Buffer[{rank: i64, payload: string}]) -> bool   [ tparams: 0, inference: 0 ]
type 2193 function   fn(List[{rank: i64, payload: string}]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2194 function   fn(Buffer[{rank: i64, payload: string}], u64, {rank: i64, payload: string}) -> unit   [ tparams: 0, inference: 0 ]
type 2195 function   fn(Buffer[Opt[WeirdPoint]]) -> bool   [ tparams: 0, inference: 0 ]
type 2196 function   fn(List[Opt[WeirdPoint]]*, u64) -> unit   [ tparams: 0, inference: 0 ]
type 2197 function   fn(Buffer[Opt[WeirdPoint]], u64, Opt[WeirdPoint]) -> unit   [ tparams: 0, inference: 0 ]
type 2198 function   fn(Buffer[Opt[WeirdPoint]], u64) -> Opt[WeirdPoint]*   [ tparams: 0, inference: 0 ]
type 2199 function   fn(Buffer[string], u64) -> Buffer[string]   [ tparams: 0, inference: 0 ]
type 2200 reference  Buffer[string]*   [ tparams: 0, inference: 0 ]
type 2201 function   fn(Buffer[string]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2202 function   fn(Pointer, u64) -> string*   [ tparams: 0, inference: 0 ]
type 2203 function   fn(Buffer[u8], Buffer[u8], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2204 function   fn(Buffer[List[char]], u64) -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2205 reference  Buffer[List[char]]*   [ tparams: 0, inference: 0 ]
type 2206 function   fn() -> Buffer[List[char]]   [ tparams: 0, inference: 0 ]
type 2207 function   fn(Buffer[List[char]]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2208 function   fn(Pointer, u64) -> List[char]*   [ tparams: 0, inference: 0 ]
type 2209 function   fn(Buffer[enum Char(char) | String(string)], u64) -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2210 reference  Buffer[enum Char(char) | String(string)]*   [ tparams: 0, inference: 0 ]
type 2211 function   fn() -> Buffer[enum Char(char) | String(string)]   [ tparams: 0, inference: 0 ]
type 2212 function   fn(Buffer[enum Char(char) | String(string)]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2213 function   fn(Pointer, u64) -> enum Char(char) | String(string)*   [ tparams: 0, inference: 0 ]
type 2214 function   fn(Buffer[Arena], u64) -> Buffer[Arena]   [ tparams: 0, inference: 0 ]
type 2215 reference  Buffer[Arena]*   [ tparams: 0, inference: 0 ]
type 2216 function   fn(Buffer[Json], u64) -> Buffer[Json]   [ tparams: 0, inference: 0 ]
type 2217 reference  Buffer[Json]*   [ tparams: 0, inference: 0 ]
type 2218 function   fn(Buffer[Json]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2219 function   fn(Pointer, u64) -> Json*   [ tparams: 0, inference: 0 ]
type 2220 function   fn() -> Buffer[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2221 function   fn(Buffer[lambda_object(fn((env){}*) -> unit)]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2222 function   fn(Pointer, u64) -> lambda_object(fn((env){}*) -> unit)*   [ tparams: 0, inference: 0 ]
type 2223 function   fn(Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], u64) -> Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2224 reference  Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]*   [ tparams: 0, inference: 0 ]
type 2225 function   fn(Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], u64) -> lambda_object(fn((env){counter: i64*}*) -> unit)*   [ tparams: 0, inference: 0 ]
type 2226 function   fn(Buffer[Point], u64) -> Buffer[Point]   [ tparams: 0, inference: 0 ]
type 2227 reference  Buffer[Point]*   [ tparams: 0, inference: 0 ]
type 2228 function   fn(Buffer[Point], u64) -> Point*   [ tparams: 0, inference: 0 ]
type 2229 function   fn(Buffer[{rank: i64, payload: string}]) -> u64   [ tparams: 0, inference: 0 ]
type 2230 function   fn(Buffer[{rank: i64, payload: string}]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2231 function   fn(List[{rank: i64, payload: string}]) -> Buffer[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2232 function   fn(Buffer[{rank: i64, payload: string}]) -> BufferIterator[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2233 function   fn({rank: i64, payload: string}) -> Opt[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2234 function   fn(Buffer[{rank: i64, payload: string}], u64) -> {rank: i64, payload: string}*   [ tparams: 0, inference: 0 ]
type 2235 function   fn(Buffer[{rank: i64, payload: string}], u64) -> Buffer[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2236 reference  Buffer[{rank: i64, payload: string}]*   [ tparams: 0, inference: 0 ]
type 2237 function   fn(Buffer[Opt[WeirdPoint]], u64) -> Buffer[Opt[WeirdPoint]]   [ tparams: 0, inference: 0 ]
type 2238 reference  Buffer[Opt[WeirdPoint]]*   [ tparams: 0, inference: 0 ]
type 2239 function   fn(Buffer[Opt[WeirdPoint]]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2240 function   fn(Pointer, u64) -> Opt[WeirdPoint]*   [ tparams: 0, inference: 0 ]
type 2241 function   fn(Buffer[string], Buffer[string], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2242 function   fn(Buffer[List[char]], Buffer[List[char]], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2243 function   fn(Buffer[enum Char(char) | String(string)], Buffer[enum Char(char) | String(string)], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2244 function   fn(Buffer[Arena], Buffer[Arena], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2245 function   fn(Buffer[Json], Buffer[Json], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2246 function   fn(u64) -> Buffer[lambda_object(fn((env){}*) -> unit)]   [ tparams: 0, inference: 0 ]
type 2247 function   fn(Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2248 function   fn(Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2249 function   fn(Pointer, u64) -> lambda_object(fn((env){counter: i64*}*) -> unit)*   [ tparams: 0, inference: 0 ]
type 2250 function   fn(Buffer[Point], Buffer[Point], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2251 function   fn(Buffer[Point]) -> Pointer   [ tparams: 0, inference: 0 ]
type 2252 function   fn(Pointer, u64) -> Point*   [ tparams: 0, inference: 0 ]
type 2253 function   fn(Buffer[{rank: i64, payload: string}], u64, u64) -> Buffer[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2254 function   fn(Buffer[{rank: i64, payload: string}]) -> BufferIterator[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
type 2255 function   fn(Pointer, u64) -> {rank: i64, payload: string}*   [ tparams: 0, inference: 0 ]
type 2256 function   fn(Buffer[{rank: i64, payload: string}], Buffer[{rank: i64, payload: string}], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2257 function   fn(Buffer[Opt[WeirdPoint]], Buffer[Opt[WeirdPoint]], u64) -> unit   [ tparams: 0, inference: 0 ]
type 2258 function   fn() -> Buffer[{rank: i64, payload: string}]   [ tparams: 0, inference: 0 ]
--- Namespaces ---
ns 00 _root
ns 01 compiler
ns 02 k1
ns 03 bool
ns 04 libc
ns 05 Pointer
ns 06 sys
ns 07 files
ns 08 unix
ns 09 char
ns 10 u8
ns 11 Buffer
ns 12 BufferIterator
ns 13 Opt
ns 14 List
ns 15 CString
ns 16 string
ns 17 types
ns 18 StringBuilder
ns 19 Bits
ns 20 Arena
ns 21 Allocator
ns 22 IntRange
ns 23 IntRangeIterator
ns 24 ability_01
ns 25 ability_constraint
ns 26 ability_constraint_fail
ns 27 ability_fail
ns 28 ability_generic
ns 29 Foob
ns 30 ability_self_call
ns 31 all_out_of_order
ns 32 allocator_test
ns 33 arith
ns 34 assign
ns 35 bits_test
ns 36 lexical_scope
ns 37 bool_test
ns 38 buffer_test
ns 39 char_test
ns 40 condcomp
ns 41 context_generic
ns 42 context_params
ns 43 control_flow
ns 44 enum_basic
ns 45 MyResult
ns 46 enum_construction
ns 47 enum_fail
ns 48 inner
ns 49 fib
ns 50 float_test
ns 51 for_yield_test
ns 52 function_pointer
ns 53 generic_struct
ns 54 Pair
ns 55 global_int
ns 56 inference
ns 57 is_patterns
ns 58 json_test
ns 59 lambdas
ns 60 lib_compiler_test
ns 61 list_test
ns 62 match_exhaust
ns 63 match_fails
ns 64 match_references
ns 65 matching_if
ns 66 never_everywhere
ns 67 ns_collision
ns 68 baz
ns 69 bazi
ns 70 bazi
ns 71 ns_extend
ns 72 foo
ns 73 Baz
ns 74 optionals
ns 75 pipe
ns 76 pointer
ns 77 range_test
ns 78 scopes
ns 79 Outer
ns 80 Foo
ns 81 Foo
ns 82 string_interp_test
ns 83 string_test
ns 84 struct_test
ns 85 Foo
ns 86 struct_anon_nomethod
ns 87 PointNamed
ns 88 PointAlias
ns 89 struct_composition
ns 90 try_test
ns 91 type_info
ns 92 opaque_type_01
ns 93 UserId
ns 94 type_order
ns 95 use_test
ns 96 foo
ns 97 while_test
ns 98 Equals
ns 99 Writer
ns 100 WriteText
ns 101 Show
ns 102 Bitwise
ns 103 Comparable
ns 104 Unwrap
ns 105 Try
ns 106 Iterator
ns 107 Iterable
ns 108 Num
ns 109 Codec
ns 110 Num
ns 111 Num
ns 112 Num
ns 113 Add
ns 114 From
ns 115 To
ns 116 Foo
ns 117 SayHello
ns 118 ToPoint
--- Functions ---
fn 00 fn equals[Self](self: Self, other: Self): bool
fn 01 fn writeChar[Self](self: Self*, value: char): unit
fn 02 fn writeByte[Self](self: Self*, value: u8): unit
fn 03 fn writeString[Self](self: Self*, value: string): unit
fn 04 fn writeBytes[Self](self: Self*, buffer: Buffer[u8]): unit
fn 05 fn Writer_W_writeChar(self: W*, value: char): unit
fn 06 fn Writer_W_writeByte(self: W*, value: u8): unit
fn 07 fn Writer_W_writeString(self: W*, value: string): unit
fn 08 fn Writer_W_writeBytes(self: W*, buffer: Buffer[u8]): unit
fn 09 fn writeText[Self, W](self: Self, w: W*): unit
fn 10 fn show[Self](self: Self): string
fn 11 fn bitNot[Self](self: Self): Self
fn 12 fn bitAnd[Self](self: Self, other: Self): Self
fn 13 fn bitOr[Self](self: Self, other: Self): Self
fn 14 fn xor[Self](self: Self, other: Self): Self
fn 15 fn shiftLeft[Self](self: Self, other: Self): Self
fn 16 fn shiftRight[Self](self: Self, other: Self): Self
fn 17 fn compare[Self](self: Self, other: Self): Ordering
fn 18 fn hasValue[Self](self: Self): bool
fn 19 fn unwrap[Self](self: Self): Inner
fn 20 fn make[Self](inner: Inner): Self
fn 21 fn makeError[Self](e: E): Self
fn 22 fn makeOk[Self](t: T): Self
fn 23 fn isOk[Self](self: Self): bool
fn 24 fn getError[Self](self: Self): E
fn 25 fn getOk[Self](self: Self): T
fn 26 fn next[Self](self: Self*): Opt[Item]
fn 27 fn sizeHint[Self](self: Self): {atLeast: u64, atMost: Opt[u64]}
fn 28 fn advanceBy[Self](self: Self*, n: u64): unit
fn 29 fn nth[Self](self: Self*, n: u64): Opt[Item]
fn 30 fn Iterator_I_next(self: I*): Opt[Item]
fn 31 fn Iterator_I_sizeHint(self: I): {atLeast: u64, atMost: Opt[u64]}
fn 32 fn Iterator_I_advanceBy(self: I*, n: u64): unit
fn 33 fn Iterator_I_nth(self: I*, n: u64): Opt[Item]
fn 34 fn iterator[Self](self: Self): I
fn 35 intern fn sizeOf[T](): u64
fn 36 intern fn sizeOfStride[T](): u64
fn 37 intern fn alignOf[T](): u64
fn 38 intern fn location(): SourceLocation
fn 39 intern fn negated(self: bool): bool
fn 40 fn Equals_bool_equals(self: bool, other: bool): bool
fn 41 fn discard[T](t: T): unit
fn 42 extern fn exit(code: i32): never
fn 43 extern fn read(fileNo: i32, buffer: Pointer, count: u64, offset: u64): i64
fn 44 extern fn write(fileNo: i32, data: Pointer, count: u64, offset: u64): u64
fn 45 extern fn memcpy(dst: Pointer, src: Pointer, count: u64): Pointer
fn 46 extern fn memset(src: Pointer, value: u32, count: u64): Pointer
fn 47 extern fn memcmp(s1: Pointer, s2: Pointer, size: u64): i32
fn 48 extern fn calloc(count: u64, size: u64): Pointer
fn 49 extern fn malloc(size: u64): Pointer
fn 50 extern fn free(ptr: Pointer): unit
fn 51 extern fn realloc(ptr: Pointer, size: u64): Pointer
fn 52 extern fn abort(): never
fn 53 fn assert(locn: SourceLocation, value: bool): unit
fn 54 fn assertdbg(locn: SourceLocation, value: bool): unit
fn 55 fn crash(locn: SourceLocation, msg: string): never
fn 56 fn Show_T_show(self: T): string
fn 57 fn Equals_T_equals(self: T, other: T): bool
fn 58 fn assertEquals[T](locn: SourceLocation, a: T, b: T): unit
fn 59 fn isNull(self: Pointer): bool
fn 60 intern fn refAtIndex[T](self: Pointer, index: u64): T*
fn 61 fn Equals_Pointer_equals(self: Pointer, other: Pointer): bool
fn 62 fn new[T](value: T): T*
fn 63 fn identity[T](value: T): T
fn 64 fn Show_T_show(self: T): string
fn 65 fn printIt[T](value: T): unit
fn 66 fn print(s: string): unit
fn 67 fn println(s: string): unit
fn 68 fn eprint(s: string): unit
fn 69 fn eprintln(s: string): unit
fn 70 extern fn _k1_show_backtrace(): unit
fn 71 fn printBacktrace(): unit
fn 72 fn exit(code: i32): never
fn 73 extern fn arc4random_uniform(upperBound: u32): u32
fn 74 fn random(upperBound: u32): u32
fn 75 fn parseMainArgs(argCount: u32, args: Pointer): Buffer[string]
fn 76 fn readLine(maxLengthBytes: u64): Result[string, string]
fn 77 extern fn fopen(pathCString: Pointer, modeCString: Pointer): Pointer
fn 78 extern fn fseek(fileDesc: Pointer, offset: u64, whence: i32): i32
fn 79 extern fn fread(buffer: Pointer, size: u64, num: u64, stream: Pointer): u64
fn 80 extern fn fclose(fileDesc: Pointer): i32
fn 81 extern fn ftell(fileDesc: Pointer): u64
fn 82 fn readToString(alloc: Allocator, path: string): string
fn 83 fn assertMsg(locn: SourceLocation, msg: string, value: bool): unit
fn 84 fn toString(self: char): string
fn 85 fn toDigitValue(self: char): Opt[u8]
fn 86 fn Writer_W_writeChar(self: W*, value: char): unit
fn 87 fn Writer_W_writeByte(self: W*, value: u8): unit
fn 88 fn Writer_W_writeString(self: W*, value: string): unit
fn 89 fn Writer_W_writeBytes(self: W*, buffer: Buffer[u8]): unit
fn 90 fn WriteText_T_writeText[W](self: T, w: W*): unit
fn 91 fn Show_T_show(self: T): string
fn 92 fn Show_bool_show(self: bool): string
fn 93 fn Show_char_show(self: char): string
fn 94 fn Show_i64_show(self: i64): string
fn 95 fn Comparable_i64_compare(self: i64, other: i64): Ordering
fn 96 fn Comparable_u64_compare(self: u64, other: u64): Ordering
fn 97 fn Comparable_u8_compare(self: u8, other: u8): Ordering
fn 98 fn toAsciiDigit(v: u8): char
fn 99 fn Writer_W_writeChar(self: W*, value: char): unit
fn 100 fn Writer_W_writeByte(self: W*, value: u8): unit
fn 101 fn Writer_W_writeString(self: W*, value: string): unit
fn 102 fn Writer_W_writeBytes(self: W*, buffer: Buffer[u8]): unit
fn 103 fn formatUInt[W](w: W*, value: u64, base: u64): unit
fn 104 fn Show_u64_show(self: u64): string
fn 105 fn Show_u32_show(self: u32): string
fn 106 fn Show_u8_show(self: u8): string
fn 107 fn Show_i32_show(self: i32): string
fn 108 fn Show_i16_show(self: i16): string
fn 109 fn Show_i8_show(self: i8): string
fn 110 fn Equals_i64_equals(self: i64, other: i64): bool
fn 111 fn Try_Result[S, F]_makeError(e: F): Result[S, F]
fn 112 fn Try_Result[S, F]_makeOk(t: S): Result[S, F]
fn 113 fn Try_Result[S, F]_isOk(self: Result[S, F]): bool
fn 114 fn Try_Result[S, F]_getError(self: Result[S, F]): F
fn 115 fn Try_Result[S, F]_getOk(self: Result[S, F]): S
fn 116 fn Unwrap_Result[S, F]_hasValue(self: Result[S, F]): bool
fn 117 fn Unwrap_Result[S, F]_unwrap(self: Result[S, F]): S
fn 118 fn Unwrap_Result[S, F]_make(inner: S): Result[S, F]
fn 119 fn bufferLenBytes[T](count: u64): u64
fn 120 fn dataPointer[T](self: Buffer[T]): Pointer
fn 121 fn fromRawParts[T](len: u64, data: Pointer): Buffer[T]
fn 122 fn fromBaseAndCount[T](len: u64, data: T*): Buffer[T]
fn 123 fn _allocate[T](count: u64): Buffer[T]
fn 124 fn _copyFrom[T](source: Buffer[T], dest: Buffer[T], count: u64): unit
fn 125 fn _enlargedClone[T](self: Buffer[T], newCount: u64): Buffer[T]
fn 126 fn lenBytes[T](self: Buffer[T]): u64
fn 127 fn empty[T](): Buffer[T]
fn 128 fn filled[T](size: u64, value: T): Buffer[T]
fn 129 fn slice[T](self: Buffer[T], start: u64, end: u64): Buffer[T]
fn 130 fn take[T](self: Buffer[T], count: u64): Buffer[T]
fn 131 fn drop[T](self: Buffer[T], count: u64): Buffer[T]
fn 132 fn getRef[T](self: Buffer[T], index: u64): T*
fn 133 fn set[T](self: Buffer[T], index: u64, elem: T): unit
fn 134 fn get[T](self: Buffer[T], index: u64): T
fn 135 fn cloned[T](self: Buffer[T]): Buffer[T]
fn 136 fn isEmpty[T](self: Buffer[T]): bool
fn 137 fn nonEmpty[T](self: Buffer[T]): bool
fn 138 fn firstRef[T](self: Buffer[T]): Opt[T*]
fn 139 fn first[T](self: Buffer[T]): Opt[T]
fn 140 fn lastRef[T](self: Buffer[T]): Opt[T*]
fn 141 fn last[T](self: Buffer[T]): Opt[T]
fn 142 fn concat[T](self: Buffer[T], other: Buffer[T]): Buffer[T]
fn 143 fn swap[T](self: Buffer[T]*, indexA: u64, indexB: u64): unit
fn 144 fn Comparable_T_compare(self: T, other: T): Ordering
fn 145 fn sorted[T](self: Buffer[T]): Buffer[T]
fn 146 fn toCharBuffer(self: Buffer[u8]): Buffer[char]
fn 147 fn toByteBuffer(self: Buffer[char]): Buffer[u8]
fn 148 fn Equals_Buffer[u8]_equals(self: Buffer[u8], other: Buffer[u8]): bool
fn 149 fn Equals_Buffer[char]_equals(self: Buffer[char], other: Buffer[char]): bool
fn 150 fn Equals_Buffer[i64]_equals(self: Buffer[i64], other: Buffer[i64]): bool
fn 151 fn fromBuffer[T](buf: Buffer[T]): BufferIterator[T]
fn 152 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 153 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 154 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 155 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 156 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 157 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 158 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 159 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 160 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 161 fn isSome[T](self: Opt[T]): bool
fn 162 fn isNone[T](self: Opt[T]): bool
fn 163 fn get[T](self: Opt[T]): T
fn 164 fn Equals_T_equals(self: T, other: T): bool
fn 165 fn opt_equals[T](a: Opt[T], b: Opt[T]): bool
fn 166 fn none[T](): Opt[T].None
fn 167 fn some[T](value: T): Opt[T].Some(T)
fn 168 fn Equals_T_equals(self: T, other: T): bool
fn 169 fn Equals_Opt[T]_equals(self: Opt[T], other: Opt[T]): bool
fn 170 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 171 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 172 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 173 fn Show_T_show(self: T): string
fn 174 fn Show_Opt[T]_show(self: Opt[T]): string
fn 175 fn empty[T](): List[T]
fn 176 fn filled[T](size: u64, value: T): List[T]
fn 177 fn withCapacity[T](cap: u64): List[T]
fn 178 fn reserve[T](self: List[T]*, count: u64): unit
fn 179 fn single[T](value: T): List[T]
fn 180 fn wrapBuffer[T](buffer: Buffer[T]): List[T]
fn 181 fn toBuffer[T](self: List[T]): Buffer[T]
fn 182 fn innerBuffer[T](self: List[T]): Buffer[T]
fn 183 fn cap[T](self: List[T]): u64
fn 184 fn getRef[T](self: List[T], index: u64): T*
fn 185 fn set[T](self: List[T], index: u64, elem: T): unit
fn 186 fn get[T](self: List[T], index: u64): T
fn 187 fn getOpt[T](self: List[T], index: u64): Opt[T]
fn 188 fn _grow[T](self: List[T]*): unit
fn 189 fn cloned[T](self: List[T]): List[T]
fn 190 fn push[T](self: List[T]*, elem: T): unit
fn 191 fn slice[T](self: List[T], start: u64, end: u64): Buffer[T]
fn 192 fn isEmpty[T](self: List[T]): bool
fn 193 fn nonEmpty[T](self: List[T]): bool
fn 194 fn firstRef[T](self: List[T]): Opt[T*]
fn 195 fn first[T](self: List[T]): Opt[T]
fn 196 fn lastRef[T](self: List[T]): Opt[T*]
fn 197 fn last[T](self: List[T]): Opt[T]
fn 198 fn reverse[T](self: List[T]*): unit
fn 199 fn reversed[T](self: List[T]): List[T]
fn 200 fn concat[T](self: List[T]*, other: List[T]): unit
fn 201 fn appendBuffer[T](self: List[T]*, other: Buffer[T]): unit
fn 202 fn swap[T](self: List[T]*, indexA: u64, indexB: u64): unit
fn 203 fn Comparable_T_compare(self: T, other: T): Ordering
fn 204 fn sort[T](input: List[T]*): unit
fn 205 fn Comparable_T_compare(self: T, other: T): Ordering
fn 206 fn sorted[T](self: List[T]): List[T]
fn 207 fn Show_T_show(self: T): string
fn 208 fn join[T](self: List[T], sep: string): string
fn 209 fn map[T, U](self: List[T], f: some_fn_779: some fn(T) -> U): List[U]
fn 210 fn flatMap[T, U](self: List[T], f: some_fn_790: some fn(T) -> List[U]): List[U]
fn 211 fn filter[T](self: List[T], f: some_fn_800: some fn(T) -> bool): List[T]
fn 212 fn Writer_List[char]_writeChar(self: List[char]*, value: char): unit
fn 213 fn Writer_List[char]_writeByte(self: List[char]*, value: u8): unit
fn 214 fn Writer_List[char]_writeString(self: List[char]*, value: string): unit
fn 215 fn Writer_List[char]_writeBytes(self: List[char]*, buffer: Buffer[u8]): unit
fn 216 fn Writer_List[u8]_writeChar(self: List[u8]*, value: char): unit
fn 217 fn Writer_List[u8]_writeByte(self: List[u8]*, value: u8): unit
fn 218 fn Writer_List[u8]_writeString(self: List[u8]*, value: string): unit
fn 219 fn Writer_List[u8]_writeBytes(self: List[u8]*, buffer: Buffer[u8]): unit
fn 220 fn Equals_List[u8]_equals(self: List[u8], other: List[u8]): bool
fn 221 fn Equals_List[i64]_equals(self: List[i64], other: List[i64]): bool
fn 222 fn Equals_T_equals(self: T, other: T): bool
fn 223 fn Equals_List[T]_equals(self: List[T], other: List[T]): bool
fn 224 fn Show_T_show(self: T): string
fn 225 fn Show_List[T]_show(self: List[T]): string
fn 226 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 227 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 228 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 229 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 230 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 231 fn get(self: string, index: u64): char
fn 232 fn innerBuffer(self: string): Buffer[char]
fn 233 fn innerBufferBytes(self: string): Buffer[u8]
fn 234 fn clone(self: string): string
fn 235 fn cloneToList(self: string): List[char]
fn 236 fn wrapList(list: List[char]): string
fn 237 fn wrapBuffer(buffer: Buffer[char]): string
fn 238 fn wrapBytes(buffer: Buffer[u8]): string
fn 239 fn fromBytes(buffer: Buffer[u8]): string
fn 240 fn fromBuffer(buffer: Buffer[char]): string
fn 241 fn len(self: string): u64
fn 242 fn isEmpty(self: string): bool
fn 243 fn nonEmpty(self: string): bool
fn 244 fn first(self: string): Opt[char]
fn 245 fn indexOf(self: string, c: char): i64
fn 246 fn concat(self: string, other: string): string
fn 247 fn appendChar(self: string, c: char): string
fn 248 fn splitByChar(self: string, delim: char): List[string]
fn 249 fn indexOfString(self: string, target: string): Opt[u64]
fn 250 fn substring(self: string, start: u64, end: u64): string
fn 251 fn take(self: string, count: u64): string
fn 252 fn drop(self: string, count: u64): string
fn 253 fn startsWith(self: string, other: string): bool
fn 254 fn toCString(self: string): Pointer
fn 255 fn fromCString(cString: Pointer): string
fn 256 fn toInt(self: string): Opt[i64]
fn 257 fn Equals_string_equals(self: string, that: string): bool
fn 258 fn Show_string_show(self: string): string
fn 259 fn Iterator_BufferIterator[char]_next(self: BufferIterator[char]*): Opt[char]
fn 260 fn Iterator_BufferIterator[char]_sizeHint(self: BufferIterator[char]): {atLeast: u64, atMost: Opt[u64]}
fn 261 fn Iterator_BufferIterator[char]_advanceBy(self: BufferIterator[char]*, n: u64): unit
fn 262 fn Iterator_BufferIterator[char]_nth(self: BufferIterator[char]*, n: u64): Opt[char]
fn 263 fn Iterable_string_iterator(self: string): BufferIterator[char]
fn 264 fn Iterable_string*_iterator(self: string*): BufferIterator[char]
fn 265 intern fn typeId[T](): u64
fn 266 fn withCapacity(cap: u64): StringBuilder
fn 267 fn new(): StringBuilder
fn 268 fn putChar(self: StringBuilder, c: char): unit
fn 269 fn putString(self: StringBuilder, s: string): unit
fn 270 fn putByte(self: StringBuilder, b: u8): unit
fn 271 fn len(self: StringBuilder): u64
fn 272 fn build(self: StringBuilder): string
fn 273 intern fn bitNot(a: i64): i64
fn 274 intern fn bitAnd(a: i64, b: i64): i64
fn 275 intern fn bitOr(a: i64, b: i64): i64
fn 276 intern fn xor(a: i64, b: i64): i64
fn 277 intern fn shiftLeft(a: i64, b: i64): i64
fn 278 intern fn shiftRight(a: i64, b: i64): i64
fn 279 intern fn Bitwise_u8_bitNot(self: u8): u8
fn 280 intern fn Bitwise_u8_bitAnd(self: u8, other: u8): u8
fn 281 intern fn Bitwise_u8_bitOr(self: u8, other: u8): u8
fn 282 intern fn Bitwise_u8_xor(self: u8, other: u8): u8
fn 283 intern fn Bitwise_u8_shiftLeft(self: u8, other: u8): u8
fn 284 intern fn Bitwise_u8_shiftRight(self: u8, other: u8): u8
fn 285 intern fn Bitwise_u16_bitNot(self: u16): u16
fn 286 intern fn Bitwise_u16_bitAnd(self: u16, other: u16): u16
fn 287 intern fn Bitwise_u16_bitOr(self: u16, other: u16): u16
fn 288 intern fn Bitwise_u16_xor(self: u16, other: u16): u16
fn 289 intern fn Bitwise_u16_shiftLeft(self: u16, other: u16): u16
fn 290 intern fn Bitwise_u16_shiftRight(self: u16, other: u16): u16
fn 291 intern fn Bitwise_u32_bitNot(self: u32): u32
fn 292 intern fn Bitwise_u32_bitAnd(self: u32, other: u32): u32
fn 293 intern fn Bitwise_u32_bitOr(self: u32, other: u32): u32
fn 294 intern fn Bitwise_u32_xor(self: u32, other: u32): u32
fn 295 intern fn Bitwise_u32_shiftLeft(self: u32, other: u32): u32
fn 296 intern fn Bitwise_u32_shiftRight(self: u32, other: u32): u32
fn 297 intern fn Bitwise_u64_bitNot(self: u64): u64
fn 298 intern fn Bitwise_u64_bitAnd(self: u64, other: u64): u64
fn 299 intern fn Bitwise_u64_bitOr(self: u64, other: u64): u64
fn 300 intern fn Bitwise_u64_xor(self: u64, other: u64): u64
fn 301 intern fn Bitwise_u64_shiftLeft(self: u64, other: u64): u64
fn 302 intern fn Bitwise_u64_shiftRight(self: u64, other: u64): u64
fn 303 intern fn Bitwise_i8_bitNot(self: i8): i8
fn 304 intern fn Bitwise_i8_bitAnd(self: i8, other: i8): i8
fn 305 intern fn Bitwise_i8_bitOr(self: i8, other: i8): i8
fn 306 intern fn Bitwise_i8_xor(self: i8, other: i8): i8
fn 307 intern fn Bitwise_i8_shiftLeft(self: i8, other: i8): i8
fn 308 intern fn Bitwise_i8_shiftRight(self: i8, other: i8): i8
fn 309 intern fn Bitwise_i16_bitNot(self: i16): i16
fn 310 intern fn Bitwise_i16_bitAnd(self: i16, other: i16): i16
fn 311 intern fn Bitwise_i16_bitOr(self: i16, other: i16): i16
fn 312 intern fn Bitwise_i16_xor(self: i16, other: i16): i16
fn 313 intern fn Bitwise_i16_shiftLeft(self: i16, other: i16): i16
fn 314 intern fn Bitwise_i16_shiftRight(self: i16, other: i16): i16
fn 315 intern fn Bitwise_i32_bitNot(self: i32): i32
fn 316 intern fn Bitwise_i32_bitAnd(self: i32, other: i32): i32
fn 317 intern fn Bitwise_i32_bitOr(self: i32, other: i32): i32
fn 318 intern fn Bitwise_i32_xor(self: i32, other: i32): i32
fn 319 intern fn Bitwise_i32_shiftLeft(self: i32, other: i32): i32
fn 320 intern fn Bitwise_i32_shiftRight(self: i32, other: i32): i32
fn 321 intern fn Bitwise_i64_bitNot(self: i64): i64
fn 322 intern fn Bitwise_i64_bitAnd(self: i64, other: i64): i64
fn 323 intern fn Bitwise_i64_bitOr(self: i64, other: i64): i64
fn 324 intern fn Bitwise_i64_xor(self: i64, other: i64): i64
fn 325 intern fn Bitwise_i64_shiftLeft(self: i64, other: i64): i64
fn 326 intern fn Bitwise_i64_shiftRight(self: i64, other: i64): i64
fn 327 fn regionSizeBytes(self: Arena): u64
fn 328 fn alignTo(baseAddress: u64, alignBytes: u64): u64
fn 329 fn new(id: string, initialMb: u64): Arena
fn 330 fn pushRaw(self: Arena*, size: u64, align: u64): Pointer
fn 331 fn push[T](self: Arena*, t: T): T*
fn 332 fn freeAll(self: Arena*): unit
fn 333 fn initDefault(): Allocator
fn 334 fn tempArena(self: Allocator): Arena*
fn 335 fn make(start: i64, end: i64): IntRange
fn 336 fn upTo(end: i64): IntRange
fn 337 fn make(range: IntRange): IntRangeIterator
fn 338 fn position(self: IntRangeIterator): i64
fn 339 fn size(self: IntRangeIterator): i64
fn 340 fn stepBy(self: IntRangeIterator*, n: u64): bool
fn 341 fn current(self: IntRangeIterator): i64
fn 342 fn Iterator_IntRangeIterator_next(self: IntRangeIterator*): Opt[i64]
fn 343 fn Iterator_IntRangeIterator_sizeHint(self: IntRangeIterator): {atLeast: u64, atMost: Opt[u64]}
fn 344 fn Iterator_IntRangeIterator_advanceBy(self: IntRangeIterator*, n: u64): unit
fn 345 fn Iterator_IntRangeIterator_nth(self: IntRangeIterator*, n: u64): Opt[i64]
fn 346 fn Iterable_IntRange_iterator(self: IntRange): IntRangeIterator
fn 347 fn num[Self](self: Self): i32
fn 348 fn Num_Point_num(self: Point): i32
fn 349 fn aConst[Self](): u8
fn 350 fn write[Self](self: Self): Buffer[u8]
fn 351 fn read[Self](buffer: Buffer[u8]): Self
fn 352 fn Codec_string_aConst(): u8
fn 353 fn Codec_string_write(self: string): Buffer[u8]
fn 354 fn Codec_string_read(buffer: Buffer[u8]): string
fn 355 fn test(): unit
fn 356 fn Num_i32_num(self: i32): i32
fn 357 fn num[Self](self: Self): i32
fn 358 fn Num_T_num(self: T): i32
fn 359 fn Show_T_show(self: T): string
fn 360 fn add[T](a: T, b: T): i32
fn 361 fn Num_i64_num(self: i64): i32
fn 362 fn test(): unit
fn 363 fn num[Self](self: Self): i32
fn 364 fn Num_T_num(self: T): i32
fn 365 fn Show_T_show(self: T): string
fn 366 fn add[T](a: T, b: T): i32
fn 367 fn test(): unit
fn 368 fn num[Self](self: Self): i32
fn 369 fn test(): unit
fn 370 fn add[Self](self: Self, rhs: Rhs): Output
fn 371 fn add[Self](self: Self, rhs: i32): Output
fn 372 fn Add_Rhs_i32_i32_add(self: i32, rhs: i32): i32
fn 373 fn add[Self](self: Self, rhs: i64): Output
fn 374 fn Add_Rhs_i64_i32_add(self: i32, rhs: i64): i64
fn 375 fn Add_Rhs_i64_i64_add(self: i64, rhs: i64): i64
fn 376 fn add[Self](self: Self, rhs: T): Output
fn 377 fn Add_Rhs_T_T_add(self: T, rhs: T): T
fn 378 fn add[Self](self: Self, rhs: GenericPoint[T]): Output
fn 379 fn Add_Rhs_GenericPoint[T]_GenericPoint[T]_add(self: GenericPoint[T], other: GenericPoint[T]): GenericPoint[T]
fn 380 fn add[Self](self: Self, rhs: T): Output
fn 381 fn Add_Rhs_T_T_add(self: T, rhs: T): T
fn 382 fn add[Self](self: Self, rhs: GenericPoint[T]): Output
fn 383 fn Add_Rhs_GenericPoint[T]_GenericPoint[T]_add(self: GenericPoint[T], other: GenericPoint[T]): GenericPoint[T]
fn 384 fn from[Self](t: F): Self
fn 385 fn to[Self](self: Self): To
fn 386 fn Show_T_show(self: T): string
fn 387 fn to[Self](self: Self): string
fn 388 fn To_To_string_T_to(self: T): string
fn 389 fn to[Self](self: Self): U
fn 390 fn To_To_U_T_to(self: T): U
fn 391 fn from[Self](t: T): Self
fn 392 fn From_F_T_U_from(t: T): U
fn 393 fn To_To_string_i32_to(self: i32): string
fn 394 fn To_To_string_i64_to(self: i64): string
fn 395 fn to[Self](self: Self): char
fn 396 fn To_To_char_u8_to(self: u8): char
fn 397 fn test(): unit
fn 398 fn a[Self](self: Self): unit
fn 399 fn b[Self](self: Self): unit
fn 400 fn Foo_string_a(self: string): unit
fn 401 fn Foo_string_b(self: string): unit
fn 402 fn test(): unit
fn 403 fn hello[Self](self: Self): MyString
fn 404 fn SayHello_Foo_hello(self: Foo): MyString
fn 405 fn SayHello_T_hello(self: T): MyString
fn 406 fn takesHelloer[T](t: T): MyString
fn 407 fn test(): unit
fn 408 fn test(): unit
fn 409 fn add_stuff(x: i64, y: i64): i64
fn 410 fn mult(x: i64, y: i64): i64
fn 411 fn test(): unit
fn 412 fn assignVar(): unit
fn 413 fn assignVarRef(): unit
fn 414 fn complexReferences(): unit
fn 415 fn test(): unit
fn 416 fn test(): unit
fn 417 fn test(): unit
fn 418 fn test(): unit
fn 419 fn bufferEmpty(): unit
fn 420 fn bufferFilled(): unit
fn 421 fn bufferGetSet(): unit
fn 422 fn bufferFirstLast(): unit
fn 423 fn bufferSlice(): unit
fn 424 fn bufferTakeDrop(): unit
fn 425 fn bufferConcat(): unit
fn 426 fn bufferSwap(): unit
fn 427 fn bufferClone(): unit
fn 428 fn test(): unit
fn 429 fn basic(): unit
fn 430 fn escape(): unit
fn 431 fn test(): unit
fn 432 fn test(): unit
fn 433 fn box[T](foo: T, value: T): MyBox[T]
fn 434 fn testBox(): unit
fn 435 fn Equals_T_equals(self: T, other: T): bool
fn 436 fn contextC[T](t: T, name: string, value: T): unit
fn 437 fn Equals_T_equals(self: T, other: T): bool
fn 438 fn contextB[T](t: T, name: string, value: T): unit
fn 439 fn Equals_T_equals(self: T, other: T): bool
fn 440 fn contextA[T](t: T, name: string, value: T): unit
fn 441 fn testGenericPassing(): unit
fn 442 fn test(): unit
fn 443 fn addTracked(hist: List[string]*, x: i64, y: i64): i64
fn 444 fn addAll(a: u8, b: u16, x: i64, y: i64): i64
fn 445 fn test(): unit
fn 446 fn ifBasic(): i64
fn 447 fn ifNoElse(): i64
fn 448 fn returnSimple(): bool
fn 449 fn rand(): bool
fn 450 fn returnFromIf(): i64
fn 451 fn loopBreak(): unit
fn 452 fn loopNested(): unit
fn 453 fn loopFalse(): unit
fn 454 fn doCrash(): bool
fn 455 fn test(): unit
fn 456 fn enumNoPayload(): unit
fn 457 fn enumPayload(): unit
fn 458 fn unwrap[T, E](self: MyResult[T, E]): T
fn 459 fn Show_T_show(self: T): string
fn 460 fn Show_E_show(self: E): string
fn 461 fn show[T, E](self: MyResult[T, E]): string
fn 462 fn genericEnum(): unit
fn 463 fn test(): unit
fn 464 fn test(): unit
fn 465 fn test(): unit
fn 466 fn fib(n: i64): i64
fn 467 fn test(): unit
fn 468 fn test(): unit
fn 469 fn forString(): i64
fn 470 fn forYield(): unit
fn 471 fn test(): unit
fn 472 fn staticAddOne(x: i64): i64
fn 473 fn staticAddTwo(x: i64): i64
fn 474 fn test(): unit
fn 475 fn t[T, U](self: Pair[T, U]): Opt[T]
fn 476 fn unboxIt[T](b: Box[Box[Box[T]]]): T
fn 477 fn test(): unit
fn 478 fn test(): unit
fn 479 fn combine[T](a: T, b: T): T
fn 480 fn combine3[T](a: T, b: T, c: {one: T, two: T}): T
fn 481 fn getOrElse[T](a: Opt[T], b: T): T
fn 482 fn some[U](value: U): Opt[U].Some(U)
fn 483 fn get[UU](value: Opt[UU]): UU
fn 484 fn identity[T](value: T): T
fn 485 fn identityNested[T](t: T): T
fn 486 fn occursCheckTest[T](x: T): T
fn 487 fn test(): unit
fn 488 fn test(): unit
fn 489 fn test(): unit
fn 490 fn staticAddOne(x: i64): i64
fn 491 fn staticAddTwo(x: i64): i64
fn 492 fn captures(): unit
fn 493 fn captureMut(): unit
fn 494 fn closureReturn(): unit
fn 495 fn simpleDyn(thunk: lambda_object(fn((env){}*) -> unit)): unit
fn 496 fn someFnParam1(i: i64, f: some_fn_1844: some fn(i64) -> i64): i64
fn 497 fn someFnParam2(i: i64, f: some_fn_1850: some fn(i64) -> i64, g: some_fn_1854: some fn(i64) -> i64): i64
fn 498 fn someFnParamGen[T](t: T, f: some_fn_1860: some fn(T) -> T, g: some_fn_1865: some fn(T) -> Opt[T]): Opt[T]
fn 499 fn runThings(thunks: List[lambda_object(fn((env){}*) -> unit)]): unit
fn 500 fn thunksTest(): unit
fn 501 fn test(): unit
fn 502 fn test(): unit
fn 503 fn listFill(): i64
fn 504 fn listSlice(): unit
fn 505 fn listOfStructs(): i64
fn 506 fn listEquality(): i64
fn 507 fn Show_{rank: i64, payload: string}_show(self: {rank: i64, payload: string}): string
fn 508 fn Comparable_{rank: i64, payload: string}_compare(self: {rank: i64, payload: string}, other: {rank: i64, payload: string}): Ordering
fn 509 fn Equals_{rank: i64, payload: string}_equals(self: {rank: i64, payload: string}, other: {rank: i64, payload: string}): bool
fn 510 fn testSortInt(input: List[i64], expected: List[i64]): unit
fn 511 fn testSortOther(input: List[{rank: i64, payload: string}], expected: List[{rank: i64, payload: string}]): unit
fn 512 fn testSort(): unit
fn 513 fn testSwap(): unit
fn 514 fn iterator(): i64
fn 515 fn test(): unit
fn 516 fn main(): i64
fn 517 fn matchBool(b: bool): unit
fn 518 fn matchTristateOpt(t: Opt[TriState]): unit
fn 519 fn failedWithBaz(t: TriState): bool
fn 520 fn matchOptBool(b: Opt[bool]): unit
fn 521 fn bothTrue(bb: {a: bool, b: bool}): bool
fn 522 fn main(): i64
fn 523 fn useless(): unit
fn 524 fn unhandled(): unit
fn 525 fn test(): unit
fn 526 fn main(): i64
fn 527 fn test(): unit
fn 528 fn callArgument(): never
fn 529 fn letRhs(): unit
fn 530 fn assgnRhs(): never
fn 531 fn binopRhs(): never
fn 532 fn unop(): never
fn 533 fn whileCond(): never
fn 534 fn enumConstrPayload(): never
fn 535 fn getEnumPayload(): i64
fn 536 fn castTarget(): i64
fn 537 fn inReturn(): never
fn 538 fn inBreak(): never
fn 539 fn test(): unit
fn 540 fn name(): string
fn 541 fn name(): string
fn 542 fn test(): unit
fn 543 fn get(self: Baz): i64
fn 544 fn get2(self: Baz): i64
fn 545 fn test(): unit
fn 546 fn testBasics(): i64
fn 547 fn testCoalesceAccessor(): unit
fn 548 fn testComplex(): i64
fn 549 fn noNum(): Opt[i64]
fn 550 fn someNum(): Opt[i64]
fn 551 fn optElseOperator(): unit
fn 552 fn blanketImpls(): unit
fn 553 fn test(): unit
fn 554 fn add(a: i64, b: i64): i64
fn 555 fn add1(a: i64): i64
fn 556 fn test(): unit
fn 557 fn test(): unit
fn 558 fn testBasicIntRangeIteration(): unit
fn 559 fn testEmptyIntRange(): unit
fn 560 fn testNegativeIntRange(): unit
fn 561 fn testUpTo(): unit
fn 562 fn testStepBy(): unit
fn 563 fn testSizeHint(): unit
fn 564 fn testNth(): unit
fn 565 fn testAdvanceBy(): unit
fn 566 fn test(): unit
fn 567 fn value(self: Foo): i64
fn 568 fn value(self: Foo): i64
fn 569 fn scopeCollision(x: i64): i64
fn 570 fn namespaceAlias(): unit
fn 571 fn test(): unit
fn 572 fn Show_{name: string, weight: i64}_show(self: {name: string, weight: i64}): string
fn 573 fn test(): unit
fn 574 fn escape(): unit
fn 575 fn test(): unit
fn 576 fn basicStruct(): i64
fn 577 fn getValue(self: Foo): i64
fn 578 fn setValue(self: Foo*, x: i64): unit
fn 579 fn new(x: i64): Foo
fn 580 fn structArgMut(): unit
fn 581 fn Equals_{a: i64}_equals(self: {a: i64}, other: {a: i64}): bool
fn 582 fn eqAnon(): unit
fn 583 fn block_area(b: Block): i64
fn 584 fn structNested(): unit
fn 585 fn test(): unit
fn 586 fn sum(self: PointNamed): i64
fn 587 fn sum(self: {x: i64, y: i64}): i64
fn 588 fn test(): unit
fn 589 fn test(): unit
fn 590 fn canFailInt(): Result[i64, string]
fn 591 fn canFailBool(): Result[bool, string]
fn 592 fn Try_Foo_makeError(e: string): Foo
fn 593 fn Try_Foo_makeOk(t: i64): Foo
fn 594 fn Try_Foo_isOk(self: Foo): bool
fn 595 fn Try_Foo_getError(self: Foo): string
fn 596 fn Try_Foo_getOk(self: Foo): i64
fn 597 fn fails(b: bool): Result[bool, string]
fn 598 fn run(): Result[i32, string]
fn 599 fn test(): unit
fn 600 fn doIt(foo: bool, bar: u32): u32
fn 601 fn testSizeOf(): unit
fn 602 fn testFnTypeInfo(): unit
fn 603 fn test(): unit
fn 604 fn make(value: i64): UserId
fn 605 fn toInt(self: UserId): i64
fn 606 fn test(): unit
fn 607 fn toPoint[Self](self: Self): {x: i64, y: i64}
fn 608 fn test(): unit
fn 609 fn getOne(): i64
fn 610 fn test(): unit
fn 611 fn whileSimple(): unit
fn 612 fn whileReturn(): i64
fn 613 fn whileNested(): i64
fn 614 fn whileReturnClosure(): i64
fn 615 fn whileBreak(): i64
fn 616 fn test(): unit
fn 617 intern fn sizeOf_spec_T_1(): u64
fn 618 fn fromRawParts_spec_Pointer_1(len: u64, data: Pointer): Buffer[Pointer]
fn 619 fn withCapacity_spec_string_1(cap: u64): List[string]
fn 620 fn Iterable_Buffer[Pointer]_iterator(self: Buffer[Pointer]): BufferIterator[Pointer]
fn 621 fn Iterator_BufferIterator[Pointer]_next(self: BufferIterator[Pointer]*): Opt[Pointer]
fn 622 fn Iterator_BufferIterator[Pointer]_sizeHint(self: BufferIterator[Pointer]): {atLeast: u64, atMost: Opt[u64]}
fn 623 fn Iterator_BufferIterator[Pointer]_advanceBy(self: BufferIterator[Pointer]*, n: u64): unit
fn 624 fn Iterator_BufferIterator[Pointer]_nth(self: BufferIterator[Pointer]*, n: u64): Opt[Pointer]
fn 625 fn Unwrap_Opt[Pointer]_hasValue(self: Opt[Pointer]): bool
fn 626 fn Unwrap_Opt[Pointer]_unwrap(self: Opt[Pointer]): Pointer
fn 627 fn Unwrap_Opt[Pointer]_make(t: Pointer): Opt[Pointer]
fn 628 fn get_spec_Pointer_1(self: Buffer[Pointer], index: u64): Pointer
fn 629 fn push_spec_string_1(self: List[string]*, elem: string): unit
fn 630 fn isSome_spec_Pointer_1(self: Opt[Pointer]): bool
fn 631 fn toBuffer_spec_string_1(self: List[string]): Buffer[string]
fn 632 fn _allocate_spec_u8_1(count: u64): Buffer[u8]
fn 633 fn get_spec_u8_2(self: Buffer[u8], index: u64): u8
fn 634 fn set_spec_u8_1(self: Buffer[u8], index: u64, elem: u8): unit
fn 635 fn fromRawParts_spec_char_2(len: u64, data: Pointer): Buffer[char]
fn 636 fn withCapacity_spec_char_2(cap: u64): List[char]
fn 637 fn push_spec_char_2(self: List[char]*, elem: char): unit
fn 638 fn reversed_spec_char_1(self: List[char]): List[char]
fn 639 fn reverse_spec_char_1(self: List[char]*): unit
fn 640 fn toBuffer_spec_char_2(self: List[char]): Buffer[char]
fn 641 fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool
fn 642 fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F)
fn 643 fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)]
fn 644 fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool
fn 645 fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S)
fn 646 fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)]
fn 647 fn Try_Result[S, F]_makeError(e: F): Result[S, F]
fn 648 fn Try_Result[S, F]_makeOk(t: S): Result[S, F]
fn 649 fn Try_Result[S, F]_isOk(self: Result[S, F]): bool
fn 650 fn Try_Result[S, F]_getError(self: Result[S, F]): F
fn 651 fn Try_Result[S, F]_getOk(self: Result[S, F]): S
fn 652 intern fn sizeOfStride_spec_T_1(): u64
fn 653 fn bufferLenBytes_spec_T_1(count: u64): u64
fn 654 fn bufferLenBytes_spec_T_2(count: u64): u64
fn 655 fn bufferLenBytes_spec_T_3(count: u64): u64
fn 656 fn dataPointer_spec_u8_1(self: Buffer[u8]): Pointer
fn 657 fn fromRawParts_spec_u8_3(len: u64, data: Pointer): Buffer[u8]
fn 658 fn dataPointer_spec_char_2(self: Buffer[char]): Pointer
fn 659 fn lenBytes_spec_u8_1(self: Buffer[u8]): u64
fn 660 fn lenBytes_spec_char_2(self: Buffer[char]): u64
fn 661 fn dataPointer_spec_i64_3(self: Buffer[i64]): Pointer
fn 662 fn lenBytes_spec_i64_3(self: Buffer[i64]): u64
fn 663 fn some_spec_u64_1(value: u64): Opt[u64]
fn 664 intern fn sizeOf_spec_T_2(): u64
fn 665 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 666 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 667 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 668 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 669 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 670 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 671 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 672 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 673 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 674 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 675 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 676 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 677 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 678 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 679 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 680 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 681 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 682 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 683 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 684 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 685 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 686 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 687 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 688 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 689 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 690 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 691 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 692 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 693 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 694 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 695 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 696 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 697 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 698 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 699 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 700 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 701 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 702 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 703 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 704 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 705 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 706 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 707 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 708 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 709 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 710 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 711 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 712 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 713 fn appendBuffer_spec_char_1(self: List[char]*, other: Buffer[char]): unit
fn 714 fn push_spec_u8_3(self: List[u8]*, elem: u8): unit
fn 715 fn appendBuffer_spec_u8_2(self: List[u8]*, other: Buffer[u8]): unit
fn 716 fn toBuffer_spec_u8_3(self: List[u8]): Buffer[u8]
fn 717 fn toBuffer_spec_i64_4(self: List[i64]): Buffer[i64]
fn 718 fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T]
fn 719 fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T]
fn 720 fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]}
fn 721 fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit
fn 722 fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T]
fn 723 fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool
fn 724 fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T
fn 725 fn Unwrap_Opt[T]_make(t: T): Opt[T]
fn 726 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 727 fn get_spec_char_3(self: Buffer[char], index: u64): char
fn 728 fn cloned_spec_char_1(self: Buffer[char]): Buffer[char]
fn 729 fn wrapBuffer_spec_char_1(buffer: Buffer[char]): List[char]
fn 730 fn cloned_spec_u8_2(self: Buffer[u8]): Buffer[u8]
fn 731 fn concat_spec_char_1(self: Buffer[char], other: Buffer[char]): Buffer[char]
fn 732 fn _enlargedClone_spec_char_1(self: Buffer[char], newCount: u64): Buffer[char]
fn 733 fn set_spec_char_2(self: Buffer[char], index: u64, elem: char): unit
fn 734 fn empty_spec_List[char]_1(): List[List[char]]
fn 735 fn empty_spec_char_2(): List[char]
fn 736 fn Unwrap_Opt[char]_hasValue(self: Opt[char]): bool
fn 737 fn Unwrap_Opt[char]_unwrap(self: Opt[char]): char
fn 738 fn Unwrap_Opt[char]_make(t: char): Opt[char]
fn 739 fn nonEmpty_spec_char_1(self: List[char]): bool
fn 740 fn push_spec_List[char]_4(self: List[List[char]]*, elem: List[char]): unit
fn 741 fn isSome_spec_char_2(self: Opt[char]): bool
fn 742 fn Iterable_List[List[char]]_iterator(self: List[List[char]]): BufferIterator[List[char]]
fn 743 fn Iterator_BufferIterator[List[char]]_next(self: BufferIterator[List[char]]*): Opt[List[char]]
fn 744 fn Iterator_BufferIterator[List[char]]_sizeHint(self: BufferIterator[List[char]]): {atLeast: u64, atMost: Opt[u64]}
fn 745 fn Iterator_BufferIterator[List[char]]_advanceBy(self: BufferIterator[List[char]]*, n: u64): unit
fn 746 fn Iterator_BufferIterator[List[char]]_nth(self: BufferIterator[List[char]]*, n: u64): Opt[List[char]]
fn 747 fn Unwrap_Opt[List[char]]_hasValue(self: Opt[List[char]]): bool
fn 748 fn Unwrap_Opt[List[char]]_unwrap(self: Opt[List[char]]): List[char]
fn 749 fn Unwrap_Opt[List[char]]_make(t: List[char]): Opt[List[char]]
fn 750 fn isSome_spec_List[char]_3(self: Opt[List[char]]): bool
fn 751 fn slice_spec_char_1(self: Buffer[char], start: u64, end: u64): Buffer[char]
fn 752 intern fn refAtIndex_spec_char_1(self: Pointer, index: u64): char*
fn 753 fn some_spec_i64_2(value: i64): Opt[i64]
fn 754 fn fromBuffer_spec_char_1(buf: Buffer[char]): BufferIterator[char]
fn 755 fn withCapacity_spec_enum Char(char) | String(string)_3(cap: u64): List[enum Char(char) | String(string)]
fn 756 fn new_spec_List[enum Char(char) | String(string)]_1(value: List[enum Char(char) | String(string)]): List[enum Char(char) | String(string)]*
fn 757 fn push_spec_enum Char(char) | String(string)_5(self: List[enum Char(char) | String(string)]*, elem: enum Char(char) | String(string)): unit
fn 758 fn Iterable_List[enum Char(char) | String(string)]_iterator(self: List[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)]
fn 759 fn Iterator_BufferIterator[enum Char(char) | String(string)]_next(self: BufferIterator[enum Char(char) | String(string)]*): Opt[enum Char(char) | String(string)]
fn 760 fn Iterator_BufferIterator[enum Char(char) | String(string)]_sizeHint(self: BufferIterator[enum Char(char) | String(string)]): {atLeast: u64, atMost: Opt[u64]}
fn 761 fn Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): unit
fn 762 fn Iterator_BufferIterator[enum Char(char) | String(string)]_nth(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): Opt[enum Char(char) | String(string)]
fn 763 fn Unwrap_Opt[enum Char(char) | String(string)]_hasValue(self: Opt[enum Char(char) | String(string)]): bool
fn 764 fn Unwrap_Opt[enum Char(char) | String(string)]_unwrap(self: Opt[enum Char(char) | String(string)]): enum Char(char) | String(string)
fn 765 fn Unwrap_Opt[enum Char(char) | String(string)]_make(t: enum Char(char) | String(string)): Opt[enum Char(char) | String(string)]
fn 766 fn isSome_spec_enum Char(char) | String(string)_4(self: Opt[enum Char(char) | String(string)]): bool
fn 767 intern fn sizeOf_spec_T_3(): u64
fn 768 intern fn alignOf_spec_T_1(): u64
fn 769 fn withCapacity_spec_Arena_4(cap: u64): List[Arena]
fn 770 fn push_spec_Arena_6(self: List[Arena]*, elem: Arena): unit
fn 771 fn withCapacity_spec_ObjectPool_5(cap: u64): List[ObjectPool]
fn 772 fn getRef_spec_Arena_1(self: List[Arena], index: u64): Arena*
fn 773 fn withCapacity_spec_u8_6(cap: u64): List[u8]
fn 774 fn add_spec_i64_1(a: i64, b: i64): i32
fn 775 fn add[Self](self: Self, rhs: GenericPoint[i32]): Output
fn 776 fn Add_Rhs_GenericPoint[i32]_GenericPoint[i32]_add(self: GenericPoint[i32], other: GenericPoint[i32]): GenericPoint[i32]
fn 777 fn from[Self](t: i32): Self
fn 778 fn From_F_i32_string_from(t: i32): string
fn 779 fn takesHelloer_spec_Foo_1(t: Foo): MyString
fn 780 fn push_spec_bool_1(self: Arena*, t: bool): bool*
fn 781 fn push_spec_{x: i64, y: i64}_2(self: Arena*, t: {x: i64, y: i64}): {x: i64, y: i64}*
fn 782 fn printIt_spec_i64_1(value: i64): unit
fn 783 fn push_spec_string_3(self: Arena*, t: string): string*
fn 784 fn printIt_spec_bool_2(value: bool): unit
fn 785 fn Unwrap_Opt[Yes(i64)*]_hasValue(self: Opt[Yes(i64)*]): bool
fn 786 fn Unwrap_Opt[Yes(i64)*]_unwrap(self: Opt[Yes(i64)*]): Yes(i64)*
fn 787 fn Unwrap_Opt[Yes(i64)*]_make(t: Yes(i64)*): Opt[Yes(i64)*]
fn 788 fn empty_spec_i64_1(): Buffer[i64]
fn 789 fn isEmpty_spec_i64_1(self: Buffer[i64]): bool
fn 790 fn nonEmpty_spec_i64_1(self: Buffer[i64]): bool
fn 791 fn first_spec_i64_1(self: Buffer[i64]): Opt[i64]
fn 792 fn Equals_Opt[i64]_equals(self: Opt[i64], other: Opt[i64]): bool
fn 793 fn last_spec_i64_1(self: Buffer[i64]): Opt[i64]
fn 794 fn filled_spec_i64_1(size: u64, value: i64): Buffer[i64]
fn 795 fn get_spec_i64_4(self: Buffer[i64], index: u64): i64
fn 796 fn set_spec_i64_3(self: Buffer[i64], index: u64, elem: i64): unit
fn 797 fn slice_spec_i64_2(self: Buffer[i64], start: u64, end: u64): Buffer[i64]
fn 798 fn take_spec_i64_1(self: Buffer[i64], count: u64): Buffer[i64]
fn 799 fn drop_spec_i64_1(self: Buffer[i64], count: u64): Buffer[i64]
fn 800 fn concat_spec_i64_2(self: Buffer[i64], other: Buffer[i64]): Buffer[i64]
fn 801 fn swap_spec_i64_1(self: Buffer[i64]*, indexA: u64, indexB: u64): unit
fn 802 fn cloned_spec_i64_3(self: Buffer[i64]): Buffer[i64]
fn 803 fn box_spec_i64_1(foo: i64, value: i64): MyBox[i64]
fn 804 fn box_spec_bool_2(foo: bool, value: bool): MyBox[bool]
fn 805 fn box_spec_{b: bool}_3(foo: {b: bool}, value: {b: bool}): MyBox[{b: bool}]
fn 806 fn contextA_spec_i64_1(t: i64, name: string, value: i64): unit
fn 807 fn new_spec_List[string]_2(value: List[string]): List[string]*
fn 808 fn Equals_List[string]_equals(self: List[string], other: List[string]): bool
fn 809 fn Unwrap_Opt[Maybe.A]_hasValue(self: Opt[Maybe.A]): bool
fn 810 fn Unwrap_Opt[Maybe.A]_unwrap(self: Opt[Maybe.A]): Maybe.A
fn 811 fn Unwrap_Opt[Maybe.A]_make(t: Maybe.A): Opt[Maybe.A]
fn 812 fn Unwrap_Opt[Maybe.B(char)]_hasValue(self: Opt[Maybe.B(char)]): bool
fn 813 fn Unwrap_Opt[Maybe.B(char)]_unwrap(self: Opt[Maybe.B(char)]): Maybe.B(char)
fn 814 fn Unwrap_Opt[Maybe.B(char)]_make(t: Maybe.B(char)): Opt[Maybe.B(char)]
fn 815 fn Unwrap_Opt[Maybe.C(string)]_hasValue(self: Opt[Maybe.C(string)]): bool
fn 816 fn Unwrap_Opt[Maybe.C(string)]_unwrap(self: Opt[Maybe.C(string)]): Maybe.C(string)
fn 817 fn Unwrap_Opt[Maybe.C(string)]_make(t: Maybe.C(string)): Opt[Maybe.C(string)]
fn 818 fn Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue(self: Opt[MyResult[T, E].Ok(T)]): bool
fn 819 fn Unwrap_Opt[MyResult[T, E].Ok(T)]_unwrap(self: Opt[MyResult[T, E].Ok(T)]): MyResult[T, E].Ok(T)
fn 820 fn Unwrap_Opt[MyResult[T, E].Ok(T)]_make(t: MyResult[T, E].Ok(T)): Opt[MyResult[T, E].Ok(T)]
fn 821 fn Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue(self: Opt[MyResult[i64, string].Ok(i64)]): bool
fn 822 fn Unwrap_Opt[MyResult[i64, string].Ok(i64)]_unwrap(self: Opt[MyResult[i64, string].Ok(i64)]): MyResult[i64, string].Ok(i64)
fn 823 fn Unwrap_Opt[MyResult[i64, string].Ok(i64)]_make(t: MyResult[i64, string].Ok(i64)): Opt[MyResult[i64, string].Ok(i64)]
fn 824 fn unwrap_spec_i64string_1(self: MyResult[i64, string]): i64
fn 825 fn show_spec_i64string_1(self: MyResult[i64, string]): string
fn 826 intern fn sizeOf_spec_MyResult[i64, string]_4(): u64
fn 827 intern fn sizeOfStride_spec_MyResult[i64, string]_2(): u64
fn 828 intern fn alignOf_spec_MyResult[i64, string]_2(): u64
fn 829 fn withCapacity_spec_i64_7(cap: u64): List[i64]
fn 830 fn push_spec_i64_7(self: List[i64]*, elem: i64): unit
fn 831 fn get_spec_i64_1(self: List[i64], index: u64): i64
fn 832 fn Iterable_List[i64]_iterator(self: List[i64]): BufferIterator[i64]
fn 833 fn Iterator_BufferIterator[i64]_next(self: BufferIterator[i64]*): Opt[i64]
fn 834 fn Iterator_BufferIterator[i64]_sizeHint(self: BufferIterator[i64]): {atLeast: u64, atMost: Opt[u64]}
fn 835 fn Iterator_BufferIterator[i64]_advanceBy(self: BufferIterator[i64]*, n: u64): unit
fn 836 fn Iterator_BufferIterator[i64]_nth(self: BufferIterator[i64]*, n: u64): Opt[i64]
fn 837 fn Unwrap_Opt[i64]_hasValue(self: Opt[i64]): bool
fn 838 fn Unwrap_Opt[i64]_unwrap(self: Opt[i64]): i64
fn 839 fn Unwrap_Opt[i64]_make(t: i64): Opt[i64]
fn 840 fn isSome_spec_i64_5(self: Opt[i64]): bool
fn 841 fn new_spec_bool_3(value: bool): bool*
fn 842 fn Unwrap_Opt[bool]_hasValue(self: Opt[bool]): bool
fn 843 fn Unwrap_Opt[bool]_unwrap(self: Opt[bool]): bool
fn 844 fn Unwrap_Opt[bool]_make(t: bool): Opt[bool]
fn 845 fn some_spec_bool_3(value: bool): Opt[bool]
fn 846 fn t_spec_i64bool_1(self: Pair[i64, bool]): Opt[i64]
fn 847 fn unboxIt_spec_i64_1(b: Box[Box[Box[i64]]]): i64
fn 848 fn identity_spec_i64_1(value: i64): i64
fn 849 fn withCapacity_spec_bool_8(cap: u64): List[bool]
fn 850 fn identity_spec_List[bool]_2(value: List[bool]): List[bool]
fn 851 fn identityNested_spec_i64_1(t: i64): i64
fn 852 fn identityNested_spec_bool_2(t: bool): bool
fn 853 fn identityNested_spec_{value: i64}_3(t: {value: i64}): {value: i64}
fn 854 fn identity_spec_bool_3(value: bool): bool
fn 855 fn some_spec_i64_1(value: i64): Opt[i64]
fn 856 fn some_spec_u32_2(value: u32): Opt[u32]
fn 857 fn get_spec_u32_1(value: Opt[u32]): u32
fn 858 fn identity_spec_u32_4(value: u32): u32
fn 859 fn combine_spec_u32_1(a: u32, b: u32): u32
fn 860 fn getOrElse_spec_i64_1(a: Opt[i64], b: i64): i64
fn 861 fn occursCheckTest_spec_i64_1(x: i64): i64
fn 862 fn combine_spec_Opt[i64]_2(a: Opt[i64], b: Opt[i64]): Opt[i64]
fn 863 fn combine_spec_Opt[u32]_3(a: Opt[u32], b: Opt[u32]): Opt[u32]
fn 864 fn combine3_spec_Opt[i64]_1(a: Opt[i64], b: Opt[i64], c: {one: Opt[i64], two: Opt[i64]}): Opt[i64]
fn 865 fn withCapacity_spec_Json_9(cap: u64): List[Json]
fn 866 fn push_spec_Json_8(self: List[Json]*, elem: Json): unit
fn 867 fn Unwrap_Opt[Json.JsArray(List[Json])]_hasValue(self: Opt[Json.JsArray(List[Json])]): bool
fn 868 fn Unwrap_Opt[Json.JsArray(List[Json])]_unwrap(self: Opt[Json.JsArray(List[Json])]): Json.JsArray(List[Json])
fn 869 fn Unwrap_Opt[Json.JsArray(List[Json])]_make(t: Json.JsArray(List[Json])): Opt[Json.JsArray(List[Json])]
fn 870 fn get_spec_Json_2(self: List[Json], index: u64): Json
fn 871 fn lambdas__captures_{lambda}_1900(__lambda_env: {}*, y: i64): i64
fn 872 fn lambdas__captures_{lambda}_1899(__lambda_env: {closedOver: i64}*, x: i64): i64
fn 873 fn assertEquals_spec_i64_1(locn: SourceLocation, a: i64, b: i64): unit
fn 874 fn lambdas__captureMut_{lambda}_1903(__lambda_env: {counter: i64*}*, x: i64): unit
fn 875 fn lambdas__closureReturn_{lambda}_1904(__lambda_env: {}*): i64
fn 876 fn lambdas__closureReturn_{lambda}_1905(__lambda_env: {}*): i64
fn 877 fn Iterable_List[lambda_object(fn((env){}*) -> unit)]_iterator(self: List[lambda_object(fn((env){}*) -> unit)]): BufferIterator[lambda_object(fn((env){}*) -> unit)]
fn 878 fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*): Opt[lambda_object(fn((env){}*) -> unit)]
fn 879 fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_sizeHint(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]): {atLeast: u64, atMost: Opt[u64]}
fn 880 fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_advanceBy(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*, n: u64): unit
fn 881 fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_nth(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*, n: u64): Opt[lambda_object(fn((env){}*) -> unit)]
fn 882 fn Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue(self: Opt[lambda_object(fn((env){}*) -> unit)]): bool
fn 883 fn Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_unwrap(self: Opt[lambda_object(fn((env){}*) -> unit)]): lambda_object(fn((env){}*) -> unit)
fn 884 fn Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_make(t: lambda_object(fn((env){}*) -> unit)): Opt[lambda_object(fn((env){}*) -> unit)]
fn 885 fn isSome_spec_lambda_object(fn((env){}*) -> unit)_6(self: Opt[lambda_object(fn((env){}*) -> unit)]): bool
fn 886 fn lambdas__thunksTest_{lambda}_1926(__lambda_env: {counter: i64*}*): unit
fn 887 fn lambdas__thunksTest_{lambda}_1927(__lambda_env: {counter: i64*}*): unit
fn 888 fn lambdas__thunksTest_{lambda}_1928(__lambda_env: {counter: i64*}*): unit
fn 889 fn withCapacity_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10(cap: u64): List[lambda_object(fn((env){counter: i64*}*) -> unit)]
fn 890 fn push_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]*, elem: lambda_object(fn((env){counter: i64*}*) -> unit)): unit
fn 891 fn someFnParam2_spec__1(i: i64, f: fn(i64) -> i64*, g: fn(i64) -> i64*): i64
fn 892 fn someFnParam1_spec__1(i: i64, f: fn(i64) -> i64*): i64
fn 893 fn staticAddOne__dyn(__lambda_env: {}*, x: i64): i64
fn 894 fn someFnParam1_spec__2(i: i64, f: lambda_object(fn((env){}*, i64) -> i64)): i64
fn 895 fn lambdas__test_{lambda}_1935(__lambda_env: {c1: {x: i64}*}*, x: i64): i64
fn 896 fn lambdas__test_{lambda}_1936(__lambda_env: {c2: i64}*, x: i64): i64
fn 897 fn lambdas__test_{lambda}_1937(__lambda_env: {c1: {x: i64}*}*, x: i64): i64
fn 898 fn lambdas__test_{lambda}_1938(__lambda_env: {c2: i64}*, x: i64): i64
fn 899 fn someFnParam2_spec__2(i: i64, f: lambda#expr#4204(fn((env){c1: {x: i64}*}*, i64) -> i64), g: lambda#expr#4210(fn((env){c2: i64}*, i64) -> i64)): i64
fn 900 fn lambdas__test_{lambda}_1940(__lambda_env: {c1: {x: i64}*}*, x: i64): i64
fn 901 fn lambdas__test_{lambda}_1941(__lambda_env: {c2: i64}*, x: i64): i64
fn 902 fn lambdas__test_{lambda}_1942(__lambda_env: {}*, b: bool): bool
fn 903 fn lambdas__test_{lambda}_1943(__lambda_env: {}*, b: bool): Opt[bool]
fn 904 fn lambdas__test_{lambda}_1944(__lambda_env: {}*, b: bool): bool
fn 905 fn lambdas__test_{lambda}_1945(__lambda_env: {}*, b: bool): Opt[bool]
fn 906 fn someFnParamGen_spec_bool_1(t: bool, f: lambda#expr#4228(fn((env){}*, bool) -> bool), g: lambda#expr#4231(fn((env){}*, bool) -> Opt[bool])): Opt[bool]
fn 907 fn lambdas__test_{lambda}_1947(__lambda_env: {}*, b: bool): bool
fn 908 fn lambdas__test_{lambda}_1948(__lambda_env: {}*, b: bool): Opt[bool]
fn 909 fn Equals_Opt[bool]_equals(self: Opt[bool], other: Opt[bool]): bool
fn 910 fn lambdas__test_{lambda}_1953(__lambda_env: {}*, x: i64): i64
fn 911 fn lambdas__test_{lambda}_1954(__lambda_env: {}*, x: i64): i64
fn 912 fn map_spec_i64i64_1(self: List[i64], f: lambda#expr#4249(fn((env){}*, i64) -> i64)): List[i64]
fn 913 fn lambdas__test_{lambda}_1957(__lambda_env: {}*, x: i64): i64
fn 914 fn lambdas__test_{lambda}_1958(__lambda_env: {}*, x: i64): bool
fn 915 fn lambdas__test_{lambda}_1959(__lambda_env: {}*, x: i64): bool
fn 916 fn filter_spec_i64_1(self: List[i64], f: lambda#expr#4256(fn((env){}*, i64) -> bool)): List[i64]
fn 917 fn lambdas__test_{lambda}_1962(__lambda_env: {}*, x: i64): i64
fn 918 fn lambdas__test_{lambda}_1963(__lambda_env: {}*, x: i64): i64
fn 919 fn lambdas__test_{lambda}_1965(__lambda_env: {}*, x: i64): i64
fn 920 fn lambdas__test_{lambda}_1966(__lambda_env: {}*, x: i64): bool
fn 921 fn lambdas__test_{lambda}_1968(__lambda_env: {}*): unit
fn 922 fn empty_spec_i64_3(): List[i64]
fn 923 fn cap_spec_i64_1(self: List[i64]): u64
fn 924 fn first_spec_i64_1(self: List[i64]): Opt[i64]
fn 925 fn last_spec_i64_1(self: List[i64]): Opt[i64]
fn 926 fn cloned_spec_i64_1(self: List[i64]): List[i64]
fn 927 fn cloned_spec_u8_2(self: List[u8]): List[u8]
fn 928 fn slice_spec_i64_1(self: List[i64], start: u64, end: u64): Buffer[i64]
fn 929 fn withCapacity_spec_Point_11(cap: u64): List[Point]
fn 930 fn push_spec_Point_10(self: List[Point]*, elem: Point): unit
fn 931 fn cap_spec_Point_2(self: List[Point]): u64
fn 932 fn sorted_spec_i64_1(self: List[i64]): List[i64]
fn 933 fn sorted_spec_{rank: i64, payload: string}_2(self: List[{rank: i64, payload: string}]): List[{rank: i64, payload: string}]
fn 934 fn Equals_List[{rank: i64, payload: string}]_equals(self: List[{rank: i64, payload: string}], other: List[{rank: i64, payload: string}]): bool
fn 935 fn withCapacity_spec_{rank: i64, payload: string}_12(cap: u64): List[{rank: i64, payload: string}]
fn 936 fn push_spec_{rank: i64, payload: string}_11(self: List[{rank: i64, payload: string}]*, elem: {rank: i64, payload: string}): unit
fn 937 fn swap_spec_i64_1(self: List[i64]*, indexA: u64, indexB: u64): unit
fn 938 fn isNone_spec_i64_1(self: Opt[i64]): bool
fn 939 fn Show_List[i64]_show(self: List[i64]): string
fn 940 fn printIt_spec_u64_3(value: u64): unit
fn 941 fn new_spec_bool**_4(value: bool**): bool***
fn 942 fn new_spec_bool*_5(value: bool*): bool**
fn 943 fn some_spec_string_4(value: string): Opt[string]
fn 944 fn some_spec_{x: Opt[i64], y: Opt[i64]}_5(value: {x: Opt[i64], y: Opt[i64]}): Opt[{x: Opt[i64], y: Opt[i64]}]
fn 945 fn none_spec_i64_1(): Opt[i64]
fn 946 fn some_spec_{point: {x: i64, y: i64}, value: Opt[string]}_6(value: {point: {x: i64, y: i64}, value: Opt[string]}): Opt[{point: {x: i64, y: i64}, value: Opt[string]}]
fn 947 fn some_spec_{value: i64}_7(value: {value: i64}): Opt[{value: i64}]
fn 948 fn some_spec_{outer: i64, inner: Opt[{value: i64}]}_8(value: {outer: i64, inner: Opt[{value: i64}]}): Opt[{outer: i64, inner: Opt[{value: i64}]}]
fn 949 fn isSome_spec_string_7(self: Opt[string]): bool
fn 950 fn Unwrap_Opt[PointMaybeY]_hasValue(self: Opt[PointMaybeY]): bool
fn 951 fn Unwrap_Opt[PointMaybeY]_unwrap(self: Opt[PointMaybeY]): PointMaybeY
fn 952 fn Unwrap_Opt[PointMaybeY]_make(t: PointMaybeY): Opt[PointMaybeY]
fn 953 fn isSome_spec_bool_8(self: Opt[bool]): bool
fn 954 intern fn typeId_spec_i64_1(): u64
fn 955 fn isSome_spec_{name: string, age: i64}_9(self: Opt[{name: string, age: i64}]): bool
fn 956 fn get_spec_{name: string, age: i64}_1(self: Opt[{name: string, age: i64}]): {name: string, age: i64}
fn 957 fn Unwrap_Opt[string]_hasValue(self: Opt[string]): bool
fn 958 fn Unwrap_Opt[string]_unwrap(self: Opt[string]): string
fn 959 fn Unwrap_Opt[string]_make(t: string): Opt[string]
fn 960 fn withCapacity_spec_Opt[WeirdPoint]_13(cap: u64): List[Opt[WeirdPoint]]
fn 961 fn push_spec_Opt[WeirdPoint]_12(self: List[Opt[WeirdPoint]]*, elem: Opt[WeirdPoint]): unit
fn 962 fn get_spec_Opt[WeirdPoint]_3(self: List[Opt[WeirdPoint]], index: u64): Opt[WeirdPoint]
fn 963 intern fn sizeOf_spec_i64_5(): u64
fn 964 fn Unwrap_Opt[u64]_hasValue(self: Opt[u64]): bool
fn 965 fn Unwrap_Opt[u64]_unwrap(self: Opt[u64]): u64
fn 966 fn Unwrap_Opt[u64]_make(t: u64): Opt[u64]
fn 967 intern fn sizeOf_spec_Text_6(): u64
fn 968 intern fn sizeOf_spec_UserView_7(): u64
fn 969 intern fn sizeOf_spec_{name: string}_8(): u64
fn 970 fn Try_Result[bool, string]_makeError(e: string): Result[bool, string]
fn 971 fn Try_Result[bool, string]_makeOk(t: bool): Result[bool, string]
fn 972 fn Try_Result[bool, string]_isOk(self: Result[bool, string]): bool
fn 973 fn Try_Result[bool, string]_getError(self: Result[bool, string]): string
fn 974 fn Try_Result[bool, string]_getOk(self: Result[bool, string]): bool
fn 975 fn Try_Result[i64, string]_makeError(e: string): Result[i64, string]
fn 976 fn Try_Result[i64, string]_makeOk(t: i64): Result[i64, string]
fn 977 fn Try_Result[i64, string]_isOk(self: Result[i64, string]): bool
fn 978 fn Try_Result[i64, string]_getError(self: Result[i64, string]): string
fn 979 fn Try_Result[i64, string]_getOk(self: Result[i64, string]): i64
fn 980 fn Try_Result[i32, string]_makeError(e: string): Result[i32, string]
fn 981 fn Try_Result[i32, string]_makeOk(t: i32): Result[i32, string]
fn 982 fn Try_Result[i32, string]_isOk(self: Result[i32, string]): bool
fn 983 fn Try_Result[i32, string]_getError(self: Result[i32, string]): string
fn 984 fn Try_Result[i32, string]_getOk(self: Result[i32, string]): i32
fn 985 fn try_test__run_{lambda}_2219(__lambda_env: {}*, b: bool): Result[bool, string]
fn 986 intern fn sizeOf_spec_string_9(): u64
fn 987 intern fn sizeOfStride_spec_string_3(): u64
fn 988 intern fn alignOf_spec_string_3(): u64
fn 989 intern fn sizeOf_spec_{x: u64, c: u8}_10(): u64
fn 990 intern fn sizeOfStride_spec_{x: u64, c: u8}_4(): u64
fn 991 intern fn typeId_spec_u32_2(): u64
fn 992 intern fn typeId_spec_bool_3(): u64
fn 993 intern fn typeId_spec_never_4(): u64
fn 994 fn while_test__whileReturnClosure_{lambda}_2248(__lambda_env: {}*): i64
fn 995 fn some_spec_char_9(value: char): Opt[char]
fn 996 fn _allocate_spec_string_2(count: u64): Buffer[string]
fn 997 fn fromBuffer_spec_Pointer_2(buf: Buffer[Pointer]): BufferIterator[Pointer]
fn 998 fn some_spec_Pointer_10(value: Pointer): Opt[Pointer]
fn 999 fn get_spec_Pointer_2(self: Opt[Pointer]): Pointer
fn 1000 fn getRef_spec_Pointer_1(self: Buffer[Pointer], index: u64): Pointer*
fn 1001 fn cap_spec_string_3(self: List[string]): u64
fn 1002 fn _grow_spec_string_1(self: List[string]*): unit
fn 1003 fn set_spec_string_1(self: List[string], index: u64, elem: string): unit
fn 1004 fn slice_spec_string_3(self: Buffer[string], start: u64, end: u64): Buffer[string]
fn 1005 fn bufferLenBytes_spec_u8_4(count: u64): u64
fn 1006 fn getRef_spec_u8_2(self: Buffer[u8], index: u64): u8*
fn 1007 fn _allocate_spec_char_3(count: u64): Buffer[char]
fn 1008 fn cap_spec_char_4(self: List[char]): u64
fn 1009 fn _grow_spec_char_2(self: List[char]*): unit
fn 1010 fn set_spec_char_2(self: List[char], index: u64, elem: char): unit
fn 1011 fn cloned_spec_char_3(self: List[char]): List[char]
fn 1012 fn swap_spec_char_2(self: List[char]*, indexA: u64, indexB: u64): unit
fn 1013 fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool
fn 1014 fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F)
fn 1015 fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)]
fn 1016 fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool
fn 1017 fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S)
fn 1018 fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)]
fn 1019 intern fn sizeOfStride_spec_T_5(): u64
fn 1020 intern fn sizeOfStride_spec_T_6(): u64
fn 1021 intern fn sizeOfStride_spec_T_7(): u64
fn 1022 fn bufferLenBytes_spec_char_5(count: u64): u64
fn 1023 fn bufferLenBytes_spec_i64_6(count: u64): u64
fn 1024 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 1025 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 1026 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 1027 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 1028 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 1029 fn reserve_spec_char_1(self: List[char]*, count: u64): unit
fn 1030 fn Iterable_Buffer[char]_iterator(self: Buffer[char]): BufferIterator[char]
fn 1031 fn cap_spec_u8_5(self: List[u8]): u64
fn 1032 fn _grow_spec_u8_3(self: List[u8]*): unit
fn 1033 fn set_spec_u8_3(self: List[u8], index: u64, elem: u8): unit
fn 1034 fn reserve_spec_u8_2(self: List[u8]*, count: u64): unit
fn 1035 fn Iterable_Buffer[u8]_iterator(self: Buffer[u8]): BufferIterator[u8]
fn 1036 fn Iterator_BufferIterator[u8]_next(self: BufferIterator[u8]*): Opt[u8]
fn 1037 fn Iterator_BufferIterator[u8]_sizeHint(self: BufferIterator[u8]): {atLeast: u64, atMost: Opt[u64]}
fn 1038 fn Iterator_BufferIterator[u8]_advanceBy(self: BufferIterator[u8]*, n: u64): unit
fn 1039 fn Iterator_BufferIterator[u8]_nth(self: BufferIterator[u8]*, n: u64): Opt[u8]
fn 1040 fn Unwrap_Opt[u8]_hasValue(self: Opt[u8]): bool
fn 1041 fn Unwrap_Opt[u8]_unwrap(self: Opt[u8]): u8
fn 1042 fn Unwrap_Opt[u8]_make(t: u8): Opt[u8]
fn 1043 fn isSome_spec_u8_10(self: Opt[u8]): bool
fn 1044 fn slice_spec_u8_4(self: Buffer[u8], start: u64, end: u64): Buffer[u8]
fn 1045 fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T]
fn 1046 fn getRef_spec_char_3(self: Buffer[char], index: u64): char*
fn 1047 fn _copyFrom_spec_char_1(source: Buffer[char], dest: Buffer[char], count: u64): unit
fn 1048 fn withCapacity_spec_List[char]_14(cap: u64): List[List[char]]
fn 1049 fn get_spec_char_3(self: Opt[char]): char
fn 1050 fn cap_spec_List[char]_6(self: List[List[char]]): u64
fn 1051 fn _grow_spec_List[char]_4(self: List[List[char]]*): unit
fn 1052 fn set_spec_List[char]_4(self: List[List[char]], index: u64, elem: List[char]): unit
fn 1053 fn toBuffer_spec_List[char]_5(self: List[List[char]]): Buffer[List[char]]
fn 1054 fn Iterable_Buffer[List[char]]_iterator(self: Buffer[List[char]]): BufferIterator[List[char]]
fn 1055 fn get_spec_List[char]_5(self: Buffer[List[char]], index: u64): List[char]
fn 1056 fn some_spec_List[char]_11(value: List[char]): Opt[List[char]]
fn 1057 fn get_spec_List[char]_4(self: Opt[List[char]]): List[char]
fn 1058 fn empty_spec_char_2(): Buffer[char]
fn 1059 fn _allocate_spec_enum Char(char) | String(string)_4(count: u64): Buffer[enum Char(char) | String(string)]
fn 1060 intern fn sizeOf_spec_List[enum Char(char) | String(string)]_11(): u64
fn 1061 fn cap_spec_enum Char(char) | String(string)_7(self: List[enum Char(char) | String(string)]): u64
fn 1062 fn _grow_spec_enum Char(char) | String(string)_5(self: List[enum Char(char) | String(string)]*): unit
fn 1063 fn set_spec_enum Char(char) | String(string)_5(self: List[enum Char(char) | String(string)], index: u64, elem: enum Char(char) | String(string)): unit
fn 1064 fn toBuffer_spec_enum Char(char) | String(string)_6(self: List[enum Char(char) | String(string)]): Buffer[enum Char(char) | String(string)]
fn 1065 fn Iterable_Buffer[enum Char(char) | String(string)]_iterator(self: Buffer[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)]
fn 1066 fn get_spec_enum Char(char) | String(string)_6(self: Buffer[enum Char(char) | String(string)], index: u64): enum Char(char) | String(string)
fn 1067 fn some_spec_enum Char(char) | String(string)_12(value: enum Char(char) | String(string)): Opt[enum Char(char) | String(string)]
fn 1068 fn get_spec_enum Char(char) | String(string)_5(self: Opt[enum Char(char) | String(string)]): enum Char(char) | String(string)
fn 1069 fn _allocate_spec_Arena_5(count: u64): Buffer[Arena]
fn 1070 fn cap_spec_Arena_8(self: List[Arena]): u64
fn 1071 fn _grow_spec_Arena_6(self: List[Arena]*): unit
fn 1072 fn set_spec_Arena_6(self: List[Arena], index: u64, elem: Arena): unit
fn 1073 fn _allocate_spec_ObjectPool_6(count: u64): Buffer[ObjectPool]
fn 1074 fn getRef_spec_Arena_4(self: Buffer[Arena], index: u64): Arena*
fn 1075 intern fn sizeOf_spec_bool_12(): u64
fn 1076 intern fn alignOf_spec_bool_4(): u64
fn 1077 intern fn sizeOf_spec_{x: i64, y: i64}_13(): u64
fn 1078 intern fn alignOf_spec_{x: i64, y: i64}_5(): u64
fn 1079 fn get_spec_Yes(i64)*_6(self: Opt[Yes(i64)*]): Yes(i64)*
fn 1080 fn _allocate_spec_i64_7(count: u64): Buffer[i64]
fn 1081 fn firstRef_spec_i64_1(self: Buffer[i64]): Opt[i64*]
fn 1082 fn opt_equals_spec_i64_1(a: Opt[i64], b: Opt[i64]): bool
fn 1083 fn lastRef_spec_i64_1(self: Buffer[i64]): Opt[i64*]
fn 1084 fn getRef_spec_i64_5(self: Buffer[i64], index: u64): i64*
fn 1085 fn _enlargedClone_spec_i64_2(self: Buffer[i64], newCount: u64): Buffer[i64]
fn 1086 fn _copyFrom_spec_i64_2(source: Buffer[i64], dest: Buffer[i64], count: u64): unit
fn 1087 fn contextB_spec_i64_1(t: i64, name: string, value: i64): unit
fn 1088 intern fn sizeOf_spec_List[string]_14(): u64
fn 1089 fn get_spec_string_4(self: List[string], index: u64): string
fn 1090 fn get_spec_Maybe.A_7(self: Opt[Maybe.A]): Maybe.A
fn 1091 fn get_spec_Maybe.B(char)_8(self: Opt[Maybe.B(char)]): Maybe.B(char)
fn 1092 fn get_spec_Maybe.C(string)_9(self: Opt[Maybe.C(string)]): Maybe.C(string)
fn 1093 fn get_spec_MyResult[i64, string].Ok(i64)_10(self: Opt[MyResult[i64, string].Ok(i64)]): MyResult[i64, string].Ok(i64)
fn 1094 fn _grow_spec_i64_7(self: List[i64]*): unit
fn 1095 fn set_spec_i64_7(self: List[i64], index: u64, elem: i64): unit
fn 1096 fn Iterable_Buffer[i64]_iterator(self: Buffer[i64]): BufferIterator[i64]
fn 1097 fn get_spec_i64_11(self: Opt[i64]): i64
fn 1098 fn get_spec_bool_12(self: Opt[bool]): bool
fn 1099 fn _allocate_spec_bool_8(count: u64): Buffer[bool]
fn 1100 fn identity_spec_{value: i64}_5(value: {value: i64}): {value: i64}
fn 1101 fn combine_spec_i64_4(a: i64, b: i64): i64
fn 1102 fn _allocate_spec_Json_9(count: u64): Buffer[Json]
fn 1103 fn cap_spec_Json_9(self: List[Json]): u64
fn 1104 fn _grow_spec_Json_8(self: List[Json]*): unit
fn 1105 fn set_spec_Json_8(self: List[Json], index: u64, elem: Json): unit
fn 1106 fn get_spec_Json.JsArray(List[Json])_13(self: Opt[Json.JsArray(List[Json])]): Json.JsArray(List[Json])
fn 1107 fn get_spec_Json_7(self: Buffer[Json], index: u64): Json
fn 1108 fn toBuffer_spec_lambda_object(fn((env){}*) -> unit)_7(self: List[lambda_object(fn((env){}*) -> unit)]): Buffer[lambda_object(fn((env){}*) -> unit)]
fn 1109 fn Iterable_Buffer[lambda_object(fn((env){}*) -> unit)]_iterator(self: Buffer[lambda_object(fn((env){}*) -> unit)]): BufferIterator[lambda_object(fn((env){}*) -> unit)]
fn 1110 fn get_spec_lambda_object(fn((env){}*) -> unit)_8(self: Buffer[lambda_object(fn((env){}*) -> unit)], index: u64): lambda_object(fn((env){}*) -> unit)
fn 1111 fn some_spec_lambda_object(fn((env){}*) -> unit)_13(value: lambda_object(fn((env){}*) -> unit)): Opt[lambda_object(fn((env){}*) -> unit)]
fn 1112 fn get_spec_lambda_object(fn((env){}*) -> unit)_14(self: Opt[lambda_object(fn((env){}*) -> unit)]): lambda_object(fn((env){}*) -> unit)
fn 1113 fn _allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10(count: u64): Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
fn 1114 fn cap_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10(self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]): u64
fn 1115 fn _grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]*): unit
fn 1116 fn set_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(self: List[lambda_object(fn((env){counter: i64*}*) -> unit)], index: u64, elem: lambda_object(fn((env){counter: i64*}*) -> unit)): unit
fn 1117 fn opt_equals_spec_bool_2(a: Opt[bool], b: Opt[bool]): bool
fn 1118 fn firstRef_spec_i64_1(self: List[i64]): Opt[i64*]
fn 1119 fn lastRef_spec_i64_1(self: List[i64]): Opt[i64*]
fn 1120 fn _allocate_spec_Point_11(count: u64): Buffer[Point]
fn 1121 fn _grow_spec_Point_10(self: List[Point]*): unit
fn 1122 fn set_spec_Point_10(self: List[Point], index: u64, elem: Point): unit
fn 1123 fn sort_spec_i64_1(input: List[i64]*): unit
fn 1124 fn cloned_spec_{rank: i64, payload: string}_4(self: List[{rank: i64, payload: string}]): List[{rank: i64, payload: string}]
fn 1125 fn sort_spec_{rank: i64, payload: string}_2(input: List[{rank: i64, payload: string}]*): unit
fn 1126 fn get_spec_{rank: i64, payload: string}_5(self: List[{rank: i64, payload: string}], index: u64): {rank: i64, payload: string}
fn 1127 fn _allocate_spec_{rank: i64, payload: string}_12(count: u64): Buffer[{rank: i64, payload: string}]
fn 1128 fn cap_spec_{rank: i64, payload: string}_11(self: List[{rank: i64, payload: string}]): u64
fn 1129 fn _grow_spec_{rank: i64, payload: string}_11(self: List[{rank: i64, payload: string}]*): unit
fn 1130 fn set_spec_{rank: i64, payload: string}_11(self: List[{rank: i64, payload: string}], index: u64, elem: {rank: i64, payload: string}): unit
fn 1131 fn getRef_spec_i64_2(self: List[i64], index: u64): i64*
fn 1132 intern fn sizeOf_spec_bool**_15(): u64
fn 1133 intern fn sizeOf_spec_bool*_16(): u64
fn 1134 fn get_spec_PointMaybeY_15(self: Opt[PointMaybeY]): PointMaybeY
fn 1135 fn get_spec_string_16(self: Opt[string]): string
fn 1136 fn _allocate_spec_Opt[WeirdPoint]_13(count: u64): Buffer[Opt[WeirdPoint]]
fn 1137 fn cap_spec_Opt[WeirdPoint]_12(self: List[Opt[WeirdPoint]]): u64
fn 1138 fn _grow_spec_Opt[WeirdPoint]_12(self: List[Opt[WeirdPoint]]*): unit
fn 1139 fn set_spec_Opt[WeirdPoint]_12(self: List[Opt[WeirdPoint]], index: u64, elem: Opt[WeirdPoint]): unit
fn 1140 fn get_spec_Opt[WeirdPoint]_9(self: Buffer[Opt[WeirdPoint]], index: u64): Opt[WeirdPoint]
fn 1141 fn get_spec_u64_17(self: Opt[u64]): u64
fn 1142 fn Unwrap_Opt[Result[bool, string].Err(string)]_hasValue(self: Opt[Result[bool, string].Err(string)]): bool
fn 1143 fn Unwrap_Opt[Result[bool, string].Err(string)]_unwrap(self: Opt[Result[bool, string].Err(string)]): Result[bool, string].Err(string)
fn 1144 fn Unwrap_Opt[Result[bool, string].Err(string)]_make(t: Result[bool, string].Err(string)): Opt[Result[bool, string].Err(string)]
fn 1145 fn Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue(self: Opt[Result[bool, string].Ok(bool)]): bool
fn 1146 fn Unwrap_Opt[Result[bool, string].Ok(bool)]_unwrap(self: Opt[Result[bool, string].Ok(bool)]): Result[bool, string].Ok(bool)
fn 1147 fn Unwrap_Opt[Result[bool, string].Ok(bool)]_make(t: Result[bool, string].Ok(bool)): Opt[Result[bool, string].Ok(bool)]
fn 1148 fn Unwrap_Opt[Result[i64, string].Err(string)]_hasValue(self: Opt[Result[i64, string].Err(string)]): bool
fn 1149 fn Unwrap_Opt[Result[i64, string].Err(string)]_unwrap(self: Opt[Result[i64, string].Err(string)]): Result[i64, string].Err(string)
fn 1150 fn Unwrap_Opt[Result[i64, string].Err(string)]_make(t: Result[i64, string].Err(string)): Opt[Result[i64, string].Err(string)]
fn 1151 fn Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue(self: Opt[Result[i64, string].Ok(i64)]): bool
fn 1152 fn Unwrap_Opt[Result[i64, string].Ok(i64)]_unwrap(self: Opt[Result[i64, string].Ok(i64)]): Result[i64, string].Ok(i64)
fn 1153 fn Unwrap_Opt[Result[i64, string].Ok(i64)]_make(t: Result[i64, string].Ok(i64)): Opt[Result[i64, string].Ok(i64)]
fn 1154 fn Unwrap_Opt[Result[i32, string].Err(string)]_hasValue(self: Opt[Result[i32, string].Err(string)]): bool
fn 1155 fn Unwrap_Opt[Result[i32, string].Err(string)]_unwrap(self: Opt[Result[i32, string].Err(string)]): Result[i32, string].Err(string)
fn 1156 fn Unwrap_Opt[Result[i32, string].Err(string)]_make(t: Result[i32, string].Err(string)): Opt[Result[i32, string].Err(string)]
fn 1157 fn Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue(self: Opt[Result[i32, string].Ok(i32)]): bool
fn 1158 fn Unwrap_Opt[Result[i32, string].Ok(i32)]_unwrap(self: Opt[Result[i32, string].Ok(i32)]): Result[i32, string].Ok(i32)
fn 1159 fn Unwrap_Opt[Result[i32, string].Ok(i32)]_make(t: Result[i32, string].Ok(i32)): Opt[Result[i32, string].Ok(i32)]
fn 1160 fn bufferLenBytes_spec_string_7(count: u64): u64
fn 1161 fn dataPointer_spec_Pointer_4(self: Buffer[Pointer]): Pointer
fn 1162 intern fn refAtIndex_spec_Pointer_2(self: Pointer, index: u64): Pointer*
fn 1163 fn isEmpty_spec_string_2(self: Buffer[string]): bool
fn 1164 fn reserve_spec_string_3(self: List[string]*, count: u64): unit
fn 1165 fn set_spec_string_4(self: Buffer[string], index: u64, elem: string): unit
fn 1166 fn empty_spec_string_3(): Buffer[string]
fn 1167 fn getRef_spec_string_6(self: Buffer[string], index: u64): string*
fn 1168 intern fn sizeOfStride_spec_u8_8(): u64
fn 1169 intern fn refAtIndex_spec_u8_3(self: Pointer, index: u64): u8*
fn 1170 intern fn sizeOf_spec_char_17(): u64
fn 1171 fn isEmpty_spec_char_3(self: Buffer[char]): bool
fn 1172 fn getRef_spec_char_3(self: List[char], index: u64): char*
fn 1173 intern fn sizeOfStride_spec_char_9(): u64
fn 1174 intern fn sizeOfStride_spec_i64_10(): u64
fn 1175 intern fn sizeOf_spec_u8_18(): u64
fn 1176 fn isEmpty_spec_u8_4(self: Buffer[u8]): bool
fn 1177 fn _enlargedClone_spec_u8_3(self: Buffer[u8], newCount: u64): Buffer[u8]
fn 1178 fn fromBuffer_spec_u8_3(buf: Buffer[u8]): BufferIterator[u8]
fn 1179 fn some_spec_u8_14(value: u8): Opt[u8]
fn 1180 fn get_spec_u8_18(self: Opt[u8]): u8
fn 1181 fn empty_spec_u8_4(): Buffer[u8]
fn 1182 fn _allocate_spec_List[char]_14(count: u64): Buffer[List[char]]
fn 1183 intern fn sizeOf_spec_List[char]_19(): u64
fn 1184 fn isEmpty_spec_List[char]_5(self: Buffer[List[char]]): bool
fn 1185 fn reserve_spec_List[char]_4(self: List[List[char]]*, count: u64): unit
fn 1186 fn set_spec_List[char]_5(self: Buffer[List[char]], index: u64, elem: List[char]): unit
fn 1187 fn slice_spec_List[char]_5(self: Buffer[List[char]], start: u64, end: u64): Buffer[List[char]]
fn 1188 fn fromBuffer_spec_List[char]_4(buf: Buffer[List[char]]): BufferIterator[List[char]]
fn 1189 fn getRef_spec_List[char]_7(self: Buffer[List[char]], index: u64): List[char]*
fn 1190 fn bufferLenBytes_spec_enum Char(char) | String(string)_8(count: u64): u64
fn 1191 intern fn sizeOf_spec_enum Char(char) | String(string)_20(): u64
fn 1192 fn isEmpty_spec_enum Char(char) | String(string)_6(self: Buffer[enum Char(char) | String(string)]): bool
fn 1193 fn reserve_spec_enum Char(char) | String(string)_5(self: List[enum Char(char) | String(string)]*, count: u64): unit
fn 1194 fn set_spec_enum Char(char) | String(string)_6(self: Buffer[enum Char(char) | String(string)], index: u64, elem: enum Char(char) | String(string)): unit
fn 1195 fn slice_spec_enum Char(char) | String(string)_6(self: Buffer[enum Char(char) | String(string)], start: u64, end: u64): Buffer[enum Char(char) | String(string)]
fn 1196 fn fromBuffer_spec_enum Char(char) | String(string)_5(buf: Buffer[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)]
fn 1197 fn getRef_spec_enum Char(char) | String(string)_8(self: Buffer[enum Char(char) | String(string)], index: u64): enum Char(char) | String(string)*
fn 1198 fn bufferLenBytes_spec_Arena_9(count: u64): u64
fn 1199 intern fn sizeOf_spec_Arena_21(): u64
fn 1200 fn isEmpty_spec_Arena_7(self: Buffer[Arena]): bool
fn 1201 fn reserve_spec_Arena_6(self: List[Arena]*, count: u64): unit
fn 1202 fn set_spec_Arena_7(self: Buffer[Arena], index: u64, elem: Arena): unit
fn 1203 fn bufferLenBytes_spec_ObjectPool_10(count: u64): u64
fn 1204 fn dataPointer_spec_Arena_5(self: Buffer[Arena]): Pointer
fn 1205 intern fn refAtIndex_spec_Arena_4(self: Pointer, index: u64): Arena*
fn 1206 intern fn refAtIndex_spec_i64_5(self: Pointer, index: u64): i64*
fn 1207 fn contextC_spec_i64_1(t: i64, name: string, value: i64): unit
fn 1208 fn get_spec_string_10(self: Buffer[string], index: u64): string
fn 1209 fn reserve_spec_i64_7(self: List[i64]*, count: u64): unit
fn 1210 fn fromBuffer_spec_i64_6(buf: Buffer[i64]): BufferIterator[i64]
fn 1211 fn bufferLenBytes_spec_bool_11(count: u64): u64
fn 1212 fn bufferLenBytes_spec_Json_12(count: u64): u64
fn 1213 intern fn sizeOf_spec_Json_22(): u64
fn 1214 fn isEmpty_spec_Json_8(self: Buffer[Json]): bool
fn 1215 fn reserve_spec_Json_8(self: List[Json]*, count: u64): unit
fn 1216 fn set_spec_Json_8(self: Buffer[Json], index: u64, elem: Json): unit
fn 1217 fn getRef_spec_Json_9(self: Buffer[Json], index: u64): Json*
fn 1218 fn slice_spec_lambda_object(fn((env){}*) -> unit)_7(self: Buffer[lambda_object(fn((env){}*) -> unit)], start: u64, end: u64): Buffer[lambda_object(fn((env){}*) -> unit)]
fn 1219 fn fromBuffer_spec_lambda_object(fn((env){}*) -> unit)_7(buf: Buffer[lambda_object(fn((env){}*) -> unit)]): BufferIterator[lambda_object(fn((env){}*) -> unit)]
fn 1220 fn getRef_spec_lambda_object(fn((env){}*) -> unit)_10(self: Buffer[lambda_object(fn((env){}*) -> unit)], index: u64): lambda_object(fn((env){}*) -> unit)*
fn 1221 fn bufferLenBytes_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_13(count: u64): u64
fn 1222 intern fn sizeOf_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_23(): u64
fn 1223 fn isEmpty_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]): bool
fn 1224 fn reserve_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]*, count: u64): unit
fn 1225 fn set_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], index: u64, elem: lambda_object(fn((env){counter: i64*}*) -> unit)): unit
fn 1226 fn nonEmpty_spec_i64_2(self: List[i64]): bool
fn 1227 fn bufferLenBytes_spec_Point_14(count: u64): u64
fn 1228 intern fn sizeOf_spec_Point_24(): u64
fn 1229 fn isEmpty_spec_Point_10(self: Buffer[Point]): bool
fn 1230 fn reserve_spec_Point_10(self: List[Point]*, count: u64): unit
fn 1231 fn set_spec_Point_10(self: Buffer[Point], index: u64, elem: Point): unit
fn 1232 fn cloned_spec_{rank: i64, payload: string}_4(self: Buffer[{rank: i64, payload: string}]): Buffer[{rank: i64, payload: string}]
fn 1233 fn Iterable_List[{rank: i64, payload: string}]_iterator(self: List[{rank: i64, payload: string}]): BufferIterator[{rank: i64, payload: string}]
fn 1234 fn Iterator_BufferIterator[{rank: i64, payload: string}]_next(self: BufferIterator[{rank: i64, payload: string}]*): Opt[{rank: i64, payload: string}]
fn 1235 fn Iterator_BufferIterator[{rank: i64, payload: string}]_sizeHint(self: BufferIterator[{rank: i64, payload: string}]): {atLeast: u64, atMost: Opt[u64]}
fn 1236 fn Iterator_BufferIterator[{rank: i64, payload: string}]_advanceBy(self: BufferIterator[{rank: i64, payload: string}]*, n: u64): unit
fn 1237 fn Iterator_BufferIterator[{rank: i64, payload: string}]_nth(self: BufferIterator[{rank: i64, payload: string}]*, n: u64): Opt[{rank: i64, payload: string}]
fn 1238 fn Unwrap_Opt[{rank: i64, payload: string}]_hasValue(self: Opt[{rank: i64, payload: string}]): bool
fn 1239 fn Unwrap_Opt[{rank: i64, payload: string}]_unwrap(self: Opt[{rank: i64, payload: string}]): {rank: i64, payload: string}
fn 1240 fn Unwrap_Opt[{rank: i64, payload: string}]_make(t: {rank: i64, payload: string}): Opt[{rank: i64, payload: string}]
fn 1241 fn isSome_spec_{rank: i64, payload: string}_11(self: Opt[{rank: i64, payload: string}]): bool
fn 1242 fn get_spec_{rank: i64, payload: string}_11(self: Buffer[{rank: i64, payload: string}], index: u64): {rank: i64, payload: string}
fn 1243 fn bufferLenBytes_spec_{rank: i64, payload: string}_15(count: u64): u64
fn 1244 intern fn sizeOf_spec_{rank: i64, payload: string}_25(): u64
fn 1245 fn isEmpty_spec_{rank: i64, payload: string}_11(self: Buffer[{rank: i64, payload: string}]): bool
fn 1246 fn reserve_spec_{rank: i64, payload: string}_11(self: List[{rank: i64, payload: string}]*, count: u64): unit
fn 1247 fn set_spec_{rank: i64, payload: string}_11(self: Buffer[{rank: i64, payload: string}], index: u64, elem: {rank: i64, payload: string}): unit
fn 1248 fn bufferLenBytes_spec_Opt[WeirdPoint]_16(count: u64): u64
fn 1249 intern fn sizeOf_spec_Opt[WeirdPoint]_26(): u64
fn 1250 fn isEmpty_spec_Opt[WeirdPoint]_12(self: Buffer[Opt[WeirdPoint]]): bool
fn 1251 fn reserve_spec_Opt[WeirdPoint]_12(self: List[Opt[WeirdPoint]]*, count: u64): unit
fn 1252 fn set_spec_Opt[WeirdPoint]_12(self: Buffer[Opt[WeirdPoint]], index: u64, elem: Opt[WeirdPoint]): unit
fn 1253 fn getRef_spec_Opt[WeirdPoint]_11(self: Buffer[Opt[WeirdPoint]], index: u64): Opt[WeirdPoint]*
fn 1254 fn get_spec_Result[bool, string].Err(string)_19(self: Opt[Result[bool, string].Err(string)]): Result[bool, string].Err(string)
fn 1255 fn get_spec_Result[bool, string].Ok(bool)_20(self: Opt[Result[bool, string].Ok(bool)]): Result[bool, string].Ok(bool)
fn 1256 fn get_spec_Result[i64, string].Err(string)_21(self: Opt[Result[i64, string].Err(string)]): Result[i64, string].Err(string)
fn 1257 fn get_spec_Result[i64, string].Ok(i64)_22(self: Opt[Result[i64, string].Ok(i64)]): Result[i64, string].Ok(i64)
fn 1258 fn get_spec_Result[i32, string].Err(string)_23(self: Opt[Result[i32, string].Err(string)]): Result[i32, string].Err(string)
fn 1259 fn get_spec_Result[i32, string].Ok(i32)_24(self: Opt[Result[i32, string].Ok(i32)]): Result[i32, string].Ok(i32)
fn 1260 fn _enlargedClone_spec_string_4(self: Buffer[string], newCount: u64): Buffer[string]
fn 1261 fn dataPointer_spec_string_6(self: Buffer[string]): Pointer
fn 1262 intern fn refAtIndex_spec_string_6(self: Pointer, index: u64): string*
fn 1263 fn _copyFrom_spec_u8_3(source: Buffer[u8], dest: Buffer[u8], count: u64): unit
fn 1264 fn bufferLenBytes_spec_List[char]_17(count: u64): u64
fn 1265 fn _enlargedClone_spec_List[char]_5(self: Buffer[List[char]], newCount: u64): Buffer[List[char]]
fn 1266 fn empty_spec_List[char]_5(): Buffer[List[char]]
fn 1267 fn dataPointer_spec_List[char]_7(self: Buffer[List[char]]): Pointer
fn 1268 intern fn refAtIndex_spec_List[char]_7(self: Pointer, index: u64): List[char]*
fn 1269 intern fn sizeOfStride_spec_enum Char(char) | String(string)_11(): u64
fn 1270 fn _enlargedClone_spec_enum Char(char) | String(string)_6(self: Buffer[enum Char(char) | String(string)], newCount: u64): Buffer[enum Char(char) | String(string)]
fn 1271 fn empty_spec_enum Char(char) | String(string)_6(): Buffer[enum Char(char) | String(string)]
fn 1272 fn dataPointer_spec_enum Char(char) | String(string)_8(self: Buffer[enum Char(char) | String(string)]): Pointer
fn 1273 intern fn refAtIndex_spec_enum Char(char) | String(string)_8(self: Pointer, index: u64): enum Char(char) | String(string)*
fn 1274 intern fn sizeOfStride_spec_Arena_12(): u64
fn 1275 fn _enlargedClone_spec_Arena_7(self: Buffer[Arena], newCount: u64): Buffer[Arena]
fn 1276 intern fn sizeOfStride_spec_ObjectPool_13(): u64
fn 1277 intern fn sizeOfStride_spec_bool_14(): u64
fn 1278 intern fn sizeOfStride_spec_Json_15(): u64
fn 1279 fn _enlargedClone_spec_Json_8(self: Buffer[Json], newCount: u64): Buffer[Json]
fn 1280 fn dataPointer_spec_Json_9(self: Buffer[Json]): Pointer
fn 1281 intern fn refAtIndex_spec_Json_9(self: Pointer, index: u64): Json*
fn 1282 fn empty_spec_lambda_object(fn((env){}*) -> unit)_7(): Buffer[lambda_object(fn((env){}*) -> unit)]
fn 1283 fn dataPointer_spec_lambda_object(fn((env){}*) -> unit)_10(self: Buffer[lambda_object(fn((env){}*) -> unit)]): Pointer
fn 1284 intern fn refAtIndex_spec_lambda_object(fn((env){}*) -> unit)_10(self: Pointer, index: u64): lambda_object(fn((env){}*) -> unit)*
fn 1285 intern fn sizeOfStride_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_16(): u64
fn 1286 fn _enlargedClone_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], newCount: u64): Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
fn 1287 fn getRef_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12(self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], index: u64): lambda_object(fn((env){counter: i64*}*) -> unit)*
fn 1288 intern fn sizeOfStride_spec_Point_17(): u64
fn 1289 fn _enlargedClone_spec_Point_10(self: Buffer[Point], newCount: u64): Buffer[Point]
fn 1290 fn getRef_spec_Point_13(self: Buffer[Point], index: u64): Point*
fn 1291 fn lenBytes_spec_{rank: i64, payload: string}_4(self: Buffer[{rank: i64, payload: string}]): u64
fn 1292 fn dataPointer_spec_{rank: i64, payload: string}_11(self: Buffer[{rank: i64, payload: string}]): Pointer
fn 1293 fn toBuffer_spec_{rank: i64, payload: string}_8(self: List[{rank: i64, payload: string}]): Buffer[{rank: i64, payload: string}]
fn 1294 fn Iterable_Buffer[{rank: i64, payload: string}]_iterator(self: Buffer[{rank: i64, payload: string}]): BufferIterator[{rank: i64, payload: string}]
fn 1295 fn some_spec_{rank: i64, payload: string}_15(value: {rank: i64, payload: string}): Opt[{rank: i64, payload: string}]
fn 1296 fn get_spec_{rank: i64, payload: string}_25(self: Opt[{rank: i64, payload: string}]): {rank: i64, payload: string}
fn 1297 fn getRef_spec_{rank: i64, payload: string}_14(self: Buffer[{rank: i64, payload: string}], index: u64): {rank: i64, payload: string}*
fn 1298 intern fn sizeOfStride_spec_{rank: i64, payload: string}_18(): u64
fn 1299 fn _enlargedClone_spec_{rank: i64, payload: string}_11(self: Buffer[{rank: i64, payload: string}], newCount: u64): Buffer[{rank: i64, payload: string}]
fn 1300 intern fn sizeOfStride_spec_Opt[WeirdPoint]_19(): u64
fn 1301 fn _enlargedClone_spec_Opt[WeirdPoint]_12(self: Buffer[Opt[WeirdPoint]], newCount: u64): Buffer[Opt[WeirdPoint]]
fn 1302 fn dataPointer_spec_Opt[WeirdPoint]_12(self: Buffer[Opt[WeirdPoint]]): Pointer
fn 1303 intern fn refAtIndex_spec_Opt[WeirdPoint]_11(self: Pointer, index: u64): Opt[WeirdPoint]*
fn 1304 fn _copyFrom_spec_string_4(source: Buffer[string], dest: Buffer[string], count: u64): unit
fn 1305 intern fn sizeOfStride_spec_List[char]_20(): u64
fn 1306 fn _copyFrom_spec_List[char]_5(source: Buffer[List[char]], dest: Buffer[List[char]], count: u64): unit
fn 1307 fn _copyFrom_spec_enum Char(char) | String(string)_6(source: Buffer[enum Char(char) | String(string)], dest: Buffer[enum Char(char) | String(string)], count: u64): unit
fn 1308 fn _copyFrom_spec_Arena_7(source: Buffer[Arena], dest: Buffer[Arena], count: u64): unit
fn 1309 fn _copyFrom_spec_Json_8(source: Buffer[Json], dest: Buffer[Json], count: u64): unit
fn 1310 fn _allocate_spec_lambda_object(fn((env){}*) -> unit)_15(count: u64): Buffer[lambda_object(fn((env){}*) -> unit)]
fn 1311 fn _copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9(source: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], dest: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)], count: u64): unit
fn 1312 fn dataPointer_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_13(self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]): Pointer
fn 1313 intern fn refAtIndex_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12(self: Pointer, index: u64): lambda_object(fn((env){counter: i64*}*) -> unit)*
fn 1314 fn _copyFrom_spec_Point_10(source: Buffer[Point], dest: Buffer[Point], count: u64): unit
fn 1315 fn dataPointer_spec_Point_14(self: Buffer[Point]): Pointer
fn 1316 intern fn refAtIndex_spec_Point_13(self: Pointer, index: u64): Point*
fn 1317 fn slice_spec_{rank: i64, payload: string}_8(self: Buffer[{rank: i64, payload: string}], start: u64, end: u64): Buffer[{rank: i64, payload: string}]
fn 1318 fn fromBuffer_spec_{rank: i64, payload: string}_8(buf: Buffer[{rank: i64, payload: string}]): BufferIterator[{rank: i64, payload: string}]
fn 1319 intern fn refAtIndex_spec_{rank: i64, payload: string}_14(self: Pointer, index: u64): {rank: i64, payload: string}*
fn 1320 fn _copyFrom_spec_{rank: i64, payload: string}_11(source: Buffer[{rank: i64, payload: string}], dest: Buffer[{rank: i64, payload: string}], count: u64): unit
fn 1321 fn _copyFrom_spec_Opt[WeirdPoint]_12(source: Buffer[Opt[WeirdPoint]], dest: Buffer[Opt[WeirdPoint]], count: u64): unit
fn 1322 fn bufferLenBytes_spec_lambda_object(fn((env){}*) -> unit)_18(count: u64): u64
fn 1323 fn empty_spec_{rank: i64, payload: string}_8(): Buffer[{rank: i64, payload: string}]
fn 1324 intern fn sizeOfStride_spec_lambda_object(fn((env){}*) -> unit)_21(): u64
--- Ability Impls ---
impls for Opt[Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)](enum None | Some(Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)))
	derived    Unwrap[impl Inner := Result[i32, string].Ok(i32)] for Opt[Result[i32, string].Ok(i32)] {
		fn Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue(self: Opt[Result[i32, string].Ok(i32)]): bool return(switch let __match_subject_2940: Opt[Result[i32, string].Ok(i32)] = self;  {
  let __payload_Some_2941: Result[i32, string].Ok(i32) = __match_subject_2940.payload[Some]  Some(_)(__match_subject_2940.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[i32, string].Ok(i32)]_unwrap(self: Opt[Result[i32, string].Ok(i32)]): Result[i32, string].Ok(i32) return(get_spec_Result[i32, string].Ok(i32)_24(self))
		fn Unwrap_Opt[Result[i32, string].Ok(i32)]_make(t: Result[i32, string].Ok(i32)): Opt[Result[i32, string].Ok(i32)] return(.Some(t))

impls for Opt[Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)](enum None | Some(Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)))
	derived    Unwrap[impl Inner := Result[i64, string].Ok(i64)] for Opt[Result[i64, string].Ok(i64)] {
		fn Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue(self: Opt[Result[i64, string].Ok(i64)]): bool return(switch let __match_subject_2934: Opt[Result[i64, string].Ok(i64)] = self;  {
  let __payload_Some_2935: Result[i64, string].Ok(i64) = __match_subject_2934.payload[Some]  Some(_)(__match_subject_2934.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[i64, string].Ok(i64)]_unwrap(self: Opt[Result[i64, string].Ok(i64)]): Result[i64, string].Ok(i64) return(get_spec_Result[i64, string].Ok(i64)_22(self))
		fn Unwrap_Opt[Result[i64, string].Ok(i64)]_make(t: Result[i64, string].Ok(i64)): Opt[Result[i64, string].Ok(i64)] return(.Some(t))

impls for Show_impl_T.'T
	constraint WriteText for T {
		fn WriteText_T_writeText[W](self: T, w: W*): unit {no_block}

	blanket    Show for T {
		fn Show_T_show(self: T): string {
  let* buf: List[char]* = withCapacity_spec_char_2(8u64);
  WriteText_T_writeText();
  return(wrapList(buf.*))
}: string

impls for Opt[Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)](enum None | Some(Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)))
	derived    Unwrap[impl Inner := Result[bool, string].Ok(bool)] for Opt[Result[bool, string].Ok(bool)] {
		fn Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue(self: Opt[Result[bool, string].Ok(bool)]): bool return(switch let __match_subject_2928: Opt[Result[bool, string].Ok(bool)] = self;  {
  let __payload_Some_2929: Result[bool, string].Ok(bool) = __match_subject_2928.payload[Some]  Some(_)(__match_subject_2928.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[bool, string].Ok(bool)]_unwrap(self: Opt[Result[bool, string].Ok(bool)]): Result[bool, string].Ok(bool) return(get_spec_Result[bool, string].Ok(bool)_20(self))
		fn Unwrap_Opt[Result[bool, string].Ok(bool)]_make(t: Result[bool, string].Ok(bool)): Opt[Result[bool, string].Ok(bool)] return(.Some(t))

impls for Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)))
	derived    Unwrap[impl Inner := Result[S, F].Err(F)] for Opt[Result[S, F].Err(F)] {
		fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool return(switch let __match_subject_2618: Opt[Result[S, F].Err(F)] = self;  {
  let __payload_Some_2619: Result[S, F].Err(F) = __match_subject_2618.payload[Some]  Some(_)(__match_subject_2618.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F) return(get())
		fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)] return(.Some(t))

impls for Equals_impl_Opt[T].'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for List[Show_impl_List[T].'T]({len: u64, buffer: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})})
	blanket    Show for List[T] {
		fn Show_List[T]_show(self: List[T]): string {
  let b: StringBuilder = new();
  putChar(b, '91');
  {
    let mut itIndex: u64 = 0u64;
    let* __iter_1032: BufferIterator[T]* = Iterable_List[T]_iterator(self);
    loop {
      let __next_1039: Opt[T] = Iterator_BufferIterator[T]_next(__iter_1032);
      if isSome() {
        let s: T = Unwrap_Opt[T]_unwrap(__next_1039);
        let __block_expr_val_1045: unit = {
          putString(b, Show_T_show(s));
          let last: bool = itIndex == self.len - 1u64;
          switch  {
            (negated(last)) -> putString(b, ","),
            (true) -> ()
          }
        }: unit
      }: unit else break(());
      itIndex = itIndex + 1u64
    }: unit
  }: unit;
  putChar(b, '93');
  return(build(b))
}: string

	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer()))

impls for List[i64]({len: u64, buffer: Buffer[i64]({len: u64, data: i64*})})
	concrete   Equals for List[i64] {
		fn Equals_List[i64]_equals(self: List[i64], other: List[i64]): bool return(Equals_Buffer[i64]_equals(toBuffer_spec_i64_4(self), toBuffer_spec_i64_4(other)))

	derived    Iterable[impl Item := i64I := BufferIterator[i64]] for List[i64] {
		fn Iterable_List[i64]_iterator(self: List[i64]): BufferIterator[i64] return(Iterable_Buffer[i64]_iterator(toBuffer_spec_i64_4(self)))

	derived    Show for List[i64] {
		fn Show_List[i64]_show(self: List[i64]): string {
  let b: StringBuilder = new();
  putChar(b, '91');
  {
    let mut itIndex: u64 = 0u64;
    let* __iter_2518: BufferIterator[i64]* = Iterable_List[i64]_iterator(self);
    loop {
      let __next_2519: Opt[i64] = Iterator_BufferIterator[i64]_next(__iter_2518);
      if isSome_spec_i64_5(__next_2519) {
        let s: i64 = Unwrap_Opt[i64]_unwrap(__next_2519);
        let __block_expr_val_2522: unit = {
          putString(b, Show_i64_show(s));
          let last: bool = itIndex == self.len - 1u64;
          switch  {
            (negated(last)) -> putString(b, ","),
            (true) -> ()
          }
        }: unit
      }: unit else break(());
      itIndex = itIndex + 1u64
    }: unit
  }: unit;
  putChar(b, '93');
  return(build(b))
}: string

impls for BufferIterator[List.map.'T]({buf: Buffer[List.map.'T]({len: u64, data: List.map.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for i32
	concrete   Show for i32 {
		fn Show_i32_show(self: i32): string return(Show_i64_show(self as(iext) i64))

	concrete   Bitwise for i32 {
		intern fn Bitwise_i32_bitNot(self: i32): i32 {no_block}
		intern fn Bitwise_i32_bitAnd(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_bitOr(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_xor(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_shiftLeft(self: i32, other: i32): i32 {no_block}
		intern fn Bitwise_i32_shiftRight(self: i32, other: i32): i32 {no_block}

	concrete   Num for i32 {
		fn Num_i32_num(self: i32): i32 return(self)

	concrete   Add_Rhs_i32[impl Output := i32] for i32 {
		fn Add_Rhs_i32_i32_add(self: i32, rhs: i32): i32 return(self + rhs)

	concrete   Add_Rhs_i64[impl Output := i64] for i32 {
		fn Add_Rhs_i64_i32_add(self: i32, rhs: i64): i64 return(self as(iext) i64 + rhs)

	concrete   To_To_string for i32 {
		fn To_To_string_i32_to(self: i32): string return(Show_i32_show(self))

impls for Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*})
	derived    Iterable[impl Item := lambda_object(fn((env){}*) -> unit)I := BufferIterator[lambda_object(fn((env){}*) -> unit)]] for Buffer[lambda_object(fn((env){}*) -> unit)] {
		fn Iterable_Buffer[lambda_object(fn((env){}*) -> unit)]_iterator(self: Buffer[lambda_object(fn((env){}*) -> unit)]): BufferIterator[lambda_object(fn((env){}*) -> unit)] return(fromBuffer_spec_lambda_object(fn((env){}*) -> unit)_7(self))

impls for GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	blanket    Add_Rhs_GenericPoint[T][impl Output := GenericPoint[T]] for GenericPoint[T] {
		fn Add_Rhs_GenericPoint[T]_GenericPoint[T]_add(self: GenericPoint[T], other: GenericPoint[T]): GenericPoint[T] {
  let newX: T = Add_Rhs_T_T_add(self.x, other.x);
  let newY: T = Add_Rhs_T_T_add(self.y, other.y);
  return({
    x: newX,
    y: newY
  })
}: GenericPoint[T]

impls for Opt[Show_impl_Opt[T].'T](enum None | Some(Show_impl_Opt[T].'T))
	blanket    Show for Opt[T] {
		fn Show_Opt[T]_show(self: Opt[T]): string return(switch  {
  let __if_target_878: Opt[T] = self
  let __payload_Some_879: T = __if_target_878.payload[Some]  (__if_target_878.is[.Some]())  let v: T = __payload_Some_879 -> {
  let __sb_881: StringBuilder = withCapacity(3u64);
  putString(__sb_881, "Some(");
  putString(__sb_881, Show_T_show(v));
  putString(__sb_881, ")");
  build(__sb_881)
}: string,
  (true) -> "None"
})

impls for Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(bool) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))
	derived    Try[impl T := boolE := string] for Result[bool, string] {
		fn Try_Result[bool, string]_makeError(e: string): Result[bool, string] return(.Err(e))
		fn Try_Result[bool, string]_makeOk(t: bool): Result[bool, string] return(.Ok(t))
		fn Try_Result[bool, string]_isOk(self: Result[bool, string]): bool return(switch let __match_subject_2556: Result[bool, string] = self;  {
  let __payload_Ok_2557: bool = __match_subject_2556.payload[Ok]  Ok(_)(__match_subject_2556.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 309u64
}, "Match Error")
})
		fn Try_Result[bool, string]_getError(self: Result[bool, string]): string return(Unwrap_Opt[Result[bool, string].Err(string)]_unwrap(if self.is[.Err]() .Some(self as(noop) Result[bool, string].Err(string)) else .None).payload[Err])
		fn Try_Result[bool, string]_getOk(self: Result[bool, string]): bool return(Unwrap_Opt[Result[bool, string].Ok(bool)]_unwrap(if self.is[.Ok]() .Some(self as(noop) Result[bool, string].Ok(bool)) else .None).payload[Ok])

impls for BufferIterator[Iterator_impl_BufferIterator[T].'T]({buf: Buffer[Iterator_impl_BufferIterator[T].'T]({len: u64, data: Iterator_impl_BufferIterator[T].'T*}), pos: u64})
	blanket    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for List.join.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for Buffer[char]({len: u64, data: char*})
	concrete   Equals for Buffer[char] {
		fn Equals_Buffer[char]_equals(self: Buffer[char], other: Buffer[char]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> memcmp(dataPointer_spec_char_2(self), dataPointer_spec_char_2(other), lenBytes_spec_char_2(self)) == 0i32
})

	derived    Iterable[impl Item := charI := BufferIterator[char]] for Buffer[char] {
		fn Iterable_Buffer[char]_iterator(self: Buffer[char]): BufferIterator[char] return(fromBuffer_spec_char_1(self))

impls for Opt[MyResult[enum_basic.MyResult.unwrap.'T, enum_basic.MyResult.unwrap.'E].Ok(enum_basic.MyResult.unwrap.'T)](enum None | Some(MyResult[enum_basic.MyResult.unwrap.'T, enum_basic.MyResult.unwrap.'E].Ok(enum_basic.MyResult.unwrap.'T)))
	derived    Unwrap[impl Inner := MyResult[T, E].Ok(T)] for Opt[MyResult[T, E].Ok(T)] {
		fn Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue(self: Opt[MyResult[T, E].Ok(T)]): bool return(switch let __match_subject_2384: Opt[MyResult[T, E].Ok(T)] = self;  {
  let __payload_Some_2385: MyResult[T, E].Ok(T) = __match_subject_2384.payload[Some]  Some(_)(__match_subject_2384.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[MyResult[T, E].Ok(T)]_unwrap(self: Opt[MyResult[T, E].Ok(T)]): MyResult[T, E].Ok(T) return(get())
		fn Unwrap_Opt[MyResult[T, E].Ok(T)]_make(t: MyResult[T, E].Ok(T)): Opt[MyResult[T, E].Ok(T)] return(.Some(t))

impls for Opt[bool](enum None | Some(bool))
	derived    Unwrap[impl Inner := bool] for Opt[bool] {
		fn Unwrap_Opt[bool]_hasValue(self: Opt[bool]): bool return(switch let __match_subject_2412: Opt[bool] = self;  {
  let __payload_Some_2413: bool = __match_subject_2412.payload[Some]  Some(_)(__match_subject_2412.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[bool]_unwrap(self: Opt[bool]): bool return(get_spec_bool_12(self))
		fn Unwrap_Opt[bool]_make(t: bool): Opt[bool] return(.Some(t))

	derived    Equals for Opt[bool] {
		fn Equals_Opt[bool]_equals(self: Opt[bool], other: Opt[bool]): bool return(opt_equals_spec_bool_2(self, other))

impls for Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})
	derived    Iterable[impl Item := List[char]I := BufferIterator[List[char]]] for Buffer[List[char]] {
		fn Iterable_Buffer[List[char]]_iterator(self: Buffer[List[char]]): BufferIterator[List[char]] return(fromBuffer_spec_List[char]_4(self))

impls for Opt[Maybe.B(char)](enum None | Some(Maybe.B(char)))
	derived    Unwrap[impl Inner := Maybe.B(char)] for Opt[Maybe.B(char)] {
		fn Unwrap_Opt[Maybe.B(char)]_hasValue(self: Opt[Maybe.B(char)]): bool return(switch let __match_subject_2378: Opt[Maybe.B(char)] = self;  {
  let __payload_Some_2379: Maybe.B(char) = __match_subject_2378.payload[Some]  Some(_)(__match_subject_2378.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Maybe.B(char)]_unwrap(self: Opt[Maybe.B(char)]): Maybe.B(char) return(get_spec_Maybe.B(char)_8(self))
		fn Unwrap_Opt[Maybe.B(char)]_make(t: Maybe.B(char)): Opt[Maybe.B(char)] return(.Some(t))

impls for u16
	concrete   Bitwise for u16 {
		intern fn Bitwise_u16_bitNot(self: u16): u16 {no_block}
		intern fn Bitwise_u16_bitAnd(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_bitOr(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_xor(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_shiftLeft(self: u16, other: u16): u16 {no_block}
		intern fn Bitwise_u16_shiftRight(self: u16, other: u16): u16 {no_block}

impls for List[List.filter.'T]({len: u64, buffer: Buffer[List.filter.'T]({len: u64, data: List.filter.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer()))

impls for Opt[Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))](enum None | Some(Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))))
	derived    Unwrap[impl Inner := Json.JsArray(List[Json])] for Opt[Json.JsArray(List[Json])] {
		fn Unwrap_Opt[Json.JsArray(List[Json])]_hasValue(self: Opt[Json.JsArray(List[Json])]): bool return(switch let __match_subject_2436: Opt[Json.JsArray(List[Json])] = self;  {
  let __payload_Some_2437: Json.JsArray(List[Json]) = __match_subject_2436.payload[Some]  Some(_)(__match_subject_2436.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Json.JsArray(List[Json])]_unwrap(self: Opt[Json.JsArray(List[Json])]): Json.JsArray(List[Json]) return(get_spec_Json.JsArray(List[Json])_13(self))
		fn Unwrap_Opt[Json.JsArray(List[Json])]_make(t: Json.JsArray(List[Json])): Opt[Json.JsArray(List[Json])] return(.Some(t))

impls for {name: string({buffer: Buffer[char]({len: u64, data: char*})}), weight: i64}
	concrete   Show for {name: string, weight: i64} {
		fn Show_{name: string, weight: i64}_show(self: {name: string, weight: i64}): string {
  let name: string = self.name;
  let weight: i64 = self.weight;
  return({
    let __sb_2019: StringBuilder = withCapacity(4u64);
    putString(__sb_2019, "");
    putString(__sb_2019, Show_string_show(name));
    putString(__sb_2019, ": ");
    putString(__sb_2019, Show_i64_show(weight));
    build(__sb_2019)
  }: string)
}: string

impls for Equals_impl_List[T].'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F](enum Ok(Try_impl_Result[S, F].'S) | Err(Try_impl_Result[S, F].'F))
	blanket    Try[impl T := SE := F] for Result[S, F] {
		fn Try_Result[S, F]_makeError(e: F): Result[S, F] return(.Err(e))
		fn Try_Result[S, F]_makeOk(t: S): Result[S, F] return(.Ok(t))
		fn Try_Result[S, F]_isOk(self: Result[S, F]): bool return(switch let __match_subject_806: Result[S, F] = self;  {
  let __payload_Ok_807: S = __match_subject_806.payload[Ok]  Ok(_)(__match_subject_806.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 309u64
}, "Match Error")
})
		fn Try_Result[S, F]_getError(self: Result[S, F]): F return(Unwrap_Opt[Result[S, F].Err(F)]_unwrap(if self.is[.Err]() .Some(self as(noop) Result[S, F].Err(F)) else .None).payload[Err])
		fn Try_Result[S, F]_getOk(self: Result[S, F]): S return(Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(if self.is[.Ok]() .Some(self as(noop) Result[S, F].Ok(S)) else .None).payload[Ok])

impls for Opt[Show_impl_List[T].'T](enum None | Some(Show_impl_List[T].'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_2244: Opt[T] = self;  {
  let __payload_Some_2245: T = __match_subject_2244.payload[Some]  Some(_)(__match_subject_2244.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Opt[List.join.'T](enum None | Some(List.join.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_2189: Opt[T] = self;  {
  let __payload_Some_2190: T = __match_subject_2189.payload[Some]  Some(_)(__match_subject_2189.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(i32) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))
	derived    Try[impl T := i32E := string] for Result[i32, string] {
		fn Try_Result[i32, string]_makeError(e: string): Result[i32, string] return(.Err(e))
		fn Try_Result[i32, string]_makeOk(t: i32): Result[i32, string] return(.Ok(t))
		fn Try_Result[i32, string]_isOk(self: Result[i32, string]): bool return(switch let __match_subject_2572: Result[i32, string] = self;  {
  let __payload_Ok_2573: i32 = __match_subject_2572.payload[Ok]  Ok(_)(__match_subject_2572.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 309u64
}, "Match Error")
})
		fn Try_Result[i32, string]_getError(self: Result[i32, string]): string return(Unwrap_Opt[Result[i32, string].Err(string)]_unwrap(if self.is[.Err]() .Some(self as(noop) Result[i32, string].Err(string)) else .None).payload[Err])
		fn Try_Result[i32, string]_getOk(self: Result[i32, string]): i32 return(Unwrap_Opt[Result[i32, string].Ok(i32)]_unwrap(if self.is[.Ok]() .Some(self as(noop) Result[i32, string].Ok(i32)) else .None).payload[Ok])

impls for BufferIterator[Iterable_impl_Buffer[T].'T]({buf: Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for Opt[Unwrap_impl_Opt[T].'T](enum None | Some(Unwrap_impl_Opt[T].'T))
	blanket    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_876: Opt[T] = self;  {
  let __payload_Some_877: T = __match_subject_876.payload[Some]  Some(_)(__match_subject_876.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for context_generic.contextA.'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Opt[List.flatMap.'T](enum None | Some(List.flatMap.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_2199: Opt[T] = self;  {
  let __payload_Some_2200: T = __match_subject_2199.payload[Some]  Some(_)(__match_subject_2199.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Buffer[i64]({len: u64, data: i64*})
	concrete   Equals for Buffer[i64] {
		fn Equals_Buffer[i64]_equals(self: Buffer[i64], other: Buffer[i64]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> memcmp(dataPointer_spec_i64_3(self), dataPointer_spec_i64_3(other), lenBytes_spec_i64_3(self)) == 0i32
})

	derived    Iterable[impl Item := i64I := BufferIterator[i64]] for Buffer[i64] {
		fn Iterable_Buffer[i64]_iterator(self: Buffer[i64]): BufferIterator[i64] return(fromBuffer_spec_i64_6(self))

impls for Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*})
	derived    Iterable[impl Item := {rank: i64, payload: string}I := BufferIterator[{rank: i64, payload: string}]] for Buffer[{rank: i64, payload: string}] {
		fn Iterable_Buffer[{rank: i64, payload: string}]_iterator(self: Buffer[{rank: i64, payload: string}]): BufferIterator[{rank: i64, payload: string}] return(fromBuffer_spec_{rank: i64, payload: string}_8(self))

impls for assertEquals.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for u64
	concrete   Comparable for u64 {
		fn Comparable_u64_compare(self: u64, other: u64): Ordering return(switch  {
  (self == other) -> .Equal,
  (true) -> switch  {
  (self > other) -> .Greater,
  (true) -> .Less
}
})

	concrete   Show for u64 {
		fn Show_u64_show(self: u64): string {
  switch  {
    (self == 0u64) -> return("0"),
    (true) -> ()
  };
  let mut remaining: u64 = self;
  let* buf: List[char]* = withCapacity_spec_char_2(8u64);
  while remaining > 0u64 {
    let d: u64 = remaining % 10u64;
    let c: char = d + 48u64 as(itrunc) u8 as(i8tochar) char;
    push_spec_char_2(buf, c);
    remaining = remaining / 10u64
  }: unit;
  reverse_spec_char_1(buf);
  return(wrapList(buf.*))
}: string

	concrete   Bitwise for u64 {
		intern fn Bitwise_u64_bitNot(self: u64): u64 {no_block}
		intern fn Bitwise_u64_bitAnd(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_bitOr(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_xor(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_shiftLeft(self: u64, other: u64): u64 {no_block}
		intern fn Bitwise_u64_shiftRight(self: u64, other: u64): u64 {no_block}

impls for BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for List[List.flatMap.'T]({len: u64, buffer: Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer()))

impls for Opt[List.sort.'T](enum None | Some(List.sort.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_2184: Opt[T] = self;  {
  let __payload_Some_2185: T = __match_subject_2184.payload[Some]  Some(_)(__match_subject_2184.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Buffer[List.map.'T]({len: u64, data: List.map.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for Foo({a: bool})
	concrete   Try[impl T := i64E := string] for Foo {
		fn Try_Foo_makeError(e: string): Foo return({
  a: false
})
		fn Try_Foo_makeOk(t: i64): Foo return({
  a: true
})
		fn Try_Foo_isOk(self: Foo): bool return(self.a)
		fn Try_Foo_getError(self: Foo): string return("FooError")
		fn Try_Foo_getOk(self: Foo): i64 return(3i64)

impls for Opt[Equals_impl_Opt[T].'T](enum None | Some(Equals_impl_Opt[T].'T))
	blanket    Equals for Opt[T] {
		fn Equals_Opt[T]_equals(self: Opt[T], other: Opt[T]): bool return(opt_equals())

impls for Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for Opt[MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)](enum None | Some(MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)))
	derived    Unwrap[impl Inner := MyResult[i64, string].Ok(i64)] for Opt[MyResult[i64, string].Ok(i64)] {
		fn Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue(self: Opt[MyResult[i64, string].Ok(i64)]): bool return(switch let __match_subject_2386: Opt[MyResult[i64, string].Ok(i64)] = self;  {
  let __payload_Some_2387: MyResult[i64, string].Ok(i64) = __match_subject_2386.payload[Some]  Some(_)(__match_subject_2386.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[MyResult[i64, string].Ok(i64)]_unwrap(self: Opt[MyResult[i64, string].Ok(i64)]): MyResult[i64, string].Ok(i64) return(get_spec_MyResult[i64, string].Ok(i64)_10(self))
		fn Unwrap_Opt[MyResult[i64, string].Ok(i64)]_make(t: MyResult[i64, string].Ok(i64)): Opt[MyResult[i64, string].Ok(i64)] return(.Some(t))

impls for Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F](enum Ok(Unwrap_impl_Result[S, F].'S) | Err(Unwrap_impl_Result[S, F].'F))
	blanket    Unwrap[impl Inner := S] for Result[S, F] {
		fn Unwrap_Result[S, F]_hasValue(self: Result[S, F]): bool return(switch let __match_subject_814: Result[S, F] = self;  {
  let __payload_Ok_815: S = __match_subject_814.payload[Ok]  Ok(_)(__match_subject_814.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 315u64
}, "Match Error")
})
		fn Unwrap_Result[S, F]_unwrap(self: Result[S, F]): S return(Try_Result[S, F]_getOk(self))
		fn Unwrap_Result[S, F]_make(inner: S): Result[S, F] return(Try_Result[S, F]_makeOk(inner))

	derived    Try[impl T := SE := F] for Result[S, F] {
		fn Try_Result[S, F]_makeError(e: F): Result[S, F] return(.Err(e))
		fn Try_Result[S, F]_makeOk(t: S): Result[S, F] return(.Ok(t))
		fn Try_Result[S, F]_isOk(self: Result[S, F]): bool return(switch let __match_subject_2167: Result[S, F] = self;  {
  let __payload_Ok_2168: S = __match_subject_2167.payload[Ok]  Ok(_)(__match_subject_2167.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 309u64
}, "Match Error")
})
		fn Try_Result[S, F]_getError(self: Result[S, F]): F return(Unwrap_Opt[Result[S, F].Err(F)]_unwrap(if self.is[.Err]() .Some(self as(noop) Result[S, F].Err(F)) else .None).payload[Err])
		fn Try_Result[S, F]_getOk(self: Result[S, F]): S return(Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(if self.is[.Ok]() .Some(self as(noop) Result[S, F].Ok(S)) else .None).payload[Ok])

impls for BufferIterator[List.flatMap.'T]({buf: Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for bool
	concrete   Equals for bool {
		fn Equals_bool_equals(self: bool, other: bool): bool return(self == other)

	concrete   Show for bool {
		fn Show_bool_show(self: bool): string return(switch  {
  (self) -> "true",
  (true) -> "false"
})

impls for ability_generic.From_F_T_impl_U.'T
	constraint To_To_U for T {
		fn To_To_U_T_to(self: T): U {no_block}

impls for IntRange({start: i64, end: i64})
	concrete   Iterable[impl Item := i64I := IntRangeIterator] for IntRange {
		fn Iterable_IntRange_iterator(self: IntRange): IntRangeIterator return(make(self))

impls for List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})
	derived    Iterable[impl Item := enum Char(char) | String(string)I := BufferIterator[enum Char(char) | String(string)]] for List[enum Char(char) | String(string)] {
		fn Iterable_List[enum Char(char) | String(string)]_iterator(self: List[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)] return(Iterable_Buffer[enum Char(char) | String(string)]_iterator(toBuffer_spec_enum Char(char) | String(string)_6(self)))

impls for enum_basic.MyResult.show.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)))
	derived    Unwrap[impl Inner := Result[S, F].Err(F)] for Opt[Result[S, F].Err(F)] {
		fn Unwrap_Opt[Result[S, F].Err(F)]_hasValue(self: Opt[Result[S, F].Err(F)]): bool return(switch let __match_subject_2163: Opt[Result[S, F].Err(F)] = self;  {
  let __payload_Some_2164: Result[S, F].Err(F) = __match_subject_2163.payload[Some]  Some(_)(__match_subject_2163.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Err(F)]_unwrap(self: Opt[Result[S, F].Err(F)]): Result[S, F].Err(F) return(get())
		fn Unwrap_Opt[Result[S, F].Err(F)]_make(t: Result[S, F].Err(F)): Opt[Result[S, F].Err(F)] return(.Some(t))

impls for BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for List[List.join.'T]({len: u64, buffer: Buffer[List.join.'T]({len: u64, data: List.join.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer()))

impls for Opt[i64](enum None | Some(i64))
	derived    Equals for Opt[i64] {
		fn Equals_Opt[i64]_equals(self: Opt[i64], other: Opt[i64]): bool return(opt_equals_spec_i64_1(self, other))

	derived    Unwrap[impl Inner := i64] for Opt[i64] {
		fn Unwrap_Opt[i64]_hasValue(self: Opt[i64]): bool return(switch let __match_subject_2405: Opt[i64] = self;  {
  let __payload_Some_2406: i64 = __match_subject_2405.payload[Some]  Some(_)(__match_subject_2405.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[i64]_unwrap(self: Opt[i64]): i64 return(get_spec_i64_11(self))
		fn Unwrap_Opt[i64]_make(t: i64): Opt[i64] return(.Some(t))

impls for Opt[List.appendBuffer.'T](enum None | Some(List.appendBuffer.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_2179: Opt[T] = self;  {
  let __payload_Some_2180: T = __match_subject_2179.payload[Some]  Some(_)(__match_subject_2179.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for printIt.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for Buffer.sorted.'T
	constraint Comparable for T {
		fn Comparable_T_compare(self: T, other: T): Ordering {no_block}

impls for i16
	concrete   Show for i16 {
		fn Show_i16_show(self: i16): string return(Show_i64_show(self as(iext) i64))

	concrete   Bitwise for i16 {
		intern fn Bitwise_i16_bitNot(self: i16): i16 {no_block}
		intern fn Bitwise_i16_bitAnd(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_bitOr(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_xor(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_shiftLeft(self: i16, other: i16): i16 {no_block}
		intern fn Bitwise_i16_shiftRight(self: i16, other: i16): i16 {no_block}

impls for ability_generic.To_To_string_impl_T.'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

	blanket    To_To_string for T {
		fn To_To_string_T_to(self: T): string return(Show_T_show(self))

impls for List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	concrete   Writer for List[char] {
		fn Writer_List[char]_writeChar(self: List[char]*, value: char): unit return(push_spec_char_2(self, value))
		fn Writer_List[char]_writeByte(self: List[char]*, value: u8): unit return(push_spec_char_2(self, value as(i8tochar) char))
		fn Writer_List[char]_writeString(self: List[char]*, value: string): unit return(appendBuffer_spec_char_1(self, innerBuffer(value)))
		fn Writer_List[char]_writeBytes(self: List[char]*, buffer: Buffer[u8]): unit return(appendBuffer_spec_char_1(self, toCharBuffer(buffer)))

impls for Opt[Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))))
	derived    Unwrap[impl Inner := Result[i32, string].Err(string)] for Opt[Result[i32, string].Err(string)] {
		fn Unwrap_Opt[Result[i32, string].Err(string)]_hasValue(self: Opt[Result[i32, string].Err(string)]): bool return(switch let __match_subject_2937: Opt[Result[i32, string].Err(string)] = self;  {
  let __payload_Some_2938: Result[i32, string].Err(string) = __match_subject_2937.payload[Some]  Some(_)(__match_subject_2937.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[i32, string].Err(string)]_unwrap(self: Opt[Result[i32, string].Err(string)]): Result[i32, string].Err(string) return(get_spec_Result[i32, string].Err(string)_23(self))
		fn Unwrap_Opt[Result[i32, string].Err(string)]_make(t: Result[i32, string].Err(string)): Opt[Result[i32, string].Err(string)] return(.Some(t))

impls for Opt[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))))
	derived    Unwrap[impl Inner := enum Char(char) | String(string)] for Opt[enum Char(char) | String(string)] {
		fn Unwrap_Opt[enum Char(char) | String(string)]_hasValue(self: Opt[enum Char(char) | String(string)]): bool return(switch let __match_subject_2304: Opt[enum Char(char) | String(string)] = self;  {
  let __payload_Some_2305: enum Char(char) | String(string) = __match_subject_2304.payload[Some]  Some(_)(__match_subject_2304.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[enum Char(char) | String(string)]_unwrap(self: Opt[enum Char(char) | String(string)]): enum Char(char) | String(string) return(get_spec_enum Char(char) | String(string)_5(self))
		fn Unwrap_Opt[enum Char(char) | String(string)]_make(t: enum Char(char) | String(string)): Opt[enum Char(char) | String(string)] return(.Some(t))

impls for Opt[Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))))
	derived    Unwrap[impl Inner := Result[i64, string].Err(string)] for Opt[Result[i64, string].Err(string)] {
		fn Unwrap_Opt[Result[i64, string].Err(string)]_hasValue(self: Opt[Result[i64, string].Err(string)]): bool return(switch let __match_subject_2931: Opt[Result[i64, string].Err(string)] = self;  {
  let __payload_Some_2932: Result[i64, string].Err(string) = __match_subject_2931.payload[Some]  Some(_)(__match_subject_2931.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[i64, string].Err(string)]_unwrap(self: Opt[Result[i64, string].Err(string)]): Result[i64, string].Err(string) return(get_spec_Result[i64, string].Err(string)_21(self))
		fn Unwrap_Opt[Result[i64, string].Err(string)]_make(t: Result[i64, string].Err(string)): Opt[Result[i64, string].Err(string)] return(.Some(t))

impls for ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T
	constraint Add_Rhs_T[impl Output := T] for T {
		fn Add_Rhs_T_T_add(self: T, rhs: T): T {no_block}

impls for Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)))
	derived    Unwrap[impl Inner := Result[S, F].Ok(S)] for Opt[Result[S, F].Ok(S)] {
		fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool return(switch let __match_subject_2620: Opt[Result[S, F].Ok(S)] = self;  {
  let __payload_Some_2621: Result[S, F].Ok(S) = __match_subject_2620.payload[Some]  Some(_)(__match_subject_2620.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S) return(get())
		fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)] return(.Some(t))

impls for BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for context_generic.contextB.'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Opt[Yes(i64)*](enum None | Some(Yes(i64)*))
	derived    Unwrap[impl Inner := Yes(i64)*] for Opt[Yes(i64)*] {
		fn Unwrap_Opt[Yes(i64)*]_hasValue(self: Opt[Yes(i64)*]): bool return(switch let __match_subject_2332: Opt[Yes(i64)*] = self;  {
  let __payload_Some_2333: Yes(i64)* = __match_subject_2332.payload[Some]  Some(_)(__match_subject_2332.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Yes(i64)*]_unwrap(self: Opt[Yes(i64)*]): Yes(i64)* return(get_spec_Yes(i64)*_6(self))
		fn Unwrap_Opt[Yes(i64)*]_make(t: Yes(i64)*): Opt[Yes(i64)*] return(.Some(t))

impls for Opt[Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))))
	derived    Unwrap[impl Inner := Result[bool, string].Err(string)] for Opt[Result[bool, string].Err(string)] {
		fn Unwrap_Opt[Result[bool, string].Err(string)]_hasValue(self: Opt[Result[bool, string].Err(string)]): bool return(switch let __match_subject_2925: Opt[Result[bool, string].Err(string)] = self;  {
  let __payload_Some_2926: Result[bool, string].Err(string) = __match_subject_2925.payload[Some]  Some(_)(__match_subject_2925.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[bool, string].Err(string)]_unwrap(self: Opt[Result[bool, string].Err(string)]): Result[bool, string].Err(string) return(get_spec_Result[bool, string].Err(string)_19(self))
		fn Unwrap_Opt[Result[bool, string].Err(string)]_make(t: Result[bool, string].Err(string)): Opt[Result[bool, string].Err(string)] return(.Some(t))

impls for List[Equals_impl_List[T].'T]({len: u64, buffer: Buffer[Equals_impl_List[T].'T]({len: u64, data: Equals_impl_List[T].'T*})})
	blanket    Equals for List[T] {
		fn Equals_List[T]_equals(self: List[T], other: List[T]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> {
  let mut i: u64 = 0u64;
  while i < self.len {
    switch  {
      (negated(get() == get())) -> return(false),
      (true) -> ()
    };
    i = i + 1u64
  }: unit;
  true
}: bool
})

impls for List.sort.'T
	constraint Comparable for T {
		fn Comparable_T_compare(self: T, other: T): Ordering {no_block}

impls for BufferIterator[List.appendBuffer.'T]({buf: Buffer[List.appendBuffer.'T]({len: u64, data: List.appendBuffer.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for Pointer
	concrete   Equals for Pointer {
		fn Equals_Pointer_equals(self: Pointer, other: Pointer): bool return(self as(ptrtoint) u64 == other as(ptrtoint) u64)

impls for GenericPoint[i32]({x: i32, y: i32})
	derived    Add_Rhs_GenericPoint[i32][impl Output := GenericPoint[i32]] for GenericPoint[i32] {
		fn Add_Rhs_GenericPoint[i32]_GenericPoint[i32]_add(self: GenericPoint[i32], other: GenericPoint[i32]): GenericPoint[i32] {
  let newX: i32 = Add_Rhs_i32_i32_add(self.x, other.x);
  let newY: i32 = Add_Rhs_i32_i32_add(self.y, other.y);
  return({
    x: newX,
    y: newY
  })
}: GenericPoint[i32]

impls for Opt[Pointer](enum None | Some(Pointer))
	derived    Unwrap[impl Inner := Pointer] for Opt[Pointer] {
		fn Unwrap_Opt[Pointer]_hasValue(self: Opt[Pointer]): bool return(switch let __match_subject_2123: Opt[Pointer] = self;  {
  let __payload_Some_2124: Pointer = __match_subject_2123.payload[Some]  Some(_)(__match_subject_2123.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Pointer]_unwrap(self: Opt[Pointer]): Pointer return(get_spec_Pointer_2(self))
		fn Unwrap_Opt[Pointer]_make(t: Pointer): Opt[Pointer] return(.Some(t))

impls for Point({x: i32, y: i32})
	concrete   Num for Point {
		fn Num_Point_num(self: Point): i32 return(self.x + self.y)

impls for u8
	concrete   Comparable for u8 {
		fn Comparable_u8_compare(self: u8, other: u8): Ordering return(switch  {
  (self == other) -> .Equal,
  (true) -> switch  {
  (self > other) -> .Greater,
  (true) -> .Less
}
})

	concrete   Show for u8 {
		fn Show_u8_show(self: u8): string return(Show_u64_show(self as(iext) u64))

	concrete   Bitwise for u8 {
		intern fn Bitwise_u8_bitNot(self: u8): u8 {no_block}
		intern fn Bitwise_u8_bitAnd(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_bitOr(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_xor(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_shiftLeft(self: u8, other: u8): u8 {no_block}
		intern fn Bitwise_u8_shiftRight(self: u8, other: u8): u8 {no_block}

	concrete   To_To_char for u8 {
		fn To_To_char_u8_to(self: u8): char return(self as(i8tochar) char)

impls for Buffer[List.filter.'T]({len: u64, data: List.filter.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for Opt[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}](enum None | Some({rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}))
	derived    Unwrap[impl Inner := {rank: i64, payload: string}] for Opt[{rank: i64, payload: string}] {
		fn Unwrap_Opt[{rank: i64, payload: string}]_hasValue(self: Opt[{rank: i64, payload: string}]): bool return(switch let __match_subject_3024: Opt[{rank: i64, payload: string}] = self;  {
  let __payload_Some_3025: {rank: i64, payload: string} = __match_subject_3024.payload[Some]  Some(_)(__match_subject_3024.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[{rank: i64, payload: string}]_unwrap(self: Opt[{rank: i64, payload: string}]): {rank: i64, payload: string} return(get_spec_{rank: i64, payload: string}_25(self))
		fn Unwrap_Opt[{rank: i64, payload: string}]_make(t: {rank: i64, payload: string}): Opt[{rank: i64, payload: string}] return(.Some(t))

impls for BufferIterator[i64]({buf: Buffer[i64]({len: u64, data: i64*}), pos: u64})
	derived    Iterator[impl Item := i64] for BufferIterator[i64] {
		fn Iterator_BufferIterator[i64]_next(self: BufferIterator[i64]*): Opt[i64] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: i64 = get_spec_i64_4(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_i64_2(item)
}: Opt[i64],
  (true) -> .None
})
		fn Iterator_BufferIterator[i64]_sizeHint(self: BufferIterator[i64]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[i64]_advanceBy(self: BufferIterator[i64]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[i64]_nth(self: BufferIterator[i64]*, n: u64): Opt[i64] {
  Iterator_BufferIterator[i64]_advanceBy(self, n);
  return(Iterator_BufferIterator[i64]_next(self))
}: Opt[i64]

impls for enum_basic.MyResult.show.'E
	constraint Show for E {
		fn Show_E_show(self: E): string {no_block}

impls for BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})
	derived    Iterator[impl Item := enum Char(char) | String(string)] for BufferIterator[enum Char(char) | String(string)] {
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_next(self: BufferIterator[enum Char(char) | String(string)]*): Opt[enum Char(char) | String(string)] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: enum Char(char) | String(string) = get_spec_enum Char(char) | String(string)_6(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_enum Char(char) | String(string)_12(item)
}: Opt[enum Char(char) | String(string)],
  (true) -> .None
})
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_sizeHint(self: BufferIterator[enum Char(char) | String(string)]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[enum Char(char) | String(string)]_nth(self: BufferIterator[enum Char(char) | String(string)]*, n: u64): Opt[enum Char(char) | String(string)] {
  Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy(self, n);
  return(Iterator_BufferIterator[enum Char(char) | String(string)]_next(self))
}: Opt[enum Char(char) | String(string)]

impls for Opt[List.filter.'T](enum None | Some(List.filter.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_2204: Opt[T] = self;  {
  let __payload_Some_2205: T = __match_subject_2204.payload[Some]  Some(_)(__match_subject_2204.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for Show_impl_T.ability_impl.WriteText_T_writeText.'W
	constraint Writer for W {
		fn Writer_W_writeChar(self: W*, value: char): unit {no_block}
		fn Writer_W_writeByte(self: W*, value: u8): unit {no_block}
		fn Writer_W_writeString(self: W*, value: string): unit {no_block}
		fn Writer_W_writeBytes(self: W*, buffer: Buffer[u8]): unit {no_block}

impls for List.sorted.'T
	constraint Comparable for T {
		fn Comparable_T_compare(self: T, other: T): Ordering {no_block}

impls for Opt[u64](enum None | Some(u64))
	derived    Unwrap[impl Inner := u64] for Opt[u64] {
		fn Unwrap_Opt[u64]_hasValue(self: Opt[u64]): bool return(switch let __match_subject_2553: Opt[u64] = self;  {
  let __payload_Some_2554: u64 = __match_subject_2553.payload[Some]  Some(_)(__match_subject_2553.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[u64]_unwrap(self: Opt[u64]): u64 return(get_spec_u64_17(self))
		fn Unwrap_Opt[u64]_make(t: u64): Opt[u64] return(.Some(t))

impls for Opt[Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))))
	derived    Unwrap[impl Inner := Maybe.C(string)] for Opt[Maybe.C(string)] {
		fn Unwrap_Opt[Maybe.C(string)]_hasValue(self: Opt[Maybe.C(string)]): bool return(switch let __match_subject_2381: Opt[Maybe.C(string)] = self;  {
  let __payload_Some_2382: Maybe.C(string) = __match_subject_2381.payload[Some]  Some(_)(__match_subject_2381.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Maybe.C(string)]_unwrap(self: Opt[Maybe.C(string)]): Maybe.C(string) return(get_spec_Maybe.C(string)_9(self))
		fn Unwrap_Opt[Maybe.C(string)]_make(t: Maybe.C(string)): Opt[Maybe.C(string)] return(.Some(t))

impls for BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})
	derived    Iterator[impl Item := char] for BufferIterator[char] {
		fn Iterator_BufferIterator[char]_next(self: BufferIterator[char]*): Opt[char] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: char = get_spec_char_3(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_char_9(item)
}: Opt[char],
  (true) -> .None
})
		fn Iterator_BufferIterator[char]_sizeHint(self: BufferIterator[char]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[char]_advanceBy(self: BufferIterator[char]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[char]_nth(self: BufferIterator[char]*, n: u64): Opt[char] {
  Iterator_BufferIterator[char]_advanceBy(self, n);
  return(Iterator_BufferIterator[char]_next(self))
}: Opt[char]

impls for i64
	concrete   Show for i64 {
		fn Show_i64_show(self: i64): string {
  switch  {
    (self == 0i64) -> return("0"),
    (true) -> ()
  };
  let neg: bool = self < 0i64;
  let mut remaining: i64 = switch  {
    (neg) -> self * -1i64,
    (true) -> self
  };
  let* buf: List[char]* = withCapacity_spec_char_2(8u64);
  while remaining > 0i64 {
    let d: i64 = remaining % 10i64;
    let c: char = d + 48i64 as(itrunc) u8 as(i8tochar) char;
    push_spec_char_2(buf, c);
    remaining = remaining / 10i64
  }: unit;
  switch  {
    (neg) -> push_spec_char_2(buf, '45'),
    (true) -> ()
  };
  let rev: List[char] = reversed_spec_char_1(buf.*);
  return(wrapList(rev))
}: string

	concrete   Comparable for i64 {
		fn Comparable_i64_compare(self: i64, other: i64): Ordering return(switch  {
  (self == other) -> .Equal,
  (true) -> switch  {
  (self > other) -> .Greater,
  (true) -> .Less
}
})

	concrete   Equals for i64 {
		fn Equals_i64_equals(self: i64, other: i64): bool return(self == other)

	concrete   Bitwise for i64 {
		intern fn Bitwise_i64_bitNot(self: i64): i64 {no_block}
		intern fn Bitwise_i64_bitAnd(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_bitOr(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_xor(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_shiftLeft(self: i64, other: i64): i64 {no_block}
		intern fn Bitwise_i64_shiftRight(self: i64, other: i64): i64 {no_block}

	concrete   Num for i64 {
		fn Num_i64_num(self: i64): i32 return(self as(itrunc) i32)

	concrete   Add_Rhs_i64[impl Output := i64] for i64 {
		fn Add_Rhs_i64_i64_add(self: i64, rhs: i64): i64 return(self + rhs)

	concrete   To_To_string for i64 {
		fn To_To_string_i64_to(self: i64): string return(Show_i64_show(self))

impls for Opt[Maybe.A](enum None | Some(Maybe.A))
	derived    Unwrap[impl Inner := Maybe.A] for Opt[Maybe.A] {
		fn Unwrap_Opt[Maybe.A]_hasValue(self: Opt[Maybe.A]): bool return(switch let __match_subject_2375: Opt[Maybe.A] = self;  {
  let __payload_Some_2376: Maybe.A = __match_subject_2375.payload[Some]  Some(_)(__match_subject_2375.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Maybe.A]_unwrap(self: Opt[Maybe.A]): Maybe.A return(get_spec_Maybe.A_7(self))
		fn Unwrap_Opt[Maybe.A]_make(t: Maybe.A): Opt[Maybe.A] return(.Some(t))

impls for BufferIterator[Pointer]({buf: Buffer[Pointer]({len: u64, data: Pointer*}), pos: u64})
	derived    Iterator[impl Item := Pointer] for BufferIterator[Pointer] {
		fn Iterator_BufferIterator[Pointer]_next(self: BufferIterator[Pointer]*): Opt[Pointer] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: Pointer = get_spec_Pointer_1(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_Pointer_10(item)
}: Opt[Pointer],
  (true) -> .None
})
		fn Iterator_BufferIterator[Pointer]_sizeHint(self: BufferIterator[Pointer]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[Pointer]_advanceBy(self: BufferIterator[Pointer]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[Pointer]_nth(self: BufferIterator[Pointer]*, n: u64): Opt[Pointer] {
  Iterator_BufferIterator[Pointer]_advanceBy(self, n);
  return(Iterator_BufferIterator[Pointer]_next(self))
}: Opt[Pointer]

impls for List[lambda_object(fn((env){}*) -> unit)]({len: u64, buffer: Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*})})
	derived    Iterable[impl Item := lambda_object(fn((env){}*) -> unit)I := BufferIterator[lambda_object(fn((env){}*) -> unit)]] for List[lambda_object(fn((env){}*) -> unit)] {
		fn Iterable_List[lambda_object(fn((env){}*) -> unit)]_iterator(self: List[lambda_object(fn((env){}*) -> unit)]): BufferIterator[lambda_object(fn((env){}*) -> unit)] return(Iterable_Buffer[lambda_object(fn((env){}*) -> unit)]_iterator(toBuffer_spec_lambda_object(fn((env){}*) -> unit)_7(self)))

impls for BufferIterator[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({buf: Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*}), pos: u64})
	derived    Iterator[impl Item := {rank: i64, payload: string}] for BufferIterator[{rank: i64, payload: string}] {
		fn Iterator_BufferIterator[{rank: i64, payload: string}]_next(self: BufferIterator[{rank: i64, payload: string}]*): Opt[{rank: i64, payload: string}] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: {rank: i64, payload: string} = get_spec_{rank: i64, payload: string}_11(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_{rank: i64, payload: string}_15(item)
}: Opt[{rank: i64, payload: string}],
  (true) -> .None
})
		fn Iterator_BufferIterator[{rank: i64, payload: string}]_sizeHint(self: BufferIterator[{rank: i64, payload: string}]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[{rank: i64, payload: string}]_advanceBy(self: BufferIterator[{rank: i64, payload: string}]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[{rank: i64, payload: string}]_nth(self: BufferIterator[{rank: i64, payload: string}]*, n: u64): Opt[{rank: i64, payload: string}] {
  Iterator_BufferIterator[{rank: i64, payload: string}]_advanceBy(self, n);
  return(Iterator_BufferIterator[{rank: i64, payload: string}]_next(self))
}: Opt[{rank: i64, payload: string}]

impls for WriteText.writeText.'W
	constraint Writer for W {
		fn Writer_W_writeChar(self: W*, value: char): unit {no_block}
		fn Writer_W_writeByte(self: W*, value: u8): unit {no_block}
		fn Writer_W_writeString(self: W*, value: string): unit {no_block}
		fn Writer_W_writeBytes(self: W*, buffer: Buffer[u8]): unit {no_block}

impls for Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*})
	blanket    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for BufferIterator[List.filter.'T]({buf: Buffer[List.filter.'T]({len: u64, data: List.filter.'T*}), pos: u64})
	derived    Iterator[impl Item := T] for BufferIterator[T] {
		fn Iterator_BufferIterator[T]_next(self: BufferIterator[T]*): Opt[T] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: T = get();
  self.pos <- self.*.pos + 1u64;
  some()
}: Opt[T],
  (true) -> .None
})
		fn Iterator_BufferIterator[T]_sizeHint(self: BufferIterator[T]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[T]_advanceBy(self: BufferIterator[T]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[T]_nth(self: BufferIterator[T]*, n: u64): Opt[T] {
  Iterator_BufferIterator[T]_advanceBy(self, n);
  return(Iterator_BufferIterator[T]_next(self))
}: Opt[T]

impls for Iterable.'I
	constraint Iterator[impl Item := Item] for I {
		fn Iterator_I_next(self: I*): Opt[Item] {no_block}
		fn Iterator_I_sizeHint(self: I): {atLeast: u64, atMost: Opt[u64]} {no_block}
		fn Iterator_I_advanceBy(self: I*, n: u64): unit {no_block}
		fn Iterator_I_nth(self: I*, n: u64): Opt[Item] {no_block}

impls for {a: i64}
	concrete   Equals for {a: i64} {
		fn Equals_{a: i64}_equals(self: {a: i64}, other: {a: i64}): bool return(self.a == other.a)

impls for Show_impl_List[T].'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for string({buffer: Buffer[char]({len: u64, data: char*})})
	concrete   Equals for string {
		fn Equals_string_equals(self: string, that: string): bool return(Equals_Buffer[char]_equals(self.buffer, that.buffer))

	concrete   Show for string {
		fn Show_string_show(self: string): string return(self)

	concrete   Iterable[impl Item := charI := BufferIterator[char]] for string {
		fn Iterable_string_iterator(self: string): BufferIterator[char] return(fromBuffer_spec_char_1(self.buffer))

	concrete   Codec for string {
		fn Codec_string_aConst(): u8 return(10u8)
		fn Codec_string_write(self: string): Buffer[u8] return(innerBufferBytes(clone(self)))
		fn Codec_string_read(buffer: Buffer[u8]): string return(fromBytes(buffer))

	concrete   Foo for string {
		fn Foo_string_a(self: string): unit return(Foo_string_b(self))
		fn Foo_string_b(self: string): unit return(())

	derived    From_F_i32 for string {
		fn From_F_i32_string_from(t: i32): string return(To_To_string_i32_to(t))

impls for all_out_of_order.takesHelloer.'T
	constraint SayHello for T {
		fn SayHello_T_hello(self: T): MyString {no_block}

impls for List[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})})
	derived    Iterable[impl Item := List[char]I := BufferIterator[List[char]]] for List[List[char]] {
		fn Iterable_List[List[char]]_iterator(self: List[List[char]]): BufferIterator[List[char]] return(Iterable_Buffer[List[char]]_iterator(toBuffer_spec_List[char]_5(self)))

impls for Opt.opt_equals.'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for Buffer[List.appendBuffer.'T]({len: u64, data: List.appendBuffer.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for BufferIterator[u8]({buf: Buffer[u8]({len: u64, data: u8*}), pos: u64})
	derived    Iterator[impl Item := u8] for BufferIterator[u8] {
		fn Iterator_BufferIterator[u8]_next(self: BufferIterator[u8]*): Opt[u8] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: u8 = get_spec_u8_2(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_u8_14(item)
}: Opt[u8],
  (true) -> .None
})
		fn Iterator_BufferIterator[u8]_sizeHint(self: BufferIterator[u8]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[u8]_advanceBy(self: BufferIterator[u8]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[u8]_nth(self: BufferIterator[u8]*, n: u64): Opt[u8] {
  Iterator_BufferIterator[u8]_advanceBy(self, n);
  return(Iterator_BufferIterator[u8]_next(self))
}: Opt[u8]

impls for u32
	concrete   Show for u32 {
		fn Show_u32_show(self: u32): string return(Show_u64_show(self as(iext) u64))

	concrete   Bitwise for u32 {
		intern fn Bitwise_u32_bitNot(self: u32): u32 {no_block}
		intern fn Bitwise_u32_bitAnd(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_bitOr(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_xor(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_shiftLeft(self: u32, other: u32): u32 {no_block}
		intern fn Bitwise_u32_shiftRight(self: u32, other: u32): u32 {no_block}

impls for Opt[lambda_object(fn((env){}*) -> unit)](enum None | Some(lambda_object(fn((env){}*) -> unit)))
	derived    Unwrap[impl Inner := lambda_object(fn((env){}*) -> unit)] for Opt[lambda_object(fn((env){}*) -> unit)] {
		fn Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue(self: Opt[lambda_object(fn((env){}*) -> unit)]): bool return(switch let __match_subject_2449: Opt[lambda_object(fn((env){}*) -> unit)] = self;  {
  let __payload_Some_2450: lambda_object(fn((env){}*) -> unit) = __match_subject_2449.payload[Some]  Some(_)(__match_subject_2449.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_unwrap(self: Opt[lambda_object(fn((env){}*) -> unit)]): lambda_object(fn((env){}*) -> unit) return(get_spec_lambda_object(fn((env){}*) -> unit)_14(self))
		fn Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_make(t: lambda_object(fn((env){}*) -> unit)): Opt[lambda_object(fn((env){}*) -> unit)] return(.Some(t))

impls for formatUInt.'W
	constraint Writer for W {
		fn Writer_W_writeChar(self: W*, value: char): unit {no_block}
		fn Writer_W_writeByte(self: W*, value: u8): unit {no_block}
		fn Writer_W_writeString(self: W*, value: string): unit {no_block}
		fn Writer_W_writeBytes(self: W*, buffer: Buffer[u8]): unit {no_block}

impls for Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T
	constraint Add_Rhs_T[impl Output := T] for T {
		fn Add_Rhs_T_T_add(self: T, rhs: T): T {no_block}

impls for Show_impl_Opt[T].'T
	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(i64) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))
	derived    Try[impl T := i64E := string] for Result[i64, string] {
		fn Try_Result[i64, string]_makeError(e: string): Result[i64, string] return(.Err(e))
		fn Try_Result[i64, string]_makeOk(t: i64): Result[i64, string] return(.Ok(t))
		fn Try_Result[i64, string]_isOk(self: Result[i64, string]): bool return(switch let __match_subject_2564: Result[i64, string] = self;  {
  let __payload_Ok_2565: i64 = __match_subject_2564.payload[Ok]  Ok(_)(__match_subject_2564.is[.Ok]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "core.k1",
  line: 309u64
}, "Match Error")
})
		fn Try_Result[i64, string]_getError(self: Result[i64, string]): string return(Unwrap_Opt[Result[i64, string].Err(string)]_unwrap(if self.is[.Err]() .Some(self as(noop) Result[i64, string].Err(string)) else .None).payload[Err])
		fn Try_Result[i64, string]_getOk(self: Result[i64, string]): i64 return(Unwrap_Opt[Result[i64, string].Ok(i64)]_unwrap(if self.is[.Ok]() .Some(self as(noop) Result[i64, string].Ok(i64)) else .None).payload[Ok])

impls for context_generic.contextC.'T
	constraint Equals for T {
		fn Equals_T_equals(self: T, other: T): bool {no_block}

impls for ability_constraint.add.'T
	constraint Num for T {
		fn Num_T_num(self: T): i32 {no_block}

	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for Foo({name: string({buffer: Buffer[char]({len: u64, data: char*})})})
	concrete   SayHello for Foo {
		fn SayHello_Foo_hello(self: Foo): MyString return({
  s: self.name
})

impls for char
	concrete   Show for char {
		fn Show_char_show(self: char): string return(toString(self))

impls for ability_generic.From_F_T_impl_U.'U
	blanket    From_F_T for U {
		fn From_F_T_U_from(t: T): U return(To_To_U_T_to(t))

impls for {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	concrete   Show for {rank: i64, payload: string} {
		fn Show_{rank: i64, payload: string}_show(self: {rank: i64, payload: string}): string {
  let rank: i64 = self.rank;
  let payload: string = self.payload;
  return({
    let __sb_1756: StringBuilder = withCapacity(5u64);
    putString(__sb_1756, "Payload: ");
    putString(__sb_1756, Show_string_show(payload));
    putString(__sb_1756, " (rank=");
    putString(__sb_1756, Show_i64_show(rank));
    putString(__sb_1756, ")");
    build(__sb_1756)
  }: string)
}: string

	concrete   Comparable for {rank: i64, payload: string} {
		fn Comparable_{rank: i64, payload: string}_compare(self: {rank: i64, payload: string}, other: {rank: i64, payload: string}): Ordering return(Comparable_i64_compare(self.rank, other.rank))

	concrete   Equals for {rank: i64, payload: string} {
		fn Equals_{rank: i64, payload: string}_equals(self: {rank: i64, payload: string}, other: {rank: i64, payload: string}): bool return(self.rank == other.rank and Equals_string_equals(self.payload, other.payload))

impls for List[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: string({buffer: Buffer[char]({len: u64, data: char*})})*})})
	derived    Equals for List[string] {
		fn Equals_List[string]_equals(self: List[string], other: List[string]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> {
  let mut i: u64 = 0u64;
  while i < self.len {
    switch  {
      (negated(Equals_string_equals(get_spec_string_4(self, i), get_spec_string_4(other, i)))) -> return(false),
      (true) -> ()
    };
    i = i + 1u64
  }: unit;
  true
}: bool
})

impls for BufferIterator[lambda_object(fn((env){}*) -> unit)]({buf: Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*}), pos: u64})
	derived    Iterator[impl Item := lambda_object(fn((env){}*) -> unit)] for BufferIterator[lambda_object(fn((env){}*) -> unit)] {
		fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*): Opt[lambda_object(fn((env){}*) -> unit)] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: lambda_object(fn((env){}*) -> unit) = get_spec_lambda_object(fn((env){}*) -> unit)_8(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_lambda_object(fn((env){}*) -> unit)_13(item)
}: Opt[lambda_object(fn((env){}*) -> unit)],
  (true) -> .None
})
		fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_sizeHint(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_advanceBy(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_nth(self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*, n: u64): Opt[lambda_object(fn((env){}*) -> unit)] {
  Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_advanceBy(self, n);
  return(Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next(self))
}: Opt[lambda_object(fn((env){}*) -> unit)]

impls for Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})
	derived    Iterable[impl Item := enum Char(char) | String(string)I := BufferIterator[enum Char(char) | String(string)]] for Buffer[enum Char(char) | String(string)] {
		fn Iterable_Buffer[enum Char(char) | String(string)]_iterator(self: Buffer[enum Char(char) | String(string)]): BufferIterator[enum Char(char) | String(string)] return(fromBuffer_spec_enum Char(char) | String(string)_5(self))

impls for GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	blanket    Add_Rhs_GenericPoint[T][impl Output := GenericPoint[T]] for GenericPoint[T] {
		fn Add_Rhs_GenericPoint[T]_GenericPoint[T]_add(self: GenericPoint[T], other: GenericPoint[T]): GenericPoint[T] {
  let newX: T = Add_Rhs_T_T_add(self.x, other.x);
  let newY: T = Add_Rhs_T_T_add(self.y, other.y);
  return({
    x: newX,
    y: newY
  })
}: GenericPoint[T]

impls for Opt[u8](enum None | Some(u8))
	derived    Unwrap[impl Inner := u8] for Opt[u8] {
		fn Unwrap_Opt[u8]_hasValue(self: Opt[u8]): bool return(switch let __match_subject_2633: Opt[u8] = self;  {
  let __payload_Some_2634: u8 = __match_subject_2633.payload[Some]  Some(_)(__match_subject_2633.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[u8]_unwrap(self: Opt[u8]): u8 return(get_spec_u8_18(self))
		fn Unwrap_Opt[u8]_make(t: u8): Opt[u8] return(.Some(t))

impls for Buffer[List.join.'T]({len: u64, data: List.join.'T*})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for Buffer[T] {
		fn Iterable_Buffer[T]_iterator(self: Buffer[T]): BufferIterator[T] return(fromBuffer())

impls for Opt[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})))
	derived    Unwrap[impl Inner := List[char]] for Opt[List[char]] {
		fn Unwrap_Opt[List[char]]_hasValue(self: Opt[List[char]]): bool return(switch let __match_subject_2278: Opt[List[char]] = self;  {
  let __payload_Some_2279: List[char] = __match_subject_2278.payload[Some]  Some(_)(__match_subject_2278.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[List[char]]_unwrap(self: Opt[List[char]]): List[char] return(get_spec_List[char]_4(self))
		fn Unwrap_Opt[List[char]]_make(t: List[char]): Opt[List[char]] return(.Some(t))

impls for Opt[PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})](enum None | Some(PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})))
	derived    Unwrap[impl Inner := PointMaybeY] for Opt[PointMaybeY] {
		fn Unwrap_Opt[PointMaybeY]_hasValue(self: Opt[PointMaybeY]): bool return(switch let __match_subject_2530: Opt[PointMaybeY] = self;  {
  let __payload_Some_2531: PointMaybeY = __match_subject_2530.payload[Some]  Some(_)(__match_subject_2530.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[PointMaybeY]_unwrap(self: Opt[PointMaybeY]): PointMaybeY return(get_spec_PointMaybeY_15(self))
		fn Unwrap_Opt[PointMaybeY]_make(t: PointMaybeY): Opt[PointMaybeY] return(.Some(t))

impls for List[List.sort.'T]({len: u64, buffer: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer()))

impls for ability_constraint_fail.add.'T
	constraint Num for T {
		fn Num_T_num(self: T): i32 {no_block}

	constraint Show for T {
		fn Show_T_show(self: T): string {no_block}

impls for List[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, buffer: Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*})})
	derived    Equals for List[{rank: i64, payload: string}] {
		fn Equals_List[{rank: i64, payload: string}]_equals(self: List[{rank: i64, payload: string}], other: List[{rank: i64, payload: string}]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> {
  let mut i: u64 = 0u64;
  while i < self.len {
    switch  {
      (negated(Equals_{rank: i64, payload: string}_equals(get_spec_{rank: i64, payload: string}_5(self, i), get_spec_{rank: i64, payload: string}_5(other, i)))) -> return(false),
      (true) -> ()
    };
    i = i + 1u64
  }: unit;
  true
}: bool
})

	derived    Iterable[impl Item := {rank: i64, payload: string}I := BufferIterator[{rank: i64, payload: string}]] for List[{rank: i64, payload: string}] {
		fn Iterable_List[{rank: i64, payload: string}]_iterator(self: List[{rank: i64, payload: string}]): BufferIterator[{rank: i64, payload: string}] return(Iterable_Buffer[{rank: i64, payload: string}]_iterator(toBuffer_spec_{rank: i64, payload: string}_8(self)))

impls for i8
	concrete   Show for i8 {
		fn Show_i8_show(self: i8): string return(Show_i64_show(self as(iext) i64))

	concrete   Bitwise for i8 {
		intern fn Bitwise_i8_bitNot(self: i8): i8 {no_block}
		intern fn Bitwise_i8_bitAnd(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_bitOr(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_xor(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_shiftLeft(self: i8, other: i8): i8 {no_block}
		intern fn Bitwise_i8_shiftRight(self: i8, other: i8): i8 {no_block}

impls for Buffer[Pointer]({len: u64, data: Pointer*})
	derived    Iterable[impl Item := PointerI := BufferIterator[Pointer]] for Buffer[Pointer] {
		fn Iterable_Buffer[Pointer]_iterator(self: Buffer[Pointer]): BufferIterator[Pointer] return(fromBuffer_spec_Pointer_2(self))

impls for Opt[char](enum None | Some(char))
	derived    Unwrap[impl Inner := char] for Opt[char] {
		fn Unwrap_Opt[char]_hasValue(self: Opt[char]): bool return(switch let __match_subject_2260: Opt[char] = self;  {
  let __payload_Some_2261: char = __match_subject_2260.payload[Some]  Some(_)(__match_subject_2260.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[char]_unwrap(self: Opt[char]): char return(get_spec_char_3(self))
		fn Unwrap_Opt[char]_make(t: char): Opt[char] return(.Some(t))

impls for Buffer[u8]({len: u64, data: u8*})
	concrete   Equals for Buffer[u8] {
		fn Equals_Buffer[u8]_equals(self: Buffer[u8], other: Buffer[u8]): bool return(switch  {
  (self.len != other.len) -> false,
  (true) -> memcmp(dataPointer_spec_u8_1(self), dataPointer_spec_u8_1(other), lenBytes_spec_u8_1(self)) == 0i32
})

	derived    Iterable[impl Item := u8I := BufferIterator[u8]] for Buffer[u8] {
		fn Iterable_Buffer[u8]_iterator(self: Buffer[u8]): BufferIterator[u8] return(fromBuffer_spec_u8_3(self))

impls for Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)))
	derived    Unwrap[impl Inner := Result[S, F].Ok(S)] for Opt[Result[S, F].Ok(S)] {
		fn Unwrap_Opt[Result[S, F].Ok(S)]_hasValue(self: Opt[Result[S, F].Ok(S)]): bool return(switch let __match_subject_2165: Opt[Result[S, F].Ok(S)] = self;  {
  let __payload_Some_2166: Result[S, F].Ok(S) = __match_subject_2165.payload[Some]  Some(_)(__match_subject_2165.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[Result[S, F].Ok(S)]_unwrap(self: Opt[Result[S, F].Ok(S)]): Result[S, F].Ok(S) return(get())
		fn Unwrap_Opt[Result[S, F].Ok(S)]_make(t: Result[S, F].Ok(S)): Opt[Result[S, F].Ok(S)] return(.Some(t))

impls for List[List.map.'T]({len: u64, buffer: Buffer[List.map.'T]({len: u64, data: List.map.'T*})})
	derived    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer()))

impls for List[Iterable_impl_List[T].'T]({len: u64, buffer: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})})
	blanket    Iterable[impl Item := TI := BufferIterator[T]] for List[T] {
		fn Iterable_List[T]_iterator(self: List[T]): BufferIterator[T] return(Iterable_Buffer[T]_iterator(toBuffer()))

impls for BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})
	derived    Iterator[impl Item := List[char]] for BufferIterator[List[char]] {
		fn Iterator_BufferIterator[List[char]]_next(self: BufferIterator[List[char]]*): Opt[List[char]] return(switch  {
  (self.*.pos < self.*.buf.len) -> {
  let item: List[char] = get_spec_List[char]_5(self.*.buf, self.*.pos);
  self.pos <- self.*.pos + 1u64;
  some_spec_List[char]_11(item)
}: Opt[List[char]],
  (true) -> .None
})
		fn Iterator_BufferIterator[List[char]]_sizeHint(self: BufferIterator[List[char]]): {atLeast: u64, atMost: Opt[u64]} {
  let rem: u64 = self.buf.len - self.pos;
  return({
    atLeast: rem,
    atMost: some_spec_u64_1(rem)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_BufferIterator[List[char]]_advanceBy(self: BufferIterator[List[char]]*, n: u64): unit {
  self.pos <- self.*.pos + n;
  return(())
}: unit
		fn Iterator_BufferIterator[List[char]]_nth(self: BufferIterator[List[char]]*, n: u64): Opt[List[char]] {
  Iterator_BufferIterator[List[char]]_advanceBy(self, n);
  return(Iterator_BufferIterator[List[char]]_next(self))
}: Opt[List[char]]

impls for string({buffer: Buffer[char]({len: u64, data: char*})})*
	concrete   Iterable[impl Item := charI := BufferIterator[char]] for string* {
		fn Iterable_string*_iterator(self: string*): BufferIterator[char] return(Iterable_string_iterator(self.*))

impls for Opt[List.map.'T](enum None | Some(List.map.'T))
	derived    Unwrap[impl Inner := T] for Opt[T] {
		fn Unwrap_Opt[T]_hasValue(self: Opt[T]): bool return(switch let __match_subject_2194: Opt[T] = self;  {
  let __payload_Some_2195: T = __match_subject_2194.payload[Some]  Some(_)(__match_subject_2194.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[T]_unwrap(self: Opt[T]): T return(get())
		fn Unwrap_Opt[T]_make(t: T): Opt[T] return(.Some(t))

impls for List[u8]({len: u64, buffer: Buffer[u8]({len: u64, data: u8*})})
	concrete   Writer for List[u8] {
		fn Writer_List[u8]_writeChar(self: List[u8]*, value: char): unit return(push_spec_u8_3(self, value as(iextfromchar) u8))
		fn Writer_List[u8]_writeByte(self: List[u8]*, value: u8): unit return(push_spec_u8_3(self, value))
		fn Writer_List[u8]_writeString(self: List[u8]*, value: string): unit return(appendBuffer_spec_u8_2(self, toByteBuffer(innerBuffer(value))))
		fn Writer_List[u8]_writeBytes(self: List[u8]*, buffer: Buffer[u8]): unit return(appendBuffer_spec_u8_2(self, buffer))

	concrete   Equals for List[u8] {
		fn Equals_List[u8]_equals(self: List[u8], other: List[u8]): bool return(Equals_Buffer[u8]_equals(toBuffer_spec_u8_3(self), toBuffer_spec_u8_3(other)))

impls for Opt[string({buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(string({buffer: Buffer[char]({len: u64, data: char*})})))
	derived    Unwrap[impl Inner := string] for Opt[string] {
		fn Unwrap_Opt[string]_hasValue(self: Opt[string]): bool return(switch let __match_subject_2540: Opt[string] = self;  {
  let __payload_Some_2541: string = __match_subject_2540.payload[Some]  Some(_)(__match_subject_2540.is[.Some]()) -> true,
  _(true) -> false,
  true(true) -> crash({
  filename: "opt.k1",
  line: 37u64
}, "Match Error")
})
		fn Unwrap_Opt[string]_unwrap(self: Opt[string]): string return(get_spec_string_16(self))
		fn Unwrap_Opt[string]_make(t: string): Opt[string] return(.Some(t))

impls for IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})
	concrete   Iterator[impl Item := i64] for IntRangeIterator {
		fn Iterator_IntRangeIterator_next(self: IntRangeIterator*): Opt[i64] return(switch  {
  (position(self.*) >= self.*.range.end) -> .None,
  (true) -> {
  let current: i64 = current(self.*);
  self.offset <- self.*.offset + 1i64;
  .Some(current)
}: Opt[i64]
})
		fn Iterator_IntRangeIterator_sizeHint(self: IntRangeIterator): {atLeast: u64, atMost: Opt[u64]} {
  let remaining: i64 = self.range.end - position(self);
  return({
    atLeast: remaining as(noop) u64,
    atMost: .Some(remaining as(noop) u64)
  })
}: {atLeast: u64, atMost: Opt[u64]}
		fn Iterator_IntRangeIterator_advanceBy(self: IntRangeIterator*, n: u64): unit {
  stepBy(self, n);
  return(())
}: unit
		fn Iterator_IntRangeIterator_nth(self: IntRangeIterator*, n: u64): Opt[i64] {
  stepBy(self, n);
  return(Iterator_IntRangeIterator_next(self))
}: Opt[i64]

--- Scopes ---
scope 00  ns (parent: _ROOT_)
	FUNCTIONS
	none -> fn none[T](): Opt[T].None
	eprintln -> fn eprintln(s: string): unit
	print -> fn print(s: string): unit
	new -> fn new[T](value: T): T*
	discard -> fn discard[T](t: T): unit
	alignOf -> intern fn alignOf[T](): u64
	crash -> fn crash(locn: SourceLocation, msg: string): never
	assert -> fn assert(locn: SourceLocation, value: bool): unit
	printIt -> fn printIt[T](value: T): unit
	some -> fn some[T](value: T): Opt[T].Some(T)
	assertEquals -> fn assertEquals[T](locn: SourceLocation, a: T, b: T): unit
	sizeOfStride -> intern fn sizeOfStride[T](): u64
	assertdbg -> fn assertdbg(locn: SourceLocation, value: bool): unit
	assertMsg -> fn assertMsg(locn: SourceLocation, msg: string, value: bool): unit
	main -> fn main(): i64
	formatUInt -> fn formatUInt[W](w: W*, value: u64, base: u64): unit
	println -> fn println(s: string): unit
	identity -> fn identity[T](value: T): T
	eprint -> fn eprint(s: string): unit
	sizeOf -> intern fn sizeOf[T](): u64
	TYPES
	Buffer -> Buffer[T]({len: u64, data: Buffer.'T*})
	Pointer -> Pointer
	i64 -> i64
	i8 -> i8
	u16 -> u16
	IntRangeIterator -> IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})
	IntRange -> IntRange({start: i64, end: i64})
	StringBuilder -> StringBuilder({parts: List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})*})
	byte -> u8
	Result -> Result[T, E](enum Ok(Result.'T) | Err(Result.'E))
	unit -> unit
	Arena -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})
	CString -> Pointer
	f32 -> f32
	bool -> bool
	i16 -> i16
	u32 -> u32
	ObjectPool -> ObjectPool({})
	int -> i64
	char -> char
	Opt -> Opt[T](enum None | Some(Opt.'T))
	List -> List[T]({len: u64, buffer: Buffer[List.'T]({len: u64, data: List.'T*})})
	f64 -> f64
	never -> never
	i32 -> i32
	u64 -> u64
	u8 -> u8
	BufferIterator -> BufferIterator[T]({buf: Buffer[BufferIterator.'T]({len: u64, data: BufferIterator.'T*}), pos: u64})
	Allocator -> Allocator({arenas: List[Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})]({len: u64, buffer: Buffer[Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})]({len: u64, data: Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})*})}), pools: List[ObjectPool({})]({len: u64, buffer: Buffer[ObjectPool({})]({len: u64, data: ObjectPool({})*})})})
	uint -> u64
	string -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Ordering -> Ordering(enum Less | Equal | Greater)
	NAMESPACES
121 -> Iterable
54 -> Buffer
566 -> fib
48 -> Pointer
688 -> string_interp_test
682 -> struct_test
676 -> ns_extend
97 -> Comparable
670 -> scopes
603 -> is_patterns
402 -> IntRange
189 -> CString
573 -> for_yield_test
555 -> enum_construction
616 -> json_test
421 -> ability_constraint
37 -> _root
543 -> enum_basic
476 -> assign
665 -> list_test
683 -> match_fails
677 -> optionals
671 -> while_test
104 -> Try
586 -> global_int
74 -> Equals
129 -> k1
446 -> ability_generic
62 -> compiler
56 -> List
568 -> float_test
367 -> types
300 -> BufferIterator
428 -> ability_fail
38 -> u8
495 -> buffer_test
684 -> matching_if
477 -> bits_test
666 -> try_test
678 -> type_info
672 -> use_test
99 -> Unwrap
502 -> condcomp
112 -> Iterator
685 -> struct_composition
423 -> ability_constraint_fail
679 -> match_exhaust
673 -> type_order
478 -> lexical_scope
667 -> pointer
600 -> inference
405 -> IntRangeIterator
88 -> Show
332 -> StringBuilder
643 -> lambdas
448 -> ability_self_call
381 -> Arena
576 -> function_pointer
46 -> bool
686 -> string_test
680 -> match_references
674 -> opaque_type_01
223 -> files
479 -> bool_test
668 -> pipe
528 -> control_flow
461 -> arith
455 -> all_out_of_order
516 -> context_params
644 -> lib_compiler_test
510 -> context_generic
4 -> char
59 -> Opt
376 -> Bits
498 -> char_test
565 -> enum_fail
687 -> range_test
681 -> struct_anon_nomethod
163 -> sys
419 -> ability_01
157 -> libc
218 -> Allocator
675 -> never_everywhere
669 -> ns_collision
84 -> WriteText
78 -> Writer
90 -> Bitwise
456 -> allocator_test
5 -> string
584 -> generic_struct

scope 01 compiler ns (parent: )
	FUNCTIONS
	location -> intern fn location(): SourceLocation
	TYPES
	SourceLocation -> SourceLocation({filename: string({buffer: Buffer[char]({len: u64, data: char*})}), line: u64})

scope 02 k1 ns (parent: )
	VARS
	OS -> OS: string
	TEST -> TEST: bool
	DEBUG -> DEBUG: bool
	OS_MACOS -> OS_MACOS: bool
	NO_STD -> NO_STD: bool

scope 03 bool ns (parent: )
	FUNCTIONS
	negated -> intern fn negated(self: bool): bool

scope 04 libc ns (parent: )
	FUNCTIONS
	memcpy -> extern fn memcpy(dst: Pointer, src: Pointer, count: u64): Pointer
	abort -> extern fn abort(): never
	free -> extern fn free(ptr: Pointer): unit
	memcmp -> extern fn memcmp(s1: Pointer, s2: Pointer, size: u64): i32
	read -> extern fn read(fileNo: i32, buffer: Pointer, count: u64, offset: u64): i64
	calloc -> extern fn calloc(count: u64, size: u64): Pointer
	write -> extern fn write(fileNo: i32, data: Pointer, count: u64, offset: u64): u64
	realloc -> extern fn realloc(ptr: Pointer, size: u64): Pointer
	exit -> extern fn exit(code: i32): never
	malloc -> extern fn malloc(size: u64): Pointer
	memset -> extern fn memset(src: Pointer, value: u32, count: u64): Pointer

scope 05 Pointer ns (parent: )
	VARS
	NULL -> NULL: Pointer
	FUNCTIONS
	refAtIndex -> intern fn refAtIndex[T](self: Pointer, index: u64): T*
	isNull -> fn isNull(self: Pointer): bool

scope 06 sys ns (parent: )
	FUNCTIONS
	random -> fn random(upperBound: u32): u32
	_k1_show_backtrace -> extern fn _k1_show_backtrace(): unit
	printBacktrace -> fn printBacktrace(): unit
	readLine -> fn readLine(maxLengthBytes: u64): Result[string, string]
	exit -> fn exit(code: i32): never
	arc4random_uniform -> extern fn arc4random_uniform(upperBound: u32): u32
	parseMainArgs -> fn parseMainArgs(argCount: u32, args: Pointer): Buffer[string]

scope 07 files ns (parent: )
	FUNCTIONS
	readToString -> fn readToString(alloc: Allocator, path: string): string
	NAMESPACES
216 -> unix

scope 08 files.unix ns (parent: files)
	VARS
	SEEK_END -> SEEK_END: i32
	SEEK_SET -> SEEK_SET: i32
	FUNCTIONS
	ftell -> extern fn ftell(fileDesc: Pointer): u64
	fclose -> extern fn fclose(fileDesc: Pointer): i32
	fread -> extern fn fread(buffer: Pointer, size: u64, num: u64, stream: Pointer): u64
	fseek -> extern fn fseek(fileDesc: Pointer, offset: u64, whence: i32): i32
	fopen -> extern fn fopen(pathCString: Pointer, modeCString: Pointer): Pointer

scope 09 char ns (parent: )
	FUNCTIONS
	toString -> fn toString(self: char): string
	toDigitValue -> fn toDigitValue(self: char): Opt[u8]

scope 10 u8 ns (parent: )
	FUNCTIONS
	toAsciiDigit -> fn toAsciiDigit(v: u8): char

scope 11 Buffer ns (parent: )
	FUNCTIONS
	get -> fn get[T](self: Buffer[T], index: u64): T
	fromRawParts -> fn fromRawParts[T](len: u64, data: Pointer): Buffer[T]
	nonEmpty -> fn nonEmpty[T](self: Buffer[T]): bool
	take -> fn take[T](self: Buffer[T], count: u64): Buffer[T]
	first -> fn first[T](self: Buffer[T]): Opt[T]
	slice -> fn slice[T](self: Buffer[T], start: u64, end: u64): Buffer[T]
	lenBytes -> fn lenBytes[T](self: Buffer[T]): u64
	_enlargedClone -> fn _enlargedClone[T](self: Buffer[T], newCount: u64): Buffer[T]
	last -> fn last[T](self: Buffer[T]): Opt[T]
	fromBaseAndCount -> fn fromBaseAndCount[T](len: u64, data: T*): Buffer[T]
	swap -> fn swap[T](self: Buffer[T]*, indexA: u64, indexB: u64): unit
	lastRef -> fn lastRef[T](self: Buffer[T]): Opt[T*]
	isEmpty -> fn isEmpty[T](self: Buffer[T]): bool
	sorted -> fn sorted[T](self: Buffer[T]): Buffer[T]
	toCharBuffer -> fn toCharBuffer(self: Buffer[u8]): Buffer[char]
	toByteBuffer -> fn toByteBuffer(self: Buffer[char]): Buffer[u8]
	filled -> fn filled[T](size: u64, value: T): Buffer[T]
	_copyFrom -> fn _copyFrom[T](source: Buffer[T], dest: Buffer[T], count: u64): unit
	dataPointer -> fn dataPointer[T](self: Buffer[T]): Pointer
	concat -> fn concat[T](self: Buffer[T], other: Buffer[T]): Buffer[T]
	firstRef -> fn firstRef[T](self: Buffer[T]): Opt[T*]
	cloned -> fn cloned[T](self: Buffer[T]): Buffer[T]
	drop -> fn drop[T](self: Buffer[T], count: u64): Buffer[T]
	getRef -> fn getRef[T](self: Buffer[T], index: u64): T*
	empty -> fn empty[T](): Buffer[T]
	set -> fn set[T](self: Buffer[T], index: u64, elem: T): unit
	_allocate -> fn _allocate[T](count: u64): Buffer[T]
	bufferLenBytes -> fn bufferLenBytes[T](count: u64): u64

scope 12 BufferIterator ns (parent: )
	FUNCTIONS
	fromBuffer -> fn fromBuffer[T](buf: Buffer[T]): BufferIterator[T]

scope 13 Opt ns (parent: )
	FUNCTIONS
	isSome -> fn isSome[T](self: Opt[T]): bool
	opt_equals -> fn opt_equals[T](a: Opt[T], b: Opt[T]): bool
	get -> fn get[T](self: Opt[T]): T
	isNone -> fn isNone[T](self: Opt[T]): bool

scope 14 List ns (parent: )
	FUNCTIONS
	appendBuffer -> fn appendBuffer[T](self: List[T]*, other: Buffer[T]): unit
	_grow -> fn _grow[T](self: List[T]*): unit
	single -> fn single[T](value: T): List[T]
	first -> fn first[T](self: List[T]): Opt[T]
	reversed -> fn reversed[T](self: List[T]): List[T]
	sorted -> fn sorted[T](self: List[T]): List[T]
	swap -> fn swap[T](self: List[T]*, indexA: u64, indexB: u64): unit
	lastRef -> fn lastRef[T](self: List[T]): Opt[T*]
	isEmpty -> fn isEmpty[T](self: List[T]): bool
	map -> fn map[T, U](self: List[T], f: some_fn_779: some fn(T) -> U): List[U]
	filled -> fn filled[T](size: u64, value: T): List[T]
	withCapacity -> fn withCapacity[T](cap: u64): List[T]
	innerBuffer -> fn innerBuffer[T](self: List[T]): Buffer[T]
	cap -> fn cap[T](self: List[T]): u64
	wrapBuffer -> fn wrapBuffer[T](buffer: Buffer[T]): List[T]
	last -> fn last[T](self: List[T]): Opt[T]
	nonEmpty -> fn nonEmpty[T](self: List[T]): bool
	flatMap -> fn flatMap[T, U](self: List[T], f: some_fn_790: some fn(T) -> List[U]): List[U]
	slice -> fn slice[T](self: List[T], start: u64, end: u64): Buffer[T]
	join -> fn join[T](self: List[T], sep: string): string
	getOpt -> fn getOpt[T](self: List[T], index: u64): Opt[T]
	reserve -> fn reserve[T](self: List[T]*, count: u64): unit
	reverse -> fn reverse[T](self: List[T]*): unit
	push -> fn push[T](self: List[T]*, elem: T): unit
	sort -> fn sort[T](input: List[T]*): unit
	concat -> fn concat[T](self: List[T]*, other: List[T]): unit
	firstRef -> fn firstRef[T](self: List[T]): Opt[T*]
	cloned -> fn cloned[T](self: List[T]): List[T]
	filter -> fn filter[T](self: List[T], f: some_fn_800: some fn(T) -> bool): List[T]
	getRef -> fn getRef[T](self: List[T], index: u64): T*
	empty -> fn empty[T](): List[T]
	set -> fn set[T](self: List[T], index: u64, elem: T): unit
	get -> fn get[T](self: List[T], index: u64): T
	toBuffer -> fn toBuffer[T](self: List[T]): Buffer[T]

scope 15 CString ns (parent: )

scope 16 string ns (parent: )
	FUNCTIONS
	splitByChar -> fn splitByChar(self: string, delim: char): List[string]
	nonEmpty -> fn nonEmpty(self: string): bool
	innerBufferBytes -> fn innerBufferBytes(self: string): Buffer[u8]
	first -> fn first(self: string): Opt[char]
	substring -> fn substring(self: string, start: u64, end: u64): string
	take -> fn take(self: string, count: u64): string
	fromBuffer -> fn fromBuffer(buffer: Buffer[char]): string
	toInt -> fn toInt(self: string): Opt[i64]
	startsWith -> fn startsWith(self: string, other: string): bool
	clone -> fn clone(self: string): string
	fromCString -> fn fromCString(cString: Pointer): string
	isEmpty -> fn isEmpty(self: string): bool
	fromBytes -> fn fromBytes(buffer: Buffer[u8]): string
	appendChar -> fn appendChar(self: string, c: char): string
	wrapBytes -> fn wrapBytes(buffer: Buffer[u8]): string
	indexOfString -> fn indexOfString(self: string, target: string): Opt[u64]
	concat -> fn concat(self: string, other: string): string
	indexOf -> fn indexOf(self: string, c: char): i64
	cloneToList -> fn cloneToList(self: string): List[char]
	innerBuffer -> fn innerBuffer(self: string): Buffer[char]
	len -> fn len(self: string): u64
	drop -> fn drop(self: string, count: u64): string
	toCString -> fn toCString(self: string): Pointer
	get -> fn get(self: string, index: u64): char
	wrapBuffer -> fn wrapBuffer(buffer: Buffer[char]): string
	wrapList -> fn wrapList(list: List[char]): string

scope 17 types ns (parent: )
	FUNCTIONS
	typeId -> intern fn typeId[T](): u64

scope 18 StringBuilder ns (parent: )
	FUNCTIONS
	withCapacity -> fn withCapacity(cap: u64): StringBuilder
	putByte -> fn putByte(self: StringBuilder, b: u8): unit
	len -> fn len(self: StringBuilder): u64
	build -> fn build(self: StringBuilder): string
	putChar -> fn putChar(self: StringBuilder, c: char): unit
	new -> fn new(): StringBuilder
	putString -> fn putString(self: StringBuilder, s: string): unit
	TYPES
	Part -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 19 Bits ns (parent: )
	FUNCTIONS
	shiftLeft -> intern fn shiftLeft(a: i64, b: i64): i64
	bitAnd -> intern fn bitAnd(a: i64, b: i64): i64
	xor -> intern fn xor(a: i64, b: i64): i64
	bitNot -> intern fn bitNot(a: i64): i64
	shiftRight -> intern fn shiftRight(a: i64, b: i64): i64
	bitOr -> intern fn bitOr(a: i64, b: i64): i64

scope 20 Arena ns (parent: )
	VARS
	gb -> gb: u64
	mb -> mb: u64
	FUNCTIONS
	push -> fn push[T](self: Arena*, t: T): T*
	pushRaw -> fn pushRaw(self: Arena*, size: u64, align: u64): Pointer
	alignTo -> fn alignTo(baseAddress: u64, alignBytes: u64): u64
	freeAll -> fn freeAll(self: Arena*): unit
	regionSizeBytes -> fn regionSizeBytes(self: Arena): u64
	new -> fn new(id: string, initialMb: u64): Arena

scope 21 Allocator ns (parent: )
	FUNCTIONS
	initDefault -> fn initDefault(): Allocator
	tempArena -> fn tempArena(self: Allocator): Arena*

scope 22 IntRange ns (parent: )
	FUNCTIONS
	upTo -> fn upTo(end: i64): IntRange
	make -> fn make(start: i64, end: i64): IntRange

scope 23 IntRangeIterator ns (parent: )
	FUNCTIONS
	stepBy -> fn stepBy(self: IntRangeIterator*, n: u64): bool
	current -> fn current(self: IntRangeIterator): i64
	position -> fn position(self: IntRangeIterator): i64
	size -> fn size(self: IntRangeIterator): i64
	make -> fn make(range: IntRange): IntRangeIterator

scope 24 ability_01 ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	Point -> Point({x: i32, y: i32})
	NAMESPACES
414 -> Codec
410 -> Num

scope 25 ability_constraint ns (parent: )
	FUNCTIONS
	add -> fn add[T](a: T, b: T): i32
	test -> fn test(): unit
	NAMESPACES
410 -> Num

scope 26 ability_constraint_fail ns (parent: )
	FUNCTIONS
	add -> fn add[T](a: T, b: T): i32
	test -> fn test(): unit
	NAMESPACES
410 -> Num

scope 27 ability_fail ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	Tool -> Tool(enum True | False | Iono)
	NAMESPACES
410 -> Num

scope 28 ability_generic ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	GenericPoint -> GenericPoint[T]({x: ability_generic.GenericPoint.'T, y: ability_generic.GenericPoint.'T})
	NAMESPACES
438 -> From
440 -> To
429 -> Add
434 -> Foob

scope 29 ability_generic.Foob ns (parent: ability_generic)
	TYPES
	myInt -> i64

scope 30 ability_self_call ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	NAMESPACES
447 -> Foo

scope 31 all_out_of_order ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	takesHelloer -> fn takesHelloer[T](t: T): MyString
	TYPES
	MyString -> MyString({s: string({buffer: Buffer[char]({len: u64, data: char*})})})
	Foo -> Foo({name: string({buffer: Buffer[char]({len: u64, data: char*})})})
	NAMESPACES
449 -> SayHello

scope 32 allocator_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 33 arith ns (parent: )
	VARS
	z -> z: i64
	FUNCTIONS
	mult -> fn mult(x: i64, y: i64): i64
	test -> fn test(): unit
	add_stuff -> fn add_stuff(x: i64, y: i64): i64

scope 34 assign ns (parent: )
	FUNCTIONS
	assignVarRef -> fn assignVarRef(): unit
	assignVar -> fn assignVar(): unit
	complexReferences -> fn complexReferences(): unit
	test -> fn test(): unit

scope 35 bits_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 36 lexical_scope ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 37 bool_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 38 buffer_test ns (parent: )
	FUNCTIONS
	bufferSwap -> fn bufferSwap(): unit
	bufferFirstLast -> fn bufferFirstLast(): unit
	bufferEmpty -> fn bufferEmpty(): unit
	bufferClone -> fn bufferClone(): unit
	test -> fn test(): unit
	bufferSlice -> fn bufferSlice(): unit
	bufferFilled -> fn bufferFilled(): unit
	bufferConcat -> fn bufferConcat(): unit
	bufferTakeDrop -> fn bufferTakeDrop(): unit
	bufferGetSet -> fn bufferGetSet(): unit

scope 39 char_test ns (parent: )
	FUNCTIONS
	basic -> fn basic(): unit
	escape -> fn escape(): unit
	test -> fn test(): unit

scope 40 condcomp ns (parent: )
	VARS
	MY_VALUE -> MY_VALUE: bool
	MY_VALUE_NEG -> MY_VALUE_NEG: bool
	FUNCTIONS
	test -> fn test(): unit

scope 41 context_generic ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	contextA -> fn contextA[T](t: T, name: string, value: T): unit
	testBox -> fn testBox(): unit
	contextB -> fn contextB[T](t: T, name: string, value: T): unit
	box -> fn box[T](foo: T, value: T): MyBox[T]
	testGenericPassing -> fn testGenericPassing(): unit
	contextC -> fn contextC[T](t: T, name: string, value: T): unit
	TYPES
	MyBox -> MyBox[T]({value: context_generic.MyBox.'T})

scope 42 context_params ns (parent: )
	FUNCTIONS
	addTracked -> fn addTracked(hist: List[string]*, x: i64, y: i64): i64
	test -> fn test(): unit
	addAll -> fn addAll(a: u8, b: u16, x: i64, y: i64): i64

scope 43 control_flow ns (parent: )
	FUNCTIONS
	doCrash -> fn doCrash(): bool
	loopBreak -> fn loopBreak(): unit
	returnSimple -> fn returnSimple(): bool
	test -> fn test(): unit
	loopNested -> fn loopNested(): unit
	rand -> fn rand(): bool
	ifNoElse -> fn ifNoElse(): i64
	loopFalse -> fn loopFalse(): unit
	returnFromIf -> fn returnFromIf(): i64
	ifBasic -> fn ifBasic(): i64

scope 44 enum_basic ns (parent: )
	FUNCTIONS
	enumNoPayload -> fn enumNoPayload(): unit
	enumPayload -> fn enumPayload(): unit
	genericEnum -> fn genericEnum(): unit
	test -> fn test(): unit
	TYPES
	Maybe -> Maybe(enum A | B(char) | C(string({buffer: Buffer[char]({len: u64, data: char*})})))
	MyResult -> MyResult[T, E](enum Ok(enum_basic.MyResult.'T) | Err(enum_basic.MyResult.'E))
	NAMESPACES
538 -> MyResult

scope 45 enum_basic.MyResult ns (parent: enum_basic)
	FUNCTIONS
	unwrap -> fn unwrap[T, E](self: MyResult[T, E]): T
	show -> fn show[T, E](self: MyResult[T, E]): string

scope 46 enum_construction ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	State -> State(enum On(unit) | Off(unit) | Zilch)
	StateHard -> StateHard(enum On(Opt[i64](enum None | Some(i64))) | Off(Opt[i64](enum None | Some(i64))))
	Contrived -> Contrived[A, B](enum Stuff({a: enum_construction.Contrived.'A, b: enum_construction.Contrived.'B}) | Empty)

scope 47 enum_fail ns (parent: )
	NAMESPACES
103 -> inner

scope 48 enum_fail.inner ns (parent: enum_fail)
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	E -> E(enum A(i64) | B | C)

scope 49 fib ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	fib -> fn fib(n: i64): i64

scope 50 float_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 51 for_yield_test ns (parent: )
	FUNCTIONS
	forYield -> fn forYield(): unit
	test -> fn test(): unit
	forString -> fn forString(): i64

scope 52 function_pointer ns (parent: )
	FUNCTIONS
	staticAddTwo -> fn staticAddTwo(x: i64): i64
	test -> fn test(): unit
	staticAddOne -> fn staticAddOne(x: i64): i64

scope 53 generic_struct ns (parent: )
	FUNCTIONS
	unboxIt -> fn unboxIt[T](b: Box[Box[Box[T]]]): T
	test -> fn test(): unit
	TYPES
	Box -> Box[T]({value: generic_struct.Box.'T})
	Pair -> Pair[T, U]({t: Opt[generic_struct.Pair.'T](enum None | Some(generic_struct.Pair.'T)), u: Opt[generic_struct.Pair.'U](enum None | Some(generic_struct.Pair.'U))})
	NAMESPACES
578 -> Pair

scope 54 generic_struct.Pair ns (parent: generic_struct)
	FUNCTIONS
	t -> fn t[T, U](self: Pair[T, U]): Opt[T]

scope 55 global_int ns (parent: )
	VARS
	bar -> bar: i64
	foo -> foo: i64
	FUNCTIONS
	test -> fn test(): unit

scope 56 inference ns (parent: )
	FUNCTIONS
	getOrElse -> fn getOrElse[T](a: Opt[T], b: T): T
	combine3 -> fn combine3[T](a: T, b: T, c: {one: T, two: T}): T
	some -> fn some[U](value: U): Opt[U].Some(U)
	test -> fn test(): unit
	identityNested -> fn identityNested[T](t: T): T
	identity -> fn identity[T](value: T): T
	combine -> fn combine[T](a: T, b: T): T
	get -> fn get[UU](value: Opt[UU]): UU
	occursCheckTest -> fn occursCheckTest[T](x: T): T

scope 57 is_patterns ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 58 json_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	Json -> Json(enum JsStr(string({buffer: Buffer[char]({len: u64, data: char*})})) | JsNumber(string({buffer: Buffer[char]({len: u64, data: char*})})) | JsBool(bool) | JsNull | JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})})) | JsObject(List[{key: string({buffer: Buffer[char]({len: u64, data: char*})}), value: Json}]({len: u64, buffer: Buffer[{key: string({buffer: Buffer[char]({len: u64, data: char*})}), value: Json}]({len: u64, data: {key: string({buffer: Buffer[char]({len: u64, data: char*})}), value: Json}*})})))

scope 59 lambdas ns (parent: )
	FUNCTIONS
	staticAddTwo -> fn staticAddTwo(x: i64): i64
	captureMut -> fn captureMut(): unit
	captures -> fn captures(): unit
	closureReturn -> fn closureReturn(): unit
	someFnParam2 -> fn someFnParam2(i: i64, f: some_fn_1850: some fn(i64) -> i64, g: some_fn_1854: some fn(i64) -> i64): i64
	runThings -> fn runThings(thunks: List[lambda_object(fn((env){}*) -> unit)]): unit
	test -> fn test(): unit
	staticAddOne -> fn staticAddOne(x: i64): i64
	thunksTest -> fn thunksTest(): unit
	someFnParamGen -> fn someFnParamGen[T](t: T, f: some_fn_1860: some fn(T) -> T, g: some_fn_1865: some fn(T) -> Opt[T]): Opt[T]
	someFnParam1 -> fn someFnParam1(i: i64, f: some_fn_1844: some fn(i64) -> i64): i64
	simpleDyn -> fn simpleDyn(thunk: lambda_object(fn((env){}*) -> unit)): unit

scope 60 lib_compiler_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 61 list_test ns (parent: )
	FUNCTIONS
	listEquality -> fn listEquality(): i64
	testSortOther -> fn testSortOther(input: List[{rank: i64, payload: string}], expected: List[{rank: i64, payload: string}]): unit
	test -> fn test(): unit
	listSlice -> fn listSlice(): unit
	testSort -> fn testSort(): unit
	testSortInt -> fn testSortInt(input: List[i64], expected: List[i64]): unit
	listOfStructs -> fn listOfStructs(): i64
	iterator -> fn iterator(): i64
	listFill -> fn listFill(): i64
	testSwap -> fn testSwap(): unit
	TYPES
	Point -> Point({x: i64, y: i64, z: i64})

scope 62 match_exhaust ns (parent: )
	FUNCTIONS
	matchOptBool -> fn matchOptBool(b: Opt[bool]): unit
	matchBool -> fn matchBool(b: bool): unit
	failedWithBaz -> fn failedWithBaz(t: TriState): bool
	bothTrue -> fn bothTrue(bb: {a: bool, b: bool}): bool
	matchTristateOpt -> fn matchTristateOpt(t: Opt[TriState]): unit
	main -> fn main(): i64
	TYPES
	TriState -> TriState(enum Yes | No | Failure({reason: string({buffer: Buffer[char]({len: u64, data: char*})})}))

scope 63 match_fails ns (parent: )
	FUNCTIONS
	unhandled -> fn unhandled(): unit
	test -> fn test(): unit
	useless -> fn useless(): unit
	TYPES
	Foo -> Foo({x: i64, y: Opt[bool](enum None | Some(bool))})
	Blub -> Blub({x: i64, y: Opt[bool](enum None | Some(bool))})

scope 64 match_references ns (parent: )
	FUNCTIONS
	main -> fn main(): i64

scope 65 matching_if ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 66 never_everywhere ns (parent: )
	FUNCTIONS
	inReturn -> fn inReturn(): never
	enumConstrPayload -> fn enumConstrPayload(): never
	binopRhs -> fn binopRhs(): never
	callArgument -> fn callArgument(): never
	test -> fn test(): unit
	inBreak -> fn inBreak(): never
	getEnumPayload -> fn getEnumPayload(): i64
	unop -> fn unop(): never
	letRhs -> fn letRhs(): unit
	castTarget -> fn castTarget(): i64
	whileCond -> fn whileCond(): never
	assgnRhs -> fn assgnRhs(): never

scope 67 ns_collision ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	NAMESPACES
731 -> bazi
732 -> baz

scope 68 ns_collision.baz ns (parent: ns_collision)
	NAMESPACES
731 -> bazi

scope 69 ns_collision.baz.bazi ns (parent: ns_collision.baz)
	FUNCTIONS
	name -> fn name(): string

scope 70 ns_collision.bazi ns (parent: ns_collision)
	FUNCTIONS
	name -> fn name(): string

scope 71 ns_extend ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	NAMESPACES
454 -> foo

scope 72 ns_extend.foo ns (parent: ns_extend)
	TYPES
	Baz -> Baz({b: i64})
	NAMESPACES
733 -> Baz

scope 73 ns_extend.foo.Baz ns (parent: ns_extend.foo)
	FUNCTIONS
	get -> fn get(self: Baz): i64
	get2 -> fn get2(self: Baz): i64

scope 74 optionals ns (parent: )
	FUNCTIONS
	blanketImpls -> fn blanketImpls(): unit
	noNum -> fn noNum(): Opt[i64]
	testBasics -> fn testBasics(): i64
	test -> fn test(): unit
	someNum -> fn someNum(): Opt[i64]
	testCoalesceAccessor -> fn testCoalesceAccessor(): unit
	optElseOperator -> fn optElseOperator(): unit
	testComplex -> fn testComplex(): i64
	TYPES
	PointMaybeY -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})
	WeirdPoint -> WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})

scope 75 pipe ns (parent: )
	FUNCTIONS
	add -> fn add(a: i64, b: i64): i64
	add1 -> fn add1(a: i64): i64
	test -> fn test(): unit

scope 76 pointer ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	Point3 -> Point3({x: i64, y: i64, z: i64})

scope 77 range_test ns (parent: )
	FUNCTIONS
	testAdvanceBy -> fn testAdvanceBy(): unit
	testUpTo -> fn testUpTo(): unit
	testBasicIntRangeIteration -> fn testBasicIntRangeIteration(): unit
	test -> fn test(): unit
	testStepBy -> fn testStepBy(): unit
	testEmptyIntRange -> fn testEmptyIntRange(): unit
	testNth -> fn testNth(): unit
	testSizeHint -> fn testSizeHint(): unit
	testNegativeIntRange -> fn testNegativeIntRange(): unit

scope 78 scopes ns (parent: )
	VARS
	x -> x: i64
	FUNCTIONS
	scopeCollision -> fn scopeCollision(x: i64): i64
	namespaceAlias -> fn namespaceAlias(): unit
	test -> fn test(): unit
	TYPES
	Foo -> Foo({x: i64})
	Alias -> Foo({x: i64})
	NAMESPACES
447 -> Foo
766 -> Outer

scope 79 scopes.Outer ns (parent: scopes)
	TYPES
	Foo -> Foo({x: i64})
	NAMESPACES
447 -> Foo

scope 80 scopes.Outer.Foo ns (parent: scopes.Outer)
	FUNCTIONS
	value -> fn value(self: Foo): i64

scope 81 scopes.Foo ns (parent: scopes)
	FUNCTIONS
	value -> fn value(self: Foo): i64

scope 82 string_interp_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit

scope 83 string_test ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	escape -> fn escape(): unit

scope 84 struct_test ns (parent: )
	FUNCTIONS
	basicStruct -> fn basicStruct(): i64
	eqAnon -> fn eqAnon(): unit
	block_area -> fn block_area(b: Block): i64
	structArgMut -> fn structArgMut(): unit
	test -> fn test(): unit
	structNested -> fn structNested(): unit
	TYPES
	Foo -> Foo({x: i64, y: bool})
	Block -> Block({position: {x: i64, y: i64, width: i64, height: i64}, text: i64})
	Point -> Point({x: i64, y: i64, z: i64, isGood: bool})
	NAMESPACES
447 -> Foo

scope 85 struct_test.Foo ns (parent: struct_test)
	FUNCTIONS
	new -> fn new(x: i64): Foo
	getValue -> fn getValue(self: Foo): i64
	setValue -> fn setValue(self: Foo*, x: i64): unit

scope 86 struct_anon_nomethod ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	PointNamed -> PointNamed({x: i64, y: i64})
	PointAlias -> {x: i64, y: i64}
	NAMESPACES
789 -> PointNamed
790 -> PointAlias

scope 87 struct_anon_nomethod.PointNamed ns (parent: struct_anon_nomethod)
	FUNCTIONS
	sum -> fn sum(self: PointNamed): i64

scope 88 struct_anon_nomethod.PointAlias ns (parent: struct_anon_nomethod)
	FUNCTIONS
	sum -> fn sum(self: {x: i64, y: i64}): i64

scope 89 struct_composition ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	User -> User({name: string({buffer: Buffer[char]({len: u64, data: char*})}), password: string({buffer: Buffer[char]({len: u64, data: char*})})})
	UserView -> UserView({name: string({buffer: Buffer[char]({len: u64, data: char*})})})
	Positioned -> Positioned({x: i64, y: i64, width: i64, height: i64})
	Text -> Text({text: string({buffer: Buffer[char]({len: u64, data: char*})}), x: i64, y: i64, width: i64, height: i64})

scope 90 try_test ns (parent: )
	FUNCTIONS
	canFailBool -> fn canFailBool(): Result[bool, string]
	run -> fn run(): Result[i32, string]
	canFailInt -> fn canFailInt(): Result[i64, string]
	test -> fn test(): unit
	fails -> fn fails(b: bool): Result[bool, string]
	TYPES
	Error -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Foo -> Foo({a: bool})

scope 91 type_info ns (parent: )
	FUNCTIONS
	testFnTypeInfo -> fn testFnTypeInfo(): unit
	testSizeOf -> fn testSizeOf(): unit
	test -> fn test(): unit
	doIt -> fn doIt(foo: bool, bar: u32): u32

scope 92 opaque_type_01 ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	UserId -> UserId({inner: i64})
	NAMESPACES
808 -> UserId

scope 93 opaque_type_01.UserId ns (parent: opaque_type_01)
	FUNCTIONS
	toInt -> fn toInt(self: UserId): i64
	make -> fn make(value: i64): UserId

scope 94 type_order ns (parent: )
	FUNCTIONS
	test -> fn test(): unit
	TYPES
	PointList -> List[{x: i64, y: i64}]({len: u64, buffer: Buffer[{x: i64, y: i64}]({len: u64, data: {x: i64, y: i64}*})})
	Point -> {x: i64, y: i64}
	NAMESPACES
813 -> ToPoint

scope 95 use_test ns (parent: )
	VARS
	SEEKEND -> SEEK_END: i32
	FUNCTIONS
	test -> fn test(): unit
	typeId -> intern fn typeId[T](): u64
	NAMESPACES
454 -> foo

scope 96 use_test.foo ns (parent: use_test)
	FUNCTIONS
	getOne -> fn getOne(): i64

scope 97 while_test ns (parent: )
	FUNCTIONS
	whileNested -> fn whileNested(): i64
	whileSimple -> fn whileSimple(): unit
	whileBreak -> fn whileBreak(): i64
	whileReturn -> fn whileReturn(): i64
	test -> fn test(): unit
	whileReturnClosure -> fn whileReturnClosure(): i64

scope 98 u8 type_defn (parent: )

scope 99 u16 type_defn (parent: )

scope 100 u32 type_defn (parent: )

scope 101 u64 type_defn (parent: )

scope 102 i8 type_defn (parent: )

scope 103 i16 type_defn (parent: )

scope 104 i32 type_defn (parent: )

scope 105 i64 type_defn (parent: )

scope 106 unit type_defn (parent: )

scope 107 char type_defn (parent: )

scope 108 bool type_defn (parent: )

scope 109 never type_defn (parent: )

scope 110 Pointer type_defn (parent: )

scope 111 f32 type_defn (parent: )

scope 112 f64 type_defn (parent: )

scope 113 Buffer type_defn (parent: )
	TYPES
	T -> Buffer.'T

scope 114 Buffer.ability_impl ability_impl (parent: Buffer)

scope 115 List type_defn (parent: )
	TYPES
	T -> List.'T

scope 116 List.ability_impl ability_impl (parent: List)

scope 117 string type_defn (parent: )

scope 118 Opt type_defn (parent: )
	TYPES
	T -> Opt.'T

scope 119 Opt.ability_impl ability_impl (parent: Opt)

scope 120 compiler.SourceLocation type_defn (parent: compiler)

scope 121 Ordering type_defn (parent: )

scope 122 Result type_defn (parent: )
	TYPES
	T -> Result.'T
	E -> Result.'E

scope 123 Result.ability_impl ability_impl (parent: Result)

scope 124 Result.ability_impl ability_impl (parent: Result)

scope 125 int type_defn (parent: )

scope 126 uint type_defn (parent: )

scope 127 byte type_defn (parent: )

scope 128 BufferIterator type_defn (parent: )
	TYPES
	T -> BufferIterator.'T

scope 129 BufferIterator.ability_impl ability_impl (parent: BufferIterator)

scope 130 CString type_defn (parent: )

scope 131 StringBuilder type_defn (parent: )

scope 132 StringBuilder.Part type_defn (parent: StringBuilder)

scope 133 Arena type_defn (parent: )

scope 134 ObjectPool type_defn (parent: )

scope 135 Allocator type_defn (parent: )

scope 136 IntRange type_defn (parent: )

scope 137 IntRangeIterator type_defn (parent: )

scope 138 ability_01.Point type_defn (parent: ability_01)

scope 139 ability_fail.Tool type_defn (parent: ability_fail)

scope 140 ability_generic.Foob.myInt type_defn (parent: ability_generic.Foob)

scope 141 ability_generic.GenericPoint type_defn (parent: ability_generic)
	TYPES
	T -> ability_generic.GenericPoint.'T

scope 142 ability_generic.GenericPoint.ability_impl ability_impl (parent: ability_generic.GenericPoint)

scope 143 all_out_of_order.MyString type_defn (parent: all_out_of_order)

scope 144 all_out_of_order.Foo type_defn (parent: all_out_of_order)

scope 145 context_generic.MyBox type_defn (parent: context_generic)
	TYPES
	T -> context_generic.MyBox.'T

scope 146 context_generic.MyBox.ability_impl ability_impl (parent: context_generic.MyBox)

scope 147 enum_basic.Maybe type_defn (parent: enum_basic)

scope 148 enum_basic.MyResult type_defn (parent: enum_basic)
	TYPES
	T -> enum_basic.MyResult.'T
	E -> enum_basic.MyResult.'E

scope 149 enum_basic.MyResult.ability_impl ability_impl (parent: enum_basic.MyResult)

scope 150 enum_basic.MyResult.ability_impl ability_impl (parent: enum_basic.MyResult)

scope 151 enum_construction.State type_defn (parent: enum_construction)

scope 152 enum_construction.StateHard type_defn (parent: enum_construction)

scope 153 enum_construction.Contrived type_defn (parent: enum_construction)
	TYPES
	B -> enum_construction.Contrived.'B
	A -> enum_construction.Contrived.'A

scope 154 enum_construction.Contrived.ability_impl ability_impl (parent: enum_construction.Contrived)

scope 155 enum_construction.Contrived.ability_impl ability_impl (parent: enum_construction.Contrived)

scope 156 enum_fail.inner.E type_defn (parent: enum_fail.inner)

scope 157 generic_struct.Box type_defn (parent: generic_struct)
	TYPES
	T -> generic_struct.Box.'T

scope 158 generic_struct.Box.ability_impl ability_impl (parent: generic_struct.Box)

scope 159 generic_struct.Pair type_defn (parent: generic_struct)
	TYPES
	T -> generic_struct.Pair.'T
	U -> generic_struct.Pair.'U

scope 160 generic_struct.Pair.ability_impl ability_impl (parent: generic_struct.Pair)

scope 161 generic_struct.Pair.ability_impl ability_impl (parent: generic_struct.Pair)

scope 162 json_test.Json type_defn (parent: json_test)

scope 163 list_test.Point type_defn (parent: list_test)

scope 164 match_exhaust.TriState type_defn (parent: match_exhaust)

scope 165 match_fails.Foo type_defn (parent: match_fails)

scope 166 match_fails.Blub type_defn (parent: match_fails)

scope 167 ns_extend.foo.Baz type_defn (parent: ns_extend.foo)

scope 168 optionals.PointMaybeY type_defn (parent: optionals)

scope 169 optionals.WeirdPoint type_defn (parent: optionals)

scope 170 pointer.Point3 type_defn (parent: pointer)

scope 171 scopes.Foo type_defn (parent: scopes)

scope 172 scopes.Alias type_defn (parent: scopes)

scope 173 scopes.Outer.Foo type_defn (parent: scopes.Outer)

scope 174 struct_test.Point type_defn (parent: struct_test)

scope 175 struct_test.Foo type_defn (parent: struct_test)

scope 176 struct_test.Block type_defn (parent: struct_test)

scope 177 struct_anon_nomethod.PointNamed type_defn (parent: struct_anon_nomethod)

scope 178 struct_anon_nomethod.PointAlias type_defn (parent: struct_anon_nomethod)

scope 179 struct_composition.Positioned type_defn (parent: struct_composition)

scope 180 struct_composition.Text type_defn (parent: struct_composition)

scope 181 struct_composition.User type_defn (parent: struct_composition)

scope 182 struct_composition.UserView type_defn (parent: struct_composition)

scope 183 try_test.Error type_defn (parent: try_test)

scope 184 try_test.Foo type_defn (parent: try_test)

scope 185 opaque_type_01.UserId type_defn (parent: opaque_type_01)

scope 186 type_order.PointList type_defn (parent: type_order)

scope 187 type_order.Point type_defn (parent: type_order)

scope 188 Equals ability_defn (parent: )
	FUNCTIONS
	equals -> fn equals[Self](self: Self, other: Self): bool
	TYPES
	Self -> Equals.'Self

scope 189 Equals.ability_impl ability_impl (parent: Equals)

scope 190 Equals.equals fn (parent: Equals)
	VARS
	self -> self: Self
	other -> other: Self

scope 191 Writer ability_defn (parent: )
	FUNCTIONS
	writeChar -> fn writeChar[Self](self: Self*, value: char): unit
	writeByte -> fn writeByte[Self](self: Self*, value: u8): unit
	writeBytes -> fn writeBytes[Self](self: Self*, buffer: Buffer[u8]): unit
	writeString -> fn writeString[Self](self: Self*, value: string): unit
	TYPES
	Self -> Writer.'Self

scope 192 Writer.ability_impl ability_impl (parent: Writer)

scope 193 Writer.writeChar fn (parent: Writer)
	VARS
	value -> value: char
	self -> self: Self*

scope 194 Writer.writeByte fn (parent: Writer)
	VARS
	value -> value: u8
	self -> self: Self*

scope 195 Writer.writeString fn (parent: Writer)
	VARS
	value -> value: string
	self -> self: Self*

scope 196 Writer.writeBytes fn (parent: Writer)
	VARS
	buffer -> buffer: Buffer[u8]
	self -> self: Self*

scope 197 WriteText ability_defn (parent: )
	FUNCTIONS
	writeText -> fn writeText[Self, W](self: Self, w: W*): unit
	TYPES
	Self -> WriteText.'Self

scope 198 WriteText.ability_impl ability_impl (parent: WriteText)

scope 199 WriteText.writeText fn (parent: WriteText)
	VARS
	w -> w: W*
	self -> self: Self
	TYPES
	W -> WriteText.writeText.'W

scope 200 WriteText.writeText.ability_impl ability_impl (parent: WriteText.writeText)
	TYPES
	Self -> WriteText.writeText.'W

scope 201 WriteText.writeText.ability_impl.Writer_W_writeChar fn (parent: WriteText.writeText.ability_impl)
	VARS
	value -> value: char
	self -> self: W*

scope 202 WriteText.writeText.ability_impl.Writer_W_writeByte fn (parent: WriteText.writeText.ability_impl)
	VARS
	value -> value: u8
	self -> self: W*

scope 203 WriteText.writeText.ability_impl.Writer_W_writeString fn (parent: WriteText.writeText.ability_impl)
	VARS
	value -> value: string
	self -> self: W*

scope 204 WriteText.writeText.ability_impl.Writer_W_writeBytes fn (parent: WriteText.writeText.ability_impl)
	VARS
	buffer -> buffer: Buffer[u8]
	self -> self: W*

scope 205 Show ability_defn (parent: )
	FUNCTIONS
	show -> fn show[Self](self: Self): string
	TYPES
	Self -> Show.'Self

scope 206 Show.ability_impl ability_impl (parent: Show)

scope 207 Show.show fn (parent: Show)
	VARS
	self -> self: Self

scope 208 Bitwise ability_defn (parent: )
	FUNCTIONS
	shiftLeft -> fn shiftLeft[Self](self: Self, other: Self): Self
	bitAnd -> fn bitAnd[Self](self: Self, other: Self): Self
	xor -> fn xor[Self](self: Self, other: Self): Self
	bitNot -> fn bitNot[Self](self: Self): Self
	shiftRight -> fn shiftRight[Self](self: Self, other: Self): Self
	bitOr -> fn bitOr[Self](self: Self, other: Self): Self
	TYPES
	Self -> Bitwise.'Self

scope 209 Bitwise.ability_impl ability_impl (parent: Bitwise)

scope 210 Bitwise.bitNot fn (parent: Bitwise)
	VARS
	self -> self: Self

scope 211 Bitwise.bitAnd fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 212 Bitwise.bitOr fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 213 Bitwise.xor fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 214 Bitwise.shiftLeft fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 215 Bitwise.shiftRight fn (parent: Bitwise)
	VARS
	self -> self: Self
	other -> other: Self

scope 216 Comparable ability_defn (parent: )
	FUNCTIONS
	compare -> fn compare[Self](self: Self, other: Self): Ordering
	TYPES
	Self -> Comparable.'Self

scope 217 Comparable.ability_impl ability_impl (parent: Comparable)

scope 218 Comparable.compare fn (parent: Comparable)
	VARS
	self -> self: Self
	other -> other: Self

scope 219 Unwrap ability_defn (parent: )
	FUNCTIONS
	hasValue -> fn hasValue[Self](self: Self): bool
	unwrap -> fn unwrap[Self](self: Self): Inner
	make -> fn make[Self](inner: Inner): Self
	TYPES
	Self -> Unwrap.'Self
	Inner -> Unwrap.'Inner

scope 220 Unwrap.ability_impl ability_impl (parent: Unwrap)

scope 221 Unwrap.ability_impl ability_impl (parent: Unwrap)

scope 222 Unwrap.hasValue fn (parent: Unwrap)
	VARS
	self -> self: Self

scope 223 Unwrap.unwrap fn (parent: Unwrap)
	VARS
	self -> self: Self

scope 224 Unwrap.make fn (parent: Unwrap)
	VARS
	inner -> inner: Inner

scope 225 Try ability_defn (parent: )
	FUNCTIONS
	getOk -> fn getOk[Self](self: Self): T
	makeError -> fn makeError[Self](e: E): Self
	getError -> fn getError[Self](self: Self): E
	makeOk -> fn makeOk[Self](t: T): Self
	isOk -> fn isOk[Self](self: Self): bool
	TYPES
	T -> Try.'T
	Self -> Try.'Self
	E -> Try.'E

scope 226 Try.ability_impl ability_impl (parent: Try)

scope 227 Try.ability_impl ability_impl (parent: Try)

scope 228 Try.ability_impl ability_impl (parent: Try)

scope 229 Try.makeError fn (parent: Try)
	VARS
	e -> e: E

scope 230 Try.makeOk fn (parent: Try)
	VARS
	t -> t: T

scope 231 Try.isOk fn (parent: Try)
	VARS
	self -> self: Self

scope 232 Try.getError fn (parent: Try)
	VARS
	self -> self: Self

scope 233 Try.getOk fn (parent: Try)
	VARS
	self -> self: Self

scope 234 Iterator ability_defn (parent: )
	FUNCTIONS
	advanceBy -> fn advanceBy[Self](self: Self*, n: u64): unit
	sizeHint -> fn sizeHint[Self](self: Self): {atLeast: u64, atMost: Opt[u64]}
	nth -> fn nth[Self](self: Self*, n: u64): Opt[Item]
	next -> fn next[Self](self: Self*): Opt[Item]
	TYPES
	Self -> Iterator.'Self
	Item -> Iterator.'Item

scope 235 Iterator.ability_impl ability_impl (parent: Iterator)

scope 236 Iterator.ability_impl ability_impl (parent: Iterator)

scope 237 Iterator.next fn (parent: Iterator)
	VARS
	self -> self: Self*

scope 238 Iterator.sizeHint fn (parent: Iterator)
	VARS
	self -> self: Self

scope 239 Iterator.advanceBy fn (parent: Iterator)
	VARS
	n -> n: u64
	self -> self: Self*

scope 240 Iterator.nth fn (parent: Iterator)
	VARS
	n -> n: u64
	self -> self: Self*

scope 241 Iterable ability_defn (parent: )
	FUNCTIONS
	iterator -> fn iterator[Self](self: Self): I
	TYPES
	Self -> Iterable.'Self
	Item -> Iterable.'Item
	I -> Iterable.'I

scope 242 Iterable.ability_impl ability_impl (parent: Iterable)

scope 243 Iterable.ability_impl ability_impl (parent: Iterable)

scope 244 Iterable.ability_impl ability_impl (parent: Iterable)
	TYPES
	Self -> Iterable.'I
	Item -> Iterable.'Item

scope 245 Iterable.ability_impl.Iterator_I_next fn (parent: Iterable.ability_impl)
	VARS
	self -> self: I*

scope 246 Iterable.ability_impl.Iterator_I_sizeHint fn (parent: Iterable.ability_impl)
	VARS
	self -> self: I

scope 247 Iterable.ability_impl.Iterator_I_advanceBy fn (parent: Iterable.ability_impl)
	VARS
	n -> n: u64
	self -> self: I*

scope 248 Iterable.ability_impl.Iterator_I_nth fn (parent: Iterable.ability_impl)
	VARS
	n -> n: u64
	self -> self: I*

scope 249 Iterable.iterator fn (parent: Iterable)
	VARS
	self -> self: Self

scope 250 sizeOf fn (parent: )
	TYPES
	T -> sizeOf.'T

scope 251 sizeOf.ability_impl ability_impl (parent: sizeOf)

scope 252 sizeOfStride fn (parent: )
	TYPES
	T -> sizeOfStride.'T

scope 253 sizeOfStride.ability_impl ability_impl (parent: sizeOfStride)

scope 254 alignOf fn (parent: )
	TYPES
	T -> alignOf.'T

scope 255 alignOf.ability_impl ability_impl (parent: alignOf)

scope 256 compiler.location fn (parent: compiler)

scope 257 bool.negated fn (parent: bool)
	VARS
	self -> self: bool

scope 258 Equals_impl_bool ability_impl (parent: )
	TYPES
	Self -> bool

scope 259 Equals_impl_bool.Equals_bool_equals fn (parent: Equals_impl_bool)
	VARS
	self -> self: bool
	other -> other: bool

scope 260 discard fn (parent: )
	VARS
	t -> t: T
	TYPES
	T -> discard.'T

scope 261 discard.ability_impl ability_impl (parent: discard)

scope 262 libc.exit fn (parent: libc)
	VARS
	code -> code: i32

scope 263 libc.read fn (parent: libc)
	VARS
	buffer -> buffer: Pointer
	count -> count: u64
	fileNo -> fileNo: i32
	offset -> offset: u64

scope 264 libc.write fn (parent: libc)
	VARS
	count -> count: u64
	fileNo -> fileNo: i32
	data -> data: Pointer
	offset -> offset: u64

scope 265 libc.memcpy fn (parent: libc)
	VARS
	dst -> dst: Pointer
	src -> src: Pointer
	count -> count: u64

scope 266 libc.memset fn (parent: libc)
	VARS
	value -> value: u32
	src -> src: Pointer
	count -> count: u64

scope 267 libc.memcmp fn (parent: libc)
	VARS
	s1 -> s1: Pointer
	s2 -> s2: Pointer
	size -> size: u64

scope 268 libc.calloc fn (parent: libc)
	VARS
	count -> count: u64
	size -> size: u64

scope 269 libc.malloc fn (parent: libc)
	VARS
	size -> size: u64

scope 270 libc.free fn (parent: libc)
	VARS
	ptr -> ptr: Pointer

scope 271 libc.realloc fn (parent: libc)
	VARS
	size -> size: u64
	ptr -> ptr: Pointer

scope 272 libc.abort fn (parent: libc)

scope 273 assert fn (parent: )
	VARS
	locn -> locn: SourceLocation
	value -> value: bool

scope 274 assertdbg fn (parent: )
	VARS
	locn -> locn: SourceLocation
	value -> value: bool

scope 275 crash fn (parent: )
	VARS
	locn -> locn: SourceLocation
	msg -> msg: string

scope 276 assertEquals fn (parent: )
	VARS
	locn -> locn: SourceLocation
	a -> a: T
	b -> b: T
	TYPES
	T -> assertEquals.'T

scope 277 assertEquals.ability_impl ability_impl (parent: assertEquals)
	TYPES
	Self -> assertEquals.'T

scope 278 assertEquals.ability_impl.Show_T_show fn (parent: assertEquals.ability_impl)
	VARS
	self -> self: T

scope 279 assertEquals.ability_impl.Equals_T_equals fn (parent: assertEquals.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 280 Pointer.isNull fn (parent: Pointer)
	VARS
	self -> self: Pointer

scope 281 Pointer.refAtIndex fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Pointer.refAtIndex.'T

scope 282 Pointer.refAtIndex.ability_impl ability_impl (parent: Pointer.refAtIndex)

scope 283 Equals_impl_Pointer ability_impl (parent: )
	TYPES
	Self -> Pointer

scope 284 Equals_impl_Pointer.Equals_Pointer_equals fn (parent: Equals_impl_Pointer)
	VARS
	self -> self: Pointer
	other -> other: Pointer

scope 285 new fn (parent: )
	VARS
	value -> value: T
	t -> t: T*
	ptr -> ptr: Pointer
	TYPES
	T -> new.'T

scope 286 new.ability_impl ability_impl (parent: new)

scope 287 identity fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> identity.'T

scope 288 identity.ability_impl ability_impl (parent: identity)

scope 289 printIt fn (parent: )
	VARS
	value -> value: T
	s -> s: string
	TYPES
	T -> printIt.'T

scope 290 printIt.ability_impl ability_impl (parent: printIt)
	TYPES
	Self -> printIt.'T

scope 291 printIt.ability_impl.Show_T_show fn (parent: printIt.ability_impl)
	VARS
	self -> self: T

scope 292 print fn (parent: )
	VARS
	s -> s: string

scope 293 println fn (parent: )
	VARS
	s -> s: string

scope 294 eprint fn (parent: )
	VARS
	s -> s: string

scope 295 eprintln fn (parent: )
	VARS
	s -> s: string

scope 296 sys._k1_show_backtrace fn (parent: sys)

scope 297 sys.printBacktrace fn (parent: sys)

scope 298 sys.exit fn (parent: sys)
	VARS
	code -> code: i32

scope 299 sys.arc4random_uniform fn (parent: sys)
	VARS
	upperBound -> upperBound: u32

scope 300 sys.random fn (parent: sys)
	VARS
	upperBound -> upperBound: u32

scope 301 sys.parseMainArgs fn (parent: sys)
	VARS
	strings -> strings: List[string]
	argCount -> argCount: u32
	buf -> buf: Buffer[Pointer]
	i -> mut i: u32
	args -> args: Pointer

scope 302 sys.readLine fn (parent: sys)
	VARS
	buffer -> buffer: Buffer[u8]*
	maxLengthBytes -> maxLengthBytes: u64
	bytesRead -> bytesRead: i64
	length -> length: u64
	result -> result: string

scope 303 files.unix.fopen fn (parent: files.unix)
	VARS
	modeCString -> modeCString: Pointer
	pathCString -> pathCString: Pointer

scope 304 files.unix.fseek fn (parent: files.unix)
	VARS
	whence -> whence: i32
	fileDesc -> fileDesc: Pointer
	offset -> offset: u64

scope 305 files.unix.fread fn (parent: files.unix)
	VARS
	buffer -> buffer: Pointer
	num -> num: u64
	size -> size: u64
	stream -> stream: Pointer

scope 306 files.unix.fclose fn (parent: files.unix)
	VARS
	fileDesc -> fileDesc: Pointer

scope 307 files.unix.ftell fn (parent: files.unix)
	VARS
	fileDesc -> fileDesc: Pointer

scope 308 files.readToString fn (parent: files)
	VARS
	path -> path: string
	fileSizeBytes -> fileSizeBytes: u64
	filenameCString -> filenameCString: Pointer
	alloc -> alloc: Allocator
	file -> file: Pointer
	buf -> buf: Pointer
	string -> string: string

scope 309 assertMsg fn (parent: )
	VARS
	locn -> locn: SourceLocation
	value -> value: bool
	msg -> msg: string

scope 310 char.toString fn (parent: char)
	VARS
	self -> self: char

scope 311 char.toDigitValue fn (parent: char)
	VARS
	self -> self: char
	i_code -> i_code: u8

scope 312 Show_impl_T ability_impl (parent: )
	TYPES
	T -> Show_impl_T.'T
	Self -> Show_impl_T.'T

scope 313 Show_impl_T.ability_impl ability_impl (parent: Show_impl_T)

scope 314 Show_impl_T.ability_impl ability_impl (parent: Show_impl_T)
	TYPES
	Self -> Show_impl_T.'T

scope 315 Show_impl_T.ability_impl.WriteText_T_writeText fn (parent: Show_impl_T.ability_impl)
	VARS
	w -> w: W*
	self -> self: T
	TYPES
	W -> Show_impl_T.ability_impl.WriteText_T_writeText.'W

scope 316 Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl ability_impl (parent: Show_impl_T.ability_impl.WriteText_T_writeText)
	TYPES
	Self -> Show_impl_T.ability_impl.WriteText_T_writeText.'W

scope 317 Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl.Writer_W_writeChar fn (parent: Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl)
	VARS
	value -> value: char
	self -> self: W*

scope 318 Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl.Writer_W_writeByte fn (parent: Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl)
	VARS
	value -> value: u8
	self -> self: W*

scope 319 Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl.Writer_W_writeString fn (parent: Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl)
	VARS
	value -> value: string
	self -> self: W*

scope 320 Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl.Writer_W_writeBytes fn (parent: Show_impl_T.ability_impl.WriteText_T_writeText.ability_impl)
	VARS
	buffer -> buffer: Buffer[u8]
	self -> self: W*

scope 321 Show_impl_T.Show_T_show fn (parent: Show_impl_T)
	VARS
	self -> self: T
	buf -> buf: List[char]*

scope 322 Show_impl_bool ability_impl (parent: )
	TYPES
	Self -> bool

scope 323 Show_impl_bool.Show_bool_show fn (parent: Show_impl_bool)
	VARS
	self -> self: bool

scope 324 Show_impl_char ability_impl (parent: )
	TYPES
	Self -> char

scope 325 Show_impl_char.Show_char_show fn (parent: Show_impl_char)
	VARS
	self -> self: char

scope 326 Show_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 327 Show_impl_i64.Show_i64_show fn (parent: Show_impl_i64)
	VARS
	remaining -> mut remaining: i64
	self -> self: i64
	buf -> buf: List[char]*
	neg -> neg: bool
	rev -> rev: List[char]

scope 328 Comparable_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 329 Comparable_impl_i64.Comparable_i64_compare fn (parent: Comparable_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 330 Comparable_impl_u64 ability_impl (parent: )
	TYPES
	Self -> u64

scope 331 Comparable_impl_u64.Comparable_u64_compare fn (parent: Comparable_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 332 Comparable_impl_u8 ability_impl (parent: )
	TYPES
	Self -> u8

scope 333 Comparable_impl_u8.Comparable_u8_compare fn (parent: Comparable_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 334 u8.toAsciiDigit fn (parent: u8)
	VARS
	v -> v: u8

scope 335 formatUInt fn (parent: )
	VARS
	w -> w: W*
	value -> value: u64
	base -> base: u64
	TYPES
	W -> formatUInt.'W

scope 336 formatUInt.ability_impl ability_impl (parent: formatUInt)
	TYPES
	Self -> formatUInt.'W

scope 337 formatUInt.ability_impl.Writer_W_writeChar fn (parent: formatUInt.ability_impl)
	VARS
	value -> value: char
	self -> self: W*

scope 338 formatUInt.ability_impl.Writer_W_writeByte fn (parent: formatUInt.ability_impl)
	VARS
	value -> value: u8
	self -> self: W*

scope 339 formatUInt.ability_impl.Writer_W_writeString fn (parent: formatUInt.ability_impl)
	VARS
	value -> value: string
	self -> self: W*

scope 340 formatUInt.ability_impl.Writer_W_writeBytes fn (parent: formatUInt.ability_impl)
	VARS
	buffer -> buffer: Buffer[u8]
	self -> self: W*

scope 341 Show_impl_u64 ability_impl (parent: )
	TYPES
	Self -> u64

scope 342 Show_impl_u64.Show_u64_show fn (parent: Show_impl_u64)
	VARS
	remaining -> mut remaining: u64
	self -> self: u64
	buf -> buf: List[char]*

scope 343 Show_impl_u32 ability_impl (parent: )
	TYPES
	Self -> u32

scope 344 Show_impl_u32.Show_u32_show fn (parent: Show_impl_u32)
	VARS
	self -> self: u32

scope 345 Show_impl_u8 ability_impl (parent: )
	TYPES
	Self -> u8

scope 346 Show_impl_u8.Show_u8_show fn (parent: Show_impl_u8)
	VARS
	self -> self: u8

scope 347 Show_impl_i32 ability_impl (parent: )
	TYPES
	Self -> i32

scope 348 Show_impl_i32.Show_i32_show fn (parent: Show_impl_i32)
	VARS
	self -> self: i32

scope 349 Show_impl_i16 ability_impl (parent: )
	TYPES
	Self -> i16

scope 350 Show_impl_i16.Show_i16_show fn (parent: Show_impl_i16)
	VARS
	self -> self: i16

scope 351 Show_impl_i8 ability_impl (parent: )
	TYPES
	Self -> i8

scope 352 Show_impl_i8.Show_i8_show fn (parent: Show_impl_i8)
	VARS
	self -> self: i8

scope 353 Equals_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 354 Equals_impl_i64.Equals_i64_equals fn (parent: Equals_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 355 Try_impl_Result[S, F] ability_impl (parent: )
	TYPES
	Self -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F](enum Ok(Try_impl_Result[S, F].'S) | Err(Try_impl_Result[S, F].'F))
	F -> Try_impl_Result[S, F].'F
	T -> Try_impl_Result[S, F].'S
	E -> Try_impl_Result[S, F].'F
	S -> Try_impl_Result[S, F].'S

scope 356 Try_impl_Result[S, F].ability_impl ability_impl (parent: Try_impl_Result[S, F])

scope 357 Try_impl_Result[S, F].ability_impl ability_impl (parent: Try_impl_Result[S, F])

scope 358 Try_impl_Result[S, F].Try_Result[S, F]_makeError fn (parent: Try_impl_Result[S, F])
	VARS
	e -> e: F

scope 359 Try_impl_Result[S, F].Try_Result[S, F]_makeOk fn (parent: Try_impl_Result[S, F])
	VARS
	t -> t: S

scope 360 Try_impl_Result[S, F].Try_Result[S, F]_isOk fn (parent: Try_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]
	__match_subject_806 -> __match_subject_806: Result[S, F]

scope 361 Try_impl_Result[S, F].Try_Result[S, F]_getError fn (parent: Try_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]

scope 362 Try_impl_Result[S, F].Try_Result[S, F]_getOk fn (parent: Try_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]

scope 363 Unwrap_impl_Result[S, F] ability_impl (parent: )
	TYPES
	Self -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F](enum Ok(Unwrap_impl_Result[S, F].'S) | Err(Unwrap_impl_Result[S, F].'F))
	Inner -> Unwrap_impl_Result[S, F].'S
	F -> Unwrap_impl_Result[S, F].'F
	S -> Unwrap_impl_Result[S, F].'S

scope 364 Unwrap_impl_Result[S, F].ability_impl ability_impl (parent: Unwrap_impl_Result[S, F])

scope 365 Unwrap_impl_Result[S, F].ability_impl ability_impl (parent: Unwrap_impl_Result[S, F])

scope 366 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue fn (parent: Unwrap_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]
	__match_subject_814 -> __match_subject_814: Result[S, F]

scope 367 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_unwrap fn (parent: Unwrap_impl_Result[S, F])
	VARS
	self -> self: Result[S, F]

scope 368 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_make fn (parent: Unwrap_impl_Result[S, F])
	VARS
	inner -> inner: S

scope 369 Buffer.bufferLenBytes fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer.bufferLenBytes.'T

scope 370 Buffer.bufferLenBytes.ability_impl ability_impl (parent: Buffer.bufferLenBytes)

scope 371 Buffer.dataPointer fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.dataPointer.'T

scope 372 Buffer.dataPointer.ability_impl ability_impl (parent: Buffer.dataPointer)

scope 373 Buffer.fromRawParts fn (parent: Buffer)
	VARS
	len -> len: u64
	data -> data: Pointer
	TYPES
	T -> Buffer.fromRawParts.'T

scope 374 Buffer.fromRawParts.ability_impl ability_impl (parent: Buffer.fromRawParts)

scope 375 Buffer.fromBaseAndCount fn (parent: Buffer)
	VARS
	len -> len: u64
	data -> data: T*
	TYPES
	T -> Buffer.fromBaseAndCount.'T

scope 376 Buffer.fromBaseAndCount.ability_impl ability_impl (parent: Buffer.fromBaseAndCount)

scope 377 Buffer._allocate fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: T*
	ptr -> ptr: Pointer
	TYPES
	T -> Buffer._allocate.'T

scope 378 Buffer._allocate.ability_impl ability_impl (parent: Buffer._allocate)

scope 379 Buffer._copyFrom fn (parent: Buffer)
	VARS
	source -> source: Buffer[T]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[T]
	TYPES
	T -> Buffer._copyFrom.'T

scope 380 Buffer._copyFrom.ability_impl ability_impl (parent: Buffer._copyFrom)

scope 381 Buffer._enlargedClone fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[T]
	self -> self: Buffer[T]
	TYPES
	T -> Buffer._enlargedClone.'T

scope 382 Buffer._enlargedClone.ability_impl ability_impl (parent: Buffer._enlargedClone)

scope 383 Buffer.lenBytes fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.lenBytes.'T

scope 384 Buffer.lenBytes.ability_impl ability_impl (parent: Buffer.lenBytes)

scope 385 Buffer.empty fn (parent: Buffer)
	TYPES
	T -> Buffer.empty.'T

scope 386 Buffer.empty.ability_impl ability_impl (parent: Buffer.empty)

scope 387 Buffer.filled fn (parent: Buffer)
	VARS
	buf -> buf: Buffer[T]
	size -> size: u64
	value -> value: T
	i -> mut i: u64
	TYPES
	T -> Buffer.filled.'T

scope 388 Buffer.filled.ability_impl ability_impl (parent: Buffer.filled)

scope 389 Buffer.slice fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: T*
	end -> end: u64
	TYPES
	T -> Buffer.slice.'T

scope 390 Buffer.slice.ability_impl ability_impl (parent: Buffer.slice)

scope 391 Buffer.take fn (parent: Buffer)
	VARS
	count -> count: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.take.'T

scope 392 Buffer.take.ability_impl ability_impl (parent: Buffer.take)

scope 393 Buffer.drop fn (parent: Buffer)
	VARS
	count -> count: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.drop.'T

scope 394 Buffer.drop.ability_impl ability_impl (parent: Buffer.drop)

scope 395 Buffer.getRef fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.getRef.'T

scope 396 Buffer.getRef.ability_impl ability_impl (parent: Buffer.getRef)

scope 397 Buffer.set fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	tRef -> tRef: T*
	elem -> elem: T
	TYPES
	T -> Buffer.set.'T

scope 398 Buffer.set.ability_impl ability_impl (parent: Buffer.set)

scope 399 Buffer.get fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[T]
	tRef -> tRef: T*
	TYPES
	T -> Buffer.get.'T

scope 400 Buffer.get.ability_impl ability_impl (parent: Buffer.get)

scope 401 Buffer.cloned fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[T]
	numBytes -> numBytes: u64
	TYPES
	T -> Buffer.cloned.'T

scope 402 Buffer.cloned.ability_impl ability_impl (parent: Buffer.cloned)

scope 403 Buffer.isEmpty fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.isEmpty.'T

scope 404 Buffer.isEmpty.ability_impl ability_impl (parent: Buffer.isEmpty)

scope 405 Buffer.nonEmpty fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.nonEmpty.'T

scope 406 Buffer.nonEmpty.ability_impl ability_impl (parent: Buffer.nonEmpty)

scope 407 Buffer.firstRef fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.firstRef.'T

scope 408 Buffer.firstRef.ability_impl ability_impl (parent: Buffer.firstRef)

scope 409 Buffer.first fn (parent: Buffer)
	VARS
	__match_subject_841 -> __match_subject_841: Opt[T*]
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.first.'T

scope 410 Buffer.first.ability_impl ability_impl (parent: Buffer.first)

scope 411 Buffer.lastRef fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.lastRef.'T

scope 412 Buffer.lastRef.ability_impl ability_impl (parent: Buffer.lastRef)

scope 413 Buffer.last fn (parent: Buffer)
	VARS
	self -> self: Buffer[T]
	__match_subject_844 -> __match_subject_844: Opt[T*]
	TYPES
	T -> Buffer.last.'T

scope 414 Buffer.last.ability_impl ability_impl (parent: Buffer.last)

scope 415 Buffer.concat fn (parent: Buffer)
	VARS
	new -> new: Buffer[T]
	self -> self: Buffer[T]
	other -> other: Buffer[T]
	TYPES
	T -> Buffer.concat.'T

scope 416 Buffer.concat.ability_impl ability_impl (parent: Buffer.concat)

scope 417 Buffer.swap fn (parent: Buffer)
	VARS
	aRef -> aRef: T*
	self -> self: Buffer[T]*
	bValue -> bValue: T
	indexB -> indexB: u64
	bRef -> bRef: T*
	indexA -> indexA: u64
	TYPES
	T -> Buffer.swap.'T

scope 418 Buffer.swap.ability_impl ability_impl (parent: Buffer.swap)

scope 419 Buffer.sorted fn (parent: Buffer)
	VARS
	list -> list: List[T]*
	self -> self: Buffer[T]
	TYPES
	T -> Buffer.sorted.'T

scope 420 Buffer.sorted.ability_impl ability_impl (parent: Buffer.sorted)
	TYPES
	Self -> Buffer.sorted.'T

scope 421 Buffer.sorted.ability_impl.Comparable_T_compare fn (parent: Buffer.sorted.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 422 Buffer.toCharBuffer fn (parent: Buffer)
	VARS
	self -> self: Buffer[u8]

scope 423 Buffer.toByteBuffer fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]

scope 424 Equals_impl_Buffer[u8] ability_impl (parent: )
	TYPES
	Self -> Buffer[u8]({len: u64, data: u8*})

scope 425 Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals fn (parent: Equals_impl_Buffer[u8])
	VARS
	self -> self: Buffer[u8]
	other -> other: Buffer[u8]

scope 426 Equals_impl_Buffer[char] ability_impl (parent: )
	TYPES
	Self -> Buffer[char]({len: u64, data: char*})

scope 427 Equals_impl_Buffer[char].Equals_Buffer[char]_equals fn (parent: Equals_impl_Buffer[char])
	VARS
	self -> self: Buffer[char]
	other -> other: Buffer[char]

scope 428 Equals_impl_Buffer[i64] ability_impl (parent: )
	TYPES
	Self -> Buffer[i64]({len: u64, data: i64*})

scope 429 Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals fn (parent: Equals_impl_Buffer[i64])
	VARS
	self -> self: Buffer[i64]
	other -> other: Buffer[i64]

scope 430 BufferIterator.fromBuffer fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[T]
	TYPES
	T -> BufferIterator.fromBuffer.'T

scope 431 BufferIterator.fromBuffer.ability_impl ability_impl (parent: BufferIterator.fromBuffer)

scope 432 Iterator_impl_BufferIterator[T] ability_impl (parent: )
	TYPES
	T -> Iterator_impl_BufferIterator[T].'T
	Self -> BufferIterator[Iterator_impl_BufferIterator[T].'T]({buf: Buffer[Iterator_impl_BufferIterator[T].'T]({len: u64, data: Iterator_impl_BufferIterator[T].'T*}), pos: u64})
	Item -> Iterator_impl_BufferIterator[T].'T

scope 433 Iterator_impl_BufferIterator[T].ability_impl ability_impl (parent: Iterator_impl_BufferIterator[T])

scope 434 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	self -> self: BufferIterator[T]*

scope 435 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_sizeHint fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 436 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_advanceBy fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 437 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_nth fn (parent: Iterator_impl_BufferIterator[T])
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 438 Iterable_impl_Buffer[T] ability_impl (parent: )
	TYPES
	Self -> Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*})
	Item -> Iterable_impl_Buffer[T].'T
	T -> Iterable_impl_Buffer[T].'T
	I -> BufferIterator[Iterable_impl_Buffer[T].'T]({buf: Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*}), pos: u64})

scope 439 Iterable_impl_Buffer[T].ability_impl ability_impl (parent: Iterable_impl_Buffer[T])

scope 440 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_Buffer[T].'T

scope 441 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_Buffer[T].'T
	Self -> BufferIterator[Iterable_impl_Buffer[T].'T]({buf: Buffer[Iterable_impl_Buffer[T].'T]({len: u64, data: Iterable_impl_Buffer[T].'T*}), pos: u64})
	Item -> Iterable_impl_Buffer[T].'T

scope 442 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 443 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 444 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 445 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 446 Iterable_impl_Buffer[T].Iterable_Buffer[T]_iterator fn (parent: Iterable_impl_Buffer[T])
	VARS
	self -> self: Buffer[T]

scope 447 Opt.isSome fn (parent: Opt)
	VARS
	__match_subject_863 -> __match_subject_863: Opt[T]
	self -> self: Opt[T]
	TYPES
	T -> Opt.isSome.'T

scope 448 Opt.isSome.ability_impl ability_impl (parent: Opt.isSome)

scope 449 Opt.isNone fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	__match_subject_865 -> __match_subject_865: Opt[T]
	TYPES
	T -> Opt.isNone.'T

scope 450 Opt.isNone.ability_impl ability_impl (parent: Opt.isNone)

scope 451 Opt.get fn (parent: Opt)
	VARS
	self -> self: Opt[T]
	TYPES
	T -> Opt.get.'T

scope 452 Opt.get.ability_impl ability_impl (parent: Opt.get)

scope 453 Opt.opt_equals fn (parent: Opt)
	VARS
	a -> a: Opt[T]
	b -> b: Opt[T]
	TYPES
	T -> Opt.opt_equals.'T

scope 454 Opt.opt_equals.ability_impl ability_impl (parent: Opt.opt_equals)
	TYPES
	Self -> Opt.opt_equals.'T

scope 455 Opt.opt_equals.ability_impl.Equals_T_equals fn (parent: Opt.opt_equals.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 456 none fn (parent: )
	TYPES
	T -> none.'T

scope 457 none.ability_impl ability_impl (parent: none)

scope 458 some fn (parent: )
	VARS
	value -> value: T
	TYPES
	T -> some.'T

scope 459 some.ability_impl ability_impl (parent: some)

scope 460 Equals_impl_Opt[T] ability_impl (parent: )
	TYPES
	T -> Equals_impl_Opt[T].'T
	Self -> Opt[Equals_impl_Opt[T].'T](enum None | Some(Equals_impl_Opt[T].'T))

scope 461 Equals_impl_Opt[T].ability_impl ability_impl (parent: Equals_impl_Opt[T])

scope 462 Equals_impl_Opt[T].ability_impl ability_impl (parent: Equals_impl_Opt[T])
	TYPES
	Self -> Equals_impl_Opt[T].'T

scope 463 Equals_impl_Opt[T].ability_impl.Equals_T_equals fn (parent: Equals_impl_Opt[T].ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 464 Equals_impl_Opt[T].Equals_Opt[T]_equals fn (parent: Equals_impl_Opt[T])
	VARS
	self -> self: Opt[T]
	other -> other: Opt[T]

scope 465 Unwrap_impl_Opt[T] ability_impl (parent: )
	TYPES
	T -> Unwrap_impl_Opt[T].'T
	Self -> Opt[Unwrap_impl_Opt[T].'T](enum None | Some(Unwrap_impl_Opt[T].'T))
	Inner -> Unwrap_impl_Opt[T].'T

scope 466 Unwrap_impl_Opt[T].ability_impl ability_impl (parent: Unwrap_impl_Opt[T])

scope 467 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue fn (parent: Unwrap_impl_Opt[T])
	VARS
	self -> self: Opt[T]
	__match_subject_876 -> __match_subject_876: Opt[T]

scope 468 Unwrap_impl_Opt[T].Unwrap_Opt[T]_unwrap fn (parent: Unwrap_impl_Opt[T])
	VARS
	self -> self: Opt[T]

scope 469 Unwrap_impl_Opt[T].Unwrap_Opt[T]_make fn (parent: Unwrap_impl_Opt[T])
	VARS
	t -> t: T

scope 470 Show_impl_Opt[T] ability_impl (parent: )
	TYPES
	T -> Show_impl_Opt[T].'T
	Self -> Opt[Show_impl_Opt[T].'T](enum None | Some(Show_impl_Opt[T].'T))

scope 471 Show_impl_Opt[T].ability_impl ability_impl (parent: Show_impl_Opt[T])

scope 472 Show_impl_Opt[T].ability_impl ability_impl (parent: Show_impl_Opt[T])
	TYPES
	Self -> Show_impl_Opt[T].'T

scope 473 Show_impl_Opt[T].ability_impl.Show_T_show fn (parent: Show_impl_Opt[T].ability_impl)
	VARS
	self -> self: T

scope 474 Show_impl_Opt[T].Show_Opt[T]_show fn (parent: Show_impl_Opt[T])
	VARS
	self -> self: Opt[T]

scope 475 List.empty fn (parent: List)
	TYPES
	T -> List.empty.'T

scope 476 List.empty.ability_impl ability_impl (parent: List.empty)

scope 477 List.filled fn (parent: List)
	VARS
	buffer -> buffer: Buffer[T]
	value -> value: T
	size -> size: u64
	TYPES
	T -> List.filled.'T

scope 478 List.filled.ability_impl ability_impl (parent: List.filled)

scope 479 List.withCapacity fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[T]
	TYPES
	T -> List.withCapacity.'T

scope 480 List.withCapacity.ability_impl ability_impl (parent: List.withCapacity)

scope 481 List.reserve fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[T]*
	newBuffer -> newBuffer: Buffer[T]
	TYPES
	T -> List.reserve.'T

scope 482 List.reserve.ability_impl ability_impl (parent: List.reserve)

scope 483 List.single fn (parent: List)
	VARS
	value -> value: T
	TYPES
	T -> List.single.'T

scope 484 List.single.ability_impl ability_impl (parent: List.single)

scope 485 List.wrapBuffer fn (parent: List)
	VARS
	buffer -> buffer: Buffer[T]
	TYPES
	T -> List.wrapBuffer.'T

scope 486 List.wrapBuffer.ability_impl ability_impl (parent: List.wrapBuffer)

scope 487 List.toBuffer fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.toBuffer.'T

scope 488 List.toBuffer.ability_impl ability_impl (parent: List.toBuffer)

scope 489 List.innerBuffer fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.innerBuffer.'T

scope 490 List.innerBuffer.ability_impl ability_impl (parent: List.innerBuffer)

scope 491 List.cap fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.cap.'T

scope 492 List.cap.ability_impl ability_impl (parent: List.cap)

scope 493 List.getRef fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.getRef.'T

scope 494 List.getRef.ability_impl ability_impl (parent: List.getRef)

scope 495 List.set fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	elem -> elem: T
	TYPES
	T -> List.set.'T

scope 496 List.set.ability_impl ability_impl (parent: List.set)

scope 497 List.get fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.get.'T

scope 498 List.get.ability_impl ability_impl (parent: List.get)

scope 499 List.getOpt fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[T]
	TYPES
	T -> List.getOpt.'T

scope 500 List.getOpt.ability_impl ability_impl (parent: List.getOpt)

scope 501 List._grow fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[T]*
	elemSize -> elemSize: u64
	TYPES
	T -> List._grow.'T

scope 502 List._grow.ability_impl ability_impl (parent: List._grow)

scope 503 List.cloned fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[T]
	self -> self: List[T]
	TYPES
	T -> List.cloned.'T

scope 504 List.cloned.ability_impl ability_impl (parent: List.cloned)

scope 505 List.push fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: T
	self -> self: List[T]*
	TYPES
	T -> List.push.'T

scope 506 List.push.ability_impl ability_impl (parent: List.push)

scope 507 List.slice fn (parent: List)
	VARS
	end -> end: u64
	self -> self: List[T]
	start -> start: u64
	TYPES
	T -> List.slice.'T

scope 508 List.slice.ability_impl ability_impl (parent: List.slice)

scope 509 List.isEmpty fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.isEmpty.'T

scope 510 List.isEmpty.ability_impl ability_impl (parent: List.isEmpty)

scope 511 List.nonEmpty fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.nonEmpty.'T

scope 512 List.nonEmpty.ability_impl ability_impl (parent: List.nonEmpty)

scope 513 List.firstRef fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.firstRef.'T

scope 514 List.firstRef.ability_impl ability_impl (parent: List.firstRef)

scope 515 List.first fn (parent: List)
	VARS
	self -> self: List[T]
	__match_subject_890 -> __match_subject_890: Opt[T*]
	TYPES
	T -> List.first.'T

scope 516 List.first.ability_impl ability_impl (parent: List.first)

scope 517 List.lastRef fn (parent: List)
	VARS
	self -> self: List[T]
	TYPES
	T -> List.lastRef.'T

scope 518 List.lastRef.ability_impl ability_impl (parent: List.lastRef)

scope 519 List.last fn (parent: List)
	VARS
	__match_subject_893 -> __match_subject_893: Opt[T*]
	self -> self: List[T]
	TYPES
	T -> List.last.'T

scope 520 List.last.ability_impl ability_impl (parent: List.last)

scope 521 List.reverse fn (parent: List)
	VARS
	i -> mut i: u64
	self -> self: List[T]*
	TYPES
	T -> List.reverse.'T

scope 522 List.reverse.ability_impl ability_impl (parent: List.reverse)

scope 523 List.reversed fn (parent: List)
	VARS
	self -> self: List[T]
	clone -> clone: List[T]*
	TYPES
	T -> List.reversed.'T

scope 524 List.reversed.ability_impl ability_impl (parent: List.reversed)

scope 525 List.concat fn (parent: List)
	VARS
	self -> self: List[T]*
	other -> other: List[T]
	TYPES
	T -> List.concat.'T

scope 526 List.concat.ability_impl ability_impl (parent: List.concat)

scope 527 List.appendBuffer fn (parent: List)
	VARS
	self -> self: List[T]*
	other -> other: Buffer[T]
	TYPES
	T -> List.appendBuffer.'T

scope 528 List.appendBuffer.ability_impl ability_impl (parent: List.appendBuffer)

scope 529 List.swap fn (parent: List)
	VARS
	aRef -> aRef: T*
	self -> self: List[T]*
	bValue -> bValue: T
	indexB -> indexB: u64
	bRef -> bRef: T*
	indexA -> indexA: u64
	TYPES
	T -> List.swap.'T

scope 530 List.swap.ability_impl ability_impl (parent: List.swap)

scope 531 List.sort fn (parent: List)
	VARS
	right -> right: List[T]*
	halfIndex -> halfIndex: u64
	left -> left: List[T]*
	input -> input: List[T]*
	equal -> equal: List[T]*
	pivot -> pivot: T
	i -> mut i: u64
	TYPES
	T -> List.sort.'T

scope 532 List.sort.ability_impl ability_impl (parent: List.sort)
	TYPES
	Self -> List.sort.'T

scope 533 List.sort.ability_impl.Comparable_T_compare fn (parent: List.sort.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 534 List.sorted fn (parent: List)
	VARS
	self -> self: List[T]
	copy -> copy: List[T]*
	TYPES
	T -> List.sorted.'T

scope 535 List.sorted.ability_impl ability_impl (parent: List.sorted)
	TYPES
	Self -> List.sorted.'T

scope 536 List.sorted.ability_impl.Comparable_T_compare fn (parent: List.sorted.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 537 List.join fn (parent: List)
	VARS
	sep -> sep: string
	b -> b: StringBuilder
	self -> self: List[T]
	TYPES
	T -> List.join.'T

scope 538 List.join.ability_impl ability_impl (parent: List.join)
	TYPES
	Self -> List.join.'T

scope 539 List.join.ability_impl.Show_T_show fn (parent: List.join.ability_impl)
	VARS
	self -> self: T

scope 540 List.map fn (parent: List)
	VARS
	f -> f: some_fn_779: some fn(T) -> U
	self -> self: List[T]
	us -> us: List[U]*
	TYPES
	T -> List.map.'T
	U -> List.map.'U

scope 541 List.map.ability_impl ability_impl (parent: List.map)

scope 542 List.map.ability_impl ability_impl (parent: List.map)

scope 543 List.flatMap fn (parent: List)
	VARS
	f -> f: some_fn_790: some fn(T) -> List[U]
	self -> self: List[T]
	us -> us: List[U]*
	TYPES
	T -> List.flatMap.'T
	U -> List.flatMap.'U

scope 544 List.flatMap.ability_impl ability_impl (parent: List.flatMap)

scope 545 List.flatMap.ability_impl ability_impl (parent: List.flatMap)

scope 546 List.filter fn (parent: List)
	VARS
	f -> f: some_fn_800: some fn(T) -> bool
	self -> self: List[T]
	keep -> keep: List[T]*
	TYPES
	T -> List.filter.'T

scope 547 List.filter.ability_impl ability_impl (parent: List.filter)

scope 548 Writer_impl_List[char] ability_impl (parent: )
	TYPES
	Self -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 549 Writer_impl_List[char].Writer_List[char]_writeChar fn (parent: Writer_impl_List[char])
	VARS
	value -> value: char
	self -> self: List[char]*

scope 550 Writer_impl_List[char].Writer_List[char]_writeByte fn (parent: Writer_impl_List[char])
	VARS
	value -> value: u8
	self -> self: List[char]*

scope 551 Writer_impl_List[char].Writer_List[char]_writeString fn (parent: Writer_impl_List[char])
	VARS
	value -> value: string
	self -> self: List[char]*

scope 552 Writer_impl_List[char].Writer_List[char]_writeBytes fn (parent: Writer_impl_List[char])
	VARS
	buffer -> buffer: Buffer[u8]
	self -> self: List[char]*

scope 553 Writer_impl_List[u8] ability_impl (parent: )
	TYPES
	Self -> List[u8]({len: u64, buffer: Buffer[u8]({len: u64, data: u8*})})

scope 554 Writer_impl_List[u8].Writer_List[u8]_writeChar fn (parent: Writer_impl_List[u8])
	VARS
	value -> value: char
	self -> self: List[u8]*

scope 555 Writer_impl_List[u8].Writer_List[u8]_writeByte fn (parent: Writer_impl_List[u8])
	VARS
	value -> value: u8
	self -> self: List[u8]*

scope 556 Writer_impl_List[u8].Writer_List[u8]_writeString fn (parent: Writer_impl_List[u8])
	VARS
	value -> value: string
	self -> self: List[u8]*

scope 557 Writer_impl_List[u8].Writer_List[u8]_writeBytes fn (parent: Writer_impl_List[u8])
	VARS
	buffer -> buffer: Buffer[u8]
	self -> self: List[u8]*

scope 558 Equals_impl_List[u8] ability_impl (parent: )
	TYPES
	Self -> List[u8]({len: u64, buffer: Buffer[u8]({len: u64, data: u8*})})

scope 559 Equals_impl_List[u8].Equals_List[u8]_equals fn (parent: Equals_impl_List[u8])
	VARS
	self -> self: List[u8]
	other -> other: List[u8]

scope 560 Equals_impl_List[i64] ability_impl (parent: )
	TYPES
	Self -> List[i64]({len: u64, buffer: Buffer[i64]({len: u64, data: i64*})})

scope 561 Equals_impl_List[i64].Equals_List[i64]_equals fn (parent: Equals_impl_List[i64])
	VARS
	self -> self: List[i64]
	other -> other: List[i64]

scope 562 Equals_impl_List[T] ability_impl (parent: )
	TYPES
	T -> Equals_impl_List[T].'T
	Self -> List[Equals_impl_List[T].'T]({len: u64, buffer: Buffer[Equals_impl_List[T].'T]({len: u64, data: Equals_impl_List[T].'T*})})

scope 563 Equals_impl_List[T].ability_impl ability_impl (parent: Equals_impl_List[T])

scope 564 Equals_impl_List[T].ability_impl ability_impl (parent: Equals_impl_List[T])
	TYPES
	Self -> Equals_impl_List[T].'T

scope 565 Equals_impl_List[T].ability_impl.Equals_T_equals fn (parent: Equals_impl_List[T].ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 566 Equals_impl_List[T].Equals_List[T]_equals fn (parent: Equals_impl_List[T])
	VARS
	self -> self: List[T]
	other -> other: List[T]

scope 567 Show_impl_List[T] ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T
	Self -> List[Show_impl_List[T].'T]({len: u64, buffer: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})})

scope 568 Show_impl_List[T].ability_impl ability_impl (parent: Show_impl_List[T])

scope 569 Show_impl_List[T].ability_impl ability_impl (parent: Show_impl_List[T])
	TYPES
	Self -> Show_impl_List[T].'T

scope 570 Show_impl_List[T].ability_impl.Show_T_show fn (parent: Show_impl_List[T].ability_impl)
	VARS
	self -> self: T

scope 571 Show_impl_List[T].Show_List[T]_show fn (parent: Show_impl_List[T])
	VARS
	b -> b: StringBuilder
	self -> self: List[T]

scope 572 Iterable_impl_List[T] ability_impl (parent: )
	TYPES
	Self -> List[Iterable_impl_List[T].'T]({len: u64, buffer: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})})
	Item -> Iterable_impl_List[T].'T
	T -> Iterable_impl_List[T].'T
	I -> BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})

scope 573 Iterable_impl_List[T].ability_impl ability_impl (parent: Iterable_impl_List[T])

scope 574 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_List[T].'T

scope 575 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_List[T].'T
	Self -> BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})
	Item -> Iterable_impl_List[T].'T

scope 576 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 577 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 578 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 579 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 580 Iterable_impl_List[T].Iterable_List[T]_iterator fn (parent: Iterable_impl_List[T])
	VARS
	self -> self: List[T]

scope 581 string.get fn (parent: string)
	VARS
	index -> index: u64
	self -> self: string

scope 582 string.innerBuffer fn (parent: string)
	VARS
	self -> self: string

scope 583 string.innerBufferBytes fn (parent: string)
	VARS
	self -> self: string

scope 584 string.clone fn (parent: string)
	VARS
	newBuffer -> newBuffer: Buffer[char]
	self -> self: string

scope 585 string.cloneToList fn (parent: string)
	VARS
	self -> self: string

scope 586 string.wrapList fn (parent: string)
	VARS
	list -> list: List[char]

scope 587 string.wrapBuffer fn (parent: string)
	VARS
	buffer -> buffer: Buffer[char]

scope 588 string.wrapBytes fn (parent: string)
	VARS
	buffer -> buffer: Buffer[u8]

scope 589 string.fromBytes fn (parent: string)
	VARS
	buffer -> buffer: Buffer[u8]
	copied -> copied: Buffer[u8]

scope 590 string.fromBuffer fn (parent: string)
	VARS
	buffer -> buffer: Buffer[char]
	copied -> copied: Buffer[char]

scope 591 string.len fn (parent: string)
	VARS
	self -> self: string

scope 592 string.isEmpty fn (parent: string)
	VARS
	self -> self: string

scope 593 string.nonEmpty fn (parent: string)
	VARS
	self -> self: string

scope 594 string.first fn (parent: string)
	VARS
	self -> self: string

scope 595 string.indexOf fn (parent: string)
	VARS
	i -> mut i: u64
	self -> self: string
	c -> c: char

scope 596 string.concat fn (parent: string)
	VARS
	self -> self: string
	other -> other: string

scope 597 string.appendChar fn (parent: string)
	VARS
	newBuffer -> newBuffer: Buffer[char]
	self -> self: string
	newLength -> newLength: u64
	c -> c: char

scope 598 string.splitByChar fn (parent: string)
	VARS
	self -> self: string
	results -> results: List[List[char]]*
	delim -> delim: char
	accum -> accum: List[char]*

scope 599 string.indexOfString fn (parent: string)
	VARS
	i -> mut i: u64
	target -> target: string
	self -> self: string

scope 600 string.substring fn (parent: string)
	VARS
	end -> end: u64
	self -> self: string
	start -> start: u64

scope 601 string.take fn (parent: string)
	VARS
	count -> count: u64
	self -> self: string

scope 602 string.drop fn (parent: string)
	VARS
	count -> count: u64
	self -> self: string

scope 603 string.startsWith fn (parent: string)
	VARS
	self -> self: string
	other -> other: string

scope 604 string.toCString fn (parent: string)
	VARS
	self -> self: string

scope 605 string.fromCString fn (parent: string)
	VARS
	i -> mut i: u64
	cString -> cString: Pointer
	self -> self: List[char]*

scope 606 string.toInt fn (parent: string)
	VARS
	self -> self: string
	neg -> neg: bool
	i -> mut i: u64
	total -> mut total: u64

scope 607 Equals_impl_string ability_impl (parent: )
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 608 Equals_impl_string.Equals_string_equals fn (parent: Equals_impl_string)
	VARS
	self -> self: string
	that -> that: string

scope 609 Show_impl_string ability_impl (parent: )
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 610 Show_impl_string.Show_string_show fn (parent: Show_impl_string)
	VARS
	self -> self: string

scope 611 Iterable_impl_string ability_impl (parent: )
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Item -> char
	I -> BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})

scope 612 ability_impl ability_impl (parent: )
	TYPES
	T -> char

scope 613 ability_impl ability_impl (parent: )
	TYPES
	T -> char
	Self -> BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})
	Item -> char

scope 614 ability_impl.Iterator_BufferIterator[char]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[char]*

scope 615 ability_impl.Iterator_BufferIterator[char]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[char]

scope 616 ability_impl.Iterator_BufferIterator[char]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[char]*

scope 617 ability_impl.Iterator_BufferIterator[char]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[char]*

scope 618 Iterable_impl_string.Iterable_string_iterator fn (parent: Iterable_impl_string)
	VARS
	self -> self: string

scope 619 Iterable_impl_string* ability_impl (parent: )
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})*
	Item -> char
	I -> BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})

scope 620 Iterable_impl_string*.Iterable_string*_iterator fn (parent: Iterable_impl_string*)
	VARS
	self -> self: string*

scope 621 types.typeId fn (parent: types)
	TYPES
	T -> types.typeId.'T

scope 622 types.typeId.ability_impl ability_impl (parent: types.typeId)

scope 623 StringBuilder.withCapacity fn (parent: StringBuilder)
	VARS
	cap -> cap: u64
	parts -> parts: List[enum Char(char) | String(string)]*

scope 624 StringBuilder.new fn (parent: StringBuilder)

scope 625 StringBuilder.putChar fn (parent: StringBuilder)
	VARS
	self -> self: StringBuilder
	c -> c: char

scope 626 StringBuilder.putString fn (parent: StringBuilder)
	VARS
	self -> self: StringBuilder
	s -> s: string

scope 627 StringBuilder.putByte fn (parent: StringBuilder)
	VARS
	b -> b: u8
	self -> self: StringBuilder

scope 628 StringBuilder.len fn (parent: StringBuilder)
	VARS
	len -> mut len: u64
	self -> self: StringBuilder

scope 629 StringBuilder.build fn (parent: StringBuilder)
	VARS
	bytes -> bytes: List[char]*
	self -> self: StringBuilder

scope 630 Bits.bitNot fn (parent: Bits)
	VARS
	a -> a: i64

scope 631 Bits.bitAnd fn (parent: Bits)
	VARS
	a -> a: i64
	b -> b: i64

scope 632 Bits.bitOr fn (parent: Bits)
	VARS
	a -> a: i64
	b -> b: i64

scope 633 Bits.xor fn (parent: Bits)
	VARS
	a -> a: i64
	b -> b: i64

scope 634 Bits.shiftLeft fn (parent: Bits)
	VARS
	a -> a: i64
	b -> b: i64

scope 635 Bits.shiftRight fn (parent: Bits)
	VARS
	a -> a: i64
	b -> b: i64

scope 636 Bitwise_impl_u8 ability_impl (parent: )
	TYPES
	Self -> u8

scope 637 Bitwise_impl_u8.Bitwise_u8_bitNot fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8

scope 638 Bitwise_impl_u8.Bitwise_u8_bitAnd fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 639 Bitwise_impl_u8.Bitwise_u8_bitOr fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 640 Bitwise_impl_u8.Bitwise_u8_xor fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 641 Bitwise_impl_u8.Bitwise_u8_shiftLeft fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 642 Bitwise_impl_u8.Bitwise_u8_shiftRight fn (parent: Bitwise_impl_u8)
	VARS
	self -> self: u8
	other -> other: u8

scope 643 Bitwise_impl_u16 ability_impl (parent: )
	TYPES
	Self -> u16

scope 644 Bitwise_impl_u16.Bitwise_u16_bitNot fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16

scope 645 Bitwise_impl_u16.Bitwise_u16_bitAnd fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 646 Bitwise_impl_u16.Bitwise_u16_bitOr fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 647 Bitwise_impl_u16.Bitwise_u16_xor fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 648 Bitwise_impl_u16.Bitwise_u16_shiftLeft fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 649 Bitwise_impl_u16.Bitwise_u16_shiftRight fn (parent: Bitwise_impl_u16)
	VARS
	self -> self: u16
	other -> other: u16

scope 650 Bitwise_impl_u32 ability_impl (parent: )
	TYPES
	Self -> u32

scope 651 Bitwise_impl_u32.Bitwise_u32_bitNot fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32

scope 652 Bitwise_impl_u32.Bitwise_u32_bitAnd fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 653 Bitwise_impl_u32.Bitwise_u32_bitOr fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 654 Bitwise_impl_u32.Bitwise_u32_xor fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 655 Bitwise_impl_u32.Bitwise_u32_shiftLeft fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 656 Bitwise_impl_u32.Bitwise_u32_shiftRight fn (parent: Bitwise_impl_u32)
	VARS
	self -> self: u32
	other -> other: u32

scope 657 Bitwise_impl_u64 ability_impl (parent: )
	TYPES
	Self -> u64

scope 658 Bitwise_impl_u64.Bitwise_u64_bitNot fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64

scope 659 Bitwise_impl_u64.Bitwise_u64_bitAnd fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 660 Bitwise_impl_u64.Bitwise_u64_bitOr fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 661 Bitwise_impl_u64.Bitwise_u64_xor fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 662 Bitwise_impl_u64.Bitwise_u64_shiftLeft fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 663 Bitwise_impl_u64.Bitwise_u64_shiftRight fn (parent: Bitwise_impl_u64)
	VARS
	self -> self: u64
	other -> other: u64

scope 664 Bitwise_impl_i8 ability_impl (parent: )
	TYPES
	Self -> i8

scope 665 Bitwise_impl_i8.Bitwise_i8_bitNot fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8

scope 666 Bitwise_impl_i8.Bitwise_i8_bitAnd fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 667 Bitwise_impl_i8.Bitwise_i8_bitOr fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 668 Bitwise_impl_i8.Bitwise_i8_xor fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 669 Bitwise_impl_i8.Bitwise_i8_shiftLeft fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 670 Bitwise_impl_i8.Bitwise_i8_shiftRight fn (parent: Bitwise_impl_i8)
	VARS
	self -> self: i8
	other -> other: i8

scope 671 Bitwise_impl_i16 ability_impl (parent: )
	TYPES
	Self -> i16

scope 672 Bitwise_impl_i16.Bitwise_i16_bitNot fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16

scope 673 Bitwise_impl_i16.Bitwise_i16_bitAnd fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 674 Bitwise_impl_i16.Bitwise_i16_bitOr fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 675 Bitwise_impl_i16.Bitwise_i16_xor fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 676 Bitwise_impl_i16.Bitwise_i16_shiftLeft fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 677 Bitwise_impl_i16.Bitwise_i16_shiftRight fn (parent: Bitwise_impl_i16)
	VARS
	self -> self: i16
	other -> other: i16

scope 678 Bitwise_impl_i32 ability_impl (parent: )
	TYPES
	Self -> i32

scope 679 Bitwise_impl_i32.Bitwise_i32_bitNot fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32

scope 680 Bitwise_impl_i32.Bitwise_i32_bitAnd fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 681 Bitwise_impl_i32.Bitwise_i32_bitOr fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 682 Bitwise_impl_i32.Bitwise_i32_xor fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 683 Bitwise_impl_i32.Bitwise_i32_shiftLeft fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 684 Bitwise_impl_i32.Bitwise_i32_shiftRight fn (parent: Bitwise_impl_i32)
	VARS
	self -> self: i32
	other -> other: i32

scope 685 Bitwise_impl_i64 ability_impl (parent: )
	TYPES
	Self -> i64

scope 686 Bitwise_impl_i64.Bitwise_i64_bitNot fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64

scope 687 Bitwise_impl_i64.Bitwise_i64_bitAnd fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 688 Bitwise_impl_i64.Bitwise_i64_bitOr fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 689 Bitwise_impl_i64.Bitwise_i64_xor fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 690 Bitwise_impl_i64.Bitwise_i64_shiftLeft fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 691 Bitwise_impl_i64.Bitwise_i64_shiftRight fn (parent: Bitwise_impl_i64)
	VARS
	self -> self: i64
	other -> other: i64

scope 692 Arena.regionSizeBytes fn (parent: Arena)
	VARS
	self -> self: Arena

scope 693 Arena.alignTo fn (parent: Arena)
	VARS
	mask -> mask: u64
	aligned -> aligned: u64
	alignBytes -> alignBytes: u64
	sum -> sum: u64
	baseAddress -> baseAddress: u64

scope 694 Arena.new fn (parent: Arena)
	VARS
	initialMb -> initialMb: u64
	id -> id: string
	capacity -> capacity: u64
	basePtr -> basePtr: Pointer

scope 695 Arena.pushRaw fn (parent: Arena)
	VARS
	self -> self: Arena*
	size -> size: u64
	align -> align: u64
	dataStart -> dataStart: u64
	newEnd -> newEnd: u64

scope 696 Arena.push fn (parent: Arena)
	VARS
	t -> t: T
	self -> self: Arena*
	dataStart -> dataStart: Pointer
	ref -> ref: T*
	TYPES
	T -> Arena.push.'T

scope 697 Arena.push.ability_impl ability_impl (parent: Arena.push)

scope 698 Arena.freeAll fn (parent: Arena)
	VARS
	size -> size: u64
	self -> self: Arena*
	id -> id: string

scope 699 Allocator.initDefault fn (parent: Allocator)
	VARS
	temp_arena -> temp_arena: Arena

scope 700 Allocator.tempArena fn (parent: Allocator)
	VARS
	self -> self: Allocator

scope 701 IntRange.make fn (parent: IntRange)
	VARS
	start -> start: i64
	end -> end: i64

scope 702 IntRange.upTo fn (parent: IntRange)
	VARS
	end -> end: i64

scope 703 IntRangeIterator.make fn (parent: IntRangeIterator)
	VARS
	range -> range: IntRange

scope 704 IntRangeIterator.position fn (parent: IntRangeIterator)
	VARS
	self -> self: IntRangeIterator

scope 705 IntRangeIterator.size fn (parent: IntRangeIterator)
	VARS
	self -> self: IntRangeIterator

scope 706 IntRangeIterator.stepBy fn (parent: IntRangeIterator)
	VARS
	n -> n: u64
	nextPos -> nextPos: i64
	self -> self: IntRangeIterator*

scope 707 IntRangeIterator.current fn (parent: IntRangeIterator)
	VARS
	self -> self: IntRangeIterator

scope 708 Iterator_impl_IntRangeIterator ability_impl (parent: )
	TYPES
	Self -> IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})
	Item -> i64

scope 709 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	self -> self: IntRangeIterator*

scope 710 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_sizeHint fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	remaining -> remaining: i64
	self -> self: IntRangeIterator

scope 711 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_advanceBy fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	n -> n: u64
	self -> self: IntRangeIterator*

scope 712 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_nth fn (parent: Iterator_impl_IntRangeIterator)
	VARS
	n -> n: u64
	self -> self: IntRangeIterator*

scope 713 Iterable_impl_IntRange ability_impl (parent: )
	TYPES
	Self -> IntRange({start: i64, end: i64})
	Item -> i64
	I -> IntRangeIterator({range: IntRange({start: i64, end: i64}), offset: i64})

scope 714 Iterable_impl_IntRange.Iterable_IntRange_iterator fn (parent: Iterable_impl_IntRange)
	VARS
	self -> self: IntRange

scope 715 ability_01.Num ability_defn (parent: ability_01)
	FUNCTIONS
	num -> fn num[Self](self: Self): i32
	TYPES
	Self -> ability_01.Num.'Self

scope 716 ability_01.Num.ability_impl ability_impl (parent: ability_01.Num)

scope 717 ability_01.Num.num fn (parent: ability_01.Num)
	VARS
	self -> self: Self

scope 718 ability_01.Num_impl_Point ability_impl (parent: ability_01)
	TYPES
	Self -> Point({x: i32, y: i32})

scope 719 ability_01.Num_impl_Point.Num_Point_num fn (parent: ability_01.Num_impl_Point)
	VARS
	self -> self: Point

scope 720 ability_01.Codec ability_defn (parent: ability_01)
	FUNCTIONS
	aConst -> fn aConst[Self](): u8
	read -> fn read[Self](buffer: Buffer[u8]): Self
	write -> fn write[Self](self: Self): Buffer[u8]
	TYPES
	Self -> ability_01.Codec.'Self

scope 721 ability_01.Codec.ability_impl ability_impl (parent: ability_01.Codec)

scope 722 ability_01.Codec.aConst fn (parent: ability_01.Codec)

scope 723 ability_01.Codec.write fn (parent: ability_01.Codec)
	VARS
	self -> self: Self

scope 724 ability_01.Codec.read fn (parent: ability_01.Codec)
	VARS
	buffer -> buffer: Buffer[u8]

scope 725 ability_01.Codec_impl_string ability_impl (parent: ability_01)
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 726 ability_01.Codec_impl_string.Codec_string_aConst fn (parent: ability_01.Codec_impl_string)

scope 727 ability_01.Codec_impl_string.Codec_string_write fn (parent: ability_01.Codec_impl_string)
	VARS
	self -> self: string

scope 728 ability_01.Codec_impl_string.Codec_string_read fn (parent: ability_01.Codec_impl_string)
	VARS
	buffer -> buffer: Buffer[u8]

scope 729 ability_01.test fn (parent: ability_01)
	VARS
	three -> three: i32
	buf -> buf: Buffer[u8]
	x -> x: string
	p -> p: Point

scope 730 ability_01.Num_impl_i32 ability_impl (parent: ability_01)
	TYPES
	Self -> i32

scope 731 ability_01.Num_impl_i32.Num_i32_num fn (parent: ability_01.Num_impl_i32)
	VARS
	self -> self: i32

scope 732 ability_constraint.Num ability_defn (parent: ability_constraint)
	FUNCTIONS
	num -> fn num[Self](self: Self): i32
	TYPES
	Self -> ability_constraint.Num.'Self

scope 733 ability_constraint.Num.ability_impl ability_impl (parent: ability_constraint.Num)

scope 734 ability_constraint.Num.num fn (parent: ability_constraint.Num)
	VARS
	self -> self: Self

scope 735 ability_constraint.add fn (parent: ability_constraint)
	VARS
	a -> a: T
	b -> b: T
	TYPES
	T -> ability_constraint.add.'T

scope 736 ability_constraint.add.ability_impl ability_impl (parent: ability_constraint.add)
	TYPES
	Self -> ability_constraint.add.'T

scope 737 ability_constraint.add.ability_impl.Num_T_num fn (parent: ability_constraint.add.ability_impl)
	VARS
	self -> self: T

scope 738 ability_constraint.add.ability_impl.Show_T_show fn (parent: ability_constraint.add.ability_impl)
	VARS
	self -> self: T

scope 739 ability_constraint.Num_impl_i64 ability_impl (parent: ability_constraint)
	TYPES
	Self -> i64

scope 740 ability_constraint.Num_impl_i64.Num_i64_num fn (parent: ability_constraint.Num_impl_i64)
	VARS
	self -> self: i64

scope 741 ability_constraint.test fn (parent: ability_constraint)

scope 742 ability_constraint_fail.Num ability_defn (parent: ability_constraint_fail)
	FUNCTIONS
	num -> fn num[Self](self: Self): i32
	TYPES
	Self -> ability_constraint_fail.Num.'Self

scope 743 ability_constraint_fail.Num.ability_impl ability_impl (parent: ability_constraint_fail.Num)

scope 744 ability_constraint_fail.Num.num fn (parent: ability_constraint_fail.Num)
	VARS
	self -> self: Self

scope 745 ability_constraint_fail.add fn (parent: ability_constraint_fail)
	VARS
	a -> a: T
	b -> b: T
	TYPES
	T -> ability_constraint_fail.add.'T

scope 746 ability_constraint_fail.add.ability_impl ability_impl (parent: ability_constraint_fail.add)
	TYPES
	Self -> ability_constraint_fail.add.'T

scope 747 ability_constraint_fail.add.ability_impl.Num_T_num fn (parent: ability_constraint_fail.add.ability_impl)
	VARS
	self -> self: T

scope 748 ability_constraint_fail.add.ability_impl.Show_T_show fn (parent: ability_constraint_fail.add.ability_impl)
	VARS
	self -> self: T

scope 749 ability_constraint_fail.test fn (parent: ability_constraint_fail)
	VARS
	__match_subject_1196 -> __match_subject_1196: Opt[string]
	result -> result: Opt[string]

scope 750 ability_fail.Num ability_defn (parent: ability_fail)
	FUNCTIONS
	num -> fn num[Self](self: Self): i32
	TYPES
	Self -> ability_fail.Num.'Self

scope 751 ability_fail.Num.ability_impl ability_impl (parent: ability_fail.Num)

scope 752 ability_fail.Num.num fn (parent: ability_fail.Num)
	VARS
	self -> self: Self

scope 753 ability_fail.test fn (parent: ability_fail)
	VARS
	result -> result: Opt[string]
	__match_subject_1200 -> __match_subject_1200: Opt[string]
	p -> p: Tool

scope 754 ability_generic.Add_Rhs_i32_impl_i32 ability_impl (parent: ability_generic)
	TYPES
	Output -> i32
	Self -> i32
	Rhs -> i32

scope 755 ability_generic.Add ability_defn (parent: ability_generic)
	FUNCTIONS
	add -> fn add[Self](self: Self, rhs: Rhs): Output
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add.'Self
	Rhs -> ability_generic.Add.'Rhs

scope 756 ability_generic.Add.ability_impl ability_impl (parent: ability_generic.Add)

scope 757 ability_generic.Add.ability_impl ability_impl (parent: ability_generic.Add)

scope 758 ability_generic.Add.ability_impl ability_impl (parent: ability_generic.Add)

scope 759 ability_generic.Add.add fn (parent: ability_generic.Add)
	VARS
	rhs -> rhs: Rhs
	self -> self: Self

scope 760 ability_generic.Add_Rhs_i32 ability_defn (parent: ability_generic)
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add_Rhs_i32.'Self
	Rhs -> i32

scope 761 ability_generic.Add_Rhs_i32.ability_impl ability_impl (parent: ability_generic.Add_Rhs_i32)

scope 762 ability_generic.Add_Rhs_i32.add fn (parent: ability_generic.Add_Rhs_i32)
	VARS
	rhs -> rhs: i32
	self -> self: Self

scope 763 ability_generic.Add_Rhs_i32_impl_i32.Add_Rhs_i32_i32_add fn (parent: ability_generic.Add_Rhs_i32_impl_i32)
	VARS
	rhs -> rhs: i32
	self -> self: i32

scope 764 ability_generic.Add_Rhs_i64_impl_i32 ability_impl (parent: ability_generic)
	TYPES
	Output -> i64
	Self -> i32
	Rhs -> i64

scope 765 ability_generic.Add_Rhs_i64 ability_defn (parent: ability_generic)
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add_Rhs_i64.'Self
	Rhs -> i64

scope 766 ability_generic.Add_Rhs_i64.ability_impl ability_impl (parent: ability_generic.Add_Rhs_i64)

scope 767 ability_generic.Add_Rhs_i64.add fn (parent: ability_generic.Add_Rhs_i64)
	VARS
	rhs -> rhs: i64
	self -> self: Self

scope 768 ability_generic.Add_Rhs_i64_impl_i32.Add_Rhs_i64_i32_add fn (parent: ability_generic.Add_Rhs_i64_impl_i32)
	VARS
	rhs -> rhs: i64
	self -> self: i32

scope 769 ability_generic.Foob.Add_Rhs_i64_impl_i64 ability_impl (parent: ability_generic.Foob)
	TYPES
	Output -> i64
	Self -> i64
	Rhs -> i64

scope 770 ability_generic.Foob.Add_Rhs_i64_impl_i64.Add_Rhs_i64_i64_add fn (parent: ability_generic.Foob.Add_Rhs_i64_impl_i64)
	VARS
	rhs -> rhs: i64
	self -> self: i64

scope 771 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T] ability_impl (parent: ability_generic)
	TYPES
	Output -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	Self -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	Rhs -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	T -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T

scope 772 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl ability_impl (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T])

scope 773 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl ability_impl (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T])
	TYPES
	Output -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T
	Self -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T
	Rhs -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T

scope 774 ability_generic.Add_Rhs_T ability_defn (parent: ability_generic)
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add_Rhs_T.'Self
	Rhs -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T

scope 775 ability_generic.Add_Rhs_T.ability_impl ability_impl (parent: ability_generic.Add_Rhs_T)

scope 776 ability_generic.Add_Rhs_T.add fn (parent: ability_generic.Add_Rhs_T)
	VARS
	rhs -> rhs: T
	self -> self: Self

scope 777 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl.Add_Rhs_T_T_add fn (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl)
	VARS
	rhs -> rhs: T
	self -> self: T

scope 778 ability_generic.Add_Rhs_GenericPoint[T] ability_defn (parent: ability_generic)
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add_Rhs_GenericPoint[T].'Self
	Rhs -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})

scope 779 ability_generic.Add_Rhs_GenericPoint[T].ability_impl ability_impl (parent: ability_generic.Add_Rhs_GenericPoint[T])

scope 780 ability_generic.Add_Rhs_GenericPoint[T].add fn (parent: ability_generic.Add_Rhs_GenericPoint[T])
	VARS
	rhs -> rhs: GenericPoint[T]
	self -> self: Self

scope 781 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].Add_Rhs_GenericPoint[T]_GenericPoint[T]_add fn (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T])
	VARS
	newX -> newX: T
	self -> self: GenericPoint[T]
	other -> other: GenericPoint[T]
	newY -> newY: T

scope 782 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T] ability_impl (parent: ability_generic)
	TYPES
	Output -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	Self -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	Rhs -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})
	T -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T

scope 783 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl ability_impl (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T])

scope 784 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl ability_impl (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T])
	TYPES
	Output -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T
	Self -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T
	Rhs -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T

scope 785 ability_generic.Add_Rhs_T ability_defn (parent: ability_generic)
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add_Rhs_T.'Self
	Rhs -> ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T

scope 786 ability_generic.Add_Rhs_T.ability_impl ability_impl (parent: ability_generic.Add_Rhs_T)

scope 787 ability_generic.Add_Rhs_T.add fn (parent: ability_generic.Add_Rhs_T)
	VARS
	rhs -> rhs: T
	self -> self: Self

scope 788 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl.Add_Rhs_T_T_add fn (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].ability_impl)
	VARS
	rhs -> rhs: T
	self -> self: T

scope 789 ability_generic.Add_Rhs_GenericPoint[T] ability_defn (parent: ability_generic)
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add_Rhs_GenericPoint[T].'Self
	Rhs -> GenericPoint[ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T]({x: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T, y: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].'T})

scope 790 ability_generic.Add_Rhs_GenericPoint[T].ability_impl ability_impl (parent: ability_generic.Add_Rhs_GenericPoint[T])

scope 791 ability_generic.Add_Rhs_GenericPoint[T].add fn (parent: ability_generic.Add_Rhs_GenericPoint[T])
	VARS
	rhs -> rhs: GenericPoint[T]
	self -> self: Self

scope 792 ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T].Add_Rhs_GenericPoint[T]_GenericPoint[T]_add fn (parent: ability_generic.Add_Rhs_GenericPoint[T]_impl_GenericPoint[T])
	VARS
	newX -> newX: T
	self -> self: GenericPoint[T]
	other -> other: GenericPoint[T]
	newY -> newY: T

scope 793 ability_generic.From ability_defn (parent: ability_generic)
	FUNCTIONS
	from -> fn from[Self](t: F): Self
	TYPES
	Self -> ability_generic.From.'Self
	F -> ability_generic.From.'F

scope 794 ability_generic.From.ability_impl ability_impl (parent: ability_generic.From)

scope 795 ability_generic.From.ability_impl ability_impl (parent: ability_generic.From)

scope 796 ability_generic.From.from fn (parent: ability_generic.From)
	VARS
	t -> t: F

scope 797 ability_generic.To ability_defn (parent: ability_generic)
	FUNCTIONS
	to -> fn to[Self](self: Self): To
	TYPES
	Self -> ability_generic.To.'Self
	To -> ability_generic.To.'To

scope 798 ability_generic.To.ability_impl ability_impl (parent: ability_generic.To)

scope 799 ability_generic.To.ability_impl ability_impl (parent: ability_generic.To)

scope 800 ability_generic.To.to fn (parent: ability_generic.To)
	VARS
	self -> self: Self

scope 801 ability_generic.To_To_string_impl_T ability_impl (parent: ability_generic)
	TYPES
	T -> ability_generic.To_To_string_impl_T.'T
	Self -> ability_generic.To_To_string_impl_T.'T
	To -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 802 ability_generic.To_To_string_impl_T.ability_impl ability_impl (parent: ability_generic.To_To_string_impl_T)

scope 803 ability_generic.To_To_string_impl_T.ability_impl ability_impl (parent: ability_generic.To_To_string_impl_T)
	TYPES
	Self -> ability_generic.To_To_string_impl_T.'T

scope 804 ability_generic.To_To_string_impl_T.ability_impl.Show_T_show fn (parent: ability_generic.To_To_string_impl_T.ability_impl)
	VARS
	self -> self: T

scope 805 ability_generic.To_To_string ability_defn (parent: ability_generic)
	TYPES
	To -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Self -> ability_generic.To_To_string.'Self

scope 806 ability_generic.To_To_string.ability_impl ability_impl (parent: ability_generic.To_To_string)

scope 807 ability_generic.To_To_string.to fn (parent: ability_generic.To_To_string)
	VARS
	self -> self: Self

scope 808 ability_generic.To_To_string_impl_T.To_To_string_T_to fn (parent: ability_generic.To_To_string_impl_T)
	VARS
	self -> self: T

scope 809 ability_generic.From_F_T_impl_U ability_impl (parent: ability_generic)
	TYPES
	Self -> ability_generic.From_F_T_impl_U.'U
	F -> ability_generic.From_F_T_impl_U.'T
	U -> ability_generic.From_F_T_impl_U.'U
	T -> ability_generic.From_F_T_impl_U.'T

scope 810 ability_generic.From_F_T_impl_U.ability_impl ability_impl (parent: ability_generic.From_F_T_impl_U)

scope 811 ability_generic.From_F_T_impl_U.ability_impl ability_impl (parent: ability_generic.From_F_T_impl_U)

scope 812 ability_generic.From_F_T_impl_U.ability_impl ability_impl (parent: ability_generic.From_F_T_impl_U)
	TYPES
	Self -> ability_generic.From_F_T_impl_U.'T
	To -> ability_generic.From_F_T_impl_U.'U

scope 813 ability_generic.To_To_U ability_defn (parent: ability_generic)
	TYPES
	To -> ability_generic.From_F_T_impl_U.'U
	Self -> ability_generic.To_To_U.'Self

scope 814 ability_generic.To_To_U.ability_impl ability_impl (parent: ability_generic.To_To_U)

scope 815 ability_generic.To_To_U.to fn (parent: ability_generic.To_To_U)
	VARS
	self -> self: Self

scope 816 ability_generic.From_F_T_impl_U.ability_impl.To_To_U_T_to fn (parent: ability_generic.From_F_T_impl_U.ability_impl)
	VARS
	self -> self: T

scope 817 ability_generic.From_F_T ability_defn (parent: ability_generic)
	TYPES
	Self -> ability_generic.From_F_T.'Self
	F -> ability_generic.From_F_T_impl_U.'T

scope 818 ability_generic.From_F_T.ability_impl ability_impl (parent: ability_generic.From_F_T)

scope 819 ability_generic.From_F_T.from fn (parent: ability_generic.From_F_T)
	VARS
	t -> t: T

scope 820 ability_generic.From_F_T_impl_U.From_F_T_U_from fn (parent: ability_generic.From_F_T_impl_U)
	VARS
	t -> t: T

scope 821 ability_generic.To_To_string_impl_i32 ability_impl (parent: ability_generic)
	TYPES
	Self -> i32
	To -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 822 ability_generic.To_To_string_impl_i32.To_To_string_i32_to fn (parent: ability_generic.To_To_string_impl_i32)
	VARS
	self -> self: i32

scope 823 ability_generic.To_To_string_impl_i64 ability_impl (parent: ability_generic)
	TYPES
	Self -> i64
	To -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 824 ability_generic.To_To_string_impl_i64.To_To_string_i64_to fn (parent: ability_generic.To_To_string_impl_i64)
	VARS
	self -> self: i64

scope 825 ability_generic.To_To_char_impl_u8 ability_impl (parent: ability_generic)
	TYPES
	Self -> u8
	To -> char

scope 826 ability_generic.To_To_char ability_defn (parent: ability_generic)
	TYPES
	To -> char
	Self -> ability_generic.To_To_char.'Self

scope 827 ability_generic.To_To_char.ability_impl ability_impl (parent: ability_generic.To_To_char)

scope 828 ability_generic.To_To_char.to fn (parent: ability_generic.To_To_char)
	VARS
	self -> self: Self

scope 829 ability_generic.To_To_char_impl_u8.To_To_char_u8_to fn (parent: ability_generic.To_To_char_impl_u8)
	VARS
	self -> self: u8

scope 830 ability_generic.test fn (parent: ability_generic)
	VARS
	p -> p: GenericPoint[i32]
	add64 -> add64: i64
	x -> x: i32
	add32 -> add32: i32
	added -> added: GenericPoint[i32]
	btoc -> btoc: char

scope 831 ability_self_call.Foo ability_defn (parent: ability_self_call)
	FUNCTIONS
	a -> fn a[Self](self: Self): unit
	b -> fn b[Self](self: Self): unit
	TYPES
	Self -> ability_self_call.Foo.'Self

scope 832 ability_self_call.Foo.ability_impl ability_impl (parent: ability_self_call.Foo)

scope 833 ability_self_call.Foo.a fn (parent: ability_self_call.Foo)
	VARS
	self -> self: Self

scope 834 ability_self_call.Foo.b fn (parent: ability_self_call.Foo)
	VARS
	self -> self: Self

scope 835 ability_self_call.Foo_impl_string ability_impl (parent: ability_self_call)
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 836 ability_self_call.Foo_impl_string.Foo_string_a fn (parent: ability_self_call.Foo_impl_string)
	VARS
	self -> self: string

scope 837 ability_self_call.Foo_impl_string.Foo_string_b fn (parent: ability_self_call.Foo_impl_string)
	VARS
	self -> self: string

scope 838 ability_self_call.test fn (parent: ability_self_call)

scope 839 all_out_of_order.SayHello_impl_Foo ability_impl (parent: all_out_of_order)
	TYPES
	Self -> Foo({name: string({buffer: Buffer[char]({len: u64, data: char*})})})

scope 840 all_out_of_order.SayHello ability_defn (parent: all_out_of_order)
	FUNCTIONS
	hello -> fn hello[Self](self: Self): MyString
	TYPES
	Self -> all_out_of_order.SayHello.'Self

scope 841 all_out_of_order.SayHello.ability_impl ability_impl (parent: all_out_of_order.SayHello)

scope 842 all_out_of_order.SayHello.hello fn (parent: all_out_of_order.SayHello)
	VARS
	self -> self: Self

scope 843 all_out_of_order.SayHello_impl_Foo.SayHello_Foo_hello fn (parent: all_out_of_order.SayHello_impl_Foo)
	VARS
	self -> self: Foo

scope 844 all_out_of_order.takesHelloer fn (parent: all_out_of_order)
	VARS
	t -> t: T
	TYPES
	T -> all_out_of_order.takesHelloer.'T

scope 845 all_out_of_order.takesHelloer.ability_impl ability_impl (parent: all_out_of_order.takesHelloer)
	TYPES
	Self -> all_out_of_order.takesHelloer.'T

scope 846 all_out_of_order.takesHelloer.ability_impl.SayHello_T_hello fn (parent: all_out_of_order.takesHelloer.ability_impl)
	VARS
	self -> self: T

scope 847 all_out_of_order.test fn (parent: all_out_of_order)
	VARS
	foo -> foo: Foo

scope 848 allocator_test.test fn (parent: allocator_test)
	VARS
	a -> a: Arena*
	s -> s: string*
	b -> b: bool*
	p -> p: {x: i64, y: i64}*

scope 849 arith.add_stuff fn (parent: arith)
	VARS
	y -> y: i64
	foo -> foo: i64
	x -> x: i64
	b -> b: i64

scope 850 arith.mult fn (parent: arith)
	VARS
	x -> x: i64
	y -> y: i64

scope 851 arith.test fn (parent: arith)
	VARS
	x -> x: i64
	y -> y: i64
	multResult -> multResult: i64

scope 852 assign.assignVar fn (parent: assign)
	VARS
	count -> mut count: i64

scope 853 assign.assignVarRef fn (parent: assign)
	VARS
	count -> count: i64*

scope 854 assign.complexReferences fn (parent: assign)
	VARS
	yesRef -> yesRef: Yes(i64)*
	eitherRef -> eitherRef: enum Yes(i64) | No*
	xRef -> xRef: i64*
	innerStructRef -> innerStructRef: {x: i64}*
	structRef -> structRef: {x: i64}*
	structOptRef -> structOptRef: Opt[{x: i64}*]
	yesValue -> yesValue: i64
	xValue -> xValue: i64

scope 855 assign.test fn (parent: assign)

scope 856 bits_test.test fn (parent: bits_test)

scope 857 lexical_scope.test fn (parent: lexical_scope)
	VARS
	__match_subject_1261 -> __match_subject_1261: Opt[string]
	result -> result: Opt[string]

scope 858 bool_test.test fn (parent: bool_test)
	VARS
	t -> t: bool
	f -> f: bool

scope 859 buffer_test.bufferEmpty fn (parent: buffer_test)
	VARS
	empty -> empty: Buffer[i64]

scope 860 buffer_test.bufferFilled fn (parent: buffer_test)
	VARS
	i -> mut i: u64
	buf -> buf: Buffer[i64]

scope 861 buffer_test.bufferGetSet fn (parent: buffer_test)
	VARS
	buf -> buf: Buffer[i64]

scope 862 buffer_test.bufferFirstLast fn (parent: buffer_test)
	VARS
	buf -> buf: Buffer[i64]

scope 863 buffer_test.bufferSlice fn (parent: buffer_test)
	VARS
	i -> mut i: u64
	slice -> slice: Buffer[i64]
	buf -> buf: Buffer[i64]

scope 864 buffer_test.bufferTakeDrop fn (parent: buffer_test)
	VARS
	dropped -> dropped: Buffer[i64]
	taken -> taken: Buffer[i64]
	i -> mut i: u64
	buf -> buf: Buffer[i64]

scope 865 buffer_test.bufferConcat fn (parent: buffer_test)
	VARS
	combined -> combined: Buffer[i64]
	buf1 -> buf1: Buffer[i64]
	buf2 -> buf2: Buffer[i64]

scope 866 buffer_test.bufferSwap fn (parent: buffer_test)
	VARS
	buf -> buf: Buffer[i64]*

scope 867 buffer_test.bufferClone fn (parent: buffer_test)
	VARS
	cloned -> cloned: Buffer[i64]
	original -> original: Buffer[i64]

scope 868 buffer_test.test fn (parent: buffer_test)

scope 869 char_test.basic fn (parent: char_test)
	VARS
	s -> s: string
	c -> c: char

scope 870 char_test.escape fn (parent: char_test)
	VARS
	c -> c: char

scope 871 char_test.test fn (parent: char_test)

scope 872 condcomp.test fn (parent: condcomp)
	VARS
	comptimeCheck -> comptimeCheck: string

scope 873 context_generic.box fn (parent: context_generic)
	VARS
	value -> value: T
	foo -> foo: T
	TYPES
	T -> context_generic.box.'T

scope 874 context_generic.box.ability_impl ability_impl (parent: context_generic.box)

scope 875 context_generic.testBox fn (parent: context_generic)
	VARS
	b -> b: bool
	c -> c: {b: bool}

scope 876 context_generic.contextC fn (parent: context_generic)
	VARS
	t -> t: T
	name -> name: string
	value -> value: T
	TYPES
	T -> context_generic.contextC.'T

scope 877 context_generic.contextC.ability_impl ability_impl (parent: context_generic.contextC)
	TYPES
	Self -> context_generic.contextC.'T

scope 878 context_generic.contextC.ability_impl.Equals_T_equals fn (parent: context_generic.contextC.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 879 context_generic.contextB fn (parent: context_generic)
	VARS
	t -> t: T
	name -> name: string
	value -> value: T
	TYPES
	T -> context_generic.contextB.'T

scope 880 context_generic.contextB.ability_impl ability_impl (parent: context_generic.contextB)
	TYPES
	Self -> context_generic.contextB.'T

scope 881 context_generic.contextB.ability_impl.Equals_T_equals fn (parent: context_generic.contextB.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 882 context_generic.contextA fn (parent: context_generic)
	VARS
	t -> t: T
	name -> name: string
	value -> value: T
	TYPES
	T -> context_generic.contextA.'T

scope 883 context_generic.contextA.ability_impl ability_impl (parent: context_generic.contextA)
	TYPES
	Self -> context_generic.contextA.'T

scope 884 context_generic.contextA.ability_impl.Equals_T_equals fn (parent: context_generic.contextA.ability_impl)
	VARS
	self -> self: T
	other -> other: T

scope 885 context_generic.testGenericPassing fn (parent: context_generic)
	VARS
	i -> i: i64
	name -> name: string

scope 886 context_generic.test fn (parent: context_generic)

scope 887 context_params.addTracked fn (parent: context_params)
	VARS
	x -> x: i64
	hist -> hist: List[string]*
	y -> y: i64

scope 888 context_params.addAll fn (parent: context_params)
	VARS
	a -> a: u8
	y -> y: i64
	x -> x: i64
	b -> b: u16

scope 889 context_params.test fn (parent: context_params)
	VARS
	u -> u: u8
	v -> v: u16
	history -> history: List[string]*

scope 890 control_flow.ifBasic fn (parent: control_flow)
	VARS
	result -> result: i64
	cond -> cond: bool

scope 891 control_flow.ifNoElse fn (parent: control_flow)
	VARS
	x -> mut x: i64
	expr -> expr: unit

scope 892 control_flow.returnSimple fn (parent: control_flow)

scope 893 control_flow.rand fn (parent: control_flow)

scope 894 control_flow.returnFromIf fn (parent: control_flow)
	VARS
	x -> x: unit

scope 895 control_flow.loopBreak fn (parent: control_flow)
	VARS
	x -> x: i64

scope 896 control_flow.loopNested fn (parent: control_flow)
	VARS
	result -> result: i64

scope 897 control_flow.loopFalse fn (parent: control_flow)
	VARS
	x -> x: i64

scope 898 control_flow.doCrash fn (parent: control_flow)

scope 899 control_flow.test fn (parent: control_flow)

scope 900 enum_basic.enumNoPayload fn (parent: enum_basic)
	VARS
	v -> mut v: enum Yes | No

scope 901 enum_basic.enumPayload fn (parent: enum_basic)
	VARS
	a -> a: Maybe
	__match_subject_1378 -> __match_subject_1378: Maybe
	c -> c: Maybe
	b -> b: Maybe
	__match_subject_1362 -> __match_subject_1362: Maybe
	__match_subject_1370 -> __match_subject_1370: Maybe

scope 902 enum_basic.MyResult.unwrap fn (parent: enum_basic.MyResult)
	VARS
	self -> self: MyResult[T, E]
	TYPES
	T -> enum_basic.MyResult.unwrap.'T
	E -> enum_basic.MyResult.unwrap.'E

scope 903 enum_basic.MyResult.unwrap.ability_impl ability_impl (parent: enum_basic.MyResult.unwrap)

scope 904 enum_basic.MyResult.unwrap.ability_impl ability_impl (parent: enum_basic.MyResult.unwrap)

scope 905 enum_basic.MyResult.show fn (parent: enum_basic.MyResult)
	VARS
	self -> self: MyResult[T, E]
	__match_subject_1386 -> __match_subject_1386: MyResult[T, E]
	TYPES
	T -> enum_basic.MyResult.show.'T
	E -> enum_basic.MyResult.show.'E

scope 906 enum_basic.MyResult.show.ability_impl ability_impl (parent: enum_basic.MyResult.show)
	TYPES
	Self -> enum_basic.MyResult.show.'T

scope 907 enum_basic.MyResult.show.ability_impl.Show_T_show fn (parent: enum_basic.MyResult.show.ability_impl)
	VARS
	self -> self: T

scope 908 enum_basic.MyResult.show.ability_impl ability_impl (parent: enum_basic.MyResult.show)
	TYPES
	Self -> enum_basic.MyResult.show.'E

scope 909 enum_basic.MyResult.show.ability_impl.Show_E_show fn (parent: enum_basic.MyResult.show.ability_impl)
	VARS
	self -> self: E

scope 910 enum_basic.genericEnum fn (parent: enum_basic)
	VARS
	x1 -> x1: MyResult[i64, string]
	x1Ok -> x1Ok: MyResult[i64, string].Ok(i64)
	b -> b: i64
	x2 -> x2: MyResult[i64, string]

scope 911 enum_basic.test fn (parent: enum_basic)

scope 912 enum_construction.test fn (parent: enum_construction)
	VARS
	__match_subject_1420 -> __match_subject_1420: Opt[i64]
	bc2 -> bc2: Opt[i64]
	s7 -> s7: StateHard
	s4 -> s4: State.On(unit)
	z2 -> z2: State.Zilch
	Opt -> Opt: unit
	i -> i: Opt[i32].None
	s2 -> s2: State
	bc -> bc: Opt[bool]
	s6 -> s6: StateHard
	s3 -> s3: State
	z1 -> z1: State
	x -> x: Contrived[i64, string]
	State -> State: unit
	__match_subject_1417 -> __match_subject_1417: Opt[bool]
	s1 -> s1: State
	bb -> bb: Opt[bool]
	s5 -> s5: StateHard
	c -> c: Opt[bool].None
	z0 -> z0: State.Zilch
	b -> b: Opt[bool].None
	bbb -> bbb: Opt[i64]

scope 913 enum_fail.inner.test fn (parent: enum_fail.inner)
	VARS
	__match_subject_1431 -> __match_subject_1431: Opt[string]
	result -> result: Opt[string]

scope 914 fib.fib fn (parent: fib)
	VARS
	n -> n: i64
	__match_subject_1433 -> __match_subject_1433: i64

scope 915 fib.test fn (parent: fib)
	VARS
	result -> result: i64

scope 916 float_test.test fn (parent: float_test)
	VARS
	pi -> pi: f64
	__match_subject_1437 -> __match_subject_1437: f32
	__match_subject_1436 -> __match_subject_1436: f32
	__match_subject_1438 -> __match_subject_1438: f32

scope 917 for_yield_test.forString fn (parent: for_yield_test)
	VARS
	charCodes -> charCodes: List[i64]
	s -> s: string

scope 918 for_yield_test.forYield fn (parent: for_yield_test)
	VARS
	squares -> squares: List[i64]

scope 919 for_yield_test.test fn (parent: for_yield_test)

scope 920 function_pointer.staticAddOne fn (parent: function_pointer)
	VARS
	x -> x: i64

scope 921 function_pointer.staticAddTwo fn (parent: function_pointer)
	VARS
	x -> x: i64

scope 922 function_pointer.test fn (parent: function_pointer)

scope 923 generic_struct.Pair.t fn (parent: generic_struct.Pair)
	VARS
	self -> self: Pair[T, U]
	TYPES
	T -> generic_struct.Pair.t.'T
	U -> generic_struct.Pair.t.'U

scope 924 generic_struct.Pair.t.ability_impl ability_impl (parent: generic_struct.Pair.t)

scope 925 generic_struct.Pair.t.ability_impl ability_impl (parent: generic_struct.Pair.t)

scope 926 generic_struct.unboxIt fn (parent: generic_struct)
	VARS
	b -> b: Box[Box[Box[T]]]
	TYPES
	T -> generic_struct.unboxIt.'T

scope 927 generic_struct.unboxIt.ability_impl ability_impl (parent: generic_struct.unboxIt)

scope 928 generic_struct.test fn (parent: generic_struct)
	VARS
	nested -> nested: Box[Box[Box[i64]]]
	c2 -> c2: Box[bool]
	c -> c: Box[bool]
	c4 -> c4: Box[bool*]
	b -> b: Box[i64]
	c3 -> c3: Box[Opt[bool]]
	p -> p: Pair[i64, bool]

scope 929 global_int.test fn (parent: global_int)

scope 930 inference.combine fn (parent: inference)
	VARS
	a -> a: T
	b -> b: T
	TYPES
	T -> inference.combine.'T

scope 931 inference.combine.ability_impl ability_impl (parent: inference.combine)

scope 932 inference.combine3 fn (parent: inference)
	VARS
	a -> a: T
	b -> b: T
	c -> c: {one: T, two: T}
	TYPES
	T -> inference.combine3.'T

scope 933 inference.combine3.ability_impl ability_impl (parent: inference.combine3)

scope 934 inference.getOrElse fn (parent: inference)
	VARS
	a -> a: Opt[T]
	b -> b: T
	TYPES
	T -> inference.getOrElse.'T

scope 935 inference.getOrElse.ability_impl ability_impl (parent: inference.getOrElse)

scope 936 inference.some fn (parent: inference)
	VARS
	value -> value: U
	TYPES
	U -> inference.some.'U

scope 937 inference.some.ability_impl ability_impl (parent: inference.some)

scope 938 inference.get fn (parent: inference)
	VARS
	value -> value: Opt[UU]
	TYPES
	UU -> inference.get.'UU

scope 939 inference.get.ability_impl ability_impl (parent: inference.get)

scope 940 inference.identity fn (parent: inference)
	VARS
	value -> value: T
	TYPES
	T -> inference.identity.'T

scope 941 inference.identity.ability_impl ability_impl (parent: inference.identity)

scope 942 inference.identityNested fn (parent: inference)
	VARS
	t -> t: T
	TYPES
	T -> inference.identityNested.'T

scope 943 inference.identityNested.ability_impl ability_impl (parent: inference.identityNested)

scope 944 inference.occursCheckTest fn (parent: inference)
	VARS
	x -> x: T
	__match_subject_1492 -> __match_subject_1492: Opt[string]
	TYPES
	T -> inference.occursCheckTest.'T

scope 945 inference.occursCheckTest.ability_impl ability_impl (parent: inference.occursCheckTest)

scope 946 inference.test fn (parent: inference)
	VARS
	y -> y: List[bool]
	e2 -> e2: Opt[u32]
	a2 -> a2: bool
	d -> d: u32
	e -> e: Opt[i64]
	a -> a: bool
	a3 -> a3: bool
	withNever -> withNever: Opt[string]
	c -> c: Opt[i64]
	x -> x: Opt[i64]*
	b -> b: i64
	d2 -> d2: u32
	__match_subject_1535 -> __match_subject_1535: Opt[string]

scope 947 is_patterns.test fn (parent: is_patterns)
	VARS
	__match_subject_1546 -> __match_subject_1546: char
	__match_subject_1542 -> __match_subject_1542: string
	__match_subject_1537 -> __match_subject_1537: unit
	opt -> opt: Opt[{x: i64}]
	__match_subject_1551 -> __match_subject_1551: Opt[i64]
	__match_subject_1553 -> __match_subject_1553: Opt[i64]
	__match_subject_1549 -> __match_subject_1549: bool
	__match_subject_1545 -> __match_subject_1545: char
	i -> i: i64
	__match_subject_1540 -> __match_subject_1540: i64
	bar -> bar: {x: Opt[i64]}
	foo -> foo: {x: i64, y: string}
	u -> u: unit
	__match_subject_1548 -> __match_subject_1548: bool
	__match_subject_1543 -> __match_subject_1543: string
	__match_subject_1539 -> __match_subject_1539: i64
	else_ran -> mut else_ran: bool
	c -> c: char
	b -> b: bool
	s -> s: string

scope 948 json_test.test fn (parent: json_test)
	VARS
	__match_subject_1578 -> __match_subject_1578: Json
	obj -> obj: Json
	__match_subject_1576 -> __match_subject_1576: Json
	obj2 -> obj2: Json
	__match_subject_1589 -> __match_subject_1589: Json
	__match_subject_1591 -> __match_subject_1591: Json
	null -> null: Json

scope 949 lambdas.staticAddOne fn (parent: lambdas)
	VARS
	x -> x: i64

scope 950 lambdas.staticAddTwo fn (parent: lambdas)
	VARS
	x -> x: i64

scope 951 lambdas.captures fn (parent: lambdas)
	VARS
	add -> add: lambda#expr#4071(fn((env){closedOver: i64}*, i64) -> i64)
	closedOver -> closedOver: i64

scope 952 lambdas.captureMut fn (parent: lambdas)
	VARS
	counter -> counter: i64*
	inc -> inc: lambda#expr#4083(fn((env){counter: i64*}*, i64) -> unit)

scope 953 lambdas.closureReturn fn (parent: lambdas)
	VARS
	getThree -> getThree: lambda#expr#4098(fn((env){}*) -> i64)
	nullary -> nullary: lambda#expr#4100(fn((env){}*) -> i64)

scope 954 lambdas.simpleDyn fn (parent: lambdas)
	VARS
	thunk -> thunk: lambda_object(fn((env){}*) -> unit)

scope 955 lambdas.someFnParam1 fn (parent: lambdas)
	VARS
	i -> i: i64
	f -> f: some_fn_1844: some fn(i64) -> i64

scope 956 lambdas.someFnParam2 fn (parent: lambdas)
	VARS
	i -> i: i64
	f -> f: some_fn_1850: some fn(i64) -> i64
	g -> g: some_fn_1854: some fn(i64) -> i64

scope 957 lambdas.someFnParamGen fn (parent: lambdas)
	VARS
	g -> g: some_fn_1865: some fn(T) -> Opt[T]
	t -> t: T
	f -> f: some_fn_1860: some fn(T) -> T
	TYPES
	T -> lambdas.someFnParamGen.'T

scope 958 lambdas.someFnParamGen.ability_impl ability_impl (parent: lambdas.someFnParamGen)

scope 959 lambdas.runThings fn (parent: lambdas)
	VARS
	thunks -> thunks: List[lambda_object(fn((env){}*) -> unit)]

scope 960 lambdas.thunksTest fn (parent: lambdas)
	VARS
	counter -> counter: i64*
	thunks -> thunks: List[lambda_object(fn((env){counter: i64*}*) -> unit)]

scope 961 lambdas.test fn (parent: lambdas)
	VARS
	lam1ResultDyn -> lam1ResultDyn: i64
	staticAddOneVar -> staticAddOneVar: fn(i64) -> i64*
	c1 -> c1: {x: i64}*
	staticResult -> staticResult: i64
	result -> result: List[i64]
	c2 -> c2: i64
	withClosures -> withClosures: i64
	lam1ResultPtr -> lam1ResultPtr: i64
	withGenerics -> withGenerics: Opt[bool]
	FUNCTIONS
	filter -> fn filter[T](self: List[T], f: some_fn_800: some fn(T) -> bool): List[T]
	map -> fn map[T, U](self: List[T], f: some_fn_779: some fn(T) -> U): List[U]

scope 962 lib_compiler_test.test fn (parent: lib_compiler_test)
	VARS
	x -> x: SourceLocation
	__match_subject_1715 -> __match_subject_1715: Opt[string]

scope 963 list_test.listFill fn (parent: list_test)
	VARS
	exp -> exp: List[i64]
	emptyCloned -> emptyCloned: List[u8]
	xs -> xs: List[i64]*
	i -> mut i: u64
	xs2 -> xs2: List[i64]
	empty -> empty: List[u8]

scope 964 list_test.listSlice fn (parent: list_test)
	VARS
	a -> a: List[i64]*
	emptySlice -> emptySlice: Buffer[i64]
	emptyList -> emptyList: List[i64]
	slice -> slice: Buffer[i64]
	fullSlice -> fullSlice: Buffer[i64]

scope 965 list_test.listOfStructs fn (parent: list_test)
	VARS
	i -> mut i: i64
	xs -> xs: List[Point]*

scope 966 list_test.listEquality fn (parent: list_test)
	VARS
	empty -> empty: List[i64]

scope 967 list_test.Show_impl_{rank: i64, payload: string} ability_impl (parent: list_test)
	TYPES
	Self -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 968 list_test.Show_impl_{rank: i64, payload: string}.Show_{rank: i64, payload: string}_show fn (parent: list_test.Show_impl_{rank: i64, payload: string})
	VARS
	rank -> rank: i64
	self -> self: {rank: i64, payload: string}
	payload -> payload: string

scope 969 list_test.Comparable_impl_{rank: i64, payload: string} ability_impl (parent: list_test)
	TYPES
	Self -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 970 list_test.Comparable_impl_{rank: i64, payload: string}.Comparable_{rank: i64, payload: string}_compare fn (parent: list_test.Comparable_impl_{rank: i64, payload: string})
	VARS
	self -> self: {rank: i64, payload: string}
	other -> other: {rank: i64, payload: string}

scope 971 list_test.Equals_impl_{rank: i64, payload: string} ability_impl (parent: list_test)
	TYPES
	Self -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 972 list_test.Equals_impl_{rank: i64, payload: string}.Equals_{rank: i64, payload: string}_equals fn (parent: list_test.Equals_impl_{rank: i64, payload: string})
	VARS
	self -> self: {rank: i64, payload: string}
	other -> other: {rank: i64, payload: string}

scope 973 list_test.testSortInt fn (parent: list_test)
	VARS
	input -> input: List[i64]
	sorted -> sorted: List[i64]
	expected -> expected: List[i64]

scope 974 list_test.testSortOther fn (parent: list_test)
	VARS
	input -> input: List[{rank: i64, payload: string}]
	sorted -> sorted: List[{rank: i64, payload: string}]
	expected -> expected: List[{rank: i64, payload: string}]

scope 975 list_test.testSort fn (parent: list_test)

scope 976 list_test.testSwap fn (parent: list_test)
	VARS
	a -> a: List[i64]*

scope 977 list_test.iterator fn (parent: list_test)
	VARS
	i2 -> i2: BufferIterator[i64]*
	l -> l: List[i64]
	i -> i: BufferIterator[i64]*
	i3 -> i3: BufferIterator[i64]*

scope 978 list_test.test fn (parent: list_test)

scope 979 main fn (parent: )

scope 980 match_exhaust.matchBool fn (parent: match_exhaust)
	VARS
	b -> b: bool
	__match_subject_1795 -> __match_subject_1795: bool

scope 981 match_exhaust.matchTristateOpt fn (parent: match_exhaust)
	VARS
	__match_subject_1796 -> __match_subject_1796: Opt[TriState]
	t -> t: Opt[TriState]

scope 982 match_exhaust.failedWithBaz fn (parent: match_exhaust)
	VARS
	t -> t: TriState
	__match_subject_1802 -> __match_subject_1802: TriState

scope 983 match_exhaust.matchOptBool fn (parent: match_exhaust)
	VARS
	__match_subject_1805 -> __match_subject_1805: Opt[bool]
	b -> b: Opt[bool]

scope 984 match_exhaust.bothTrue fn (parent: match_exhaust)
	VARS
	bb -> bb: {a: bool, b: bool}
	__match_subject_1808 -> __match_subject_1808: {a: bool, b: bool}

scope 985 match_exhaust.main fn (parent: match_exhaust)
	VARS
	__match_subject_1817 -> __match_subject_1817: char
	yes -> yes: TriState

scope 986 match_fails.useless fn (parent: match_fails)
	VARS
	__match_subject_1838 -> __match_subject_1838: Opt[string]
	__match_subject_1821 -> __match_subject_1821: Foo
	foo -> foo: Foo
	result -> result: Opt[string]

scope 987 match_fails.unhandled fn (parent: match_fails)
	VARS
	__match_subject_1850 -> __match_subject_1850: Opt[string]
	__match_subject_1841 -> __match_subject_1841: Blub
	blub -> blub: Blub
	result -> result: Opt[string]

scope 988 match_fails.test fn (parent: match_fails)

scope 989 match_references.main fn (parent: match_references)
	VARS
	x -> x: Opt[i64]*
	point -> point: {x: i64, y: i64}*
	b -> b: bool***

scope 990 matching_if.test fn (parent: matching_if)
	VARS
	y -> y: Opt[string]
	__match_subject_1884 -> __match_subject_1884: Opt[string]
	result -> result: bool
	nested -> nested: Opt[{x: Opt[i64], y: Opt[i64]}]
	partial -> partial: Opt[{x: Opt[i64], y: Opt[i64]}]
	myPoint -> myPoint: {x: i64, y: i64}
	complexResult -> complexResult: bool
	x -> x: Opt[string]
	shadowFailure -> shadowFailure: Opt[string]
	mixed -> mixed: Opt[{outer: i64, inner: Opt[{value: i64}]}]
	complex -> complex: Opt[{point: {x: i64, y: i64}, value: Opt[string]}]
	foo -> foo: i64
	structResult -> structResult: bool
	failure1 -> failure1: Opt[string]
	nestedResult -> nestedResult: bool
	mixedResult -> mixedResult: bool
	partialResult -> partialResult: bool

scope 991 never_everywhere.callArgument fn (parent: never_everywhere)

scope 992 never_everywhere.letRhs fn (parent: never_everywhere)
	VARS
	x -> mut x: never

scope 993 never_everywhere.assgnRhs fn (parent: never_everywhere)
	VARS
	x -> mut x: i64

scope 994 never_everywhere.binopRhs fn (parent: never_everywhere)

scope 995 never_everywhere.unop fn (parent: never_everywhere)

scope 996 never_everywhere.whileCond fn (parent: never_everywhere)

scope 997 never_everywhere.enumConstrPayload fn (parent: never_everywhere)

scope 998 never_everywhere.getEnumPayload fn (parent: never_everywhere)
	VARS
	x -> x: never

scope 999 never_everywhere.castTarget fn (parent: never_everywhere)

scope 1000 never_everywhere.inReturn fn (parent: never_everywhere)

scope 1001 never_everywhere.inBreak fn (parent: never_everywhere)

scope 1002 never_everywhere.test fn (parent: never_everywhere)

scope 1003 ns_collision.baz.bazi.name fn (parent: ns_collision.baz.bazi)

scope 1004 ns_collision.bazi.name fn (parent: ns_collision.bazi)

scope 1005 ns_collision.test fn (parent: ns_collision)

scope 1006 ns_extend.foo.Baz.get fn (parent: ns_extend.foo.Baz)
	VARS
	self -> self: Baz

scope 1007 ns_extend.foo.Baz.get2 fn (parent: ns_extend.foo.Baz)
	VARS
	self -> self: Baz

scope 1008 ns_extend.test fn (parent: ns_extend)
	VARS
	baz -> baz: Baz

scope 1009 optionals.testBasics fn (parent: optionals)
	VARS
	c -> c: Opt[i64]
	b -> b: Opt[bool]
	p -> p: Opt[PointMaybeY]

scope 1010 optionals.testCoalesceAccessor fn (parent: optionals)
	VARS
	maybeUser -> maybeUser: Opt[{name: string, age: i64}]

scope 1011 optionals.testComplex fn (parent: optionals)
	VARS
	my_arr -> mut my_arr: List[Opt[WeirdPoint]]
	my_point -> my_point: WeirdPoint

scope 1012 optionals.noNum fn (parent: optionals)

scope 1013 optionals.someNum fn (parent: optionals)

scope 1014 optionals.optElseOperator fn (parent: optionals)
	VARS
	result -> result: i64

scope 1015 optionals.blanketImpls fn (parent: optionals)

scope 1016 optionals.test fn (parent: optionals)

scope 1017 pipe.add fn (parent: pipe)
	VARS
	a -> a: i64
	b -> b: i64

scope 1018 pipe.add1 fn (parent: pipe)
	VARS
	a -> a: i64

scope 1019 pipe.test fn (parent: pipe)

scope 1020 pointer.test fn (parent: pointer)
	VARS
	point -> point: Point3*
	pointPtr -> pointPtr: Pointer
	pointShifted -> pointShifted: Pointer
	point2 -> point2: Point3*
	point3 -> point3: Point3*

scope 1021 range_test.testBasicIntRangeIteration fn (parent: range_test)
	VARS
	iter -> iter: IntRangeIterator*

scope 1022 range_test.testEmptyIntRange fn (parent: range_test)
	VARS
	iter -> iter: IntRangeIterator*

scope 1023 range_test.testNegativeIntRange fn (parent: range_test)
	VARS
	iter -> iter: IntRangeIterator*

scope 1024 range_test.testUpTo fn (parent: range_test)
	VARS
	iter -> iter: IntRangeIterator*

scope 1025 range_test.testStepBy fn (parent: range_test)
	VARS
	iter -> iter: IntRangeIterator*

scope 1026 range_test.testSizeHint fn (parent: range_test)
	VARS
	hint2 -> hint2: {atLeast: u64, atMost: Opt[u64]}
	hint -> hint: {atLeast: u64, atMost: Opt[u64]}
	iter -> iter: IntRangeIterator*

scope 1027 range_test.testNth fn (parent: range_test)
	VARS
	iter -> iter: IntRangeIterator*

scope 1028 range_test.testAdvanceBy fn (parent: range_test)
	VARS
	iter -> iter: IntRangeIterator*

scope 1029 range_test.test fn (parent: range_test)

scope 1030 scopes.Outer.Foo.value fn (parent: scopes.Outer.Foo)
	VARS
	self -> self: Foo

scope 1031 scopes.Foo.value fn (parent: scopes.Foo)
	VARS
	self -> self: Foo

scope 1032 scopes.scopeCollision fn (parent: scopes)
	VARS
	x -> x: i64

scope 1033 scopes.namespaceAlias fn (parent: scopes)
	VARS
	x -> x: Foo

scope 1034 scopes.test fn (parent: scopes)

scope 1035 string_interp_test.Show_impl_{name: string, weight: i64} ability_impl (parent: string_interp_test)
	TYPES
	Self -> {name: string({buffer: Buffer[char]({len: u64, data: char*})}), weight: i64}

scope 1036 string_interp_test.Show_impl_{name: string, weight: i64}.Show_{name: string, weight: i64}_show fn (parent: string_interp_test.Show_impl_{name: string, weight: i64})
	VARS
	name -> name: string
	self -> self: {name: string, weight: i64}
	weight -> weight: i64

scope 1037 string_interp_test.test fn (parent: string_interp_test)
	VARS
	user -> user: {name: string, weight: i64}

scope 1038 string_test.escape fn (parent: string_test)
	VARS
	codes -> codes: List[u8]
	s -> s: string

scope 1039 string_test.test fn (parent: string_test)
	VARS
	abc -> abc: string
	y -> y: List[string]
	x -> x: List[string]
	conc -> conc: string
	__match_subject_2046 -> __match_subject_2046: Opt[u64]

scope 1040 struct_test.basicStruct fn (parent: struct_test)
	VARS
	zero -> zero: Point

scope 1041 struct_test.Foo.getValue fn (parent: struct_test.Foo)
	VARS
	self -> self: Foo

scope 1042 struct_test.Foo.setValue fn (parent: struct_test.Foo)
	VARS
	x -> x: i64
	self -> self: Foo*

scope 1043 struct_test.Foo.new fn (parent: struct_test.Foo)
	VARS
	x -> x: i64

scope 1044 struct_test.structArgMut fn (parent: struct_test)
	VARS
	x -> x: Foo*

scope 1045 struct_test.Equals_impl_{a: i64} ability_impl (parent: struct_test)
	TYPES
	Self -> {a: i64}

scope 1046 struct_test.Equals_impl_{a: i64}.Equals_{a: i64}_equals fn (parent: struct_test.Equals_impl_{a: i64})
	VARS
	self -> self: {a: i64}
	other -> other: {a: i64}

scope 1047 struct_test.eqAnon fn (parent: struct_test)
	VARS
	bar -> bar: {a: i64}
	foo -> foo: {a: i64}

scope 1048 struct_test.block_area fn (parent: struct_test)
	VARS
	b -> b: Block

scope 1049 struct_test.structNested fn (parent: struct_test)
	VARS
	area2 -> area2: i64
	area -> area: i64
	b -> b: Block
	width -> width: i64

scope 1050 struct_test.test fn (parent: struct_test)

scope 1051 struct_anon_nomethod.PointNamed.sum fn (parent: struct_anon_nomethod.PointNamed)
	VARS
	self -> self: PointNamed

scope 1052 struct_anon_nomethod.PointAlias.sum fn (parent: struct_anon_nomethod.PointAlias)
	VARS
	self -> self: {x: i64, y: i64}

scope 1053 struct_anon_nomethod.test fn (parent: struct_anon_nomethod)
	VARS
	p2 -> p2: {x: i64, y: i64}
	__match_subject_2057 -> __match_subject_2057: Opt[string]
	p -> p: PointNamed

scope 1054 struct_composition.test fn (parent: struct_composition)
	VARS
	__match_subject_2062 -> __match_subject_2062: Text
	t -> t: Text
	__match_subject_2060 -> __match_subject_2060: Text

scope 1055 try_test.canFailInt fn (parent: try_test)

scope 1056 try_test.canFailBool fn (parent: try_test)

scope 1057 try_test.Try_impl_Foo ability_impl (parent: try_test)
	TYPES
	T -> i64
	Self -> Foo({a: bool})
	E -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1058 try_test.Try_impl_Foo.Try_Foo_makeError fn (parent: try_test.Try_impl_Foo)
	VARS
	e -> e: string

scope 1059 try_test.Try_impl_Foo.Try_Foo_makeOk fn (parent: try_test.Try_impl_Foo)
	VARS
	t -> t: i64

scope 1060 try_test.Try_impl_Foo.Try_Foo_isOk fn (parent: try_test.Try_impl_Foo)
	VARS
	self -> self: Foo

scope 1061 try_test.Try_impl_Foo.Try_Foo_getError fn (parent: try_test.Try_impl_Foo)
	VARS
	self -> self: Foo

scope 1062 try_test.Try_impl_Foo.Try_Foo_getOk fn (parent: try_test.Try_impl_Foo)
	VARS
	self -> self: Foo

scope 1063 try_test.fails fn (parent: try_test)
	VARS
	i -> i: i64
	b -> b: bool
	value -> value: Result[i64, string]

scope 1064 try_test.run fn (parent: try_test)
	VARS
	res -> res: Result[bool, string]
	c -> c: lambda#expr#6134(fn((env){}*, bool) -> Result[bool, string])
	__match_subject_2093 -> __match_subject_2093: Result[bool, string]
	result -> result: i64

scope 1065 try_test.test fn (parent: try_test)

scope 1066 type_info.doIt fn (parent: type_info)
	VARS
	bar -> bar: u32
	foo -> foo: bool

scope 1067 type_info.testSizeOf fn (parent: type_info)

scope 1068 type_info.testFnTypeInfo fn (parent: type_info)

scope 1069 type_info.test fn (parent: type_info)

scope 1070 opaque_type_01.UserId.make fn (parent: opaque_type_01.UserId)
	VARS
	value -> value: i64

scope 1071 opaque_type_01.UserId.toInt fn (parent: opaque_type_01.UserId)
	VARS
	self -> self: UserId

scope 1072 opaque_type_01.test fn (parent: opaque_type_01)
	VARS
	__match_subject_2097 -> __match_subject_2097: Opt[string]
	user_id -> user_id: UserId
	errorResult2 -> errorResult2: Opt[string]
	__match_subject_2100 -> __match_subject_2100: Opt[string]
	errorResult -> errorResult: Opt[string]

scope 1073 type_order.ToPoint ability_defn (parent: type_order)
	FUNCTIONS
	toPoint -> fn toPoint[Self](self: Self): {x: i64, y: i64}
	TYPES
	Self -> type_order.ToPoint.'Self

scope 1074 type_order.ToPoint.ability_impl ability_impl (parent: type_order.ToPoint)

scope 1075 type_order.ToPoint.toPoint fn (parent: type_order.ToPoint)
	VARS
	self -> self: Self

scope 1076 type_order.test fn (parent: type_order)
	VARS
	x -> x: {x: i64, y: i64}

scope 1077 use_test.foo.getOne fn (parent: use_test.foo)

scope 1078 use_test.test fn (parent: use_test)
	VARS
	helloOpt -> helloOpt: Opt[string]
	S -> SEEK_END: i32
	hello -> hello: string
	FUNCTIONS
	typeIdAlias -> intern fn typeId[T](): u64
	TYPES
	Optional -> Opt[T](enum None | Some(Opt.'T))
	str -> string({buffer: Buffer[char]({len: u64, data: char*})})
	NAMESPACES
821 -> foo

scope 1079 while_test.whileSimple fn (parent: while_test)
	VARS
	i -> mut i: i64
	iters -> mut iters: i64

scope 1080 while_test.whileReturn fn (parent: while_test)

scope 1081 while_test.whileNested fn (parent: while_test)
	VARS
	result -> result: unit

scope 1082 while_test.whileReturnClosure fn (parent: while_test)

scope 1083 while_test.whileBreak fn (parent: while_test)

scope 1084 while_test.test fn (parent: while_test)

scope 1085 assert.block block (parent: assert)

scope 1086 assert.block.block block (parent: assert.block)

scope 1087 crash.block block (parent: crash)
	VARS
	filename -> filename: string
	line -> line: u64
	s -> s: string

scope 1088 crash.block.block block (parent: crash.block)
	VARS
	__sb_726 -> __sb_726: StringBuilder

scope 1089 assertEquals.block block (parent: assertEquals)

scope 1090 assertEquals.block.block block (parent: assertEquals.block)

scope 1091 assertEquals.block.block.block block (parent: assertEquals.block.block)
	VARS
	__sb_728 -> __sb_728: StringBuilder

scope 1092 sizeOf_spec_T_1 fn (parent: )
	TYPES
	T -> new.'T

scope 1093 Buffer.fromRawParts_spec_Pointer_1 fn (parent: Buffer)
	VARS
	len -> len: u64
	data -> data: Pointer
	TYPES
	T -> Pointer

scope 1094 List.withCapacity_spec_string_1 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1095 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer

scope 1096 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[Pointer]({len: u64, data: Pointer*})
	Item -> Pointer
	T -> Pointer
	I -> BufferIterator[Pointer]({buf: Buffer[Pointer]({len: u64, data: Pointer*}), pos: u64})

scope 1097 ability_impl.Iterable_Buffer[Pointer]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[Pointer]

scope 1098 sys.parseMainArgs.for for (parent: sys.parseMainArgs)
	VARS
	__iter_740 -> __iter_740: BufferIterator[Pointer]*
	__yieldedColl_754 -> __yieldedColl_754: List[string]*
	itIndex -> mut itIndex: u64

scope 1099 sys.parseMainArgs.for.block block (parent: sys.parseMainArgs.for)
	VARS
	__next_747 -> __next_747: Opt[Pointer]

scope 1100 sys.parseMainArgs.for.block.block block (parent: sys.parseMainArgs.for.block)
	VARS
	cstr -> cstr: Pointer
	__block_expr_val_755 -> __block_expr_val_755: string

scope 1101 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer

scope 1102 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer
	Self -> BufferIterator[Pointer]({buf: Buffer[Pointer]({len: u64, data: Pointer*}), pos: u64})
	Item -> Pointer

scope 1103 ability_impl.Iterator_BufferIterator[Pointer]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[Pointer]*

scope 1104 ability_impl.Iterator_BufferIterator[Pointer]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[Pointer]

scope 1105 ability_impl.Iterator_BufferIterator[Pointer]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[Pointer]*

scope 1106 ability_impl.Iterator_BufferIterator[Pointer]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[Pointer]*

scope 1107 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer

scope 1108 ability_impl ability_impl (parent: )
	TYPES
	T -> Pointer
	Inner -> Pointer
	Self -> Opt[Pointer](enum None | Some(Pointer))

scope 1109 ability_impl.Unwrap_Opt[Pointer]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2123 -> __match_subject_2123: Opt[Pointer]
	self -> self: Opt[Pointer]

scope 1110 ability_impl.Unwrap_Opt[Pointer]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Pointer]

scope 1111 ability_impl.Unwrap_Opt[Pointer]_make fn (parent: ability_impl)
	VARS
	t -> t: Pointer

scope 1112 Buffer.get_spec_Pointer_1 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Pointer]
	tRef -> tRef: Pointer*
	TYPES
	T -> Pointer

scope 1113 List.push_spec_string_1 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: string
	self -> self: List[string]*
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1114 Opt.isSome_spec_Pointer_1 fn (parent: Opt)
	VARS
	__match_subject_2135 -> __match_subject_2135: Opt[Pointer]
	self -> self: Opt[Pointer]
	TYPES
	T -> Pointer

scope 1115 sys.parseMainArgs.for.block.block block (parent: sys.parseMainArgs.for.block)

scope 1116 List.toBuffer_spec_string_1 fn (parent: List)
	VARS
	self -> self: List[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1117 Buffer._allocate_spec_u8_1 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: u8*
	ptr -> ptr: Pointer
	TYPES
	T -> u8

scope 1118 sys.readLine.block block (parent: sys.readLine)

scope 1119 sys.readLine.block.block block (parent: sys.readLine.block)

scope 1120 sys.readLine.block block (parent: sys.readLine)

scope 1121 Buffer.get_spec_u8_2 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[u8]
	tRef -> tRef: u8*
	TYPES
	T -> u8

scope 1122 sys.readLine.block.block block (parent: sys.readLine.block)

scope 1123 Buffer.set_spec_u8_1 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[u8]
	tRef -> tRef: u8*
	elem -> elem: u8
	TYPES
	T -> u8

scope 1124 Buffer.fromRawParts_spec_char_2 fn (parent: Buffer)
	VARS
	len -> len: u64
	data -> data: Pointer
	TYPES
	T -> char

scope 1125 assertMsg.block block (parent: assertMsg)

scope 1126 assertMsg.block.block block (parent: assertMsg.block)

scope 1127 assertMsg.block.block.block block (parent: assertMsg.block.block)
	VARS
	__sb_778 -> __sb_778: StringBuilder

scope 1128 char.toString.block block (parent: char.toString)
	VARS
	__list_literal_780 -> __list_literal_780: List[char]*

scope 1129 List.withCapacity_spec_char_2 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[char]
	TYPES
	T -> char

scope 1130 List.push_spec_char_2 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: char
	self -> self: List[char]*
	TYPES
	T -> char

scope 1131 char.toDigitValue.block block (parent: char.toDigitValue)

scope 1132 char.toDigitValue.block.block block (parent: char.toDigitValue.block)

scope 1133 char.toDigitValue.block block (parent: char.toDigitValue)

scope 1134 Show_impl_bool.Show_bool_show.block block (parent: Show_impl_bool.Show_bool_show)

scope 1135 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 1136 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 1137 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 1138 Show_impl_i64.Show_i64_show.block.while while (parent: Show_impl_i64.Show_i64_show.block)
	VARS
	d -> d: i64
	c -> c: char

scope 1139 Show_impl_i64.Show_i64_show.block block (parent: Show_impl_i64.Show_i64_show)

scope 1140 Show_impl_i64.Show_i64_show.block.block block (parent: Show_impl_i64.Show_i64_show.block)

scope 1141 List.reversed_spec_char_1 fn (parent: List)
	VARS
	self -> self: List[char]
	clone -> clone: List[char]*
	TYPES
	T -> char

scope 1142 Comparable_impl_i64.Comparable_i64_compare.block block (parent: Comparable_impl_i64.Comparable_i64_compare)

scope 1143 Comparable_impl_i64.Comparable_i64_compare.block block (parent: Comparable_impl_i64.Comparable_i64_compare)

scope 1144 Comparable_impl_u64.Comparable_u64_compare.block block (parent: Comparable_impl_u64.Comparable_u64_compare)

scope 1145 Comparable_impl_u64.Comparable_u64_compare.block block (parent: Comparable_impl_u64.Comparable_u64_compare)

scope 1146 Comparable_impl_u8.Comparable_u8_compare.block block (parent: Comparable_impl_u8.Comparable_u8_compare)

scope 1147 Comparable_impl_u8.Comparable_u8_compare.block block (parent: Comparable_impl_u8.Comparable_u8_compare)

scope 1148 formatUInt.block block (parent: formatUInt)

scope 1149 formatUInt.block.block block (parent: formatUInt.block)

scope 1150 formatUInt.block block (parent: formatUInt)

scope 1151 formatUInt.block.block block (parent: formatUInt.block)
	VARS
	second -> second: u64
	secondDigit -> secondDigit: char
	first -> first: u64
	firstDigit -> firstDigit: char

scope 1152 formatUInt.block block (parent: formatUInt)
	VARS
	remaining -> mut remaining: u64
	digits -> digits: List[char]*

scope 1153 formatUInt.block.block block (parent: formatUInt.block)

scope 1154 formatUInt.block.block.while while (parent: formatUInt.block.block)
	VARS
	d -> d: u64
	c -> c: char

scope 1155 List.reverse_spec_char_1 fn (parent: List)
	VARS
	i -> mut i: u64
	self -> self: List[char]*
	TYPES
	T -> char

scope 1156 List.toBuffer_spec_char_2 fn (parent: List)
	VARS
	self -> self: List[char]
	TYPES
	T -> char

scope 1157 Show_impl_u64.Show_u64_show.block block (parent: Show_impl_u64.Show_u64_show)

scope 1158 Show_impl_u64.Show_u64_show.block block (parent: Show_impl_u64.Show_u64_show)

scope 1159 Show_impl_u64.Show_u64_show.block.while while (parent: Show_impl_u64.Show_u64_show.block)
	VARS
	d -> d: u64
	c -> c: char

scope 1160 Try_impl_Result[S, F].Try_Result[S, F]_isOk.block block (parent: Try_impl_Result[S, F].Try_Result[S, F]_isOk)

scope 1161 Try_impl_Result[S, F].Try_Result[S, F]_isOk.block.match_arm match_arm (parent: Try_impl_Result[S, F].Try_Result[S, F]_isOk.block)
	VARS
	__payload_Ok_807 -> __payload_Ok_807: S

scope 1162 Try_impl_Result[S, F].Try_Result[S, F]_isOk.block.match_arm match_arm (parent: Try_impl_Result[S, F].Try_Result[S, F]_isOk.block)

scope 1163 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)

scope 1164 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)
	Inner -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)
	Self -> Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Err(Try_impl_Result[S, F].'F)))

scope 1165 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]
	__match_subject_2163 -> __match_subject_2163: Opt[Result[S, F].Err(F)]

scope 1166 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]

scope 1167 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Err(F)

scope 1168 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)

scope 1169 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)
	Inner -> Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)
	Self -> Opt[Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)](enum None | Some(Result[Try_impl_Result[S, F].'S, Try_impl_Result[S, F].'F].Ok(Try_impl_Result[S, F].'S)))

scope 1170 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2165 -> __match_subject_2165: Opt[Result[S, F].Ok(S)]
	self -> self: Opt[Result[S, F].Ok(S)]

scope 1171 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]

scope 1172 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Ok(S)

scope 1173 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block block (parent: Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue)

scope 1174 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block)
	VARS
	__payload_Ok_815 -> __payload_Ok_815: S

scope 1175 Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Result[S, F].Unwrap_Result[S, F]_hasValue.block)

scope 1176 ability_impl ability_impl (parent: )
	TYPES
	S -> Unwrap_impl_Result[S, F].'S
	F -> Unwrap_impl_Result[S, F].'F

scope 1177 ability_impl ability_impl (parent: )
	TYPES
	Self -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F](enum Ok(Unwrap_impl_Result[S, F].'S) | Err(Unwrap_impl_Result[S, F].'F))
	F -> Unwrap_impl_Result[S, F].'F
	T -> Unwrap_impl_Result[S, F].'S
	E -> Unwrap_impl_Result[S, F].'F
	S -> Unwrap_impl_Result[S, F].'S

scope 1178 ability_impl.Try_Result[S, F]_makeError fn (parent: ability_impl)
	VARS
	e -> e: F

scope 1179 ability_impl.Try_Result[S, F]_makeOk fn (parent: ability_impl)
	VARS
	t -> t: S

scope 1180 ability_impl.Try_Result[S, F]_isOk fn (parent: ability_impl)
	VARS
	self -> self: Result[S, F]
	__match_subject_2167 -> __match_subject_2167: Result[S, F]

scope 1181 ability_impl.Try_Result[S, F]_getError fn (parent: ability_impl)
	VARS
	self -> self: Result[S, F]

scope 1182 ability_impl.Try_Result[S, F]_getOk fn (parent: ability_impl)
	VARS
	self -> self: Result[S, F]

scope 1183 sizeOfStride_spec_T_1 fn (parent: )
	TYPES
	T -> Buffer.bufferLenBytes.'T

scope 1184 Buffer._allocate.block block (parent: Buffer._allocate)

scope 1185 Buffer._allocate.block.block block (parent: Buffer._allocate.block)

scope 1186 Buffer._allocate.block block (parent: Buffer._allocate)
	VARS
	sizeBytes -> sizeBytes: u64

scope 1187 Buffer.bufferLenBytes_spec_T_1 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer._allocate.'T

scope 1188 Buffer._copyFrom.block block (parent: Buffer._copyFrom)

scope 1189 Buffer._copyFrom.block.block block (parent: Buffer._copyFrom.block)

scope 1190 Buffer._copyFrom.block.block.block block (parent: Buffer._copyFrom.block.block)
	VARS
	__sb_825 -> __sb_825: StringBuilder

scope 1191 Buffer._copyFrom.block block (parent: Buffer._copyFrom)

scope 1192 Buffer._copyFrom.block.block block (parent: Buffer._copyFrom.block)

scope 1193 Buffer._copyFrom.block.block.block block (parent: Buffer._copyFrom.block.block)
	VARS
	__sb_826 -> __sb_826: StringBuilder

scope 1194 Buffer.bufferLenBytes_spec_T_2 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer._copyFrom.'T

scope 1195 Buffer.bufferLenBytes_spec_T_3 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Buffer.lenBytes.'T

scope 1196 Buffer.filled.block block (parent: Buffer.filled)

scope 1197 Buffer.filled.block.while while (parent: Buffer.filled.block)

scope 1198 Buffer.slice.block block (parent: Buffer.slice)

scope 1199 Buffer.slice.block.block block (parent: Buffer.slice.block)

scope 1200 Buffer.slice.block block (parent: Buffer.slice)

scope 1201 Buffer.slice.block.block block (parent: Buffer.slice.block)

scope 1202 Buffer.slice.block.block.block block (parent: Buffer.slice.block.block)
	VARS
	__sb_833 -> __sb_833: StringBuilder

scope 1203 Buffer.slice.block block (parent: Buffer.slice)

scope 1204 Buffer.getRef.block block (parent: Buffer.getRef)

scope 1205 Buffer.getRef.block.block block (parent: Buffer.getRef.block)

scope 1206 Buffer.firstRef.block block (parent: Buffer.firstRef)

scope 1207 Buffer.firstRef.block.block block (parent: Buffer.firstRef.block)

scope 1208 Buffer.firstRef.block block (parent: Buffer.firstRef)

scope 1209 Buffer.first.block block (parent: Buffer.first)

scope 1210 Buffer.first.block.match_arm match_arm (parent: Buffer.first.block)

scope 1211 Buffer.first.block.match_arm match_arm (parent: Buffer.first.block)
	VARS
	__payload_Some_842 -> __payload_Some_842: T*
	firstRef -> firstRef: T*

scope 1212 Buffer.lastRef.block block (parent: Buffer.lastRef)

scope 1213 Buffer.lastRef.block.block block (parent: Buffer.lastRef.block)

scope 1214 Buffer.lastRef.block block (parent: Buffer.lastRef)

scope 1215 Buffer.last.block block (parent: Buffer.last)

scope 1216 Buffer.last.block.match_arm match_arm (parent: Buffer.last.block)

scope 1217 Buffer.last.block.match_arm match_arm (parent: Buffer.last.block)
	VARS
	__payload_Some_845 -> __payload_Some_845: T*
	lastRef -> lastRef: T*

scope 1218 Buffer.dataPointer_spec_u8_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 1219 Buffer.fromRawParts_spec_u8_3 fn (parent: Buffer)
	VARS
	len -> len: u64
	data -> data: Pointer
	TYPES
	T -> u8

scope 1220 Buffer.dataPointer_spec_char_2 fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 1221 Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals.block block (parent: Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals)

scope 1222 Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals.block block (parent: Equals_impl_Buffer[u8].Equals_Buffer[u8]_equals)

scope 1223 Buffer.lenBytes_spec_u8_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 1224 Equals_impl_Buffer[char].Equals_Buffer[char]_equals.block block (parent: Equals_impl_Buffer[char].Equals_Buffer[char]_equals)

scope 1225 Equals_impl_Buffer[char].Equals_Buffer[char]_equals.block block (parent: Equals_impl_Buffer[char].Equals_Buffer[char]_equals)

scope 1226 Buffer.lenBytes_spec_char_2 fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 1227 Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals.block block (parent: Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals)

scope 1228 Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals.block block (parent: Equals_impl_Buffer[i64].Equals_Buffer[i64]_equals)

scope 1229 Buffer.dataPointer_spec_i64_3 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 1230 Buffer.lenBytes_spec_i64_3 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 1231 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next.block block (parent: Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next)

scope 1232 Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next.block.block block (parent: Iterator_impl_BufferIterator[T].Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 1233 some_spec_u64_1 fn (parent: )
	VARS
	value -> value: u64
	TYPES
	T -> u64

scope 1234 Opt.isSome.block block (parent: Opt.isSome)

scope 1235 Opt.isSome.block.match_arm match_arm (parent: Opt.isSome.block)
	VARS
	__payload_Some_864 -> __payload_Some_864: T

scope 1236 Opt.isSome.block.match_arm match_arm (parent: Opt.isSome.block)

scope 1237 Opt.isNone.block block (parent: Opt.isNone)

scope 1238 Opt.isNone.block.match_arm match_arm (parent: Opt.isNone.block)

scope 1239 Opt.isNone.block.match_arm match_arm (parent: Opt.isNone.block)

scope 1240 Opt.get.block block (parent: Opt.get)
	VARS
	__if_target_866 -> __if_target_866: Opt[T]
	__payload_Some_867 -> __payload_Some_867: T
	t -> t: T

scope 1241 Opt.get.block block (parent: Opt.get)

scope 1242 Opt.opt_equals.block block (parent: Opt.opt_equals)
	VARS
	at -> at: T
	__if_target_869 -> __if_target_869: Opt[T]
	__payload_Some_870 -> __payload_Some_870: T

scope 1243 Opt.opt_equals.block.block block (parent: Opt.opt_equals.block)

scope 1244 Opt.opt_equals.block.block.block block (parent: Opt.opt_equals.block.block)
	VARS
	__if_target_872 -> __if_target_872: Opt[T]
	__payload_Some_873 -> __payload_Some_873: T
	bt -> bt: T

scope 1245 Opt.opt_equals.block block (parent: Opt.opt_equals)
	VARS
	__match_subject_875 -> __match_subject_875: Opt[T]

scope 1246 Opt.opt_equals.block.block block (parent: Opt.opt_equals.block)

scope 1247 Opt.opt_equals.block.block.match_arm match_arm (parent: Opt.opt_equals.block.block)

scope 1248 Opt.opt_equals.block.block.match_arm match_arm (parent: Opt.opt_equals.block.block)

scope 1249 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block block (parent: Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue)

scope 1250 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_877 -> __payload_Some_877: T

scope 1251 Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: Unwrap_impl_Opt[T].Unwrap_Opt[T]_hasValue.block)

scope 1252 Show_impl_Opt[T].Show_Opt[T]_show.block block (parent: Show_impl_Opt[T].Show_Opt[T]_show)
	VARS
	v -> v: T
	__if_target_878 -> __if_target_878: Opt[T]
	__payload_Some_879 -> __payload_Some_879: T

scope 1253 Show_impl_Opt[T].Show_Opt[T]_show.block.block block (parent: Show_impl_Opt[T].Show_Opt[T]_show.block)
	VARS
	__sb_881 -> __sb_881: StringBuilder

scope 1254 List.reserve.block block (parent: List.reserve)

scope 1255 List.reserve.block.block block (parent: List.reserve.block)

scope 1256 List.get.block block (parent: List.get)

scope 1257 List.get.block.block block (parent: List.get.block)

scope 1258 List.getOpt.block block (parent: List.getOpt)

scope 1259 List.getOpt.block.block block (parent: List.getOpt.block)

scope 1260 sizeOf_spec_T_2 fn (parent: )
	TYPES
	T -> List._grow.'T

scope 1261 List._grow.block block (parent: List._grow)

scope 1262 List._grow.block.block block (parent: List._grow.block)

scope 1263 List._grow.block.block.block block (parent: List._grow.block.block)

scope 1264 List._grow.block block (parent: List._grow)

scope 1265 List.push.block block (parent: List.push)

scope 1266 List.push.block.block block (parent: List.push.block)

scope 1267 List.slice.block block (parent: List.slice)

scope 1268 List.slice.block block (parent: List.slice)

scope 1269 List.slice.block.block block (parent: List.slice.block)

scope 1270 List.slice.block.block.block block (parent: List.slice.block.block)
	VARS
	__sb_889 -> __sb_889: StringBuilder

scope 1271 List.firstRef.block block (parent: List.firstRef)

scope 1272 List.firstRef.block.block block (parent: List.firstRef.block)

scope 1273 List.firstRef.block block (parent: List.firstRef)

scope 1274 List.first.block block (parent: List.first)

scope 1275 List.first.block.match_arm match_arm (parent: List.first.block)

scope 1276 List.first.block.match_arm match_arm (parent: List.first.block)
	VARS
	firstRef -> firstRef: T*
	__payload_Some_891 -> __payload_Some_891: T*

scope 1277 List.lastRef.block block (parent: List.lastRef)

scope 1278 List.lastRef.block.block block (parent: List.lastRef.block)

scope 1279 List.lastRef.block block (parent: List.lastRef)

scope 1280 List.last.block block (parent: List.last)

scope 1281 List.last.block.match_arm match_arm (parent: List.last.block)

scope 1282 List.last.block.match_arm match_arm (parent: List.last.block)
	VARS
	__payload_Some_894 -> __payload_Some_894: T*
	lastRef -> lastRef: T*

scope 1283 List.reverse.block block (parent: List.reverse)

scope 1284 List.reverse.block.while while (parent: List.reverse.block)
	VARS
	j -> j: u64

scope 1285 ability_impl ability_impl (parent: )
	TYPES
	T -> List.appendBuffer.'T

scope 1286 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[List.appendBuffer.'T]({len: u64, data: List.appendBuffer.'T*})
	Item -> List.appendBuffer.'T
	T -> List.appendBuffer.'T
	I -> BufferIterator[List.appendBuffer.'T]({buf: Buffer[List.appendBuffer.'T]({len: u64, data: List.appendBuffer.'T*}), pos: u64})

scope 1287 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 1288 List.appendBuffer.for for (parent: List.appendBuffer)
	VARS
	__iter_901 -> __iter_901: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1289 List.appendBuffer.for.block block (parent: List.appendBuffer.for)
	VARS
	__next_908 -> __next_908: Opt[T]

scope 1290 List.appendBuffer.for.block.block block (parent: List.appendBuffer.for.block)
	VARS
	__block_expr_val_913 -> __block_expr_val_913: unit
	e -> e: T

scope 1291 ability_impl ability_impl (parent: )
	TYPES
	T -> List.appendBuffer.'T

scope 1292 ability_impl ability_impl (parent: )
	TYPES
	T -> List.appendBuffer.'T
	Self -> BufferIterator[List.appendBuffer.'T]({buf: Buffer[List.appendBuffer.'T]({len: u64, data: List.appendBuffer.'T*}), pos: u64})
	Item -> List.appendBuffer.'T

scope 1293 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 1294 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 1295 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1296 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1297 ability_impl ability_impl (parent: )
	TYPES
	T -> List.appendBuffer.'T

scope 1298 ability_impl ability_impl (parent: )
	TYPES
	T -> List.appendBuffer.'T
	Inner -> List.appendBuffer.'T
	Self -> Opt[List.appendBuffer.'T](enum None | Some(List.appendBuffer.'T))

scope 1299 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2179 -> __match_subject_2179: Opt[T]
	self -> self: Opt[T]

scope 1300 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 1301 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 1302 List.appendBuffer.for.block.block block (parent: List.appendBuffer.for.block)

scope 1303 List.sort.block block (parent: List.sort)

scope 1304 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 1305 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[List.sort.'T]({len: u64, buffer: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})})
	Item -> List.sort.'T
	T -> List.sort.'T
	I -> BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})

scope 1306 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 1307 List.sort.for for (parent: List.sort)
	VARS
	__iter_924 -> __iter_924: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1308 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_931 -> __next_931: Opt[T]

scope 1309 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__match_subject_936 -> __match_subject_936: Ordering
	__block_expr_val_937 -> __block_expr_val_937: unit
	item -> item: T

scope 1310 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 1311 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T
	Self -> BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})
	Item -> List.sort.'T

scope 1312 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 1313 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 1314 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1315 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1316 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 1317 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T
	Inner -> List.sort.'T
	Self -> Opt[List.sort.'T](enum None | Some(List.sort.'T))

scope 1318 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]
	__match_subject_2184 -> __match_subject_2184: Opt[T]

scope 1319 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 1320 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 1321 List.sort.for.block.block.block block (parent: List.sort.for.block.block)

scope 1322 List.sort.for.block.block.block.match_arm match_arm (parent: List.sort.for.block.block.block)

scope 1323 List.sort.for.block.block.block.match_arm match_arm (parent: List.sort.for.block.block.block)

scope 1324 List.sort.for.block.block.block.match_arm match_arm (parent: List.sort.for.block.block.block)

scope 1325 List.sort.for.block.block block (parent: List.sort.for.block)

scope 1326 List.sort.for for (parent: List.sort)
	VARS
	__iter_940 -> __iter_940: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1327 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_941 -> __next_941: Opt[T]

scope 1328 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__block_expr_val_943 -> __block_expr_val_943: unit
	item -> item: T

scope 1329 List.sort.for.block.block block (parent: List.sort.for.block)

scope 1330 List.sort.for for (parent: List.sort)
	VARS
	__iter_945 -> __iter_945: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1331 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_946 -> __next_946: Opt[T]

scope 1332 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__block_expr_val_948 -> __block_expr_val_948: unit
	item -> item: T

scope 1333 List.sort.for.block.block block (parent: List.sort.for.block)

scope 1334 List.sort.for for (parent: List.sort)
	VARS
	__iter_950 -> __iter_950: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1335 List.sort.for.block block (parent: List.sort.for)
	VARS
	__next_951 -> __next_951: Opt[T]

scope 1336 List.sort.for.block.block block (parent: List.sort.for.block)
	VARS
	__block_expr_val_953 -> __block_expr_val_953: unit
	item -> item: T

scope 1337 List.sort.for.block.block block (parent: List.sort.for.block)

scope 1338 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 1339 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[List.join.'T]({len: u64, buffer: Buffer[List.join.'T]({len: u64, data: List.join.'T*})})
	Item -> List.join.'T
	T -> List.join.'T
	I -> BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})

scope 1340 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 1341 List.join.for for (parent: List.join)
	VARS
	__iter_958 -> __iter_958: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1342 List.join.for.block block (parent: List.join.for)
	VARS
	__next_965 -> __next_965: Opt[T]

scope 1343 List.join.for.block.block block (parent: List.join.for.block)
	VARS
	isLast -> isLast: bool
	__block_expr_val_971 -> __block_expr_val_971: unit
	s -> s: T

scope 1344 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 1345 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T
	Self -> BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})
	Item -> List.join.'T

scope 1346 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 1347 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 1348 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1349 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1350 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 1351 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T
	Inner -> List.join.'T
	Self -> Opt[List.join.'T](enum None | Some(List.join.'T))

scope 1352 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2189 -> __match_subject_2189: Opt[T]
	self -> self: Opt[T]

scope 1353 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 1354 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 1355 List.join.for.block.block.block block (parent: List.join.for.block.block)

scope 1356 List.join.for.block.block.block.block block (parent: List.join.for.block.block.block)

scope 1357 List.join.for.block.block block (parent: List.join.for.block)

scope 1358 ability_impl ability_impl (parent: )
	TYPES
	T -> List.map.'T

scope 1359 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[List.map.'T]({len: u64, buffer: Buffer[List.map.'T]({len: u64, data: List.map.'T*})})
	Item -> List.map.'T
	T -> List.map.'T
	I -> BufferIterator[List.map.'T]({buf: Buffer[List.map.'T]({len: u64, data: List.map.'T*}), pos: u64})

scope 1360 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 1361 List.map.for for (parent: List.map)
	VARS
	__iter_975 -> __iter_975: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1362 List.map.for.block block (parent: List.map.for)
	VARS
	__next_982 -> __next_982: Opt[T]

scope 1363 List.map.for.block.block block (parent: List.map.for.block)
	VARS
	i -> i: T
	__block_expr_val_987 -> __block_expr_val_987: unit

scope 1364 ability_impl ability_impl (parent: )
	TYPES
	T -> List.map.'T

scope 1365 ability_impl ability_impl (parent: )
	TYPES
	T -> List.map.'T
	Self -> BufferIterator[List.map.'T]({buf: Buffer[List.map.'T]({len: u64, data: List.map.'T*}), pos: u64})
	Item -> List.map.'T

scope 1366 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 1367 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 1368 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1369 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1370 ability_impl ability_impl (parent: )
	TYPES
	T -> List.map.'T

scope 1371 ability_impl ability_impl (parent: )
	TYPES
	T -> List.map.'T
	Inner -> List.map.'T
	Self -> Opt[List.map.'T](enum None | Some(List.map.'T))

scope 1372 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]
	__match_subject_2194 -> __match_subject_2194: Opt[T]

scope 1373 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 1374 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 1375 List.map.for.block.block block (parent: List.map.for.block)

scope 1376 ability_impl ability_impl (parent: )
	TYPES
	T -> List.flatMap.'T

scope 1377 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[List.flatMap.'T]({len: u64, buffer: Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*})})
	Item -> List.flatMap.'T
	T -> List.flatMap.'T
	I -> BufferIterator[List.flatMap.'T]({buf: Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*}), pos: u64})

scope 1378 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 1379 List.flatMap.for for (parent: List.flatMap)
	VARS
	__iter_991 -> __iter_991: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1380 List.flatMap.for.block block (parent: List.flatMap.for)
	VARS
	__next_998 -> __next_998: Opt[T]

scope 1381 List.flatMap.for.block.block block (parent: List.flatMap.for.block)
	VARS
	i -> i: T
	__block_expr_val_1003 -> __block_expr_val_1003: unit

scope 1382 ability_impl ability_impl (parent: )
	TYPES
	T -> List.flatMap.'T

scope 1383 ability_impl ability_impl (parent: )
	TYPES
	T -> List.flatMap.'T
	Self -> BufferIterator[List.flatMap.'T]({buf: Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*}), pos: u64})
	Item -> List.flatMap.'T

scope 1384 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 1385 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 1386 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1387 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1388 ability_impl ability_impl (parent: )
	TYPES
	T -> List.flatMap.'T

scope 1389 ability_impl ability_impl (parent: )
	TYPES
	T -> List.flatMap.'T
	Inner -> List.flatMap.'T
	Self -> Opt[List.flatMap.'T](enum None | Some(List.flatMap.'T))

scope 1390 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2199 -> __match_subject_2199: Opt[T]
	self -> self: Opt[T]

scope 1391 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 1392 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 1393 List.flatMap.for.block.block block (parent: List.flatMap.for.block)

scope 1394 ability_impl ability_impl (parent: )
	TYPES
	T -> List.filter.'T

scope 1395 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[List.filter.'T]({len: u64, buffer: Buffer[List.filter.'T]({len: u64, data: List.filter.'T*})})
	Item -> List.filter.'T
	T -> List.filter.'T
	I -> BufferIterator[List.filter.'T]({buf: Buffer[List.filter.'T]({len: u64, data: List.filter.'T*}), pos: u64})

scope 1396 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 1397 List.filter.for for (parent: List.filter)
	VARS
	__iter_1007 -> __iter_1007: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1398 List.filter.for.block block (parent: List.filter.for)
	VARS
	__next_1014 -> __next_1014: Opt[T]

scope 1399 List.filter.for.block.block block (parent: List.filter.for.block)
	VARS
	i -> i: T
	__block_expr_val_1019 -> __block_expr_val_1019: unit

scope 1400 ability_impl ability_impl (parent: )
	TYPES
	T -> List.filter.'T

scope 1401 ability_impl ability_impl (parent: )
	TYPES
	T -> List.filter.'T
	Self -> BufferIterator[List.filter.'T]({buf: Buffer[List.filter.'T]({len: u64, data: List.filter.'T*}), pos: u64})
	Item -> List.filter.'T

scope 1402 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 1403 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 1404 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1405 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1406 ability_impl ability_impl (parent: )
	TYPES
	T -> List.filter.'T

scope 1407 ability_impl ability_impl (parent: )
	TYPES
	T -> List.filter.'T
	Inner -> List.filter.'T
	Self -> Opt[List.filter.'T](enum None | Some(List.filter.'T))

scope 1408 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]
	__match_subject_2204 -> __match_subject_2204: Opt[T]

scope 1409 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 1410 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 1411 List.filter.for.block.block.block block (parent: List.filter.for.block.block)

scope 1412 List.filter.for.block.block block (parent: List.filter.for.block)

scope 1413 List.appendBuffer_spec_char_1 fn (parent: List)
	VARS
	self -> self: List[char]*
	other -> other: Buffer[char]
	TYPES
	T -> char

scope 1414 List.push_spec_u8_3 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: u8
	self -> self: List[u8]*
	TYPES
	T -> u8

scope 1415 List.appendBuffer_spec_u8_2 fn (parent: List)
	VARS
	self -> self: List[u8]*
	other -> other: Buffer[u8]
	TYPES
	T -> u8

scope 1416 List.toBuffer_spec_u8_3 fn (parent: List)
	VARS
	self -> self: List[u8]
	TYPES
	T -> u8

scope 1417 List.toBuffer_spec_i64_4 fn (parent: List)
	VARS
	self -> self: List[i64]
	TYPES
	T -> i64

scope 1418 Equals_impl_List[T].Equals_List[T]_equals.block block (parent: Equals_impl_List[T].Equals_List[T]_equals)

scope 1419 Equals_impl_List[T].Equals_List[T]_equals.block block (parent: Equals_impl_List[T].Equals_List[T]_equals)
	VARS
	i -> mut i: u64

scope 1420 Equals_impl_List[T].Equals_List[T]_equals.block.block block (parent: Equals_impl_List[T].Equals_List[T]_equals.block)

scope 1421 Equals_impl_List[T].Equals_List[T]_equals.block.block.while while (parent: Equals_impl_List[T].Equals_List[T]_equals.block.block)

scope 1422 Equals_impl_List[T].Equals_List[T]_equals.block.block.while.block block (parent: Equals_impl_List[T].Equals_List[T]_equals.block.block.while)

scope 1423 Equals_impl_List[T].Equals_List[T]_equals.block.block.while.block.block block (parent: Equals_impl_List[T].Equals_List[T]_equals.block.block.while.block)

scope 1424 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 1425 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[Show_impl_List[T].'T]({len: u64, buffer: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})})
	Item -> Show_impl_List[T].'T
	T -> Show_impl_List[T].'T
	I -> BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})

scope 1426 ability_impl.Iterable_List[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[T]

scope 1427 Show_impl_List[T].Show_List[T]_show.for for (parent: Show_impl_List[T].Show_List[T]_show)
	VARS
	__iter_1032 -> __iter_1032: BufferIterator[T]*
	itIndex -> mut itIndex: u64

scope 1428 Show_impl_List[T].Show_List[T]_show.for.block block (parent: Show_impl_List[T].Show_List[T]_show.for)
	VARS
	__next_1039 -> __next_1039: Opt[T]

scope 1429 Show_impl_List[T].Show_List[T]_show.for.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block)
	VARS
	last -> last: bool
	__block_expr_val_1045 -> __block_expr_val_1045: unit
	s -> s: T

scope 1430 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 1431 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T
	Self -> BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})
	Item -> Show_impl_List[T].'T

scope 1432 ability_impl.Iterator_BufferIterator[T]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[T]*

scope 1433 ability_impl.Iterator_BufferIterator[T]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[T]

scope 1434 ability_impl.Iterator_BufferIterator[T]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1435 ability_impl.Iterator_BufferIterator[T]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[T]*

scope 1436 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 1437 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T
	Inner -> Show_impl_List[T].'T
	Self -> Opt[Show_impl_List[T].'T](enum None | Some(Show_impl_List[T].'T))

scope 1438 ability_impl.Unwrap_Opt[T]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]
	__match_subject_2244 -> __match_subject_2244: Opt[T]

scope 1439 ability_impl.Unwrap_Opt[T]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[T]

scope 1440 ability_impl.Unwrap_Opt[T]_make fn (parent: ability_impl)
	VARS
	t -> t: T

scope 1441 Show_impl_List[T].Show_List[T]_show.for.block.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block.block)

scope 1442 Show_impl_List[T].Show_List[T]_show.for.block.block.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block.block.block)

scope 1443 Show_impl_List[T].Show_List[T]_show.for.block.block block (parent: Show_impl_List[T].Show_List[T]_show.for.block)

scope 1444 ability_impl ability_impl (parent: )
	TYPES
	T -> Iterable_impl_List[T].'T

scope 1445 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*})
	Item -> Iterable_impl_List[T].'T
	T -> Iterable_impl_List[T].'T
	I -> BufferIterator[Iterable_impl_List[T].'T]({buf: Buffer[Iterable_impl_List[T].'T]({len: u64, data: Iterable_impl_List[T].'T*}), pos: u64})

scope 1446 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 1447 Buffer.get_spec_char_3 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[char]
	tRef -> tRef: char*
	TYPES
	T -> char

scope 1448 Buffer.cloned_spec_char_1 fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[char]
	numBytes -> numBytes: u64
	TYPES
	T -> char

scope 1449 List.wrapBuffer_spec_char_1 fn (parent: List)
	VARS
	buffer -> buffer: Buffer[char]
	TYPES
	T -> char

scope 1450 Buffer.cloned_spec_u8_2 fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[u8]
	numBytes -> numBytes: u64
	TYPES
	T -> u8

scope 1451 string.first.block block (parent: string.first)

scope 1452 string.indexOf.block block (parent: string.indexOf)

scope 1453 string.indexOf.block.while while (parent: string.indexOf.block)

scope 1454 string.indexOf.block.while.block block (parent: string.indexOf.block.while)

scope 1455 string.indexOf.block.while.block.block block (parent: string.indexOf.block.while.block)

scope 1456 Buffer.concat_spec_char_1 fn (parent: Buffer)
	VARS
	new -> new: Buffer[char]
	self -> self: Buffer[char]
	other -> other: Buffer[char]
	TYPES
	T -> char

scope 1457 Buffer._enlargedClone_spec_char_1 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[char]
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 1458 Buffer.set_spec_char_2 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[char]
	tRef -> tRef: char*
	elem -> elem: char
	TYPES
	T -> char

scope 1459 List.empty_spec_List[char]_1 fn (parent: List)
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1460 List.empty_spec_char_2 fn (parent: List)
	TYPES
	T -> char

scope 1461 string.splitByChar.for for (parent: string.splitByChar)
	VARS
	__iter_1068 -> __iter_1068: BufferIterator[char]*
	itIndex -> mut itIndex: u64

scope 1462 string.splitByChar.for.block block (parent: string.splitByChar.for)
	VARS
	__next_1069 -> __next_1069: Opt[char]

scope 1463 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)
	VARS
	__block_expr_val_1077 -> __block_expr_val_1077: unit
	c -> c: char

scope 1464 ability_impl ability_impl (parent: )
	TYPES
	T -> char

scope 1465 ability_impl ability_impl (parent: )
	TYPES
	T -> char
	Inner -> char
	Self -> Opt[char](enum None | Some(char))

scope 1466 ability_impl.Unwrap_Opt[char]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2260 -> __match_subject_2260: Opt[char]
	self -> self: Opt[char]

scope 1467 ability_impl.Unwrap_Opt[char]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[char]

scope 1468 ability_impl.Unwrap_Opt[char]_make fn (parent: ability_impl)
	VARS
	t -> t: char

scope 1469 string.splitByChar.for.block.block.block block (parent: string.splitByChar.for.block.block)

scope 1470 string.splitByChar.for.block.block.block.block block (parent: string.splitByChar.for.block.block.block)

scope 1471 string.splitByChar.for.block.block.block.block.block block (parent: string.splitByChar.for.block.block.block.block)

scope 1472 List.nonEmpty_spec_char_1 fn (parent: List)
	VARS
	self -> self: List[char]
	TYPES
	T -> char

scope 1473 string.splitByChar.for.block.block.block.block.block.block block (parent: string.splitByChar.for.block.block.block.block.block)

scope 1474 List.push_spec_List[char]_4 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: List[char]
	self -> self: List[List[char]]*
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1475 string.splitByChar.for.block.block.block block (parent: string.splitByChar.for.block.block)

scope 1476 Opt.isSome_spec_char_2 fn (parent: Opt)
	VARS
	__match_subject_2269 -> __match_subject_2269: Opt[char]
	self -> self: Opt[char]
	TYPES
	T -> char

scope 1477 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)

scope 1478 string.splitByChar.block block (parent: string.splitByChar)

scope 1479 string.splitByChar.block.block block (parent: string.splitByChar.block)

scope 1480 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1481 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})})
	Item -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	I -> BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})

scope 1482 ability_impl.Iterable_List[List[char]]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[List[char]]

scope 1483 string.splitByChar.for for (parent: string.splitByChar)
	VARS
	__iter_1081 -> __iter_1081: BufferIterator[List[char]]*
	__yieldedColl_1093 -> __yieldedColl_1093: List[string]*
	itIndex -> mut itIndex: u64

scope 1484 string.splitByChar.for.block block (parent: string.splitByChar.for)
	VARS
	__next_1088 -> __next_1088: Opt[List[char]]

scope 1485 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)
	VARS
	list -> list: List[char]
	__block_expr_val_1094 -> __block_expr_val_1094: string

scope 1486 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1487 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	Self -> BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})
	Item -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1488 ability_impl.Iterator_BufferIterator[List[char]]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[List[char]]*

scope 1489 ability_impl.Iterator_BufferIterator[List[char]]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[List[char]]

scope 1490 ability_impl.Iterator_BufferIterator[List[char]]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[List[char]]*

scope 1491 ability_impl.Iterator_BufferIterator[List[char]]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[List[char]]*

scope 1492 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1493 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	Inner -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	Self -> Opt[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})))

scope 1494 ability_impl.Unwrap_Opt[List[char]]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[List[char]]
	__match_subject_2278 -> __match_subject_2278: Opt[List[char]]

scope 1495 ability_impl.Unwrap_Opt[List[char]]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[List[char]]

scope 1496 ability_impl.Unwrap_Opt[List[char]]_make fn (parent: ability_impl)
	VARS
	t -> t: List[char]

scope 1497 Opt.isSome_spec_List[char]_3 fn (parent: Opt)
	VARS
	self -> self: Opt[List[char]]
	__match_subject_2281 -> __match_subject_2281: Opt[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 1498 string.splitByChar.for.block.block block (parent: string.splitByChar.for.block)

scope 1499 string.indexOfString.block block (parent: string.indexOfString)

scope 1500 string.indexOfString.block.while while (parent: string.indexOfString.block)
	VARS
	sub -> sub: string

scope 1501 string.indexOfString.block.while.block block (parent: string.indexOfString.block.while)

scope 1502 string.indexOfString.block.while.block.block block (parent: string.indexOfString.block.while.block)

scope 1503 string.indexOfString.block.while.block block (parent: string.indexOfString.block.while)

scope 1504 string.indexOfString.block.while.block.block block (parent: string.indexOfString.block.while.block)

scope 1505 Buffer.slice_spec_char_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: char*
	end -> end: u64
	TYPES
	T -> char

scope 1506 string.fromCString.loop loop (parent: string.fromCString)
	VARS
	c -> c: char*

scope 1507 Pointer.refAtIndex_spec_char_1 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> char

scope 1508 string.fromCString.loop.block block (parent: string.fromCString.loop)

scope 1509 string.fromCString.loop.block.block block (parent: string.fromCString.loop.block)

scope 1510 string.fromCString.loop.block block (parent: string.fromCString.loop)

scope 1511 string.toInt.block block (parent: string.toInt)

scope 1512 string.toInt.block.block block (parent: string.toInt.block)

scope 1513 string.toInt.block block (parent: string.toInt)

scope 1514 string.toInt.block block (parent: string.toInt)

scope 1515 string.toInt.block.while while (parent: string.toInt.block)
	VARS
	digit -> digit: Opt[u8]
	c -> c: char

scope 1516 string.toInt.block.while.block block (parent: string.toInt.block.while)
	VARS
	__payload_Some_1112 -> __payload_Some_1112: u8
	digit -> digit: u8
	__if_target_1111 -> __if_target_1111: Opt[u8]

scope 1517 string.toInt.block.while.block.block block (parent: string.toInt.block.while.block)

scope 1518 string.toInt.block.while.block block (parent: string.toInt.block.while)

scope 1519 string.toInt.block block (parent: string.toInt)

scope 1520 string.toInt.block.block block (parent: string.toInt.block)

scope 1521 string.toInt.block block (parent: string.toInt)

scope 1522 some_spec_i64_2 fn (parent: )
	VARS
	value -> value: i64
	TYPES
	T -> i64

scope 1523 string.toInt.block block (parent: string.toInt)

scope 1524 string.toInt.block.block block (parent: string.toInt.block)

scope 1525 string.toInt.block block (parent: string.toInt)

scope 1526 BufferIterator.fromBuffer_spec_char_1 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[char]
	TYPES
	T -> char

scope 1527 List.withCapacity_spec_enum Char(char) | String(string)_3 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1528 new_spec_List[enum Char(char) | String(string)]_1 fn (parent: )
	VARS
	value -> value: List[enum Char(char) | String(string)]
	t -> t: List[enum Char(char) | String(string)]*
	ptr -> ptr: Pointer
	TYPES
	T -> List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})

scope 1529 List.push_spec_enum Char(char) | String(string)_5 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: enum Char(char) | String(string)
	self -> self: List[enum Char(char) | String(string)]*
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1530 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1531 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})
	Item -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	I -> BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})

scope 1532 ability_impl.Iterable_List[enum Char(char) | String(string)]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[enum Char(char) | String(string)]

scope 1533 StringBuilder.len.for for (parent: StringBuilder.len)
	VARS
	__iter_1124 -> __iter_1124: BufferIterator[enum Char(char) | String(string)]*
	itIndex -> mut itIndex: u64

scope 1534 StringBuilder.len.for.block block (parent: StringBuilder.len.for)
	VARS
	__next_1131 -> __next_1131: Opt[enum Char(char) | String(string)]

scope 1535 StringBuilder.len.for.block.block block (parent: StringBuilder.len.for.block)
	VARS
	__match_subject_1136 -> __match_subject_1136: enum Char(char) | String(string)
	__block_expr_val_1141 -> __block_expr_val_1141: unit
	partLen -> partLen: u64
	part -> part: enum Char(char) | String(string)

scope 1536 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1537 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})
	Item -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1538 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[enum Char(char) | String(string)]*

scope 1539 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[enum Char(char) | String(string)]

scope 1540 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[enum Char(char) | String(string)]*

scope 1541 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[enum Char(char) | String(string)]*

scope 1542 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1543 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Inner -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> Opt[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))))

scope 1544 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[enum Char(char) | String(string)]
	__match_subject_2304 -> __match_subject_2304: Opt[enum Char(char) | String(string)]

scope 1545 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[enum Char(char) | String(string)]

scope 1546 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_make fn (parent: ability_impl)
	VARS
	t -> t: enum Char(char) | String(string)

scope 1547 StringBuilder.len.for.block.block.block block (parent: StringBuilder.len.for.block.block)

scope 1548 StringBuilder.len.for.block.block.block.match_arm match_arm (parent: StringBuilder.len.for.block.block.block)
	VARS
	__payload_Char_1137 -> __payload_Char_1137: char

scope 1549 StringBuilder.len.for.block.block.block.match_arm match_arm (parent: StringBuilder.len.for.block.block.block)
	VARS
	__payload_String_1138 -> __payload_String_1138: string
	s -> s: string

scope 1550 Opt.isSome_spec_enum Char(char) | String(string)_4 fn (parent: Opt)
	VARS
	__match_subject_2307 -> __match_subject_2307: Opt[enum Char(char) | String(string)]
	self -> self: Opt[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1551 StringBuilder.len.for.block.block block (parent: StringBuilder.len.for.block)

scope 1552 StringBuilder.build.for for (parent: StringBuilder.build)
	VARS
	__iter_1145 -> __iter_1145: BufferIterator[enum Char(char) | String(string)]*
	itIndex -> mut itIndex: u64

scope 1553 StringBuilder.build.for.block block (parent: StringBuilder.build.for)
	VARS
	__next_1146 -> __next_1146: Opt[enum Char(char) | String(string)]

scope 1554 StringBuilder.build.for.block.block block (parent: StringBuilder.build.for.block)
	VARS
	__match_subject_1148 -> __match_subject_1148: enum Char(char) | String(string)
	part -> part: enum Char(char) | String(string)
	__block_expr_val_1158 -> __block_expr_val_1158: unit

scope 1555 StringBuilder.build.for.block.block.block block (parent: StringBuilder.build.for.block.block)

scope 1556 StringBuilder.build.for.block.block.block.match_arm match_arm (parent: StringBuilder.build.for.block.block.block)
	VARS
	__payload_Char_1149 -> __payload_Char_1149: char
	c -> c: char

scope 1557 StringBuilder.build.for.block.block.block.match_arm match_arm (parent: StringBuilder.build.for.block.block.block)
	VARS
	s -> s: string
	__payload_String_1151 -> __payload_String_1151: string

scope 1558 StringBuilder.build.for.block.block.block.match_arm.block block (parent: StringBuilder.build.for.block.block.block.match_arm)

scope 1559 StringBuilder.build.for.block.block.block.match_arm.block.for for (parent: StringBuilder.build.for.block.block.block.match_arm.block)
	VARS
	__iter_1154 -> __iter_1154: BufferIterator[char]*
	itIndex -> mut itIndex: u64

scope 1560 StringBuilder.build.for.block.block.block.match_arm.block.for.block block (parent: StringBuilder.build.for.block.block.block.match_arm.block.for)
	VARS
	__next_1155 -> __next_1155: Opt[char]

scope 1561 StringBuilder.build.for.block.block.block.match_arm.block.for.block.block block (parent: StringBuilder.build.for.block.block.block.match_arm.block.for.block)
	VARS
	__block_expr_val_1157 -> __block_expr_val_1157: unit
	c -> c: char

scope 1562 StringBuilder.build.for.block.block.block.match_arm.block.for.block.block block (parent: StringBuilder.build.for.block.block.block.match_arm.block.for.block)

scope 1563 StringBuilder.build.for.block.block block (parent: StringBuilder.build.for.block)

scope 1564 Arena.new.block block (parent: Arena.new)

scope 1565 Arena.pushRaw.block block (parent: Arena.pushRaw)

scope 1566 Arena.pushRaw.block.block block (parent: Arena.pushRaw.block)
	VARS
	id -> id: string

scope 1567 Arena.pushRaw.block.block.block block (parent: Arena.pushRaw.block.block)
	VARS
	__sb_1167 -> __sb_1167: StringBuilder

scope 1568 sizeOf_spec_T_3 fn (parent: )
	TYPES
	T -> Arena.push.'T

scope 1569 alignOf_spec_T_1 fn (parent: )
	TYPES
	T -> Arena.push.'T

scope 1570 Arena.freeAll.block block (parent: Arena.freeAll)
	VARS
	__sb_1172 -> __sb_1172: StringBuilder

scope 1571 Allocator.initDefault.block block (parent: Allocator.initDefault)
	VARS
	__list_literal_1175 -> __list_literal_1175: List[Arena]*

scope 1572 List.withCapacity_spec_Arena_4 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1573 List.push_spec_Arena_6 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: Arena
	self -> self: List[Arena]*
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1574 Allocator.initDefault.block block (parent: Allocator.initDefault)
	VARS
	__list_literal_1179 -> __list_literal_1179: List[ObjectPool]*

scope 1575 List.withCapacity_spec_ObjectPool_5 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[ObjectPool]
	TYPES
	T -> ObjectPool({})

scope 1576 List.getRef_spec_Arena_1 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 1577 IntRangeIterator.stepBy.block block (parent: IntRangeIterator.stepBy)

scope 1578 IntRangeIterator.stepBy.block block (parent: IntRangeIterator.stepBy)

scope 1579 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block block (parent: Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next)

scope 1580 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block.block block (parent: Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block)

scope 1581 Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next.block block (parent: Iterator_impl_IntRangeIterator.Iterator_IntRangeIterator_next)
	VARS
	current -> current: i64

scope 1582 ability_01.test.block block (parent: ability_01.test)
	VARS
	__list_literal_1188 -> __list_literal_1188: List[u8]*

scope 1583 List.withCapacity_spec_u8_6 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[u8]
	TYPES
	T -> u8

scope 1584 ability_01.test.block block (parent: ability_01.test)
	VARS
	__list_literal_1189 -> __list_literal_1189: List[u8]*

scope 1585 ability_01.test.block block (parent: ability_01.test)
	VARS
	__list_literal_1190 -> __list_literal_1190: List[u8]*

scope 1586 ability_constraint.add_spec_i64_1 fn (parent: ability_constraint)
	VARS
	a -> a: i64
	b -> b: i64
	TYPES
	T -> i64

scope 1587 ability_constraint_fail.test.block block (parent: ability_constraint_fail.test)

scope 1588 ability_constraint_fail.test.block.match_arm match_arm (parent: ability_constraint_fail.test.block)
	VARS
	__payload_Some_1197 -> __payload_Some_1197: string

scope 1589 ability_constraint_fail.test.block.match_arm match_arm (parent: ability_constraint_fail.test.block)

scope 1590 ability_fail.test.block block (parent: ability_fail.test)

scope 1591 ability_fail.test.block.match_arm match_arm (parent: ability_fail.test.block)
	VARS
	__payload_Some_1201 -> __payload_Some_1201: string

scope 1592 ability_fail.test.block.match_arm match_arm (parent: ability_fail.test.block)

scope 1593 ability_generic.Add_Rhs_GenericPoint[i32] ability_defn (parent: ability_generic)
	TYPES
	Output -> ability_generic.Add.'Output
	Self -> ability_generic.Add_Rhs_GenericPoint[i32].'Self
	Rhs -> GenericPoint[i32]({x: i32, y: i32})

scope 1594 ability_generic.Add_Rhs_GenericPoint[i32].ability_impl ability_impl (parent: ability_generic.Add_Rhs_GenericPoint[i32])

scope 1595 ability_generic.Add_Rhs_GenericPoint[i32].add fn (parent: ability_generic.Add_Rhs_GenericPoint[i32])
	VARS
	rhs -> rhs: GenericPoint[i32]
	self -> self: Self

scope 1596 ability_generic.ability_impl ability_impl (parent: ability_generic)
	TYPES
	T -> i32

scope 1597 ability_generic.ability_impl ability_impl (parent: ability_generic)
	TYPES
	Output -> GenericPoint[i32]({x: i32, y: i32})
	Self -> GenericPoint[i32]({x: i32, y: i32})
	Rhs -> GenericPoint[i32]({x: i32, y: i32})
	T -> i32

scope 1598 ability_generic.ability_impl.Add_Rhs_GenericPoint[i32]_GenericPoint[i32]_add fn (parent: ability_generic.ability_impl)
	VARS
	newX -> newX: i32
	self -> self: GenericPoint[i32]
	other -> other: GenericPoint[i32]
	newY -> newY: i32

scope 1599 ability_generic.From_F_i32 ability_defn (parent: ability_generic)
	TYPES
	Self -> ability_generic.From_F_i32.'Self
	F -> i32

scope 1600 ability_generic.From_F_i32.ability_impl ability_impl (parent: ability_generic.From_F_i32)

scope 1601 ability_generic.From_F_i32.from fn (parent: ability_generic.From_F_i32)
	VARS
	t -> t: i32

scope 1602 ability_generic.ability_impl ability_impl (parent: ability_generic)
	TYPES
	U -> string({buffer: Buffer[char]({len: u64, data: char*})})
	T -> i32

scope 1603 ability_generic.ability_impl ability_impl (parent: ability_generic)
	TYPES
	Self -> string({buffer: Buffer[char]({len: u64, data: char*})})
	F -> i32
	U -> string({buffer: Buffer[char]({len: u64, data: char*})})
	T -> i32

scope 1604 ability_generic.ability_impl.From_F_i32_string_from fn (parent: ability_generic.ability_impl)
	VARS
	t -> t: i32

scope 1605 ability_self_call.test.block block (parent: ability_self_call.test)
	VARS
	__sb_1218 -> __sb_1218: StringBuilder

scope 1606 ability_self_call.test.block block (parent: ability_self_call.test)
	VARS
	__sb_1219 -> __sb_1219: StringBuilder

scope 1607 ability_self_call.test.block block (parent: ability_self_call.test)
	VARS
	__sb_1220 -> __sb_1220: StringBuilder

scope 1608 ability_self_call.test.block block (parent: ability_self_call.test)
	VARS
	__sb_1221 -> __sb_1221: StringBuilder

scope 1609 ability_self_call.test.block block (parent: ability_self_call.test)
	VARS
	__sb_1222 -> __sb_1222: StringBuilder

scope 1610 ability_self_call.test.block block (parent: ability_self_call.test)
	VARS
	__sb_1223 -> __sb_1223: StringBuilder

scope 1611 all_out_of_order.takesHelloer_spec_Foo_1 fn (parent: all_out_of_order)
	VARS
	t -> t: Foo
	TYPES
	T -> Foo({name: string({buffer: Buffer[char]({len: u64, data: char*})})})

scope 1612 Arena.push_spec_bool_1 fn (parent: Arena)
	VARS
	t -> t: bool
	self -> self: Arena*
	dataStart -> dataStart: Pointer
	ref -> ref: bool*
	TYPES
	T -> bool

scope 1613 Arena.push_spec_{x: i64, y: i64}_2 fn (parent: Arena)
	VARS
	t -> t: {x: i64, y: i64}
	self -> self: Arena*
	dataStart -> dataStart: Pointer
	ref -> ref: {x: i64, y: i64}*
	TYPES
	T -> {x: i64, y: i64}

scope 1614 printIt_spec_i64_1 fn (parent: )
	VARS
	value -> value: i64
	s -> s: string
	TYPES
	T -> i64

scope 1615 Arena.push_spec_string_3 fn (parent: Arena)
	VARS
	t -> t: string
	self -> self: Arena*
	dataStart -> dataStart: Pointer
	ref -> ref: string*
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1616 printIt_spec_bool_2 fn (parent: )
	VARS
	value -> value: bool
	s -> s: string
	TYPES
	T -> bool

scope 1617 ability_impl ability_impl (parent: )
	TYPES
	T -> Yes(i64)*

scope 1618 ability_impl ability_impl (parent: )
	TYPES
	T -> Yes(i64)*
	Inner -> Yes(i64)*
	Self -> Opt[Yes(i64)*](enum None | Some(Yes(i64)*))

scope 1619 ability_impl.Unwrap_Opt[Yes(i64)*]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2332 -> __match_subject_2332: Opt[Yes(i64)*]
	self -> self: Opt[Yes(i64)*]

scope 1620 ability_impl.Unwrap_Opt[Yes(i64)*]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Yes(i64)*]

scope 1621 ability_impl.Unwrap_Opt[Yes(i64)*]_make fn (parent: ability_impl)
	VARS
	t -> t: Yes(i64)*

scope 1622 assign.complexReferences.block block (parent: assign.complexReferences)
	VARS
	x -> x: {x: i64}*
	__if_target_1256 -> __if_target_1256: Opt[{x: i64}*]
	__payload_Some_1257 -> __payload_Some_1257: {x: i64}*

scope 1623 assign.complexReferences.block.block block (parent: assign.complexReferences.block)

scope 1624 assign.complexReferences.block block (parent: assign.complexReferences)

scope 1625 lexical_scope.test.block block (parent: lexical_scope.test)

scope 1626 lexical_scope.test.block.block block (parent: lexical_scope.test.block)
	VARS
	foo -> foo: i64

scope 1627 lexical_scope.test.block block (parent: lexical_scope.test)

scope 1628 lexical_scope.test.block.match_arm match_arm (parent: lexical_scope.test.block)
	VARS
	__payload_Some_1262 -> __payload_Some_1262: string

scope 1629 lexical_scope.test.block.match_arm match_arm (parent: lexical_scope.test.block)

scope 1630 Buffer.empty_spec_i64_1 fn (parent: Buffer)
	TYPES
	T -> i64

scope 1631 Buffer.isEmpty_spec_i64_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 1632 Buffer.nonEmpty_spec_i64_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 1633 Buffer.first_spec_i64_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	__match_subject_2337 -> __match_subject_2337: Opt[i64*]
	TYPES
	T -> i64

scope 1634 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 1635 ability_impl ability_impl (parent: )
	TYPES
	T -> i64
	Self -> Opt[i64](enum None | Some(i64))

scope 1636 ability_impl.Equals_Opt[i64]_equals fn (parent: ability_impl)
	VARS
	self -> self: Opt[i64]
	other -> other: Opt[i64]

scope 1637 Buffer.last_spec_i64_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	__match_subject_2343 -> __match_subject_2343: Opt[i64*]
	TYPES
	T -> i64

scope 1638 Buffer.filled_spec_i64_1 fn (parent: Buffer)
	VARS
	buf -> buf: Buffer[i64]
	size -> size: u64
	value -> value: i64
	i -> mut i: u64
	TYPES
	T -> i64

scope 1639 buffer_test.bufferFilled.block block (parent: buffer_test.bufferFilled)

scope 1640 buffer_test.bufferFilled.block.while while (parent: buffer_test.bufferFilled.block)

scope 1641 Buffer.get_spec_i64_4 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[i64]
	tRef -> tRef: i64*
	TYPES
	T -> i64

scope 1642 Buffer.set_spec_i64_3 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[i64]
	tRef -> tRef: i64*
	elem -> elem: i64
	TYPES
	T -> i64

scope 1643 buffer_test.bufferSlice.block block (parent: buffer_test.bufferSlice)

scope 1644 buffer_test.bufferSlice.block.while while (parent: buffer_test.bufferSlice.block)

scope 1645 Buffer.slice_spec_i64_2 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: i64*
	end -> end: u64
	TYPES
	T -> i64

scope 1646 buffer_test.bufferTakeDrop.block block (parent: buffer_test.bufferTakeDrop)

scope 1647 buffer_test.bufferTakeDrop.block.while while (parent: buffer_test.bufferTakeDrop.block)

scope 1648 Buffer.take_spec_i64_1 fn (parent: Buffer)
	VARS
	count -> count: u64
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 1649 Buffer.drop_spec_i64_1 fn (parent: Buffer)
	VARS
	count -> count: u64
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 1650 Buffer.concat_spec_i64_2 fn (parent: Buffer)
	VARS
	new -> new: Buffer[i64]
	self -> self: Buffer[i64]
	other -> other: Buffer[i64]
	TYPES
	T -> i64

scope 1651 Buffer.swap_spec_i64_1 fn (parent: Buffer)
	VARS
	aRef -> aRef: i64*
	self -> self: Buffer[i64]*
	bValue -> bValue: i64
	indexB -> indexB: u64
	bRef -> bRef: i64*
	indexA -> indexA: u64
	TYPES
	T -> i64

scope 1652 Buffer.cloned_spec_i64_3 fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[i64]
	numBytes -> numBytes: u64
	TYPES
	T -> i64

scope 1653 condcomp.test.block block (parent: condcomp.test)

scope 1654 condcomp.test.block.block block (parent: condcomp.test.block)
	VARS
	__sb_1318 -> __sb_1318: StringBuilder

scope 1655 context_generic.box_spec_i64_1 fn (parent: context_generic)
	VARS
	value -> value: i64
	foo -> foo: i64
	TYPES
	T -> i64

scope 1656 context_generic.box_spec_bool_2 fn (parent: context_generic)
	VARS
	value -> value: bool
	foo -> foo: bool
	TYPES
	T -> bool

scope 1657 context_generic.box_spec_{b: bool}_3 fn (parent: context_generic)
	VARS
	value -> value: {b: bool}
	foo -> foo: {b: bool}
	TYPES
	T -> {b: bool}

scope 1658 context_generic.contextA_spec_i64_1 fn (parent: context_generic)
	VARS
	t -> t: i64
	name -> name: string
	value -> value: i64
	TYPES
	T -> i64

scope 1659 context_params.test.block block (parent: context_params.test)
	VARS
	__list_literal_1333 -> __list_literal_1333: List[string]*

scope 1660 new_spec_List[string]_2 fn (parent: )
	VARS
	value -> value: List[string]
	t -> t: List[string]*
	ptr -> ptr: Pointer
	TYPES
	T -> List[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: string({buffer: Buffer[char]({len: u64, data: char*})})*})})

scope 1661 context_params.test.block block (parent: context_params.test)
	VARS
	__list_literal_1335 -> __list_literal_1335: List[string]*

scope 1662 context_params.test.block block (parent: context_params.test)
	VARS
	__list_literal_1339 -> __list_literal_1339: List[string]*

scope 1663 ability_impl ability_impl (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1664 ability_impl ability_impl (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Self -> List[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: string({buffer: Buffer[char]({len: u64, data: char*})})*})})

scope 1665 ability_impl.Equals_List[string]_equals fn (parent: ability_impl)
	VARS
	self -> self: List[string]
	other -> other: List[string]

scope 1666 control_flow.ifBasic.block block (parent: control_flow.ifBasic)

scope 1667 control_flow.ifNoElse.block block (parent: control_flow.ifNoElse)

scope 1668 control_flow.ifNoElse.block.block block (parent: control_flow.ifNoElse.block)

scope 1669 control_flow.ifNoElse.block block (parent: control_flow.ifNoElse)

scope 1670 control_flow.ifNoElse.block.block block (parent: control_flow.ifNoElse.block)

scope 1671 control_flow.returnFromIf.block block (parent: control_flow.returnFromIf)

scope 1672 control_flow.returnFromIf.block.block block (parent: control_flow.returnFromIf.block)

scope 1673 control_flow.loopBreak.loop loop (parent: control_flow.loopBreak)
	VARS
	inner -> inner: i64

scope 1674 control_flow.loopBreak.loop.block block (parent: control_flow.loopBreak.loop)

scope 1675 control_flow.loopBreak.loop.block.block block (parent: control_flow.loopBreak.loop.block)

scope 1676 control_flow.loopNested.loop loop (parent: control_flow.loopNested)

scope 1677 control_flow.loopNested.loop.loop loop (parent: control_flow.loopNested.loop)

scope 1678 control_flow.loopFalse.loop loop (parent: control_flow.loopFalse)

scope 1679 control_flow.test.block block (parent: control_flow.test)

scope 1680 control_flow.test.block.block block (parent: control_flow.test.block)

scope 1681 enum_basic.enumNoPayload.block block (parent: enum_basic.enumNoPayload)
	VARS
	__if_target_1353 -> __if_target_1353: enum Yes | No

scope 1682 enum_basic.enumNoPayload.block.block block (parent: enum_basic.enumNoPayload.block)

scope 1683 enum_basic.enumNoPayload.block block (parent: enum_basic.enumNoPayload)

scope 1684 enum_basic.enumNoPayload.block.block block (parent: enum_basic.enumNoPayload.block)
	VARS
	__sb_1354 -> __sb_1354: StringBuilder

scope 1685 enum_basic.enumNoPayload.block block (parent: enum_basic.enumNoPayload)
	VARS
	__if_target_1355 -> __if_target_1355: enum Yes | No

scope 1686 enum_basic.enumNoPayload.block.block block (parent: enum_basic.enumNoPayload.block)

scope 1687 enum_basic.enumNoPayload.block block (parent: enum_basic.enumNoPayload)

scope 1688 enum_basic.enumNoPayload.block.block block (parent: enum_basic.enumNoPayload.block)
	VARS
	__sb_1356 -> __sb_1356: StringBuilder

scope 1689 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)
	VARS
	__if_target_1360 -> __if_target_1360: Maybe

scope 1690 enum_basic.enumPayload.block.block block (parent: enum_basic.enumPayload.block)

scope 1691 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)
	VARS
	__sb_1361 -> __sb_1361: StringBuilder

scope 1692 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)

scope 1693 enum_basic.enumPayload.block.match_arm match_arm (parent: enum_basic.enumPayload.block)

scope 1694 enum_basic.enumPayload.block.match_arm match_arm (parent: enum_basic.enumPayload.block)

scope 1695 ability_impl ability_impl (parent: )
	TYPES
	T -> Maybe.A

scope 1696 ability_impl ability_impl (parent: )
	TYPES
	T -> Maybe.A
	Inner -> Maybe.A
	Self -> Opt[Maybe.A](enum None | Some(Maybe.A))

scope 1697 ability_impl.Unwrap_Opt[Maybe.A]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Maybe.A]
	__match_subject_2375 -> __match_subject_2375: Opt[Maybe.A]

scope 1698 ability_impl.Unwrap_Opt[Maybe.A]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Maybe.A]

scope 1699 ability_impl.Unwrap_Opt[Maybe.A]_make fn (parent: ability_impl)
	VARS
	t -> t: Maybe.A

scope 1700 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)
	VARS
	x -> x: char
	__if_target_1366 -> __if_target_1366: Maybe
	__payload_B_1367 -> __payload_B_1367: char

scope 1701 enum_basic.enumPayload.block.block block (parent: enum_basic.enumPayload.block)

scope 1702 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)
	VARS
	__sb_1369 -> __sb_1369: StringBuilder

scope 1703 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)

scope 1704 enum_basic.enumPayload.block.match_arm match_arm (parent: enum_basic.enumPayload.block)
	VARS
	__payload_B_1371 -> __payload_B_1371: char

scope 1705 enum_basic.enumPayload.block.match_arm match_arm (parent: enum_basic.enumPayload.block)

scope 1706 ability_impl ability_impl (parent: )
	TYPES
	T -> Maybe.B(char)

scope 1707 ability_impl ability_impl (parent: )
	TYPES
	T -> Maybe.B(char)
	Inner -> Maybe.B(char)
	Self -> Opt[Maybe.B(char)](enum None | Some(Maybe.B(char)))

scope 1708 ability_impl.Unwrap_Opt[Maybe.B(char)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Maybe.B(char)]
	__match_subject_2378 -> __match_subject_2378: Opt[Maybe.B(char)]

scope 1709 ability_impl.Unwrap_Opt[Maybe.B(char)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Maybe.B(char)]

scope 1710 ability_impl.Unwrap_Opt[Maybe.B(char)]_make fn (parent: ability_impl)
	VARS
	t -> t: Maybe.B(char)

scope 1711 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)
	VARS
	__payload_C_1376 -> __payload_C_1376: string
	__if_target_1375 -> __if_target_1375: Maybe

scope 1712 enum_basic.enumPayload.block.block block (parent: enum_basic.enumPayload.block)

scope 1713 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)
	VARS
	__sb_1377 -> __sb_1377: StringBuilder

scope 1714 enum_basic.enumPayload.block block (parent: enum_basic.enumPayload)

scope 1715 enum_basic.enumPayload.block.match_arm match_arm (parent: enum_basic.enumPayload.block)
	VARS
	__payload_C_1379 -> __payload_C_1379: string

scope 1716 enum_basic.enumPayload.block.match_arm match_arm (parent: enum_basic.enumPayload.block)

scope 1717 ability_impl ability_impl (parent: )
	TYPES
	T -> Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 1718 ability_impl ability_impl (parent: )
	TYPES
	T -> Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Inner -> Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> Opt[Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))))

scope 1719 ability_impl.Unwrap_Opt[Maybe.C(string)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2381 -> __match_subject_2381: Opt[Maybe.C(string)]
	self -> self: Opt[Maybe.C(string)]

scope 1720 ability_impl.Unwrap_Opt[Maybe.C(string)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Maybe.C(string)]

scope 1721 ability_impl.Unwrap_Opt[Maybe.C(string)]_make fn (parent: ability_impl)
	VARS
	t -> t: Maybe.C(string)

scope 1722 ability_impl ability_impl (parent: )
	TYPES
	T -> MyResult[enum_basic.MyResult.unwrap.'T, enum_basic.MyResult.unwrap.'E].Ok(enum_basic.MyResult.unwrap.'T)

scope 1723 ability_impl ability_impl (parent: )
	TYPES
	T -> MyResult[enum_basic.MyResult.unwrap.'T, enum_basic.MyResult.unwrap.'E].Ok(enum_basic.MyResult.unwrap.'T)
	Inner -> MyResult[enum_basic.MyResult.unwrap.'T, enum_basic.MyResult.unwrap.'E].Ok(enum_basic.MyResult.unwrap.'T)
	Self -> Opt[MyResult[enum_basic.MyResult.unwrap.'T, enum_basic.MyResult.unwrap.'E].Ok(enum_basic.MyResult.unwrap.'T)](enum None | Some(MyResult[enum_basic.MyResult.unwrap.'T, enum_basic.MyResult.unwrap.'E].Ok(enum_basic.MyResult.unwrap.'T)))

scope 1724 ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2384 -> __match_subject_2384: Opt[MyResult[T, E].Ok(T)]
	self -> self: Opt[MyResult[T, E].Ok(T)]

scope 1725 ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[MyResult[T, E].Ok(T)]

scope 1726 ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_make fn (parent: ability_impl)
	VARS
	t -> t: MyResult[T, E].Ok(T)

scope 1727 enum_basic.MyResult.show.block block (parent: enum_basic.MyResult.show)

scope 1728 enum_basic.MyResult.show.block.match_arm match_arm (parent: enum_basic.MyResult.show.block)
	VARS
	v -> v: T
	__payload_Ok_1387 -> __payload_Ok_1387: T

scope 1729 enum_basic.MyResult.show.block.match_arm.block block (parent: enum_basic.MyResult.show.block.match_arm)

scope 1730 enum_basic.MyResult.show.block.match_arm.block.block block (parent: enum_basic.MyResult.show.block.match_arm.block)
	VARS
	__sb_1389 -> __sb_1389: StringBuilder

scope 1731 enum_basic.MyResult.show.block.match_arm match_arm (parent: enum_basic.MyResult.show.block)
	VARS
	__payload_Err_1390 -> __payload_Err_1390: E
	e -> e: E

scope 1732 enum_basic.MyResult.show.block.match_arm.block block (parent: enum_basic.MyResult.show.block.match_arm)

scope 1733 enum_basic.MyResult.show.block.match_arm.block.block block (parent: enum_basic.MyResult.show.block.match_arm.block)
	VARS
	__sb_1392 -> __sb_1392: StringBuilder

scope 1734 ability_impl ability_impl (parent: )
	TYPES
	T -> MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)

scope 1735 ability_impl ability_impl (parent: )
	TYPES
	T -> MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)
	Inner -> MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)
	Self -> Opt[MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)](enum None | Some(MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)))

scope 1736 ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[MyResult[i64, string].Ok(i64)]
	__match_subject_2386 -> __match_subject_2386: Opt[MyResult[i64, string].Ok(i64)]

scope 1737 ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[MyResult[i64, string].Ok(i64)]

scope 1738 ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_make fn (parent: ability_impl)
	VARS
	t -> t: MyResult[i64, string].Ok(i64)

scope 1739 enum_basic.MyResult.unwrap_spec_i64string_1 fn (parent: enum_basic.MyResult)
	VARS
	self -> self: MyResult[i64, string]
	TYPES
	T -> i64
	E -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1740 enum_basic.MyResult.show_spec_i64string_1 fn (parent: enum_basic.MyResult)
	VARS
	__match_subject_2389 -> __match_subject_2389: MyResult[i64, string]
	self -> self: MyResult[i64, string]
	TYPES
	T -> i64
	E -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 1741 sizeOf_spec_MyResult[i64, string]_4 fn (parent: )
	TYPES
	T -> MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(i64) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))

scope 1742 sizeOfStride_spec_MyResult[i64, string]_2 fn (parent: )
	TYPES
	T -> MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(i64) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))

scope 1743 alignOf_spec_MyResult[i64, string]_2 fn (parent: )
	TYPES
	T -> MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(i64) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))

scope 1744 enum_construction.test.block block (parent: enum_construction.test)

scope 1745 enum_construction.test.block.match_arm match_arm (parent: enum_construction.test.block)
	VARS
	__payload_Some_1418 -> __payload_Some_1418: bool

scope 1746 enum_construction.test.block.match_arm match_arm (parent: enum_construction.test.block)

scope 1747 enum_construction.test.block block (parent: enum_construction.test)

scope 1748 enum_construction.test.block.match_arm match_arm (parent: enum_construction.test.block)
	VARS
	__payload_Some_1421 -> __payload_Some_1421: i64

scope 1749 enum_construction.test.block.match_arm match_arm (parent: enum_construction.test.block)

scope 1750 enum_fail.inner.test.block block (parent: enum_fail.inner.test)

scope 1751 enum_fail.inner.test.block.match_arm match_arm (parent: enum_fail.inner.test.block)
	VARS
	__payload_Some_1432 -> __payload_Some_1432: string

scope 1752 enum_fail.inner.test.block.match_arm match_arm (parent: enum_fail.inner.test.block)

scope 1753 fib.fib.block block (parent: fib.fib)

scope 1754 fib.fib.block.match_arm match_arm (parent: fib.fib.block)

scope 1755 fib.fib.block.match_arm match_arm (parent: fib.fib.block)

scope 1756 fib.fib.block.match_arm match_arm (parent: fib.fib.block)

scope 1757 float_test.test.block block (parent: float_test.test)

scope 1758 float_test.test.block.match_arm match_arm (parent: float_test.test.block)

scope 1759 float_test.test.block.match_arm match_arm (parent: float_test.test.block)

scope 1760 float_test.test.block block (parent: float_test.test)

scope 1761 float_test.test.block.match_arm match_arm (parent: float_test.test.block)

scope 1762 float_test.test.block.match_arm match_arm (parent: float_test.test.block)

scope 1763 float_test.test.block block (parent: float_test.test)

scope 1764 float_test.test.block.match_arm match_arm (parent: float_test.test.block)

scope 1765 float_test.test.block.match_arm match_arm (parent: float_test.test.block)

scope 1766 float_test.test.block.match_arm match_arm (parent: float_test.test.block)
	VARS
	f -> f: f32

scope 1767 for_yield_test.forString.for for (parent: for_yield_test.forString)
	VARS
	__yieldedColl_1446 -> __yieldedColl_1446: List[i64]*
	__iter_1442 -> __iter_1442: BufferIterator[char]*
	itIndex -> mut itIndex: u64

scope 1768 for_yield_test.forString.for.block block (parent: for_yield_test.forString.for)
	VARS
	__next_1443 -> __next_1443: Opt[char]

scope 1769 for_yield_test.forString.for.block.block block (parent: for_yield_test.forString.for.block)
	VARS
	__block_expr_val_1447 -> __block_expr_val_1447: i64
	c -> c: char

scope 1770 List.withCapacity_spec_i64_7 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[i64]
	TYPES
	T -> i64

scope 1771 List.push_spec_i64_7 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: i64
	self -> self: List[i64]*
	TYPES
	T -> i64

scope 1772 for_yield_test.forString.for.block.block block (parent: for_yield_test.forString.for.block)

scope 1773 List.get_spec_i64_1 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[i64]
	TYPES
	T -> i64

scope 1774 for_yield_test.forYield.block block (parent: for_yield_test.forYield)
	VARS
	__list_literal_1453 -> __list_literal_1453: List[i64]*

scope 1775 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 1776 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[i64]({len: u64, buffer: Buffer[i64]({len: u64, data: i64*})})
	Item -> i64
	T -> i64
	I -> BufferIterator[i64]({buf: Buffer[i64]({len: u64, data: i64*}), pos: u64})

scope 1777 ability_impl.Iterable_List[i64]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[i64]

scope 1778 for_yield_test.forYield.for for (parent: for_yield_test.forYield)
	VARS
	__iter_1456 -> __iter_1456: BufferIterator[i64]*
	__yieldedColl_1468 -> __yieldedColl_1468: List[i64]*
	itIndex -> mut itIndex: u64

scope 1779 for_yield_test.forYield.for.block block (parent: for_yield_test.forYield.for)
	VARS
	__next_1463 -> __next_1463: Opt[i64]

scope 1780 for_yield_test.forYield.for.block.block block (parent: for_yield_test.forYield.for.block)
	VARS
	__block_expr_val_1469 -> __block_expr_val_1469: i64
	it -> it: i64

scope 1781 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 1782 ability_impl ability_impl (parent: )
	TYPES
	T -> i64
	Self -> BufferIterator[i64]({buf: Buffer[i64]({len: u64, data: i64*}), pos: u64})
	Item -> i64

scope 1783 ability_impl.Iterator_BufferIterator[i64]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[i64]*

scope 1784 ability_impl.Iterator_BufferIterator[i64]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[i64]

scope 1785 ability_impl.Iterator_BufferIterator[i64]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[i64]*

scope 1786 ability_impl.Iterator_BufferIterator[i64]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[i64]*

scope 1787 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 1788 ability_impl ability_impl (parent: )
	TYPES
	T -> i64
	Inner -> i64
	Self -> Opt[i64](enum None | Some(i64))

scope 1789 ability_impl.Unwrap_Opt[i64]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2405 -> __match_subject_2405: Opt[i64]
	self -> self: Opt[i64]

scope 1790 ability_impl.Unwrap_Opt[i64]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[i64]

scope 1791 ability_impl.Unwrap_Opt[i64]_make fn (parent: ability_impl)
	VARS
	t -> t: i64

scope 1792 Opt.isSome_spec_i64_5 fn (parent: Opt)
	VARS
	__match_subject_2408 -> __match_subject_2408: Opt[i64]
	self -> self: Opt[i64]
	TYPES
	T -> i64

scope 1793 for_yield_test.forYield.for.block.block block (parent: for_yield_test.forYield.for.block)

scope 1794 new_spec_bool_3 fn (parent: )
	VARS
	value -> value: bool
	t -> t: bool*
	ptr -> ptr: Pointer
	TYPES
	T -> bool

scope 1795 ability_impl ability_impl (parent: )
	TYPES
	T -> bool

scope 1796 ability_impl ability_impl (parent: )
	TYPES
	T -> bool
	Inner -> bool
	Self -> Opt[bool](enum None | Some(bool))

scope 1797 ability_impl.Unwrap_Opt[bool]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[bool]
	__match_subject_2412 -> __match_subject_2412: Opt[bool]

scope 1798 ability_impl.Unwrap_Opt[bool]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[bool]

scope 1799 ability_impl.Unwrap_Opt[bool]_make fn (parent: ability_impl)
	VARS
	t -> t: bool

scope 1800 some_spec_bool_3 fn (parent: )
	VARS
	value -> value: bool
	TYPES
	T -> bool

scope 1801 generic_struct.Pair.t_spec_i64bool_1 fn (parent: generic_struct.Pair)
	VARS
	self -> self: Pair[i64, bool]
	TYPES
	T -> i64
	U -> bool

scope 1802 generic_struct.unboxIt_spec_i64_1 fn (parent: generic_struct)
	VARS
	b -> b: Box[Box[Box[i64]]]
	TYPES
	T -> i64

scope 1803 inference.getOrElse.block block (parent: inference.getOrElse)
	VARS
	a -> a: T
	__if_target_1486 -> __if_target_1486: Opt[T]
	__payload_Some_1487 -> __payload_Some_1487: T

scope 1804 inference.get.block block (parent: inference.get)
	VARS
	__if_target_1489 -> __if_target_1489: Opt[UU]
	__payload_Some_1490 -> __payload_Some_1490: UU
	u -> u: UU

scope 1805 inference.occursCheckTest.block block (parent: inference.occursCheckTest)

scope 1806 inference.occursCheckTest.block.match_arm match_arm (parent: inference.occursCheckTest.block)
	VARS
	__payload_Some_1493 -> __payload_Some_1493: string

scope 1807 inference.occursCheckTest.block.match_arm match_arm (parent: inference.occursCheckTest.block)

scope 1808 inference.identity_spec_i64_1 fn (parent: inference)
	VARS
	value -> value: i64
	TYPES
	T -> i64

scope 1809 inference.test.block block (parent: inference.test)
	VARS
	__list_literal_1498 -> __list_literal_1498: List[bool]*

scope 1810 List.withCapacity_spec_bool_8 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[bool]
	TYPES
	T -> bool

scope 1811 inference.identity_spec_List[bool]_2 fn (parent: inference)
	VARS
	value -> value: List[bool]
	TYPES
	T -> List[bool]({len: u64, buffer: Buffer[bool]({len: u64, data: bool*})})

scope 1812 inference.test.block block (parent: inference.test)
	VARS
	__list_literal_1500 -> __list_literal_1500: List[bool]*

scope 1813 inference.test.block block (parent: inference.test)
	VARS
	__list_literal_1501 -> __list_literal_1501: List[bool]*

scope 1814 inference.test.block block (parent: inference.test)
	VARS
	__list_literal_1502 -> __list_literal_1502: List[bool]*

scope 1815 inference.identityNested_spec_i64_1 fn (parent: inference)
	VARS
	t -> t: i64
	TYPES
	T -> i64

scope 1816 inference.identityNested_spec_bool_2 fn (parent: inference)
	VARS
	t -> t: bool
	TYPES
	T -> bool

scope 1817 inference.identityNested_spec_{value: i64}_3 fn (parent: inference)
	VARS
	t -> t: {value: i64}
	TYPES
	T -> {value: i64}

scope 1818 inference.identity_spec_bool_3 fn (parent: inference)
	VARS
	value -> value: bool
	TYPES
	T -> bool

scope 1819 inference.some_spec_i64_1 fn (parent: inference)
	VARS
	value -> value: i64
	TYPES
	U -> i64

scope 1820 inference.some_spec_u32_2 fn (parent: inference)
	VARS
	value -> value: u32
	TYPES
	U -> u32

scope 1821 inference.get_spec_u32_1 fn (parent: inference)
	VARS
	value -> value: Opt[u32]
	TYPES
	UU -> u32

scope 1822 inference.identity_spec_u32_4 fn (parent: inference)
	VARS
	value -> value: u32
	TYPES
	T -> u32

scope 1823 inference.combine_spec_u32_1 fn (parent: inference)
	VARS
	a -> a: u32
	b -> b: u32
	TYPES
	T -> u32

scope 1824 inference.getOrElse_spec_i64_1 fn (parent: inference)
	VARS
	a -> a: Opt[i64]
	b -> b: i64
	TYPES
	T -> i64

scope 1825 inference.occursCheckTest_spec_i64_1 fn (parent: inference)
	VARS
	x -> x: i64
	__match_subject_2426 -> __match_subject_2426: Opt[string]
	TYPES
	T -> i64

scope 1826 inference.combine_spec_Opt[i64]_2 fn (parent: inference)
	VARS
	a -> a: Opt[i64]
	b -> b: Opt[i64]
	TYPES
	T -> Opt[i64](enum None | Some(i64))

scope 1827 inference.combine_spec_Opt[u32]_3 fn (parent: inference)
	VARS
	a -> a: Opt[u32]
	b -> b: Opt[u32]
	TYPES
	T -> Opt[u32](enum None | Some(u32))

scope 1828 inference.combine3_spec_Opt[i64]_1 fn (parent: inference)
	VARS
	a -> a: Opt[i64]
	b -> b: Opt[i64]
	c -> c: {one: Opt[i64], two: Opt[i64]}
	TYPES
	T -> Opt[i64](enum None | Some(i64))

scope 1829 inference.test.block block (parent: inference.test)

scope 1830 inference.test.block.match_arm match_arm (parent: inference.test.block)

scope 1831 inference.test.block.match_arm match_arm (parent: inference.test.block)

scope 1832 is_patterns.test.block block (parent: is_patterns.test)

scope 1833 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1834 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1835 is_patterns.test.block block (parent: is_patterns.test)

scope 1836 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1837 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1838 is_patterns.test.block block (parent: is_patterns.test)

scope 1839 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1840 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1841 is_patterns.test.block block (parent: is_patterns.test)

scope 1842 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1843 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1844 is_patterns.test.block block (parent: is_patterns.test)

scope 1845 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1846 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1847 is_patterns.test.block block (parent: is_patterns.test)

scope 1848 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1849 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1850 is_patterns.test.block block (parent: is_patterns.test)

scope 1851 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1852 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1853 is_patterns.test.block block (parent: is_patterns.test)

scope 1854 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1855 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1856 is_patterns.test.block block (parent: is_patterns.test)

scope 1857 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1858 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1859 is_patterns.test.block block (parent: is_patterns.test)

scope 1860 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)
	VARS
	__payload_Some_1552 -> __payload_Some_1552: i64

scope 1861 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1862 is_patterns.test.block block (parent: is_patterns.test)

scope 1863 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1864 is_patterns.test.block.match_arm match_arm (parent: is_patterns.test.block)

scope 1865 is_patterns.test.block block (parent: is_patterns.test)
	VARS
	__if_target_1555 -> __if_target_1555: {x: i64, y: string}

scope 1866 is_patterns.test.block.block block (parent: is_patterns.test.block)

scope 1867 is_patterns.test.block block (parent: is_patterns.test)
	VARS
	f -> f: {x: i64, y: string}
	__if_target_1556 -> __if_target_1556: {x: i64, y: string}

scope 1868 is_patterns.test.block.block block (parent: is_patterns.test.block)

scope 1869 is_patterns.test.block block (parent: is_patterns.test)
	VARS
	__if_target_1559 -> __if_target_1559: {x: i64, y: string}
	__field_x_1560 -> __field_x_1560: i64

scope 1870 is_patterns.test.block.block block (parent: is_patterns.test.block)

scope 1871 is_patterns.test.block block (parent: is_patterns.test)

scope 1872 is_patterns.test.block block (parent: is_patterns.test)
	VARS
	y -> y: string
	__field_x_1562 -> __field_x_1562: i64
	__field_y_1563 -> __field_y_1563: string
	__if_target_1561 -> __if_target_1561: {x: i64, y: string}

scope 1873 is_patterns.test.block.block block (parent: is_patterns.test.block)

scope 1874 is_patterns.test.block block (parent: is_patterns.test)
	VARS
	__field_x_1567 -> __field_x_1567: Opt[i64]
	__if_target_1566 -> __if_target_1566: {x: Opt[i64]}
	x -> x: i64
	__payload_Some_1568 -> __payload_Some_1568: i64

scope 1875 is_patterns.test.block.block block (parent: is_patterns.test.block)

scope 1876 is_patterns.test.block block (parent: is_patterns.test)
	VARS
	__field_x_1573 -> __field_x_1573: i64
	__if_target_1571 -> __if_target_1571: Opt[{x: i64}]
	__payload_Some_1572 -> __payload_Some_1572: {x: i64}

scope 1877 is_patterns.test.block.block block (parent: is_patterns.test.block)

scope 1878 json_test.test.block block (parent: json_test.test)

scope 1879 json_test.test.block.match_arm match_arm (parent: json_test.test.block)
	VARS
	__payload_JsStr_1577 -> __payload_JsStr_1577: string

scope 1880 json_test.test.block.match_arm match_arm (parent: json_test.test.block)

scope 1881 json_test.test.block block (parent: json_test.test)

scope 1882 json_test.test.block.match_arm match_arm (parent: json_test.test.block)

scope 1883 json_test.test.block.match_arm match_arm (parent: json_test.test.block)

scope 1884 json_test.test.block block (parent: json_test.test)
	VARS
	__list_literal_1580 -> __list_literal_1580: List[Json]*

scope 1885 List.withCapacity_spec_Json_9 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[Json]
	TYPES
	T -> Json

scope 1886 List.push_spec_Json_8 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: Json
	self -> self: List[Json]*
	TYPES
	T -> Json

scope 1887 json_test.test.block block (parent: json_test.test)

scope 1888 ability_impl ability_impl (parent: )
	TYPES
	T -> Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))

scope 1889 ability_impl ability_impl (parent: )
	TYPES
	T -> Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))
	Inner -> Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))
	Self -> Opt[Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))](enum None | Some(Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))))

scope 1890 ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Json.JsArray(List[Json])]
	__match_subject_2436 -> __match_subject_2436: Opt[Json.JsArray(List[Json])]

scope 1891 ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Json.JsArray(List[Json])]

scope 1892 ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_make fn (parent: ability_impl)
	VARS
	t -> t: Json.JsArray(List[Json])

scope 1893 List.get_spec_Json_2 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Json]
	TYPES
	T -> Json

scope 1894 json_test.test.block.match_arm match_arm (parent: json_test.test.block)
	VARS
	__payload_JsStr_1590 -> __payload_JsStr_1590: string

scope 1895 json_test.test.block.match_arm match_arm (parent: json_test.test.block)

scope 1896 json_test.test.block block (parent: json_test.test)

scope 1897 json_test.test.block.match_arm match_arm (parent: json_test.test.block)
	VARS
	__payload_JsNumber_1592 -> __payload_JsNumber_1592: string

scope 1898 json_test.test.block.match_arm match_arm (parent: json_test.test.block)

scope 1899 lambdas.captures.clos clos (parent: lambdas.captures)
	VARS
	x -> x: i64
	addOne -> addOne: lambda#expr#4055(fn((env){}*, i64) -> i64)

scope 1900 lambdas.captures.clos.clos clos (parent: lambdas.captures.clos)
	VARS
	y -> y: i64

scope 1901 lambdas.captures.clos.block block (parent: lambdas.captures.clos)

scope 1902 assertEquals_spec_i64_1 fn (parent: )
	VARS
	locn -> locn: SourceLocation
	a -> a: i64
	b -> b: i64
	TYPES
	T -> i64

scope 1903 lambdas.captureMut.clos clos (parent: lambdas.captureMut)
	VARS
	x -> x: i64

scope 1904 lambdas.closureReturn.clos clos (parent: lambdas.closureReturn)

scope 1905 lambdas.closureReturn.clos clos (parent: lambdas.closureReturn)

scope 1906 ability_impl ability_impl (parent: )
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 1907 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[lambda_object(fn((env){}*) -> unit)]({len: u64, buffer: Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*})})
	Item -> lambda_object(fn((env){}*) -> unit)
	T -> lambda_object(fn((env){}*) -> unit)
	I -> BufferIterator[lambda_object(fn((env){}*) -> unit)]({buf: Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*}), pos: u64})

scope 1908 ability_impl.Iterable_List[lambda_object(fn((env){}*) -> unit)]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[lambda_object(fn((env){}*) -> unit)]

scope 1909 lambdas.runThings.for for (parent: lambdas.runThings)
	VARS
	__iter_1613 -> __iter_1613: BufferIterator[lambda_object(fn((env){}*) -> unit)]*
	itIndex -> mut itIndex: u64

scope 1910 lambdas.runThings.for.block block (parent: lambdas.runThings.for)
	VARS
	__next_1620 -> __next_1620: Opt[lambda_object(fn((env){}*) -> unit)]

scope 1911 lambdas.runThings.for.block.block block (parent: lambdas.runThings.for.block)
	VARS
	thunk -> thunk: lambda_object(fn((env){}*) -> unit)
	__block_expr_val_1625 -> __block_expr_val_1625: unit

scope 1912 ability_impl ability_impl (parent: )
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 1913 ability_impl ability_impl (parent: )
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)
	Self -> BufferIterator[lambda_object(fn((env){}*) -> unit)]({buf: Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*}), pos: u64})
	Item -> lambda_object(fn((env){}*) -> unit)

scope 1914 ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*

scope 1915 ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[lambda_object(fn((env){}*) -> unit)]

scope 1916 ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*

scope 1917 ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[lambda_object(fn((env){}*) -> unit)]*

scope 1918 ability_impl ability_impl (parent: )
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 1919 ability_impl ability_impl (parent: )
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)
	Inner -> lambda_object(fn((env){}*) -> unit)
	Self -> Opt[lambda_object(fn((env){}*) -> unit)](enum None | Some(lambda_object(fn((env){}*) -> unit)))

scope 1920 ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[lambda_object(fn((env){}*) -> unit)]
	__match_subject_2449 -> __match_subject_2449: Opt[lambda_object(fn((env){}*) -> unit)]

scope 1921 ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[lambda_object(fn((env){}*) -> unit)]

scope 1922 ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_make fn (parent: ability_impl)
	VARS
	t -> t: lambda_object(fn((env){}*) -> unit)

scope 1923 Opt.isSome_spec_lambda_object(fn((env){}*) -> unit)_6 fn (parent: Opt)
	VARS
	self -> self: Opt[lambda_object(fn((env){}*) -> unit)]
	__match_subject_2452 -> __match_subject_2452: Opt[lambda_object(fn((env){}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 1924 lambdas.runThings.for.block.block block (parent: lambdas.runThings.for.block)

scope 1925 lambdas.thunksTest.block block (parent: lambdas.thunksTest)
	VARS
	__list_literal_1632 -> __list_literal_1632: List[lambda_object(fn((env){counter: i64*}*) -> unit)]*

scope 1926 lambdas.thunksTest.clos clos (parent: lambdas.thunksTest)

scope 1927 lambdas.thunksTest.clos clos (parent: lambdas.thunksTest)

scope 1928 lambdas.thunksTest.clos clos (parent: lambdas.thunksTest)

scope 1929 List.withCapacity_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 1930 List.push_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: lambda_object(fn((env){counter: i64*}*) -> unit)
	self -> self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]*
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 1931 lambdas.thunksTest.block block (parent: lambdas.thunksTest)
	VARS
	__sb_1636 -> __sb_1636: StringBuilder

scope 1932 lambdas.someFnParam2_spec__1 fn (parent: lambdas)
	VARS
	i -> i: i64
	f -> f: fn(i64) -> i64*
	g -> g: fn(i64) -> i64*

scope 1933 lambdas.someFnParam1_spec__1 fn (parent: lambdas)
	VARS
	i -> i: i64
	f -> f: fn(i64) -> i64*

scope 1934 lambdas.someFnParam1_spec__2 fn (parent: lambdas)
	VARS
	i -> i: i64
	f -> f: lambda_object(fn((env){}*, i64) -> i64)

scope 1935 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1936 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1937 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1938 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1939 lambdas.someFnParam2_spec__2 fn (parent: lambdas)
	VARS
	i -> i: i64
	f -> f: lambda#expr#4204(fn((env){c1: {x: i64}*}*, i64) -> i64)
	g -> g: lambda#expr#4210(fn((env){c2: i64}*, i64) -> i64)

scope 1940 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1941 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1942 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	b -> b: bool

scope 1943 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	b -> b: bool

scope 1944 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	b -> b: bool

scope 1945 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	b -> b: bool

scope 1946 lambdas.someFnParamGen_spec_bool_1 fn (parent: lambdas)
	VARS
	g -> g: lambda#expr#4231(fn((env){}*, bool) -> Opt[bool])
	t -> t: bool
	f -> f: lambda#expr#4228(fn((env){}*, bool) -> bool)
	TYPES
	T -> bool

scope 1947 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	b -> b: bool

scope 1948 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	b -> b: bool

scope 1949 ability_impl ability_impl (parent: )
	TYPES
	T -> bool

scope 1950 ability_impl ability_impl (parent: )
	TYPES
	T -> bool
	Self -> Opt[bool](enum None | Some(bool))

scope 1951 ability_impl.Equals_Opt[bool]_equals fn (parent: ability_impl)
	VARS
	self -> self: Opt[bool]
	other -> other: Opt[bool]

scope 1952 lambdas.test.block block (parent: lambdas.test)
	VARS
	__list_literal_1685 -> __list_literal_1685: List[i64]*

scope 1953 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1954 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1955 List.map_spec_i64i64_1 fn (parent: List)
	VARS
	f -> f: lambda#expr#4249(fn((env){}*, i64) -> i64)
	self -> self: List[i64]
	us -> us: List[i64]*
	TYPES
	T -> i64
	U -> i64

scope 1956 lambdas.test.block block (parent: lambdas.test)
	VARS
	__list_literal_1692 -> __list_literal_1692: List[i64]*

scope 1957 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1958 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1959 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1960 List.filter_spec_i64_1 fn (parent: List)
	VARS
	f -> f: lambda#expr#4256(fn((env){}*, i64) -> bool)
	self -> self: List[i64]
	keep -> keep: List[i64]*
	TYPES
	T -> i64

scope 1961 lambdas.test.block block (parent: lambdas.test)
	VARS
	__list_literal_1701 -> __list_literal_1701: List[i64]*

scope 1962 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1963 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1964 lambdas.test.block block (parent: lambdas.test)
	VARS
	__list_literal_1706 -> __list_literal_1706: List[i64]*

scope 1965 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1966 lambdas.test.clos clos (parent: lambdas.test)
	VARS
	x -> x: i64

scope 1967 lambdas.test.block block (parent: lambdas.test)
	VARS
	__list_literal_1712 -> __list_literal_1712: List[i64]*

scope 1968 lambdas.test.clos clos (parent: lambdas.test)

scope 1969 lib_compiler_test.test.block block (parent: lib_compiler_test.test)

scope 1970 lib_compiler_test.test.block.match_arm match_arm (parent: lib_compiler_test.test.block)
	VARS
	__payload_Some_1716 -> __payload_Some_1716: string

scope 1971 lib_compiler_test.test.block.match_arm match_arm (parent: lib_compiler_test.test.block)

scope 1972 List.empty_spec_i64_3 fn (parent: List)
	TYPES
	T -> i64

scope 1973 List.cap_spec_i64_1 fn (parent: List)
	VARS
	self -> self: List[i64]
	TYPES
	T -> i64

scope 1974 list_test.listFill.block block (parent: list_test.listFill)

scope 1975 list_test.listFill.block.while while (parent: list_test.listFill.block)

scope 1976 List.first_spec_i64_1 fn (parent: List)
	VARS
	self -> self: List[i64]
	__match_subject_2477 -> __match_subject_2477: Opt[i64*]
	TYPES
	T -> i64

scope 1977 List.last_spec_i64_1 fn (parent: List)
	VARS
	__match_subject_2481 -> __match_subject_2481: Opt[i64*]
	self -> self: List[i64]
	TYPES
	T -> i64

scope 1978 list_test.listFill.block block (parent: list_test.listFill)
	VARS
	__list_literal_1722 -> __list_literal_1722: List[i64]*

scope 1979 List.cloned_spec_i64_1 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[i64]
	self -> self: List[i64]
	TYPES
	T -> i64

scope 1980 list_test.listFill.block block (parent: list_test.listFill)
	VARS
	__list_literal_1726 -> __list_literal_1726: List[u8]*

scope 1981 List.cloned_spec_u8_2 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[u8]
	self -> self: List[u8]
	TYPES
	T -> u8

scope 1982 list_test.listSlice.block block (parent: list_test.listSlice)
	VARS
	__list_literal_1730 -> __list_literal_1730: List[i64]*

scope 1983 List.slice_spec_i64_1 fn (parent: List)
	VARS
	end -> end: u64
	self -> self: List[i64]
	start -> start: u64
	TYPES
	T -> i64

scope 1984 list_test.listSlice.block block (parent: list_test.listSlice)
	VARS
	__list_literal_1736 -> __list_literal_1736: List[i64]*

scope 1985 list_test.listOfStructs.block block (parent: list_test.listOfStructs)
	VARS
	__list_literal_1741 -> __list_literal_1741: List[Point]*

scope 1986 List.withCapacity_spec_Point_11 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 1987 List.push_spec_Point_10 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: Point
	self -> self: List[Point]*
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 1988 list_test.listOfStructs.block block (parent: list_test.listOfStructs)

scope 1989 list_test.listOfStructs.block.while while (parent: list_test.listOfStructs.block)

scope 1990 List.cap_spec_Point_2 fn (parent: List)
	VARS
	self -> self: List[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 1991 list_test.listEquality.block block (parent: list_test.listEquality)
	VARS
	__list_literal_1747 -> __list_literal_1747: List[i64]*

scope 1992 list_test.listEquality.block block (parent: list_test.listEquality)
	VARS
	__list_literal_1749 -> __list_literal_1749: List[i64]*

scope 1993 list_test.listEquality.block block (parent: list_test.listEquality)
	VARS
	__list_literal_1750 -> __list_literal_1750: List[i64]*

scope 1994 list_test.listEquality.block block (parent: list_test.listEquality)
	VARS
	__list_literal_1751 -> __list_literal_1751: List[i64]*

scope 1995 list_test.listEquality.block block (parent: list_test.listEquality)
	VARS
	__list_literal_1752 -> __list_literal_1752: List[string]*

scope 1996 list_test.listEquality.block block (parent: list_test.listEquality)
	VARS
	__list_literal_1753 -> __list_literal_1753: List[string]*

scope 1997 list_test.Show_impl_{rank: i64, payload: string}.Show_{rank: i64, payload: string}_show.block block (parent: list_test.Show_impl_{rank: i64, payload: string}.Show_{rank: i64, payload: string}_show)
	VARS
	__sb_1756 -> __sb_1756: StringBuilder

scope 1998 List.sorted_spec_i64_1 fn (parent: List)
	VARS
	self -> self: List[i64]
	copy -> copy: List[i64]*
	TYPES
	T -> i64

scope 1999 List.sorted_spec_{rank: i64, payload: string}_2 fn (parent: List)
	VARS
	self -> self: List[{rank: i64, payload: string}]
	copy -> copy: List[{rank: i64, payload: string}]*
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2000 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2001 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	Self -> List[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, buffer: Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*})})

scope 2002 ability_impl.Equals_List[{rank: i64, payload: string}]_equals fn (parent: ability_impl)
	VARS
	self -> self: List[{rank: i64, payload: string}]
	other -> other: List[{rank: i64, payload: string}]

scope 2003 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1763 -> __list_literal_1763: List[i64]*

scope 2004 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1764 -> __list_literal_1764: List[i64]*

scope 2005 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1765 -> __list_literal_1765: List[i64]*

scope 2006 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1766 -> __list_literal_1766: List[i64]*

scope 2007 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1767 -> __list_literal_1767: List[i64]*

scope 2008 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1768 -> __list_literal_1768: List[i64]*

scope 2009 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1769 -> __list_literal_1769: List[i64]*

scope 2010 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1770 -> __list_literal_1770: List[i64]*

scope 2011 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1772 -> __list_literal_1772: List[{rank: i64, payload: string}]*

scope 2012 List.withCapacity_spec_{rank: i64, payload: string}_12 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2013 List.push_spec_{rank: i64, payload: string}_11 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: {rank: i64, payload: string}
	self -> self: List[{rank: i64, payload: string}]*
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2014 list_test.testSort.block block (parent: list_test.testSort)
	VARS
	__list_literal_1775 -> __list_literal_1775: List[{rank: i64, payload: string}]*

scope 2015 list_test.testSwap.block block (parent: list_test.testSwap)
	VARS
	__list_literal_1776 -> __list_literal_1776: List[i64]*

scope 2016 List.swap_spec_i64_1 fn (parent: List)
	VARS
	aRef -> aRef: i64*
	self -> self: List[i64]*
	bValue -> bValue: i64
	indexB -> indexB: u64
	bRef -> bRef: i64*
	indexA -> indexA: u64
	TYPES
	T -> i64

scope 2017 list_test.testSwap.block block (parent: list_test.testSwap)
	VARS
	__list_literal_1781 -> __list_literal_1781: List[i64]*

scope 2018 list_test.testSwap.block block (parent: list_test.testSwap)
	VARS
	__list_literal_1782 -> __list_literal_1782: List[i64]*

scope 2019 list_test.testSwap.block block (parent: list_test.testSwap)
	VARS
	__list_literal_1783 -> __list_literal_1783: List[i64]*

scope 2020 list_test.iterator.block block (parent: list_test.iterator)
	VARS
	__list_literal_1784 -> __list_literal_1784: List[i64]*

scope 2021 Opt.isNone_spec_i64_1 fn (parent: Opt)
	VARS
	__match_subject_2515 -> __match_subject_2515: Opt[i64]
	self -> self: Opt[i64]
	TYPES
	T -> i64

scope 2022 list_test.test.block block (parent: list_test.test)
	VARS
	__list_literal_1790 -> __list_literal_1790: List[i64]*

scope 2023 list_test.test.block block (parent: list_test.test)
	VARS
	__list_literal_1791 -> __list_literal_1791: List[i64]*

scope 2024 ability_impl ability_impl (parent: )
	TYPES
	T -> List[i64]({len: u64, buffer: Buffer[i64]({len: u64, data: i64*})})

scope 2025 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 2026 ability_impl ability_impl (parent: )
	TYPES
	T -> i64
	Self -> List[i64]({len: u64, buffer: Buffer[i64]({len: u64, data: i64*})})

scope 2027 ability_impl.Show_List[i64]_show fn (parent: ability_impl)
	VARS
	b -> b: StringBuilder
	self -> self: List[i64]

scope 2028 list_test.test.block block (parent: list_test.test)
	VARS
	__list_literal_1793 -> __list_literal_1793: List[i64]*

scope 2029 printIt_spec_u64_3 fn (parent: )
	VARS
	value -> value: u64
	s -> s: string
	TYPES
	T -> u64

scope 2030 match_exhaust.matchBool.block block (parent: match_exhaust.matchBool)

scope 2031 match_exhaust.matchBool.block.match_arm match_arm (parent: match_exhaust.matchBool.block)

scope 2032 match_exhaust.matchBool.block.match_arm match_arm (parent: match_exhaust.matchBool.block)

scope 2033 match_exhaust.matchTristateOpt.block block (parent: match_exhaust.matchTristateOpt)

scope 2034 match_exhaust.matchTristateOpt.block.match_arm match_arm (parent: match_exhaust.matchTristateOpt.block)
	VARS
	__payload_Some_1797 -> __payload_Some_1797: TriState

scope 2035 match_exhaust.matchTristateOpt.block.match_arm match_arm (parent: match_exhaust.matchTristateOpt.block)
	VARS
	__payload_Some_1798 -> __payload_Some_1798: TriState

scope 2036 match_exhaust.matchTristateOpt.block.match_arm match_arm (parent: match_exhaust.matchTristateOpt.block)
	VARS
	s -> s: {reason: string}
	__payload_Failure_1800 -> __payload_Failure_1800: {reason: string}
	__payload_Some_1799 -> __payload_Some_1799: TriState

scope 2037 match_exhaust.matchTristateOpt.block.match_arm match_arm (parent: match_exhaust.matchTristateOpt.block)

scope 2038 match_exhaust.failedWithBaz.block block (parent: match_exhaust.failedWithBaz)

scope 2039 match_exhaust.failedWithBaz.block.match_arm match_arm (parent: match_exhaust.failedWithBaz.block)

scope 2040 match_exhaust.failedWithBaz.block.match_arm match_arm (parent: match_exhaust.failedWithBaz.block)

scope 2041 match_exhaust.failedWithBaz.block.match_arm match_arm (parent: match_exhaust.failedWithBaz.block)
	VARS
	s -> s: {reason: string}
	__payload_Failure_1803 -> __payload_Failure_1803: {reason: string}

scope 2042 match_exhaust.matchOptBool.block block (parent: match_exhaust.matchOptBool)

scope 2043 match_exhaust.matchOptBool.block.match_arm match_arm (parent: match_exhaust.matchOptBool.block)

scope 2044 match_exhaust.matchOptBool.block.match_arm match_arm (parent: match_exhaust.matchOptBool.block)
	VARS
	__payload_Some_1806 -> __payload_Some_1806: bool

scope 2045 match_exhaust.matchOptBool.block.match_arm match_arm (parent: match_exhaust.matchOptBool.block)
	VARS
	__payload_Some_1807 -> __payload_Some_1807: bool

scope 2046 match_exhaust.bothTrue.block block (parent: match_exhaust.bothTrue)

scope 2047 match_exhaust.bothTrue.block.match_arm match_arm (parent: match_exhaust.bothTrue.block)
	VARS
	__field_a_1809 -> __field_a_1809: bool
	__field_b_1810 -> __field_b_1810: bool

scope 2048 match_exhaust.bothTrue.block.match_arm match_arm (parent: match_exhaust.bothTrue.block)
	VARS
	__field_a_1811 -> __field_a_1811: bool
	__field_b_1812 -> __field_b_1812: bool

scope 2049 match_exhaust.bothTrue.block.match_arm match_arm (parent: match_exhaust.bothTrue.block)
	VARS
	__field_a_1813 -> __field_a_1813: bool
	__field_b_1814 -> __field_b_1814: bool

scope 2050 match_exhaust.bothTrue.block.match_arm match_arm (parent: match_exhaust.bothTrue.block)
	VARS
	__field_a_1815 -> __field_a_1815: bool
	__field_b_1816 -> __field_b_1816: bool

scope 2051 match_exhaust.main.block block (parent: match_exhaust.main)

scope 2052 match_exhaust.main.block.match_arm match_arm (parent: match_exhaust.main.block)

scope 2053 match_exhaust.main.block.match_arm match_arm (parent: match_exhaust.main.block)
	VARS
	a -> a: char

scope 2054 match_fails.useless.block block (parent: match_fails.useless)

scope 2055 match_fails.useless.block.match_arm match_arm (parent: match_fails.useless.block)
	VARS
	__field_x_1822 -> __field_x_1822: i64
	__payload_Some_1825 -> __payload_Some_1825: bool
	x -> x: i64
	__field_y_1824 -> __field_y_1824: Opt[bool]

scope 2056 match_fails.useless.block.match_arm match_arm (parent: match_fails.useless.block)
	VARS
	__payload_Some_1829 -> __payload_Some_1829: bool
	x -> x: i64
	__field_y_1828 -> __field_y_1828: Opt[bool]
	__field_x_1826 -> __field_x_1826: i64

scope 2057 match_fails.useless.block.match_arm match_arm (parent: match_fails.useless.block)
	VARS
	__payload_Some_1833 -> __payload_Some_1833: bool
	__field_y_1832 -> __field_y_1832: Opt[bool]
	x -> x: i64
	__field_x_1830 -> __field_x_1830: i64

scope 2058 match_fails.useless.block.match_arm match_arm (parent: match_fails.useless.block)
	VARS
	x -> x: i64
	__field_x_1834 -> __field_x_1834: i64
	__field_y_1836 -> __field_y_1836: Opt[bool]

scope 2059 match_fails.useless.block block (parent: match_fails.useless)

scope 2060 match_fails.useless.block.match_arm match_arm (parent: match_fails.useless.block)
	VARS
	__payload_Some_1839 -> __payload_Some_1839: string

scope 2061 match_fails.useless.block.match_arm match_arm (parent: match_fails.useless.block)

scope 2062 match_fails.unhandled.block block (parent: match_fails.unhandled)

scope 2063 match_fails.unhandled.block.match_arm match_arm (parent: match_fails.unhandled.block)
	VARS
	__payload_Some_1845 -> __payload_Some_1845: bool
	__field_y_1844 -> __field_y_1844: Opt[bool]
	x -> x: i64
	__field_x_1842 -> __field_x_1842: i64

scope 2064 match_fails.unhandled.block.match_arm match_arm (parent: match_fails.unhandled.block)
	VARS
	x -> x: i64
	__field_x_1846 -> __field_x_1846: i64
	__field_y_1848 -> __field_y_1848: Opt[bool]

scope 2065 match_fails.unhandled.block block (parent: match_fails.unhandled)

scope 2066 match_fails.unhandled.block.match_arm match_arm (parent: match_fails.unhandled.block)
	VARS
	__payload_Some_1851 -> __payload_Some_1851: string

scope 2067 match_fails.unhandled.block.match_arm match_arm (parent: match_fails.unhandled.block)

scope 2068 match_references.main.block block (parent: match_references.main)
	VARS
	__if_target_1853 -> __if_target_1853: Opt[i64]
	__payload_Some_1854 -> __payload_Some_1854: i64
	xx -> xx: i64

scope 2069 match_references.main.block.while while (parent: match_references.main.block)

scope 2070 match_references.main.block.while.block block (parent: match_references.main.block.while)
	VARS
	__sb_1856 -> __sb_1856: StringBuilder

scope 2071 match_references.main.block.while.block block (parent: match_references.main.block.while)

scope 2072 match_references.main.block.while.block block (parent: match_references.main.block.while)

scope 2073 match_references.main.block block (parent: match_references.main)
	VARS
	__if_target_1858 -> __if_target_1858: {x: i64, y: i64}*
	__field_y_1861 -> __field_y_1861: i64*
	x -> x: i64*
	__field_x_1859 -> __field_x_1859: i64*

scope 2074 match_references.main.block.block block (parent: match_references.main.block)

scope 2075 match_references.main.block.block.block block (parent: match_references.main.block.block)
	VARS
	__sb_1862 -> __sb_1862: StringBuilder

scope 2076 match_references.main.block block (parent: match_references.main)
	VARS
	__if_target_1863 -> __if_target_1863: Opt[i64]*
	__payload_Some_1864 -> __payload_Some_1864: i64*
	xx -> xx: i64*

scope 2077 match_references.main.block.while while (parent: match_references.main.block)

scope 2078 match_references.main.block.while.block block (parent: match_references.main.block.while)
	VARS
	__sb_1866 -> __sb_1866: StringBuilder

scope 2079 match_references.main.block.while.block block (parent: match_references.main.block.while)

scope 2080 match_references.main.block.while.block block (parent: match_references.main.block.while)

scope 2081 new_spec_bool**_4 fn (parent: )
	VARS
	value -> value: bool**
	t -> t: bool***
	ptr -> ptr: Pointer
	TYPES
	T -> bool**

scope 2082 new_spec_bool*_5 fn (parent: )
	VARS
	value -> value: bool*
	t -> t: bool**
	ptr -> ptr: Pointer
	TYPES
	T -> bool*

scope 2083 match_references.main.block block (parent: match_references.main)
	VARS
	__match_subject_1870 -> __match_subject_1870: bool***

scope 2084 match_references.main.block.block block (parent: match_references.main.block)

scope 2085 match_references.main.block.block.match_arm match_arm (parent: match_references.main.block.block)

scope 2086 match_references.main.block.block.match_arm match_arm (parent: match_references.main.block.block)

scope 2087 match_references.main.block.block block (parent: match_references.main.block)

scope 2088 match_references.main.block block (parent: match_references.main)
	VARS
	__if_target_1871 -> __if_target_1871: bool***

scope 2089 match_references.main.block.block block (parent: match_references.main.block)

scope 2090 some_spec_string_4 fn (parent: )
	VARS
	value -> value: string
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2091 matching_if.test.block block (parent: matching_if.test)
	VARS
	__payload_Some_1877 -> __payload_Some_1877: string
	__payload_Some_1880 -> __payload_Some_1880: string
	__if_target_1876 -> __if_target_1876: Opt[string]
	v -> v: string
	__if_target_1879 -> __if_target_1879: Opt[string]

scope 2092 matching_if.test.block.block block (parent: matching_if.test.block)

scope 2093 matching_if.test.block block (parent: matching_if.test)

scope 2094 matching_if.test.block block (parent: matching_if.test)

scope 2095 matching_if.test.block.block block (parent: matching_if.test.block)
	VARS
	__match_subject_1882 -> __match_subject_1882: Opt[string]

scope 2096 matching_if.test.block.block.block block (parent: matching_if.test.block.block)

scope 2097 matching_if.test.block block (parent: matching_if.test)

scope 2098 matching_if.test.block.match_arm match_arm (parent: matching_if.test.block)
	VARS
	__payload_Some_1885 -> __payload_Some_1885: string

scope 2099 matching_if.test.block.match_arm match_arm (parent: matching_if.test.block)

scope 2100 matching_if.test.block block (parent: matching_if.test)
	VARS
	__if_target_1887 -> __if_target_1887: {x: i64, y: i64}
	__field_x_1892 -> __field_x_1892: i64
	__field_x_1888 -> __field_x_1888: i64
	__field_y_1894 -> __field_y_1894: i64
	__field_y_1889 -> __field_y_1889: i64
	xx -> xx: i64
	__if_target_1891 -> __if_target_1891: {x: i64, y: i64}
	yy -> yy: i64

scope 2101 matching_if.test.block.block block (parent: matching_if.test.block)

scope 2102 some_spec_{x: Opt[i64], y: Opt[i64]}_5 fn (parent: )
	VARS
	value -> value: {x: Opt[i64], y: Opt[i64]}
	TYPES
	T -> {x: Opt[i64](enum None | Some(i64)), y: Opt[i64](enum None | Some(i64))}

scope 2103 matching_if.test.block block (parent: matching_if.test)
	VARS
	__payload_Some_1901 -> __payload_Some_1901: i64
	__if_target_1898 -> __if_target_1898: Opt[{x: Opt[i64], y: Opt[i64]}]
	__field_y_1903 -> __field_y_1903: Opt[i64]
	__payload_Some_1899 -> __payload_Some_1899: {x: Opt[i64], y: Opt[i64]}
	xVal -> xVal: i64
	__payload_Some_1904 -> __payload_Some_1904: i64
	__field_x_1900 -> __field_x_1900: Opt[i64]
	yVal -> yVal: i64

scope 2104 matching_if.test.block.block block (parent: matching_if.test.block)

scope 2105 none_spec_i64_1 fn (parent: )
	TYPES
	T -> i64

scope 2106 matching_if.test.block block (parent: matching_if.test)
	VARS
	yVal -> yVal: i64
	__payload_Some_1911 -> __payload_Some_1911: i64
	__if_target_1908 -> __if_target_1908: Opt[{x: Opt[i64], y: Opt[i64]}]
	xVal -> xVal: i64
	__payload_Some_1909 -> __payload_Some_1909: {x: Opt[i64], y: Opt[i64]}
	__field_y_1913 -> __field_y_1913: Opt[i64]
	__payload_Some_1914 -> __payload_Some_1914: i64
	__field_x_1910 -> __field_x_1910: Opt[i64]

scope 2107 matching_if.test.block.block block (parent: matching_if.test.block)

scope 2108 some_spec_{point: {x: i64, y: i64}, value: Opt[string]}_6 fn (parent: )
	VARS
	value -> value: {point: {x: i64, y: i64}, value: Opt[string]}
	TYPES
	T -> {point: {x: i64, y: i64}, value: Opt[string({buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(string({buffer: Buffer[char]({len: u64, data: char*})})))}

scope 2109 matching_if.test.block block (parent: matching_if.test)
	VARS
	__payload_Some_1926 -> __payload_Some_1926: string
	__field_y_1923 -> __field_y_1923: i64
	v -> v: string
	__field_point_1921 -> __field_point_1921: {x: i64, y: i64}
	__if_target_1919 -> __if_target_1919: Opt[{point: {x: i64, y: i64}, value: Opt[string]}]
	__field_value_1925 -> __field_value_1925: Opt[string]
	__field_x_1922 -> __field_x_1922: i64
	__payload_Some_1920 -> __payload_Some_1920: {point: {x: i64, y: i64}, value: Opt[string]}
	yy -> yy: i64

scope 2110 matching_if.test.block.block block (parent: matching_if.test.block)

scope 2111 some_spec_{value: i64}_7 fn (parent: )
	VARS
	value -> value: {value: i64}
	TYPES
	T -> {value: i64}

scope 2112 some_spec_{outer: i64, inner: Opt[{value: i64}]}_8 fn (parent: )
	VARS
	value -> value: {outer: i64, inner: Opt[{value: i64}]}
	TYPES
	T -> {outer: i64, inner: Opt[{value: i64}](enum None | Some({value: i64}))}

scope 2113 matching_if.test.block block (parent: matching_if.test)
	VARS
	__field_value_1938 -> __field_value_1938: i64
	__payload_Some_1933 -> __payload_Some_1933: {outer: i64, inner: Opt[{value: i64}]}
	v -> v: i64
	o -> o: i64
	__field_inner_1936 -> __field_inner_1936: Opt[{value: i64}]
	__payload_Some_1937 -> __payload_Some_1937: {value: i64}
	__field_outer_1934 -> __field_outer_1934: i64
	__if_target_1932 -> __if_target_1932: Opt[{outer: i64, inner: Opt[{value: i64}]}]

scope 2114 matching_if.test.block.block block (parent: matching_if.test.block)

scope 2115 matching_if.test.block block (parent: matching_if.test)

scope 2116 matching_if.test.block.block block (parent: matching_if.test.block)
	VARS
	__field_value_1947 -> __field_value_1947: i64
	__field_outer_1943 -> __field_outer_1943: i64
	__field_inner_1945 -> __field_inner_1945: Opt[{value: i64}]
	o -> o: i64
	__if_target_1941 -> __if_target_1941: Opt[{outer: i64, inner: Opt[{value: i64}]}]
	__payload_Some_1946 -> __payload_Some_1946: {value: i64}
	__payload_Some_1942 -> __payload_Some_1942: {outer: i64, inner: Opt[{value: i64}]}

scope 2117 Opt.isSome_spec_string_7 fn (parent: Opt)
	VARS
	self -> self: Opt[string]
	__match_subject_2528 -> __match_subject_2528: Opt[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2118 never_everywhere.binopRhs.block block (parent: never_everywhere.binopRhs)
	VARS
	__sb_1953 -> __sb_1953: StringBuilder

scope 2119 never_everywhere.unop.block block (parent: never_everywhere.unop)
	VARS
	__sb_1954 -> __sb_1954: StringBuilder

scope 2120 never_everywhere.whileCond.block block (parent: never_everywhere.whileCond)

scope 2121 never_everywhere.whileCond.block.while while (parent: never_everywhere.whileCond.block)

scope 2122 never_everywhere.getEnumPayload.block block (parent: never_everywhere.getEnumPayload)
	VARS
	__sb_1955 -> __sb_1955: StringBuilder

scope 2123 never_everywhere.getEnumPayload.block block (parent: never_everywhere.getEnumPayload)
	VARS
	__sb_1956 -> __sb_1956: StringBuilder

scope 2124 never_everywhere.castTarget.block block (parent: never_everywhere.castTarget)
	VARS
	__sb_1958 -> __sb_1958: StringBuilder

scope 2125 never_everywhere.inBreak.loop loop (parent: never_everywhere.inBreak)

scope 2126 ability_impl ability_impl (parent: )
	TYPES
	T -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})

scope 2127 ability_impl ability_impl (parent: )
	TYPES
	T -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})
	Inner -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})
	Self -> Opt[PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})](enum None | Some(PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})))

scope 2128 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2530 -> __match_subject_2530: Opt[PointMaybeY]
	self -> self: Opt[PointMaybeY]

scope 2129 ability_impl.Unwrap_Opt[PointMaybeY]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[PointMaybeY]

scope 2130 ability_impl.Unwrap_Opt[PointMaybeY]_make fn (parent: ability_impl)
	VARS
	t -> t: PointMaybeY

scope 2131 optionals.testBasics.block block (parent: optionals.testBasics)
	VARS
	x -> x: bool
	__if_target_1965 -> __if_target_1965: Opt[bool]
	__payload_Some_1966 -> __payload_Some_1966: bool

scope 2132 optionals.testBasics.block.block block (parent: optionals.testBasics.block)

scope 2133 Opt.isSome_spec_bool_8 fn (parent: Opt)
	VARS
	self -> self: Opt[bool]
	__match_subject_2533 -> __match_subject_2533: Opt[bool]
	TYPES
	T -> bool

scope 2134 types.typeId_spec_i64_1 fn (parent: types)
	TYPES
	T -> i64

scope 2135 optionals.testCoalesceAccessor.block block (parent: optionals.testCoalesceAccessor)
	VARS
	__age_1971 -> __age_1971: Opt[{name: string, age: i64}]

scope 2136 Opt.isSome_spec_{name: string, age: i64}_9 fn (parent: Opt)
	VARS
	__match_subject_2535 -> __match_subject_2535: Opt[{name: string, age: i64}]
	self -> self: Opt[{name: string, age: i64}]
	TYPES
	T -> {name: string({buffer: Buffer[char]({len: u64, data: char*})}), age: i64}

scope 2137 Opt.get_spec_{name: string, age: i64}_1 fn (parent: Opt)
	VARS
	self -> self: Opt[{name: string, age: i64}]
	TYPES
	T -> {name: string({buffer: Buffer[char]({len: u64, data: char*})}), age: i64}

scope 2138 optionals.testCoalesceAccessor.block block (parent: optionals.testCoalesceAccessor)
	VARS
	__age_1974 -> __age_1974: Opt[{name: string, age: i64}]

scope 2139 optionals.testCoalesceAccessor.block block (parent: optionals.testCoalesceAccessor)
	VARS
	__name_1975 -> __name_1975: Opt[{name: string, age: i64}]

scope 2140 ability_impl ability_impl (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2141 ability_impl ability_impl (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Inner -> string({buffer: Buffer[char]({len: u64, data: char*})})
	Self -> Opt[string({buffer: Buffer[char]({len: u64, data: char*})})](enum None | Some(string({buffer: Buffer[char]({len: u64, data: char*})})))

scope 2142 ability_impl.Unwrap_Opt[string]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2540 -> __match_subject_2540: Opt[string]
	self -> self: Opt[string]

scope 2143 ability_impl.Unwrap_Opt[string]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[string]

scope 2144 ability_impl.Unwrap_Opt[string]_make fn (parent: ability_impl)
	VARS
	t -> t: string

scope 2145 optionals.testComplex.block block (parent: optionals.testComplex)
	VARS
	my_x -> my_x: i64
	__if_target_1980 -> __if_target_1980: Opt[i64]
	__payload_Some_1981 -> __payload_Some_1981: i64

scope 2146 optionals.testComplex.block.block block (parent: optionals.testComplex.block)

scope 2147 optionals.testComplex.block block (parent: optionals.testComplex)

scope 2148 optionals.testComplex.block block (parent: optionals.testComplex)
	VARS
	__list_literal_1984 -> __list_literal_1984: List[Opt[WeirdPoint]]*

scope 2149 List.withCapacity_spec_Opt[WeirdPoint]_13 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2150 List.push_spec_Opt[WeirdPoint]_12 fn (parent: List)
	VARS
	startLength -> startLength: u64
	elem -> elem: Opt[WeirdPoint]
	self -> self: List[Opt[WeirdPoint]]*
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2151 optionals.testComplex.block block (parent: optionals.testComplex)
	VARS
	__if_target_1990 -> __if_target_1990: Opt[WeirdPoint]
	__payload_Some_1991 -> __payload_Some_1991: WeirdPoint
	a -> a: WeirdPoint

scope 2152 List.get_spec_Opt[WeirdPoint]_3 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2153 optionals.testComplex.block.block block (parent: optionals.testComplex.block)

scope 2154 optionals.optElseOperator.block block (parent: optionals.optElseOperator)
	VARS
	__optelse_lhs_1993 -> __optelse_lhs_1993: Opt[i64]

scope 2155 optionals.optElseOperator.block block (parent: optionals.optElseOperator)
	VARS
	__optelse_lhs_1995 -> __optelse_lhs_1995: Opt[i64]

scope 2156 sizeOf_spec_i64_5 fn (parent: )
	TYPES
	T -> i64

scope 2157 ability_impl ability_impl (parent: )
	TYPES
	T -> u64

scope 2158 ability_impl ability_impl (parent: )
	TYPES
	T -> u64
	Inner -> u64
	Self -> Opt[u64](enum None | Some(u64))

scope 2159 ability_impl.Unwrap_Opt[u64]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2553 -> __match_subject_2553: Opt[u64]
	self -> self: Opt[u64]

scope 2160 ability_impl.Unwrap_Opt[u64]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[u64]

scope 2161 ability_impl.Unwrap_Opt[u64]_make fn (parent: ability_impl)
	VARS
	t -> t: u64

scope 2162 string_interp_test.Show_impl_{name: string, weight: i64}.Show_{name: string, weight: i64}_show.block block (parent: string_interp_test.Show_impl_{name: string, weight: i64}.Show_{name: string, weight: i64}_show)
	VARS
	__sb_2019 -> __sb_2019: StringBuilder

scope 2163 string_interp_test.test.block block (parent: string_interp_test.test)
	VARS
	__sb_2021 -> __sb_2021: StringBuilder

scope 2164 string_test.escape.for for (parent: string_test.escape)
	VARS
	__yieldedColl_2027 -> __yieldedColl_2027: List[u8]*
	__iter_2024 -> __iter_2024: BufferIterator[char]*
	itIndex -> mut itIndex: u64

scope 2165 string_test.escape.for.block block (parent: string_test.escape.for)
	VARS
	__next_2025 -> __next_2025: Opt[char]

scope 2166 string_test.escape.for.block.block block (parent: string_test.escape.for.block)
	VARS
	__block_expr_val_2028 -> __block_expr_val_2028: u8
	c -> c: char

scope 2167 string_test.escape.for.block.block block (parent: string_test.escape.for.block)

scope 2168 string_test.escape.block block (parent: string_test.escape)
	VARS
	__list_literal_2030 -> __list_literal_2030: List[u8]*

scope 2169 string_test.test.block block (parent: string_test.test)
	VARS
	__sb_2033 -> __sb_2033: StringBuilder

scope 2170 string_test.test.block block (parent: string_test.test)
	VARS
	__sb_2034 -> __sb_2034: StringBuilder

scope 2171 string_test.test.block block (parent: string_test.test)
	VARS
	__list_literal_2035 -> __list_literal_2035: List[string]*

scope 2172 string_test.test.block block (parent: string_test.test)
	VARS
	__list_literal_2037 -> __list_literal_2037: List[string]*

scope 2173 string_test.test.block block (parent: string_test.test)
	VARS
	__list_literal_2039 -> __list_literal_2039: List[string]*

scope 2174 string_test.test.block block (parent: string_test.test)
	VARS
	__list_literal_2040 -> __list_literal_2040: List[string]*

scope 2175 string_test.test.block block (parent: string_test.test)
	VARS
	__list_literal_2041 -> __list_literal_2041: List[string]*

scope 2176 string_test.test.block block (parent: string_test.test)
	VARS
	__list_literal_2042 -> __list_literal_2042: List[string]*

scope 2177 string_test.test.block block (parent: string_test.test)
	VARS
	__list_literal_2043 -> __list_literal_2043: List[string]*

scope 2178 string_test.test.block block (parent: string_test.test)
	VARS
	__sb_2044 -> __sb_2044: StringBuilder

scope 2179 string_test.test.block block (parent: string_test.test)
	VARS
	__sb_2045 -> __sb_2045: StringBuilder

scope 2180 string_test.test.block block (parent: string_test.test)

scope 2181 string_test.test.block.match_arm match_arm (parent: string_test.test.block)

scope 2182 string_test.test.block.match_arm match_arm (parent: string_test.test.block)

scope 2183 struct_anon_nomethod.test.block block (parent: struct_anon_nomethod.test)

scope 2184 struct_anon_nomethod.test.block.match_arm match_arm (parent: struct_anon_nomethod.test.block)
	VARS
	__payload_Some_2058 -> __payload_Some_2058: string

scope 2185 struct_anon_nomethod.test.block.match_arm match_arm (parent: struct_anon_nomethod.test.block)

scope 2186 struct_composition.test.block block (parent: struct_composition.test)

scope 2187 struct_composition.test.block.match_arm match_arm (parent: struct_composition.test.block)
	VARS
	__field_text_2061 -> __field_text_2061: string

scope 2188 struct_composition.test.block.match_arm match_arm (parent: struct_composition.test.block)

scope 2189 struct_composition.test.block block (parent: struct_composition.test)

scope 2190 struct_composition.test.block.match_arm match_arm (parent: struct_composition.test.block)
	VARS
	__field_height_2064 -> __field_height_2064: i64
	__field_width_2063 -> __field_width_2063: i64

scope 2191 struct_composition.test.block.match_arm match_arm (parent: struct_composition.test.block)

scope 2192 sizeOf_spec_Text_6 fn (parent: )
	TYPES
	T -> Text({text: string({buffer: Buffer[char]({len: u64, data: char*})}), x: i64, y: i64, width: i64, height: i64})

scope 2193 sizeOf_spec_UserView_7 fn (parent: )
	TYPES
	T -> UserView({name: string({buffer: Buffer[char]({len: u64, data: char*})})})

scope 2194 sizeOf_spec_{name: string}_8 fn (parent: )
	TYPES
	T -> {name: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2195 ability_impl ability_impl (parent: )
	TYPES
	S -> bool
	F -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2196 ability_impl ability_impl (parent: )
	TYPES
	Self -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(bool) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))
	F -> string({buffer: Buffer[char]({len: u64, data: char*})})
	T -> bool
	E -> string({buffer: Buffer[char]({len: u64, data: char*})})
	S -> bool

scope 2197 ability_impl.Try_Result[bool, string]_makeError fn (parent: ability_impl)
	VARS
	e -> e: string

scope 2198 ability_impl.Try_Result[bool, string]_makeOk fn (parent: ability_impl)
	VARS
	t -> t: bool

scope 2199 ability_impl.Try_Result[bool, string]_isOk fn (parent: ability_impl)
	VARS
	__match_subject_2556 -> __match_subject_2556: Result[bool, string]
	self -> self: Result[bool, string]

scope 2200 ability_impl.Try_Result[bool, string]_getError fn (parent: ability_impl)
	VARS
	self -> self: Result[bool, string]

scope 2201 ability_impl.Try_Result[bool, string]_getOk fn (parent: ability_impl)
	VARS
	self -> self: Result[bool, string]

scope 2202 ability_impl ability_impl (parent: )
	TYPES
	S -> i64
	F -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2203 ability_impl ability_impl (parent: )
	TYPES
	Self -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(i64) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))
	F -> string({buffer: Buffer[char]({len: u64, data: char*})})
	T -> i64
	E -> string({buffer: Buffer[char]({len: u64, data: char*})})
	S -> i64

scope 2204 ability_impl.Try_Result[i64, string]_makeError fn (parent: ability_impl)
	VARS
	e -> e: string

scope 2205 ability_impl.Try_Result[i64, string]_makeOk fn (parent: ability_impl)
	VARS
	t -> t: i64

scope 2206 ability_impl.Try_Result[i64, string]_isOk fn (parent: ability_impl)
	VARS
	__match_subject_2564 -> __match_subject_2564: Result[i64, string]
	self -> self: Result[i64, string]

scope 2207 ability_impl.Try_Result[i64, string]_getError fn (parent: ability_impl)
	VARS
	self -> self: Result[i64, string]

scope 2208 ability_impl.Try_Result[i64, string]_getOk fn (parent: ability_impl)
	VARS
	self -> self: Result[i64, string]

scope 2209 try_test.fails.block block (parent: try_test.fails)
	VARS
	__try_value_2076 -> __try_value_2076: Result[i64, string]

scope 2210 ability_impl ability_impl (parent: )
	TYPES
	S -> i32
	F -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2211 ability_impl ability_impl (parent: )
	TYPES
	Self -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})](enum Ok(i32) | Err(string({buffer: Buffer[char]({len: u64, data: char*})})))
	F -> string({buffer: Buffer[char]({len: u64, data: char*})})
	T -> i32
	E -> string({buffer: Buffer[char]({len: u64, data: char*})})
	S -> i32

scope 2212 ability_impl.Try_Result[i32, string]_makeError fn (parent: ability_impl)
	VARS
	e -> e: string

scope 2213 ability_impl.Try_Result[i32, string]_makeOk fn (parent: ability_impl)
	VARS
	t -> t: i32

scope 2214 ability_impl.Try_Result[i32, string]_isOk fn (parent: ability_impl)
	VARS
	__match_subject_2572 -> __match_subject_2572: Result[i32, string]
	self -> self: Result[i32, string]

scope 2215 ability_impl.Try_Result[i32, string]_getError fn (parent: ability_impl)
	VARS
	self -> self: Result[i32, string]

scope 2216 ability_impl.Try_Result[i32, string]_getOk fn (parent: ability_impl)
	VARS
	self -> self: Result[i32, string]

scope 2217 try_test.run.block block (parent: try_test.run)
	VARS
	__try_value_2083 -> __try_value_2083: Result[i64, string]

scope 2218 try_test.run.block block (parent: try_test.run)
	VARS
	__try_value_2085 -> __try_value_2085: Foo

scope 2219 try_test.run.clos clos (parent: try_test.run)
	VARS
	i -> i: bool
	b -> b: bool

scope 2220 try_test.run.clos.block block (parent: try_test.run.clos)
	VARS
	__try_value_2088 -> __try_value_2088: Result[bool, string]

scope 2221 try_test.run.block block (parent: try_test.run)

scope 2222 try_test.run.block.match_arm match_arm (parent: try_test.run.block)
	VARS
	__payload_Err_2094 -> __payload_Err_2094: string

scope 2223 try_test.run.block.match_arm match_arm (parent: try_test.run.block)

scope 2224 sizeOf_spec_string_9 fn (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2225 sizeOfStride_spec_string_3 fn (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2226 alignOf_spec_string_3 fn (parent: )
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2227 sizeOf_spec_{x: u64, c: u8}_10 fn (parent: )
	TYPES
	T -> {x: u64, c: u8}

scope 2228 sizeOfStride_spec_{x: u64, c: u8}_4 fn (parent: )
	TYPES
	T -> {x: u64, c: u8}

scope 2229 types.typeId_spec_u32_2 fn (parent: types)
	TYPES
	T -> u32

scope 2230 types.typeId_spec_bool_3 fn (parent: types)
	TYPES
	T -> bool

scope 2231 opaque_type_01.test.block block (parent: opaque_type_01.test)

scope 2232 opaque_type_01.test.block.match_arm match_arm (parent: opaque_type_01.test.block)
	VARS
	__payload_Some_2098 -> __payload_Some_2098: string

scope 2233 opaque_type_01.test.block.match_arm match_arm (parent: opaque_type_01.test.block)

scope 2234 opaque_type_01.test.block block (parent: opaque_type_01.test)

scope 2235 opaque_type_01.test.block.match_arm match_arm (parent: opaque_type_01.test.block)
	VARS
	__payload_Some_2101 -> __payload_Some_2101: string

scope 2236 opaque_type_01.test.block.match_arm match_arm (parent: opaque_type_01.test.block)

scope 2237 types.typeId_spec_never_4 fn (parent: types)
	TYPES
	T -> never

scope 2238 while_test.whileSimple.block block (parent: while_test.whileSimple)

scope 2239 while_test.whileSimple.block.while while (parent: while_test.whileSimple.block)

scope 2240 while_test.whileReturn.block block (parent: while_test.whileReturn)

scope 2241 while_test.whileReturn.block.while while (parent: while_test.whileReturn.block)

scope 2242 while_test.whileNested.block block (parent: while_test.whileNested)

scope 2243 while_test.whileNested.block.while while (parent: while_test.whileNested.block)

scope 2244 while_test.whileNested.block.while.block block (parent: while_test.whileNested.block.while)

scope 2245 while_test.whileNested.block.while.block.while while (parent: while_test.whileNested.block.while.block)

scope 2246 while_test.whileReturnClosure.block block (parent: while_test.whileReturnClosure)

scope 2247 while_test.whileReturnClosure.block.while while (parent: while_test.whileReturnClosure.block)
	VARS
	s -> s: lambda#expr#6269(fn((env){}*) -> i64)

scope 2248 while_test.whileReturnClosure.block.while.clos clos (parent: while_test.whileReturnClosure.block.while)

scope 2249 while_test.whileBreak.block block (parent: while_test.whileBreak)

scope 2250 while_test.whileBreak.block.while while (parent: while_test.whileBreak.block)

scope 2251 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2252 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2253 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2254 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2255 ability_impl.Iterator_BufferIterator[char]_next.block block (parent: ability_impl.Iterator_BufferIterator[char]_next)

scope 2256 ability_impl.Iterator_BufferIterator[char]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[char]_next.block)
	VARS
	item -> item: char

scope 2257 some_spec_char_9 fn (parent: )
	VARS
	value -> value: char
	TYPES
	T -> char

scope 2258 Buffer._allocate_spec_string_2 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: string*
	ptr -> ptr: Pointer
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2259 BufferIterator.fromBuffer_spec_Pointer_2 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[Pointer]
	TYPES
	T -> Pointer

scope 2260 ability_impl.Iterator_BufferIterator[Pointer]_next.block block (parent: ability_impl.Iterator_BufferIterator[Pointer]_next)

scope 2261 ability_impl.Iterator_BufferIterator[Pointer]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[Pointer]_next.block)
	VARS
	item -> item: Pointer

scope 2262 some_spec_Pointer_10 fn (parent: )
	VARS
	value -> value: Pointer
	TYPES
	T -> Pointer

scope 2263 ability_impl.Unwrap_Opt[Pointer]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Pointer]_hasValue)

scope 2264 ability_impl.Unwrap_Opt[Pointer]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Pointer]_hasValue.block)
	VARS
	__payload_Some_2124 -> __payload_Some_2124: Pointer

scope 2265 ability_impl.Unwrap_Opt[Pointer]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Pointer]_hasValue.block)

scope 2266 Opt.get_spec_Pointer_2 fn (parent: Opt)
	VARS
	self -> self: Opt[Pointer]
	TYPES
	T -> Pointer

scope 2267 Buffer.getRef_spec_Pointer_1 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Pointer]
	TYPES
	T -> Pointer

scope 2268 List.push_spec_string_1.block block (parent: List.push_spec_string_1)

scope 2269 List.cap_spec_string_3 fn (parent: List)
	VARS
	self -> self: List[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2270 List.push_spec_string_1.block.block block (parent: List.push_spec_string_1.block)

scope 2271 List._grow_spec_string_1 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[string]*
	elemSize -> elemSize: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2272 List.set_spec_string_1 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[string]
	elem -> elem: string
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2273 Opt.isSome_spec_Pointer_1.block block (parent: Opt.isSome_spec_Pointer_1)

scope 2274 Opt.isSome_spec_Pointer_1.block.match_arm match_arm (parent: Opt.isSome_spec_Pointer_1.block)
	VARS
	__payload_Some_2136 -> __payload_Some_2136: Pointer

scope 2275 Opt.isSome_spec_Pointer_1.block.match_arm match_arm (parent: Opt.isSome_spec_Pointer_1.block)

scope 2276 Buffer.slice_spec_string_3 fn (parent: Buffer)
	VARS
	self -> self: Buffer[string]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: string*
	end -> end: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2277 Buffer._allocate_spec_u8_1.block block (parent: Buffer._allocate_spec_u8_1)

scope 2278 Buffer._allocate_spec_u8_1.block.block block (parent: Buffer._allocate_spec_u8_1.block)

scope 2279 Buffer._allocate_spec_u8_1.block block (parent: Buffer._allocate_spec_u8_1)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2280 Buffer.bufferLenBytes_spec_u8_4 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> u8

scope 2281 Buffer.getRef_spec_u8_2 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 2282 Buffer._allocate_spec_char_3 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: char*
	ptr -> ptr: Pointer
	TYPES
	T -> char

scope 2283 List.push_spec_char_2.block block (parent: List.push_spec_char_2)

scope 2284 List.cap_spec_char_4 fn (parent: List)
	VARS
	self -> self: List[char]
	TYPES
	T -> char

scope 2285 List.push_spec_char_2.block.block block (parent: List.push_spec_char_2.block)

scope 2286 List._grow_spec_char_2 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[char]*
	elemSize -> elemSize: u64
	TYPES
	T -> char

scope 2287 List.set_spec_char_2 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[char]
	elem -> elem: char
	TYPES
	T -> char

scope 2288 List.cloned_spec_char_3 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[char]
	self -> self: List[char]
	TYPES
	T -> char

scope 2289 List.reverse_spec_char_1.block block (parent: List.reverse_spec_char_1)

scope 2290 List.reverse_spec_char_1.block.while while (parent: List.reverse_spec_char_1.block)
	VARS
	j -> j: u64

scope 2291 List.swap_spec_char_2 fn (parent: List)
	VARS
	aRef -> aRef: char*
	self -> self: List[char]*
	bValue -> bValue: char
	indexB -> indexB: u64
	bRef -> bRef: char*
	indexA -> indexA: u64
	TYPES
	T -> char

scope 2292 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue)

scope 2293 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)
	VARS
	__payload_Some_2164 -> __payload_Some_2164: Result[S, F].Err(F)

scope 2294 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)

scope 2295 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue)

scope 2296 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)
	VARS
	__payload_Some_2166 -> __payload_Some_2166: Result[S, F].Ok(S)

scope 2297 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)

scope 2298 ability_impl.Try_Result[S, F]_isOk.block block (parent: ability_impl.Try_Result[S, F]_isOk)

scope 2299 ability_impl.Try_Result[S, F]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[S, F]_isOk.block)
	VARS
	__payload_Ok_2168 -> __payload_Ok_2168: S

scope 2300 ability_impl.Try_Result[S, F]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[S, F]_isOk.block)

scope 2301 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)

scope 2302 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)
	Inner -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)
	Self -> Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Err(Unwrap_impl_Result[S, F].'F)))

scope 2303 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]
	__match_subject_2618 -> __match_subject_2618: Opt[Result[S, F].Err(F)]

scope 2304 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Err(F)]

scope 2305 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Err(F)

scope 2306 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)

scope 2307 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)
	Inner -> Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)
	Self -> Opt[Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)](enum None | Some(Result[Unwrap_impl_Result[S, F].'S, Unwrap_impl_Result[S, F].'F].Ok(Unwrap_impl_Result[S, F].'S)))

scope 2308 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2620 -> __match_subject_2620: Opt[Result[S, F].Ok(S)]
	self -> self: Opt[Result[S, F].Ok(S)]

scope 2309 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[S, F].Ok(S)]

scope 2310 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[S, F].Ok(S)

scope 2311 sizeOfStride_spec_T_5 fn (parent: )
	TYPES
	T -> Buffer._allocate.'T

scope 2312 sizeOfStride_spec_T_6 fn (parent: )
	TYPES
	T -> Buffer._copyFrom.'T

scope 2313 sizeOfStride_spec_T_7 fn (parent: )
	TYPES
	T -> Buffer.lenBytes.'T

scope 2314 Buffer.bufferLenBytes_spec_char_5 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> char

scope 2315 Buffer.bufferLenBytes_spec_i64_6 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> i64

scope 2316 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2317 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2318 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 2319 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_2180 -> __payload_Some_2180: T

scope 2320 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 2321 ability_impl ability_impl (parent: )
	TYPES
	T -> List.sort.'T

scope 2322 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[List.sort.'T]({len: u64, data: List.sort.'T*})
	Item -> List.sort.'T
	T -> List.sort.'T
	I -> BufferIterator[List.sort.'T]({buf: Buffer[List.sort.'T]({len: u64, data: List.sort.'T*}), pos: u64})

scope 2323 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 2324 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2325 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2326 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 2327 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_2185 -> __payload_Some_2185: T

scope 2328 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 2329 ability_impl ability_impl (parent: )
	TYPES
	T -> List.join.'T

scope 2330 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[List.join.'T]({len: u64, data: List.join.'T*})
	Item -> List.join.'T
	T -> List.join.'T
	I -> BufferIterator[List.join.'T]({buf: Buffer[List.join.'T]({len: u64, data: List.join.'T*}), pos: u64})

scope 2331 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 2332 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2333 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2334 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 2335 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_2190 -> __payload_Some_2190: T

scope 2336 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 2337 ability_impl ability_impl (parent: )
	TYPES
	T -> List.map.'T

scope 2338 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[List.map.'T]({len: u64, data: List.map.'T*})
	Item -> List.map.'T
	T -> List.map.'T
	I -> BufferIterator[List.map.'T]({buf: Buffer[List.map.'T]({len: u64, data: List.map.'T*}), pos: u64})

scope 2339 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 2340 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2341 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2342 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 2343 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_2195 -> __payload_Some_2195: T

scope 2344 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 2345 ability_impl ability_impl (parent: )
	TYPES
	T -> List.flatMap.'T

scope 2346 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*})
	Item -> List.flatMap.'T
	T -> List.flatMap.'T
	I -> BufferIterator[List.flatMap.'T]({buf: Buffer[List.flatMap.'T]({len: u64, data: List.flatMap.'T*}), pos: u64})

scope 2347 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 2348 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2349 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2350 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 2351 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_2200 -> __payload_Some_2200: T

scope 2352 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 2353 ability_impl ability_impl (parent: )
	TYPES
	T -> List.filter.'T

scope 2354 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[List.filter.'T]({len: u64, data: List.filter.'T*})
	Item -> List.filter.'T
	T -> List.filter.'T
	I -> BufferIterator[List.filter.'T]({buf: Buffer[List.filter.'T]({len: u64, data: List.filter.'T*}), pos: u64})

scope 2355 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 2356 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2357 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2358 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 2359 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_2205 -> __payload_Some_2205: T

scope 2360 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 2361 List.reserve_spec_char_1 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[char]*
	newBuffer -> newBuffer: Buffer[char]
	TYPES
	T -> char

scope 2362 ability_impl ability_impl (parent: )
	TYPES
	T -> char

scope 2363 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[char]({len: u64, data: char*})
	Item -> char
	T -> char
	I -> BufferIterator[char]({buf: Buffer[char]({len: u64, data: char*}), pos: u64})

scope 2364 ability_impl.Iterable_Buffer[char]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[char]

scope 2365 List.appendBuffer_spec_char_1.for for (parent: List.appendBuffer_spec_char_1)
	VARS
	__iter_2210 -> __iter_2210: BufferIterator[char]*
	itIndex -> mut itIndex: u64

scope 2366 List.appendBuffer_spec_char_1.for.block block (parent: List.appendBuffer_spec_char_1.for)
	VARS
	__next_2211 -> __next_2211: Opt[char]

scope 2367 List.appendBuffer_spec_char_1.for.block.block block (parent: List.appendBuffer_spec_char_1.for.block)
	VARS
	__block_expr_val_2213 -> __block_expr_val_2213: unit
	e -> e: char

scope 2368 List.appendBuffer_spec_char_1.for.block.block block (parent: List.appendBuffer_spec_char_1.for.block)

scope 2369 List.push_spec_u8_3.block block (parent: List.push_spec_u8_3)

scope 2370 List.cap_spec_u8_5 fn (parent: List)
	VARS
	self -> self: List[u8]
	TYPES
	T -> u8

scope 2371 List.push_spec_u8_3.block.block block (parent: List.push_spec_u8_3.block)

scope 2372 List._grow_spec_u8_3 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[u8]*
	elemSize -> elemSize: u64
	TYPES
	T -> u8

scope 2373 List.set_spec_u8_3 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[u8]
	elem -> elem: u8
	TYPES
	T -> u8

scope 2374 List.reserve_spec_u8_2 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[u8]*
	newBuffer -> newBuffer: Buffer[u8]
	TYPES
	T -> u8

scope 2375 ability_impl ability_impl (parent: )
	TYPES
	T -> u8

scope 2376 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[u8]({len: u64, data: u8*})
	Item -> u8
	T -> u8
	I -> BufferIterator[u8]({buf: Buffer[u8]({len: u64, data: u8*}), pos: u64})

scope 2377 ability_impl.Iterable_Buffer[u8]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[u8]

scope 2378 List.appendBuffer_spec_u8_2.for for (parent: List.appendBuffer_spec_u8_2)
	VARS
	__iter_2224 -> __iter_2224: BufferIterator[u8]*
	itIndex -> mut itIndex: u64

scope 2379 List.appendBuffer_spec_u8_2.for.block block (parent: List.appendBuffer_spec_u8_2.for)
	VARS
	__next_2231 -> __next_2231: Opt[u8]

scope 2380 List.appendBuffer_spec_u8_2.for.block.block block (parent: List.appendBuffer_spec_u8_2.for.block)
	VARS
	__block_expr_val_2236 -> __block_expr_val_2236: unit
	e -> e: u8

scope 2381 ability_impl ability_impl (parent: )
	TYPES
	T -> u8

scope 2382 ability_impl ability_impl (parent: )
	TYPES
	T -> u8
	Self -> BufferIterator[u8]({buf: Buffer[u8]({len: u64, data: u8*}), pos: u64})
	Item -> u8

scope 2383 ability_impl.Iterator_BufferIterator[u8]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[u8]*

scope 2384 ability_impl.Iterator_BufferIterator[u8]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[u8]

scope 2385 ability_impl.Iterator_BufferIterator[u8]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[u8]*

scope 2386 ability_impl.Iterator_BufferIterator[u8]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[u8]*

scope 2387 ability_impl ability_impl (parent: )
	TYPES
	T -> u8

scope 2388 ability_impl ability_impl (parent: )
	TYPES
	T -> u8
	Inner -> u8
	Self -> Opt[u8](enum None | Some(u8))

scope 2389 ability_impl.Unwrap_Opt[u8]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[u8]
	__match_subject_2633 -> __match_subject_2633: Opt[u8]

scope 2390 ability_impl.Unwrap_Opt[u8]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[u8]

scope 2391 ability_impl.Unwrap_Opt[u8]_make fn (parent: ability_impl)
	VARS
	t -> t: u8

scope 2392 Opt.isSome_spec_u8_10 fn (parent: Opt)
	VARS
	__match_subject_2636 -> __match_subject_2636: Opt[u8]
	self -> self: Opt[u8]
	TYPES
	T -> u8

scope 2393 List.appendBuffer_spec_u8_2.for.block.block block (parent: List.appendBuffer_spec_u8_2.for.block)

scope 2394 Buffer.slice_spec_u8_4 fn (parent: Buffer)
	VARS
	self -> self: Buffer[u8]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: u8*
	end -> end: u64
	TYPES
	T -> u8

scope 2395 ability_impl ability_impl (parent: )
	TYPES
	T -> Show_impl_List[T].'T

scope 2396 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*})
	Item -> Show_impl_List[T].'T
	T -> Show_impl_List[T].'T
	I -> BufferIterator[Show_impl_List[T].'T]({buf: Buffer[Show_impl_List[T].'T]({len: u64, data: Show_impl_List[T].'T*}), pos: u64})

scope 2397 ability_impl.Iterable_Buffer[T]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[T]

scope 2398 ability_impl.Iterator_BufferIterator[T]_next.block block (parent: ability_impl.Iterator_BufferIterator[T]_next)

scope 2399 ability_impl.Iterator_BufferIterator[T]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[T]_next.block)
	VARS
	item -> item: T

scope 2400 ability_impl.Unwrap_Opt[T]_hasValue.block block (parent: ability_impl.Unwrap_Opt[T]_hasValue)

scope 2401 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)
	VARS
	__payload_Some_2245 -> __payload_Some_2245: T

scope 2402 ability_impl.Unwrap_Opt[T]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[T]_hasValue.block)

scope 2403 Buffer.getRef_spec_char_3 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 2404 Buffer._copyFrom_spec_char_1 fn (parent: Buffer)
	VARS
	source -> source: Buffer[char]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[char]
	TYPES
	T -> char

scope 2405 List.withCapacity_spec_List[char]_14 fn (parent: List)
	VARS
	cap -> cap: u64
	buffer -> buffer: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2406 ability_impl.Unwrap_Opt[char]_hasValue.block block (parent: ability_impl.Unwrap_Opt[char]_hasValue)

scope 2407 ability_impl.Unwrap_Opt[char]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[char]_hasValue.block)
	VARS
	__payload_Some_2261 -> __payload_Some_2261: char

scope 2408 ability_impl.Unwrap_Opt[char]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[char]_hasValue.block)

scope 2409 Opt.get_spec_char_3 fn (parent: Opt)
	VARS
	self -> self: Opt[char]
	TYPES
	T -> char

scope 2410 List.push_spec_List[char]_4.block block (parent: List.push_spec_List[char]_4)

scope 2411 List.cap_spec_List[char]_6 fn (parent: List)
	VARS
	self -> self: List[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2412 List.push_spec_List[char]_4.block.block block (parent: List.push_spec_List[char]_4.block)

scope 2413 List._grow_spec_List[char]_4 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[List[char]]*
	elemSize -> elemSize: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2414 List.set_spec_List[char]_4 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[List[char]]
	elem -> elem: List[char]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2415 Opt.isSome_spec_char_2.block block (parent: Opt.isSome_spec_char_2)

scope 2416 Opt.isSome_spec_char_2.block.match_arm match_arm (parent: Opt.isSome_spec_char_2.block)
	VARS
	__payload_Some_2270 -> __payload_Some_2270: char

scope 2417 Opt.isSome_spec_char_2.block.match_arm match_arm (parent: Opt.isSome_spec_char_2.block)

scope 2418 List.toBuffer_spec_List[char]_5 fn (parent: List)
	VARS
	self -> self: List[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2419 ability_impl ability_impl (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2420 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*})
	Item -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})
	I -> BufferIterator[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({buf: Buffer[List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})*}), pos: u64})

scope 2421 ability_impl.Iterable_Buffer[List[char]]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[List[char]]

scope 2422 ability_impl.Iterator_BufferIterator[List[char]]_next.block block (parent: ability_impl.Iterator_BufferIterator[List[char]]_next)

scope 2423 ability_impl.Iterator_BufferIterator[List[char]]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[List[char]]_next.block)
	VARS
	item -> item: List[char]

scope 2424 Buffer.get_spec_List[char]_5 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[List[char]]
	tRef -> tRef: List[char]*
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2425 some_spec_List[char]_11 fn (parent: )
	VARS
	value -> value: List[char]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2426 ability_impl.Unwrap_Opt[List[char]]_hasValue.block block (parent: ability_impl.Unwrap_Opt[List[char]]_hasValue)

scope 2427 ability_impl.Unwrap_Opt[List[char]]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[List[char]]_hasValue.block)
	VARS
	__payload_Some_2279 -> __payload_Some_2279: List[char]

scope 2428 ability_impl.Unwrap_Opt[List[char]]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[List[char]]_hasValue.block)

scope 2429 Opt.get_spec_List[char]_4 fn (parent: Opt)
	VARS
	self -> self: Opt[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2430 Opt.isSome_spec_List[char]_3.block block (parent: Opt.isSome_spec_List[char]_3)

scope 2431 Opt.isSome_spec_List[char]_3.block.match_arm match_arm (parent: Opt.isSome_spec_List[char]_3.block)
	VARS
	__payload_Some_2282 -> __payload_Some_2282: List[char]

scope 2432 Opt.isSome_spec_List[char]_3.block.match_arm match_arm (parent: Opt.isSome_spec_List[char]_3.block)

scope 2433 Buffer.slice_spec_char_1.block block (parent: Buffer.slice_spec_char_1)

scope 2434 Buffer.slice_spec_char_1.block.block block (parent: Buffer.slice_spec_char_1.block)

scope 2435 Buffer.empty_spec_char_2 fn (parent: Buffer)
	TYPES
	T -> char

scope 2436 Buffer.slice_spec_char_1.block block (parent: Buffer.slice_spec_char_1)

scope 2437 Buffer.slice_spec_char_1.block.block block (parent: Buffer.slice_spec_char_1.block)

scope 2438 Buffer.slice_spec_char_1.block.block.block block (parent: Buffer.slice_spec_char_1.block.block)
	VARS
	__sb_2283 -> __sb_2283: StringBuilder

scope 2439 Buffer.slice_spec_char_1.block block (parent: Buffer.slice_spec_char_1)

scope 2440 Buffer._allocate_spec_enum Char(char) | String(string)_4 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: enum Char(char) | String(string)*
	ptr -> ptr: Pointer
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2441 sizeOf_spec_List[enum Char(char) | String(string)]_11 fn (parent: )
	TYPES
	T -> List[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, buffer: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})})

scope 2442 List.push_spec_enum Char(char) | String(string)_5.block block (parent: List.push_spec_enum Char(char) | String(string)_5)

scope 2443 List.cap_spec_enum Char(char) | String(string)_7 fn (parent: List)
	VARS
	self -> self: List[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2444 List.push_spec_enum Char(char) | String(string)_5.block.block block (parent: List.push_spec_enum Char(char) | String(string)_5.block)

scope 2445 List._grow_spec_enum Char(char) | String(string)_5 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[enum Char(char) | String(string)]*
	elemSize -> elemSize: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2446 List.set_spec_enum Char(char) | String(string)_5 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[enum Char(char) | String(string)]
	elem -> elem: enum Char(char) | String(string)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2447 List.toBuffer_spec_enum Char(char) | String(string)_6 fn (parent: List)
	VARS
	self -> self: List[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2448 ability_impl ability_impl (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2449 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*})
	Item -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))
	I -> BufferIterator[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({buf: Buffer[enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))]({len: u64, data: enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))*}), pos: u64})

scope 2450 ability_impl.Iterable_Buffer[enum Char(char) | String(string)]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[enum Char(char) | String(string)]

scope 2451 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next.block block (parent: ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next)

scope 2452 ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[enum Char(char) | String(string)]_next.block)
	VARS
	item -> item: enum Char(char) | String(string)

scope 2453 Buffer.get_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	tRef -> tRef: enum Char(char) | String(string)*
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2454 some_spec_enum Char(char) | String(string)_12 fn (parent: )
	VARS
	value -> value: enum Char(char) | String(string)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2455 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue)

scope 2456 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block)
	VARS
	__payload_Some_2305 -> __payload_Some_2305: enum Char(char) | String(string)

scope 2457 ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[enum Char(char) | String(string)]_hasValue.block)

scope 2458 Opt.get_spec_enum Char(char) | String(string)_5 fn (parent: Opt)
	VARS
	self -> self: Opt[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2459 Opt.isSome_spec_enum Char(char) | String(string)_4.block block (parent: Opt.isSome_spec_enum Char(char) | String(string)_4)

scope 2460 Opt.isSome_spec_enum Char(char) | String(string)_4.block.match_arm match_arm (parent: Opt.isSome_spec_enum Char(char) | String(string)_4.block)
	VARS
	__payload_Some_2308 -> __payload_Some_2308: enum Char(char) | String(string)

scope 2461 Opt.isSome_spec_enum Char(char) | String(string)_4.block.match_arm match_arm (parent: Opt.isSome_spec_enum Char(char) | String(string)_4.block)

scope 2462 Buffer._allocate_spec_Arena_5 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: Arena*
	ptr -> ptr: Pointer
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2463 List.push_spec_Arena_6.block block (parent: List.push_spec_Arena_6)

scope 2464 List.cap_spec_Arena_8 fn (parent: List)
	VARS
	self -> self: List[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2465 List.push_spec_Arena_6.block.block block (parent: List.push_spec_Arena_6.block)

scope 2466 List._grow_spec_Arena_6 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[Arena]*
	elemSize -> elemSize: u64
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2467 List.set_spec_Arena_6 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Arena]
	elem -> elem: Arena
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2468 Buffer._allocate_spec_ObjectPool_6 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: ObjectPool*
	ptr -> ptr: Pointer
	TYPES
	T -> ObjectPool({})

scope 2469 Buffer.getRef_spec_Arena_4 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2470 sizeOf_spec_bool_12 fn (parent: )
	TYPES
	T -> bool

scope 2471 alignOf_spec_bool_4 fn (parent: )
	TYPES
	T -> bool

scope 2472 sizeOf_spec_{x: i64, y: i64}_13 fn (parent: )
	TYPES
	T -> {x: i64, y: i64}

scope 2473 alignOf_spec_{x: i64, y: i64}_5 fn (parent: )
	TYPES
	T -> {x: i64, y: i64}

scope 2474 ability_impl.Unwrap_Opt[Yes(i64)*]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Yes(i64)*]_hasValue)

scope 2475 ability_impl.Unwrap_Opt[Yes(i64)*]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Yes(i64)*]_hasValue.block)
	VARS
	__payload_Some_2333 -> __payload_Some_2333: Yes(i64)*

scope 2476 ability_impl.Unwrap_Opt[Yes(i64)*]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Yes(i64)*]_hasValue.block)

scope 2477 Opt.get_spec_Yes(i64)*_6 fn (parent: Opt)
	VARS
	self -> self: Opt[Yes(i64)*]
	TYPES
	T -> Yes(i64)*

scope 2478 Buffer._allocate_spec_i64_7 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: i64*
	ptr -> ptr: Pointer
	TYPES
	T -> i64

scope 2479 Buffer.first_spec_i64_1.block block (parent: Buffer.first_spec_i64_1)

scope 2480 Buffer.firstRef_spec_i64_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 2481 Buffer.first_spec_i64_1.block.match_arm match_arm (parent: Buffer.first_spec_i64_1.block)

scope 2482 Buffer.first_spec_i64_1.block.match_arm match_arm (parent: Buffer.first_spec_i64_1.block)
	VARS
	firstRef -> firstRef: i64*
	__payload_Some_2338 -> __payload_Some_2338: i64*

scope 2483 Opt.opt_equals_spec_i64_1 fn (parent: Opt)
	VARS
	a -> a: Opt[i64]
	b -> b: Opt[i64]
	TYPES
	T -> i64

scope 2484 Buffer.last_spec_i64_1.block block (parent: Buffer.last_spec_i64_1)

scope 2485 Buffer.lastRef_spec_i64_1 fn (parent: Buffer)
	VARS
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 2486 Buffer.last_spec_i64_1.block.match_arm match_arm (parent: Buffer.last_spec_i64_1.block)

scope 2487 Buffer.last_spec_i64_1.block.match_arm match_arm (parent: Buffer.last_spec_i64_1.block)
	VARS
	lastRef -> lastRef: i64*
	__payload_Some_2344 -> __payload_Some_2344: i64*

scope 2488 Buffer.filled_spec_i64_1.block block (parent: Buffer.filled_spec_i64_1)

scope 2489 Buffer.filled_spec_i64_1.block.while while (parent: Buffer.filled_spec_i64_1.block)

scope 2490 Buffer.getRef_spec_i64_5 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 2491 Buffer.slice_spec_i64_2.block block (parent: Buffer.slice_spec_i64_2)

scope 2492 Buffer.slice_spec_i64_2.block.block block (parent: Buffer.slice_spec_i64_2.block)

scope 2493 Buffer.slice_spec_i64_2.block block (parent: Buffer.slice_spec_i64_2)

scope 2494 Buffer.slice_spec_i64_2.block.block block (parent: Buffer.slice_spec_i64_2.block)

scope 2495 Buffer.slice_spec_i64_2.block.block.block block (parent: Buffer.slice_spec_i64_2.block.block)
	VARS
	__sb_2352 -> __sb_2352: StringBuilder

scope 2496 Buffer.slice_spec_i64_2.block block (parent: Buffer.slice_spec_i64_2)

scope 2497 Buffer._enlargedClone_spec_i64_2 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[i64]
	self -> self: Buffer[i64]
	TYPES
	T -> i64

scope 2498 Buffer._copyFrom_spec_i64_2 fn (parent: Buffer)
	VARS
	source -> source: Buffer[i64]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[i64]
	TYPES
	T -> i64

scope 2499 context_generic.contextB_spec_i64_1 fn (parent: context_generic)
	VARS
	t -> t: i64
	name -> name: string
	value -> value: i64
	TYPES
	T -> i64

scope 2500 sizeOf_spec_List[string]_14 fn (parent: )
	TYPES
	T -> List[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, buffer: Buffer[string({buffer: Buffer[char]({len: u64, data: char*})})]({len: u64, data: string({buffer: Buffer[char]({len: u64, data: char*})})*})})

scope 2501 ability_impl.Equals_List[string]_equals.block block (parent: ability_impl.Equals_List[string]_equals)

scope 2502 ability_impl.Equals_List[string]_equals.block block (parent: ability_impl.Equals_List[string]_equals)
	VARS
	i -> mut i: u64

scope 2503 ability_impl.Equals_List[string]_equals.block.block block (parent: ability_impl.Equals_List[string]_equals.block)

scope 2504 ability_impl.Equals_List[string]_equals.block.block.while while (parent: ability_impl.Equals_List[string]_equals.block.block)

scope 2505 ability_impl.Equals_List[string]_equals.block.block.while.block block (parent: ability_impl.Equals_List[string]_equals.block.block.while)

scope 2506 List.get_spec_string_4 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2507 ability_impl.Equals_List[string]_equals.block.block.while.block.block block (parent: ability_impl.Equals_List[string]_equals.block.block.while.block)

scope 2508 ability_impl.Unwrap_Opt[Maybe.A]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Maybe.A]_hasValue)

scope 2509 ability_impl.Unwrap_Opt[Maybe.A]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Maybe.A]_hasValue.block)
	VARS
	__payload_Some_2376 -> __payload_Some_2376: Maybe.A

scope 2510 ability_impl.Unwrap_Opt[Maybe.A]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Maybe.A]_hasValue.block)

scope 2511 Opt.get_spec_Maybe.A_7 fn (parent: Opt)
	VARS
	self -> self: Opt[Maybe.A]
	TYPES
	T -> Maybe.A

scope 2512 ability_impl.Unwrap_Opt[Maybe.B(char)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Maybe.B(char)]_hasValue)

scope 2513 ability_impl.Unwrap_Opt[Maybe.B(char)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Maybe.B(char)]_hasValue.block)
	VARS
	__payload_Some_2379 -> __payload_Some_2379: Maybe.B(char)

scope 2514 ability_impl.Unwrap_Opt[Maybe.B(char)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Maybe.B(char)]_hasValue.block)

scope 2515 Opt.get_spec_Maybe.B(char)_8 fn (parent: Opt)
	VARS
	self -> self: Opt[Maybe.B(char)]
	TYPES
	T -> Maybe.B(char)

scope 2516 ability_impl.Unwrap_Opt[Maybe.C(string)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Maybe.C(string)]_hasValue)

scope 2517 ability_impl.Unwrap_Opt[Maybe.C(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Maybe.C(string)]_hasValue.block)
	VARS
	__payload_Some_2382 -> __payload_Some_2382: Maybe.C(string)

scope 2518 ability_impl.Unwrap_Opt[Maybe.C(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Maybe.C(string)]_hasValue.block)

scope 2519 Opt.get_spec_Maybe.C(string)_9 fn (parent: Opt)
	VARS
	self -> self: Opt[Maybe.C(string)]
	TYPES
	T -> Maybe.C(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2520 ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue)

scope 2521 ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue.block)
	VARS
	__payload_Some_2385 -> __payload_Some_2385: MyResult[T, E].Ok(T)

scope 2522 ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[MyResult[T, E].Ok(T)]_hasValue.block)

scope 2523 ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue)

scope 2524 ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue.block)
	VARS
	__payload_Some_2387 -> __payload_Some_2387: MyResult[i64, string].Ok(i64)

scope 2525 ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[MyResult[i64, string].Ok(i64)]_hasValue.block)

scope 2526 Opt.get_spec_MyResult[i64, string].Ok(i64)_10 fn (parent: Opt)
	VARS
	self -> self: Opt[MyResult[i64, string].Ok(i64)]
	TYPES
	T -> MyResult[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)

scope 2527 enum_basic.MyResult.show_spec_i64string_1.block block (parent: enum_basic.MyResult.show_spec_i64string_1)

scope 2528 enum_basic.MyResult.show_spec_i64string_1.block.match_arm match_arm (parent: enum_basic.MyResult.show_spec_i64string_1.block)
	VARS
	v -> v: i64
	__payload_Ok_2390 -> __payload_Ok_2390: i64

scope 2529 enum_basic.MyResult.show_spec_i64string_1.block.match_arm.block block (parent: enum_basic.MyResult.show_spec_i64string_1.block.match_arm)

scope 2530 enum_basic.MyResult.show_spec_i64string_1.block.match_arm.block.block block (parent: enum_basic.MyResult.show_spec_i64string_1.block.match_arm.block)
	VARS
	__sb_2392 -> __sb_2392: StringBuilder

scope 2531 enum_basic.MyResult.show_spec_i64string_1.block.match_arm match_arm (parent: enum_basic.MyResult.show_spec_i64string_1.block)
	VARS
	__payload_Err_2393 -> __payload_Err_2393: string
	e -> e: string

scope 2532 enum_basic.MyResult.show_spec_i64string_1.block.match_arm.block block (parent: enum_basic.MyResult.show_spec_i64string_1.block.match_arm)

scope 2533 enum_basic.MyResult.show_spec_i64string_1.block.match_arm.block.block block (parent: enum_basic.MyResult.show_spec_i64string_1.block.match_arm.block)
	VARS
	__sb_2395 -> __sb_2395: StringBuilder

scope 2534 List.push_spec_i64_7.block block (parent: List.push_spec_i64_7)

scope 2535 List.push_spec_i64_7.block.block block (parent: List.push_spec_i64_7.block)

scope 2536 List._grow_spec_i64_7 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[i64]*
	elemSize -> elemSize: u64
	TYPES
	T -> i64

scope 2537 List.set_spec_i64_7 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[i64]
	elem -> elem: i64
	TYPES
	T -> i64

scope 2538 List.get_spec_i64_1.block block (parent: List.get_spec_i64_1)

scope 2539 List.get_spec_i64_1.block.block block (parent: List.get_spec_i64_1.block)

scope 2540 ability_impl ability_impl (parent: )
	TYPES
	T -> i64

scope 2541 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[i64]({len: u64, data: i64*})
	Item -> i64
	T -> i64
	I -> BufferIterator[i64]({buf: Buffer[i64]({len: u64, data: i64*}), pos: u64})

scope 2542 ability_impl.Iterable_Buffer[i64]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[i64]

scope 2543 ability_impl.Iterator_BufferIterator[i64]_next.block block (parent: ability_impl.Iterator_BufferIterator[i64]_next)

scope 2544 ability_impl.Iterator_BufferIterator[i64]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[i64]_next.block)
	VARS
	item -> item: i64

scope 2545 ability_impl.Unwrap_Opt[i64]_hasValue.block block (parent: ability_impl.Unwrap_Opt[i64]_hasValue)

scope 2546 ability_impl.Unwrap_Opt[i64]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[i64]_hasValue.block)
	VARS
	__payload_Some_2406 -> __payload_Some_2406: i64

scope 2547 ability_impl.Unwrap_Opt[i64]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[i64]_hasValue.block)

scope 2548 Opt.get_spec_i64_11 fn (parent: Opt)
	VARS
	self -> self: Opt[i64]
	TYPES
	T -> i64

scope 2549 Opt.isSome_spec_i64_5.block block (parent: Opt.isSome_spec_i64_5)

scope 2550 Opt.isSome_spec_i64_5.block.match_arm match_arm (parent: Opt.isSome_spec_i64_5.block)
	VARS
	__payload_Some_2409 -> __payload_Some_2409: i64

scope 2551 Opt.isSome_spec_i64_5.block.match_arm match_arm (parent: Opt.isSome_spec_i64_5.block)

scope 2552 ability_impl.Unwrap_Opt[bool]_hasValue.block block (parent: ability_impl.Unwrap_Opt[bool]_hasValue)

scope 2553 ability_impl.Unwrap_Opt[bool]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[bool]_hasValue.block)
	VARS
	__payload_Some_2413 -> __payload_Some_2413: bool

scope 2554 ability_impl.Unwrap_Opt[bool]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[bool]_hasValue.block)

scope 2555 Opt.get_spec_bool_12 fn (parent: Opt)
	VARS
	self -> self: Opt[bool]
	TYPES
	T -> bool

scope 2556 Buffer._allocate_spec_bool_8 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: bool*
	ptr -> ptr: Pointer
	TYPES
	T -> bool

scope 2557 inference.identity_spec_{value: i64}_5 fn (parent: inference)
	VARS
	value -> value: {value: i64}
	TYPES
	T -> {value: i64}

scope 2558 inference.get_spec_u32_1.block block (parent: inference.get_spec_u32_1)
	VARS
	__payload_Some_2419 -> __payload_Some_2419: u32
	u -> u: u32
	__if_target_2418 -> __if_target_2418: Opt[u32]

scope 2559 inference.getOrElse_spec_i64_1.block block (parent: inference.getOrElse_spec_i64_1)
	VARS
	a -> a: i64
	__if_target_2421 -> __if_target_2421: Opt[i64]
	__payload_Some_2422 -> __payload_Some_2422: i64

scope 2560 inference.occursCheckTest_spec_i64_1.block block (parent: inference.occursCheckTest_spec_i64_1)

scope 2561 inference.combine_spec_i64_4 fn (parent: inference)
	VARS
	a -> a: i64
	b -> b: i64
	TYPES
	T -> i64

scope 2562 inference.occursCheckTest_spec_i64_1.block.match_arm match_arm (parent: inference.occursCheckTest_spec_i64_1.block)
	VARS
	__payload_Some_2427 -> __payload_Some_2427: string

scope 2563 inference.occursCheckTest_spec_i64_1.block.match_arm match_arm (parent: inference.occursCheckTest_spec_i64_1.block)

scope 2564 Buffer._allocate_spec_Json_9 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: Json*
	ptr -> ptr: Pointer
	TYPES
	T -> Json

scope 2565 List.push_spec_Json_8.block block (parent: List.push_spec_Json_8)

scope 2566 List.cap_spec_Json_9 fn (parent: List)
	VARS
	self -> self: List[Json]
	TYPES
	T -> Json

scope 2567 List.push_spec_Json_8.block.block block (parent: List.push_spec_Json_8.block)

scope 2568 List._grow_spec_Json_8 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[Json]*
	elemSize -> elemSize: u64
	TYPES
	T -> Json

scope 2569 List.set_spec_Json_8 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Json]
	elem -> elem: Json
	TYPES
	T -> Json

scope 2570 ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_hasValue)

scope 2571 ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_hasValue.block)
	VARS
	__payload_Some_2437 -> __payload_Some_2437: Json.JsArray(List[Json])

scope 2572 ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Json.JsArray(List[Json])]_hasValue.block)

scope 2573 Opt.get_spec_Json.JsArray(List[Json])_13 fn (parent: Opt)
	VARS
	self -> self: Opt[Json.JsArray(List[Json])]
	TYPES
	T -> Json.JsArray(List[Json]({len: u64, buffer: Buffer[Json]({len: u64, data: Json*})}))

scope 2574 List.get_spec_Json_2.block block (parent: List.get_spec_Json_2)

scope 2575 List.get_spec_Json_2.block.block block (parent: List.get_spec_Json_2.block)

scope 2576 Buffer.get_spec_Json_7 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Json]
	tRef -> tRef: Json*
	TYPES
	T -> Json

scope 2577 assertEquals_spec_i64_1.block block (parent: assertEquals_spec_i64_1)

scope 2578 assertEquals_spec_i64_1.block.block block (parent: assertEquals_spec_i64_1.block)

scope 2579 assertEquals_spec_i64_1.block.block.block block (parent: assertEquals_spec_i64_1.block.block)
	VARS
	__sb_2441 -> __sb_2441: StringBuilder

scope 2580 List.toBuffer_spec_lambda_object(fn((env){}*) -> unit)_7 fn (parent: List)
	VARS
	self -> self: List[lambda_object(fn((env){}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2581 ability_impl ability_impl (parent: )
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2582 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*})
	Item -> lambda_object(fn((env){}*) -> unit)
	T -> lambda_object(fn((env){}*) -> unit)
	I -> BufferIterator[lambda_object(fn((env){}*) -> unit)]({buf: Buffer[lambda_object(fn((env){}*) -> unit)]({len: u64, data: lambda_object(fn((env){}*) -> unit)*}), pos: u64})

scope 2583 ability_impl.Iterable_Buffer[lambda_object(fn((env){}*) -> unit)]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[lambda_object(fn((env){}*) -> unit)]

scope 2584 ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next.block block (parent: ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next)

scope 2585 ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[lambda_object(fn((env){}*) -> unit)]_next.block)
	VARS
	item -> item: lambda_object(fn((env){}*) -> unit)

scope 2586 Buffer.get_spec_lambda_object(fn((env){}*) -> unit)_8 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[lambda_object(fn((env){}*) -> unit)]
	tRef -> tRef: lambda_object(fn((env){}*) -> unit)*
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2587 some_spec_lambda_object(fn((env){}*) -> unit)_13 fn (parent: )
	VARS
	value -> value: lambda_object(fn((env){}*) -> unit)
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2588 ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue)

scope 2589 ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue.block)
	VARS
	__payload_Some_2450 -> __payload_Some_2450: lambda_object(fn((env){}*) -> unit)

scope 2590 ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[lambda_object(fn((env){}*) -> unit)]_hasValue.block)

scope 2591 Opt.get_spec_lambda_object(fn((env){}*) -> unit)_14 fn (parent: Opt)
	VARS
	self -> self: Opt[lambda_object(fn((env){}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2592 Opt.isSome_spec_lambda_object(fn((env){}*) -> unit)_6.block block (parent: Opt.isSome_spec_lambda_object(fn((env){}*) -> unit)_6)

scope 2593 Opt.isSome_spec_lambda_object(fn((env){}*) -> unit)_6.block.match_arm match_arm (parent: Opt.isSome_spec_lambda_object(fn((env){}*) -> unit)_6.block)
	VARS
	__payload_Some_2453 -> __payload_Some_2453: lambda_object(fn((env){}*) -> unit)

scope 2594 Opt.isSome_spec_lambda_object(fn((env){}*) -> unit)_6.block.match_arm match_arm (parent: Opt.isSome_spec_lambda_object(fn((env){}*) -> unit)_6.block)

scope 2595 Buffer._allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: lambda_object(fn((env){counter: i64*}*) -> unit)*
	ptr -> ptr: Pointer
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2596 List.push_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block block (parent: List.push_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9)

scope 2597 List.cap_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10 fn (parent: List)
	VARS
	self -> self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2598 List.push_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block block (parent: List.push_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block)

scope 2599 List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]*
	elemSize -> elemSize: u64
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2600 List.set_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]
	elem -> elem: lambda_object(fn((env){counter: i64*}*) -> unit)
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2601 Opt.opt_equals_spec_bool_2 fn (parent: Opt)
	VARS
	a -> a: Opt[bool]
	b -> b: Opt[bool]
	TYPES
	T -> bool

scope 2602 List.map_spec_i64i64_1.for for (parent: List.map_spec_i64i64_1)
	VARS
	__iter_2466 -> __iter_2466: BufferIterator[i64]*
	itIndex -> mut itIndex: u64

scope 2603 List.map_spec_i64i64_1.for.block block (parent: List.map_spec_i64i64_1.for)
	VARS
	__next_2467 -> __next_2467: Opt[i64]

scope 2604 List.map_spec_i64i64_1.for.block.block block (parent: List.map_spec_i64i64_1.for.block)
	VARS
	i -> i: i64
	__block_expr_val_2469 -> __block_expr_val_2469: unit

scope 2605 List.map_spec_i64i64_1.for.block.block block (parent: List.map_spec_i64i64_1.for.block)

scope 2606 List.filter_spec_i64_1.for for (parent: List.filter_spec_i64_1)
	VARS
	__iter_2472 -> __iter_2472: BufferIterator[i64]*
	itIndex -> mut itIndex: u64

scope 2607 List.filter_spec_i64_1.for.block block (parent: List.filter_spec_i64_1.for)
	VARS
	__next_2473 -> __next_2473: Opt[i64]

scope 2608 List.filter_spec_i64_1.for.block.block block (parent: List.filter_spec_i64_1.for.block)
	VARS
	i -> i: i64
	__block_expr_val_2475 -> __block_expr_val_2475: unit

scope 2609 List.filter_spec_i64_1.for.block.block.block block (parent: List.filter_spec_i64_1.for.block.block)

scope 2610 List.filter_spec_i64_1.for.block.block block (parent: List.filter_spec_i64_1.for.block)

scope 2611 List.first_spec_i64_1.block block (parent: List.first_spec_i64_1)

scope 2612 List.firstRef_spec_i64_1 fn (parent: List)
	VARS
	self -> self: List[i64]
	TYPES
	T -> i64

scope 2613 List.first_spec_i64_1.block.match_arm match_arm (parent: List.first_spec_i64_1.block)

scope 2614 List.first_spec_i64_1.block.match_arm match_arm (parent: List.first_spec_i64_1.block)
	VARS
	__payload_Some_2478 -> __payload_Some_2478: i64*
	firstRef -> firstRef: i64*

scope 2615 List.last_spec_i64_1.block block (parent: List.last_spec_i64_1)

scope 2616 List.lastRef_spec_i64_1 fn (parent: List)
	VARS
	self -> self: List[i64]
	TYPES
	T -> i64

scope 2617 List.last_spec_i64_1.block.match_arm match_arm (parent: List.last_spec_i64_1.block)

scope 2618 List.last_spec_i64_1.block.match_arm match_arm (parent: List.last_spec_i64_1.block)
	VARS
	__payload_Some_2482 -> __payload_Some_2482: i64*
	lastRef -> lastRef: i64*

scope 2619 List.slice_spec_i64_1.block block (parent: List.slice_spec_i64_1)

scope 2620 List.slice_spec_i64_1.block block (parent: List.slice_spec_i64_1)

scope 2621 List.slice_spec_i64_1.block.block block (parent: List.slice_spec_i64_1.block)

scope 2622 List.slice_spec_i64_1.block.block.block block (parent: List.slice_spec_i64_1.block.block)
	VARS
	__sb_2486 -> __sb_2486: StringBuilder

scope 2623 Buffer._allocate_spec_Point_11 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: Point*
	ptr -> ptr: Pointer
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2624 List.push_spec_Point_10.block block (parent: List.push_spec_Point_10)

scope 2625 List.push_spec_Point_10.block.block block (parent: List.push_spec_Point_10.block)

scope 2626 List._grow_spec_Point_10 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[Point]*
	elemSize -> elemSize: u64
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2627 List.set_spec_Point_10 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Point]
	elem -> elem: Point
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2628 List.sort_spec_i64_1 fn (parent: List)
	VARS
	right -> right: List[i64]*
	halfIndex -> halfIndex: u64
	left -> left: List[i64]*
	input -> input: List[i64]*
	equal -> equal: List[i64]*
	pivot -> pivot: i64
	i -> mut i: u64
	TYPES
	T -> i64

scope 2629 List.cloned_spec_{rank: i64, payload: string}_4 fn (parent: List)
	VARS
	newBuffer -> newBuffer: Buffer[{rank: i64, payload: string}]
	self -> self: List[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2630 List.sort_spec_{rank: i64, payload: string}_2 fn (parent: List)
	VARS
	right -> right: List[{rank: i64, payload: string}]*
	halfIndex -> halfIndex: u64
	left -> left: List[{rank: i64, payload: string}]*
	input -> input: List[{rank: i64, payload: string}]*
	equal -> equal: List[{rank: i64, payload: string}]*
	pivot -> pivot: {rank: i64, payload: string}
	i -> mut i: u64
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2631 ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block block (parent: ability_impl.Equals_List[{rank: i64, payload: string}]_equals)

scope 2632 ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block block (parent: ability_impl.Equals_List[{rank: i64, payload: string}]_equals)
	VARS
	i -> mut i: u64

scope 2633 ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block.block block (parent: ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block)

scope 2634 ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block.block.while while (parent: ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block.block)

scope 2635 ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block.block.while.block block (parent: ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block.block.while)

scope 2636 List.get_spec_{rank: i64, payload: string}_5 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2637 ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block.block.while.block.block block (parent: ability_impl.Equals_List[{rank: i64, payload: string}]_equals.block.block.while.block)

scope 2638 Buffer._allocate_spec_{rank: i64, payload: string}_12 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: {rank: i64, payload: string}*
	ptr -> ptr: Pointer
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2639 List.push_spec_{rank: i64, payload: string}_11.block block (parent: List.push_spec_{rank: i64, payload: string}_11)

scope 2640 List.cap_spec_{rank: i64, payload: string}_11 fn (parent: List)
	VARS
	self -> self: List[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2641 List.push_spec_{rank: i64, payload: string}_11.block.block block (parent: List.push_spec_{rank: i64, payload: string}_11.block)

scope 2642 List._grow_spec_{rank: i64, payload: string}_11 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[{rank: i64, payload: string}]*
	elemSize -> elemSize: u64
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2643 List.set_spec_{rank: i64, payload: string}_11 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[{rank: i64, payload: string}]
	elem -> elem: {rank: i64, payload: string}
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2644 List.getRef_spec_i64_2 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[i64]
	TYPES
	T -> i64

scope 2645 Opt.isNone_spec_i64_1.block block (parent: Opt.isNone_spec_i64_1)

scope 2646 Opt.isNone_spec_i64_1.block.match_arm match_arm (parent: Opt.isNone_spec_i64_1.block)

scope 2647 Opt.isNone_spec_i64_1.block.match_arm match_arm (parent: Opt.isNone_spec_i64_1.block)

scope 2648 ability_impl.Show_List[i64]_show.for for (parent: ability_impl.Show_List[i64]_show)
	VARS
	__iter_2518 -> __iter_2518: BufferIterator[i64]*
	itIndex -> mut itIndex: u64

scope 2649 ability_impl.Show_List[i64]_show.for.block block (parent: ability_impl.Show_List[i64]_show.for)
	VARS
	__next_2519 -> __next_2519: Opt[i64]

scope 2650 ability_impl.Show_List[i64]_show.for.block.block block (parent: ability_impl.Show_List[i64]_show.for.block)
	VARS
	last -> last: bool
	__block_expr_val_2522 -> __block_expr_val_2522: unit
	s -> s: i64

scope 2651 ability_impl.Show_List[i64]_show.for.block.block.block block (parent: ability_impl.Show_List[i64]_show.for.block.block)

scope 2652 ability_impl.Show_List[i64]_show.for.block.block.block.block block (parent: ability_impl.Show_List[i64]_show.for.block.block.block)

scope 2653 ability_impl.Show_List[i64]_show.for.block.block block (parent: ability_impl.Show_List[i64]_show.for.block)

scope 2654 sizeOf_spec_bool**_15 fn (parent: )
	TYPES
	T -> bool**

scope 2655 sizeOf_spec_bool*_16 fn (parent: )
	TYPES
	T -> bool*

scope 2656 Opt.isSome_spec_string_7.block block (parent: Opt.isSome_spec_string_7)

scope 2657 Opt.isSome_spec_string_7.block.match_arm match_arm (parent: Opt.isSome_spec_string_7.block)
	VARS
	__payload_Some_2529 -> __payload_Some_2529: string

scope 2658 Opt.isSome_spec_string_7.block.match_arm match_arm (parent: Opt.isSome_spec_string_7.block)

scope 2659 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block block (parent: ability_impl.Unwrap_Opt[PointMaybeY]_hasValue)

scope 2660 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block)
	VARS
	__payload_Some_2531 -> __payload_Some_2531: PointMaybeY

scope 2661 ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[PointMaybeY]_hasValue.block)

scope 2662 Opt.get_spec_PointMaybeY_15 fn (parent: Opt)
	VARS
	self -> self: Opt[PointMaybeY]
	TYPES
	T -> PointMaybeY({x: i64, y: Opt[i64](enum None | Some(i64))})

scope 2663 Opt.isSome_spec_bool_8.block block (parent: Opt.isSome_spec_bool_8)

scope 2664 Opt.isSome_spec_bool_8.block.match_arm match_arm (parent: Opt.isSome_spec_bool_8.block)
	VARS
	__payload_Some_2534 -> __payload_Some_2534: bool

scope 2665 Opt.isSome_spec_bool_8.block.match_arm match_arm (parent: Opt.isSome_spec_bool_8.block)

scope 2666 Opt.isSome_spec_{name: string, age: i64}_9.block block (parent: Opt.isSome_spec_{name: string, age: i64}_9)

scope 2667 Opt.isSome_spec_{name: string, age: i64}_9.block.match_arm match_arm (parent: Opt.isSome_spec_{name: string, age: i64}_9.block)
	VARS
	__payload_Some_2536 -> __payload_Some_2536: {name: string, age: i64}

scope 2668 Opt.isSome_spec_{name: string, age: i64}_9.block.match_arm match_arm (parent: Opt.isSome_spec_{name: string, age: i64}_9.block)

scope 2669 Opt.get_spec_{name: string, age: i64}_1.block block (parent: Opt.get_spec_{name: string, age: i64}_1)
	VARS
	__payload_Some_2538 -> __payload_Some_2538: {name: string, age: i64}
	t -> t: {name: string, age: i64}
	__if_target_2537 -> __if_target_2537: Opt[{name: string, age: i64}]

scope 2670 Opt.get_spec_{name: string, age: i64}_1.block block (parent: Opt.get_spec_{name: string, age: i64}_1)

scope 2671 ability_impl.Unwrap_Opt[string]_hasValue.block block (parent: ability_impl.Unwrap_Opt[string]_hasValue)

scope 2672 ability_impl.Unwrap_Opt[string]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[string]_hasValue.block)
	VARS
	__payload_Some_2541 -> __payload_Some_2541: string

scope 2673 ability_impl.Unwrap_Opt[string]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[string]_hasValue.block)

scope 2674 Opt.get_spec_string_16 fn (parent: Opt)
	VARS
	self -> self: Opt[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2675 Buffer._allocate_spec_Opt[WeirdPoint]_13 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: Opt[WeirdPoint]*
	ptr -> ptr: Pointer
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2676 List.push_spec_Opt[WeirdPoint]_12.block block (parent: List.push_spec_Opt[WeirdPoint]_12)

scope 2677 List.cap_spec_Opt[WeirdPoint]_12 fn (parent: List)
	VARS
	self -> self: List[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2678 List.push_spec_Opt[WeirdPoint]_12.block.block block (parent: List.push_spec_Opt[WeirdPoint]_12.block)

scope 2679 List._grow_spec_Opt[WeirdPoint]_12 fn (parent: List)
	VARS
	newCap -> newCap: u64
	self -> self: List[Opt[WeirdPoint]]*
	elemSize -> elemSize: u64
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2680 List.set_spec_Opt[WeirdPoint]_12 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[Opt[WeirdPoint]]
	elem -> elem: Opt[WeirdPoint]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2681 List.get_spec_Opt[WeirdPoint]_3.block block (parent: List.get_spec_Opt[WeirdPoint]_3)

scope 2682 List.get_spec_Opt[WeirdPoint]_3.block.block block (parent: List.get_spec_Opt[WeirdPoint]_3.block)

scope 2683 Buffer.get_spec_Opt[WeirdPoint]_9 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Opt[WeirdPoint]]
	tRef -> tRef: Opt[WeirdPoint]*
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 2684 ability_impl.Unwrap_Opt[u64]_hasValue.block block (parent: ability_impl.Unwrap_Opt[u64]_hasValue)

scope 2685 ability_impl.Unwrap_Opt[u64]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[u64]_hasValue.block)
	VARS
	__payload_Some_2554 -> __payload_Some_2554: u64

scope 2686 ability_impl.Unwrap_Opt[u64]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[u64]_hasValue.block)

scope 2687 Opt.get_spec_u64_17 fn (parent: Opt)
	VARS
	self -> self: Opt[u64]
	TYPES
	T -> u64

scope 2688 ability_impl.Try_Result[bool, string]_isOk.block block (parent: ability_impl.Try_Result[bool, string]_isOk)

scope 2689 ability_impl.Try_Result[bool, string]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[bool, string]_isOk.block)
	VARS
	__payload_Ok_2557 -> __payload_Ok_2557: bool

scope 2690 ability_impl.Try_Result[bool, string]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[bool, string]_isOk.block)

scope 2691 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2692 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Inner -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> Opt[Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))))

scope 2693 ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2925 -> __match_subject_2925: Opt[Result[bool, string].Err(string)]
	self -> self: Opt[Result[bool, string].Err(string)]

scope 2694 ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[bool, string].Err(string)]

scope 2695 ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[bool, string].Err(string)

scope 2696 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)

scope 2697 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)
	Inner -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)
	Self -> Opt[Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)](enum None | Some(Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)))

scope 2698 ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2928 -> __match_subject_2928: Opt[Result[bool, string].Ok(bool)]
	self -> self: Opt[Result[bool, string].Ok(bool)]

scope 2699 ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[bool, string].Ok(bool)]

scope 2700 ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[bool, string].Ok(bool)

scope 2701 ability_impl.Try_Result[i64, string]_isOk.block block (parent: ability_impl.Try_Result[i64, string]_isOk)

scope 2702 ability_impl.Try_Result[i64, string]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[i64, string]_isOk.block)
	VARS
	__payload_Ok_2565 -> __payload_Ok_2565: i64

scope 2703 ability_impl.Try_Result[i64, string]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[i64, string]_isOk.block)

scope 2704 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2705 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Inner -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> Opt[Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))))

scope 2706 ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[i64, string].Err(string)]
	__match_subject_2931 -> __match_subject_2931: Opt[Result[i64, string].Err(string)]

scope 2707 ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[i64, string].Err(string)]

scope 2708 ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[i64, string].Err(string)

scope 2709 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)

scope 2710 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)
	Inner -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)
	Self -> Opt[Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)](enum None | Some(Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)))

scope 2711 ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[i64, string].Ok(i64)]
	__match_subject_2934 -> __match_subject_2934: Opt[Result[i64, string].Ok(i64)]

scope 2712 ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[i64, string].Ok(i64)]

scope 2713 ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[i64, string].Ok(i64)

scope 2714 ability_impl.Try_Result[i32, string]_isOk.block block (parent: ability_impl.Try_Result[i32, string]_isOk)

scope 2715 ability_impl.Try_Result[i32, string]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[i32, string]_isOk.block)
	VARS
	__payload_Ok_2573 -> __payload_Ok_2573: i32

scope 2716 ability_impl.Try_Result[i32, string]_isOk.block.match_arm match_arm (parent: ability_impl.Try_Result[i32, string]_isOk.block)

scope 2717 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2718 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Inner -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))
	Self -> Opt[Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))](enum None | Some(Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))))

scope 2719 ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2937 -> __match_subject_2937: Opt[Result[i32, string].Err(string)]
	self -> self: Opt[Result[i32, string].Err(string)]

scope 2720 ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[i32, string].Err(string)]

scope 2721 ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[i32, string].Err(string)

scope 2722 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)

scope 2723 ability_impl ability_impl (parent: )
	TYPES
	T -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)
	Inner -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)
	Self -> Opt[Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)](enum None | Some(Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)))

scope 2724 ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_2940 -> __match_subject_2940: Opt[Result[i32, string].Ok(i32)]
	self -> self: Opt[Result[i32, string].Ok(i32)]

scope 2725 ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[Result[i32, string].Ok(i32)]

scope 2726 ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_make fn (parent: ability_impl)
	VARS
	t -> t: Result[i32, string].Ok(i32)

scope 2727 Buffer._allocate_spec_string_2.block block (parent: Buffer._allocate_spec_string_2)

scope 2728 Buffer._allocate_spec_string_2.block.block block (parent: Buffer._allocate_spec_string_2.block)

scope 2729 Buffer._allocate_spec_string_2.block block (parent: Buffer._allocate_spec_string_2)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2730 Buffer.bufferLenBytes_spec_string_7 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2731 Opt.get_spec_Pointer_2.block block (parent: Opt.get_spec_Pointer_2)
	VARS
	__if_target_2584 -> __if_target_2584: Opt[Pointer]
	__payload_Some_2585 -> __payload_Some_2585: Pointer
	t -> t: Pointer

scope 2732 Opt.get_spec_Pointer_2.block block (parent: Opt.get_spec_Pointer_2)

scope 2733 Buffer.getRef_spec_Pointer_1.block block (parent: Buffer.getRef_spec_Pointer_1)

scope 2734 Buffer.getRef_spec_Pointer_1.block.block block (parent: Buffer.getRef_spec_Pointer_1.block)

scope 2735 Buffer.dataPointer_spec_Pointer_4 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Pointer]
	TYPES
	T -> Pointer

scope 2736 Pointer.refAtIndex_spec_Pointer_2 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Pointer

scope 2737 List._grow_spec_string_1.block block (parent: List._grow_spec_string_1)

scope 2738 Buffer.isEmpty_spec_string_2 fn (parent: Buffer)
	VARS
	self -> self: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2739 List._grow_spec_string_1.block.block block (parent: List._grow_spec_string_1.block)

scope 2740 List._grow_spec_string_1.block.block.block block (parent: List._grow_spec_string_1.block.block)

scope 2741 List._grow_spec_string_1.block block (parent: List._grow_spec_string_1)

scope 2742 List.reserve_spec_string_3 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[string]*
	newBuffer -> newBuffer: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2743 Buffer.set_spec_string_4 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[string]
	tRef -> tRef: string*
	elem -> elem: string
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2744 Buffer.slice_spec_string_3.block block (parent: Buffer.slice_spec_string_3)

scope 2745 Buffer.slice_spec_string_3.block.block block (parent: Buffer.slice_spec_string_3.block)

scope 2746 Buffer.empty_spec_string_3 fn (parent: Buffer)
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2747 Buffer.slice_spec_string_3.block block (parent: Buffer.slice_spec_string_3)

scope 2748 Buffer.slice_spec_string_3.block.block block (parent: Buffer.slice_spec_string_3.block)

scope 2749 Buffer.slice_spec_string_3.block.block.block block (parent: Buffer.slice_spec_string_3.block.block)
	VARS
	__sb_2598 -> __sb_2598: StringBuilder

scope 2750 Buffer.slice_spec_string_3.block block (parent: Buffer.slice_spec_string_3)

scope 2751 Buffer.getRef_spec_string_6 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2752 sizeOfStride_spec_u8_8 fn (parent: )
	TYPES
	T -> u8

scope 2753 Buffer.getRef_spec_u8_2.block block (parent: Buffer.getRef_spec_u8_2)

scope 2754 Buffer.getRef_spec_u8_2.block.block block (parent: Buffer.getRef_spec_u8_2.block)

scope 2755 Pointer.refAtIndex_spec_u8_3 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> u8

scope 2756 Buffer._allocate_spec_char_3.block block (parent: Buffer._allocate_spec_char_3)

scope 2757 Buffer._allocate_spec_char_3.block.block block (parent: Buffer._allocate_spec_char_3.block)

scope 2758 Buffer._allocate_spec_char_3.block block (parent: Buffer._allocate_spec_char_3)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2759 sizeOf_spec_char_17 fn (parent: )
	TYPES
	T -> char

scope 2760 List._grow_spec_char_2.block block (parent: List._grow_spec_char_2)

scope 2761 Buffer.isEmpty_spec_char_3 fn (parent: Buffer)
	VARS
	self -> self: Buffer[char]
	TYPES
	T -> char

scope 2762 List._grow_spec_char_2.block.block block (parent: List._grow_spec_char_2.block)

scope 2763 List._grow_spec_char_2.block.block.block block (parent: List._grow_spec_char_2.block.block)

scope 2764 List._grow_spec_char_2.block block (parent: List._grow_spec_char_2)

scope 2765 List.getRef_spec_char_3 fn (parent: List)
	VARS
	index -> index: u64
	self -> self: List[char]
	TYPES
	T -> char

scope 2766 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue)

scope 2767 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)
	VARS
	__payload_Some_2619 -> __payload_Some_2619: Result[S, F].Err(F)

scope 2768 ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Err(F)]_hasValue.block)

scope 2769 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue)

scope 2770 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)
	VARS
	__payload_Some_2621 -> __payload_Some_2621: Result[S, F].Ok(S)

scope 2771 ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[S, F].Ok(S)]_hasValue.block)

scope 2772 sizeOfStride_spec_char_9 fn (parent: )
	TYPES
	T -> char

scope 2773 sizeOfStride_spec_i64_10 fn (parent: )
	TYPES
	T -> i64

scope 2774 List.reserve_spec_char_1.block block (parent: List.reserve_spec_char_1)

scope 2775 List.reserve_spec_char_1.block.block block (parent: List.reserve_spec_char_1.block)

scope 2776 sizeOf_spec_u8_18 fn (parent: )
	TYPES
	T -> u8

scope 2777 List._grow_spec_u8_3.block block (parent: List._grow_spec_u8_3)

scope 2778 Buffer.isEmpty_spec_u8_4 fn (parent: Buffer)
	VARS
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 2779 List._grow_spec_u8_3.block.block block (parent: List._grow_spec_u8_3.block)

scope 2780 List._grow_spec_u8_3.block.block.block block (parent: List._grow_spec_u8_3.block.block)

scope 2781 List._grow_spec_u8_3.block block (parent: List._grow_spec_u8_3)

scope 2782 List.reserve_spec_u8_2.block block (parent: List.reserve_spec_u8_2)

scope 2783 List.reserve_spec_u8_2.block.block block (parent: List.reserve_spec_u8_2.block)

scope 2784 Buffer._enlargedClone_spec_u8_3 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[u8]
	self -> self: Buffer[u8]
	TYPES
	T -> u8

scope 2785 BufferIterator.fromBuffer_spec_u8_3 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[u8]
	TYPES
	T -> u8

scope 2786 ability_impl.Iterator_BufferIterator[u8]_next.block block (parent: ability_impl.Iterator_BufferIterator[u8]_next)

scope 2787 ability_impl.Iterator_BufferIterator[u8]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[u8]_next.block)
	VARS
	item -> item: u8

scope 2788 some_spec_u8_14 fn (parent: )
	VARS
	value -> value: u8
	TYPES
	T -> u8

scope 2789 ability_impl.Unwrap_Opt[u8]_hasValue.block block (parent: ability_impl.Unwrap_Opt[u8]_hasValue)

scope 2790 ability_impl.Unwrap_Opt[u8]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[u8]_hasValue.block)
	VARS
	__payload_Some_2634 -> __payload_Some_2634: u8

scope 2791 ability_impl.Unwrap_Opt[u8]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[u8]_hasValue.block)

scope 2792 Opt.get_spec_u8_18 fn (parent: Opt)
	VARS
	self -> self: Opt[u8]
	TYPES
	T -> u8

scope 2793 Opt.isSome_spec_u8_10.block block (parent: Opt.isSome_spec_u8_10)

scope 2794 Opt.isSome_spec_u8_10.block.match_arm match_arm (parent: Opt.isSome_spec_u8_10.block)
	VARS
	__payload_Some_2637 -> __payload_Some_2637: u8

scope 2795 Opt.isSome_spec_u8_10.block.match_arm match_arm (parent: Opt.isSome_spec_u8_10.block)

scope 2796 Buffer.slice_spec_u8_4.block block (parent: Buffer.slice_spec_u8_4)

scope 2797 Buffer.slice_spec_u8_4.block.block block (parent: Buffer.slice_spec_u8_4.block)

scope 2798 Buffer.empty_spec_u8_4 fn (parent: Buffer)
	TYPES
	T -> u8

scope 2799 Buffer.slice_spec_u8_4.block block (parent: Buffer.slice_spec_u8_4)

scope 2800 Buffer.slice_spec_u8_4.block.block block (parent: Buffer.slice_spec_u8_4.block)

scope 2801 Buffer.slice_spec_u8_4.block.block.block block (parent: Buffer.slice_spec_u8_4.block.block)
	VARS
	__sb_2638 -> __sb_2638: StringBuilder

scope 2802 Buffer.slice_spec_u8_4.block block (parent: Buffer.slice_spec_u8_4)

scope 2803 Buffer.getRef_spec_char_3.block block (parent: Buffer.getRef_spec_char_3)

scope 2804 Buffer.getRef_spec_char_3.block.block block (parent: Buffer.getRef_spec_char_3.block)

scope 2805 Buffer._copyFrom_spec_char_1.block block (parent: Buffer._copyFrom_spec_char_1)

scope 2806 Buffer._copyFrom_spec_char_1.block.block block (parent: Buffer._copyFrom_spec_char_1.block)

scope 2807 Buffer._copyFrom_spec_char_1.block.block.block block (parent: Buffer._copyFrom_spec_char_1.block.block)
	VARS
	__sb_2642 -> __sb_2642: StringBuilder

scope 2808 Buffer._copyFrom_spec_char_1.block block (parent: Buffer._copyFrom_spec_char_1)

scope 2809 Buffer._copyFrom_spec_char_1.block.block block (parent: Buffer._copyFrom_spec_char_1.block)

scope 2810 Buffer._copyFrom_spec_char_1.block.block.block block (parent: Buffer._copyFrom_spec_char_1.block.block)
	VARS
	__sb_2643 -> __sb_2643: StringBuilder

scope 2811 Buffer._allocate_spec_List[char]_14 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: List[char]*
	ptr -> ptr: Pointer
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2812 Opt.get_spec_char_3.block block (parent: Opt.get_spec_char_3)
	VARS
	__if_target_2647 -> __if_target_2647: Opt[char]
	__payload_Some_2648 -> __payload_Some_2648: char
	t -> t: char

scope 2813 Opt.get_spec_char_3.block block (parent: Opt.get_spec_char_3)

scope 2814 sizeOf_spec_List[char]_19 fn (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2815 List._grow_spec_List[char]_4.block block (parent: List._grow_spec_List[char]_4)

scope 2816 Buffer.isEmpty_spec_List[char]_5 fn (parent: Buffer)
	VARS
	self -> self: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2817 List._grow_spec_List[char]_4.block.block block (parent: List._grow_spec_List[char]_4.block)

scope 2818 List._grow_spec_List[char]_4.block.block.block block (parent: List._grow_spec_List[char]_4.block.block)

scope 2819 List._grow_spec_List[char]_4.block block (parent: List._grow_spec_List[char]_4)

scope 2820 List.reserve_spec_List[char]_4 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[List[char]]*
	newBuffer -> newBuffer: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2821 Buffer.set_spec_List[char]_5 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[List[char]]
	tRef -> tRef: List[char]*
	elem -> elem: List[char]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2822 Buffer.slice_spec_List[char]_5 fn (parent: Buffer)
	VARS
	self -> self: Buffer[List[char]]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: List[char]*
	end -> end: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2823 BufferIterator.fromBuffer_spec_List[char]_4 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2824 Buffer.getRef_spec_List[char]_7 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 2825 Opt.get_spec_List[char]_4.block block (parent: Opt.get_spec_List[char]_4)
	VARS
	__if_target_2665 -> __if_target_2665: Opt[List[char]]
	__payload_Some_2666 -> __payload_Some_2666: List[char]
	t -> t: List[char]

scope 2826 Opt.get_spec_List[char]_4.block block (parent: Opt.get_spec_List[char]_4)

scope 2827 Buffer._allocate_spec_enum Char(char) | String(string)_4.block block (parent: Buffer._allocate_spec_enum Char(char) | String(string)_4)

scope 2828 Buffer._allocate_spec_enum Char(char) | String(string)_4.block.block block (parent: Buffer._allocate_spec_enum Char(char) | String(string)_4.block)

scope 2829 Buffer._allocate_spec_enum Char(char) | String(string)_4.block block (parent: Buffer._allocate_spec_enum Char(char) | String(string)_4)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2830 Buffer.bufferLenBytes_spec_enum Char(char) | String(string)_8 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2831 sizeOf_spec_enum Char(char) | String(string)_20 fn (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2832 List._grow_spec_enum Char(char) | String(string)_5.block block (parent: List._grow_spec_enum Char(char) | String(string)_5)

scope 2833 Buffer.isEmpty_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	self -> self: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2834 List._grow_spec_enum Char(char) | String(string)_5.block.block block (parent: List._grow_spec_enum Char(char) | String(string)_5.block)

scope 2835 List._grow_spec_enum Char(char) | String(string)_5.block.block.block block (parent: List._grow_spec_enum Char(char) | String(string)_5.block.block)

scope 2836 List._grow_spec_enum Char(char) | String(string)_5.block block (parent: List._grow_spec_enum Char(char) | String(string)_5)

scope 2837 List.reserve_spec_enum Char(char) | String(string)_5 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[enum Char(char) | String(string)]*
	newBuffer -> newBuffer: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2838 Buffer.set_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	tRef -> tRef: enum Char(char) | String(string)*
	elem -> elem: enum Char(char) | String(string)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2839 Buffer.slice_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	self -> self: Buffer[enum Char(char) | String(string)]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: enum Char(char) | String(string)*
	end -> end: u64
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2840 BufferIterator.fromBuffer_spec_enum Char(char) | String(string)_5 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2841 Buffer.getRef_spec_enum Char(char) | String(string)_8 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 2842 Opt.get_spec_enum Char(char) | String(string)_5.block block (parent: Opt.get_spec_enum Char(char) | String(string)_5)
	VARS
	__payload_Some_2688 -> __payload_Some_2688: enum Char(char) | String(string)
	t -> t: enum Char(char) | String(string)
	__if_target_2687 -> __if_target_2687: Opt[enum Char(char) | String(string)]

scope 2843 Opt.get_spec_enum Char(char) | String(string)_5.block block (parent: Opt.get_spec_enum Char(char) | String(string)_5)

scope 2844 Buffer._allocate_spec_Arena_5.block block (parent: Buffer._allocate_spec_Arena_5)

scope 2845 Buffer._allocate_spec_Arena_5.block.block block (parent: Buffer._allocate_spec_Arena_5.block)

scope 2846 Buffer._allocate_spec_Arena_5.block block (parent: Buffer._allocate_spec_Arena_5)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2847 Buffer.bufferLenBytes_spec_Arena_9 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2848 sizeOf_spec_Arena_21 fn (parent: )
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2849 List._grow_spec_Arena_6.block block (parent: List._grow_spec_Arena_6)

scope 2850 Buffer.isEmpty_spec_Arena_7 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2851 List._grow_spec_Arena_6.block.block block (parent: List._grow_spec_Arena_6.block)

scope 2852 List._grow_spec_Arena_6.block.block.block block (parent: List._grow_spec_Arena_6.block.block)

scope 2853 List._grow_spec_Arena_6.block block (parent: List._grow_spec_Arena_6)

scope 2854 List.reserve_spec_Arena_6 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[Arena]*
	newBuffer -> newBuffer: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2855 Buffer.set_spec_Arena_7 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Arena]
	tRef -> tRef: Arena*
	elem -> elem: Arena
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2856 Buffer._allocate_spec_ObjectPool_6.block block (parent: Buffer._allocate_spec_ObjectPool_6)

scope 2857 Buffer._allocate_spec_ObjectPool_6.block.block block (parent: Buffer._allocate_spec_ObjectPool_6.block)

scope 2858 Buffer._allocate_spec_ObjectPool_6.block block (parent: Buffer._allocate_spec_ObjectPool_6)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2859 Buffer.bufferLenBytes_spec_ObjectPool_10 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> ObjectPool({})

scope 2860 Buffer.getRef_spec_Arena_4.block block (parent: Buffer.getRef_spec_Arena_4)

scope 2861 Buffer.getRef_spec_Arena_4.block.block block (parent: Buffer.getRef_spec_Arena_4.block)

scope 2862 Buffer.dataPointer_spec_Arena_5 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2863 Pointer.refAtIndex_spec_Arena_4 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 2864 Opt.get_spec_Yes(i64)*_6.block block (parent: Opt.get_spec_Yes(i64)*_6)
	VARS
	__if_target_2709 -> __if_target_2709: Opt[Yes(i64)*]
	__payload_Some_2710 -> __payload_Some_2710: Yes(i64)*
	t -> t: Yes(i64)*

scope 2865 Opt.get_spec_Yes(i64)*_6.block block (parent: Opt.get_spec_Yes(i64)*_6)

scope 2866 Buffer._allocate_spec_i64_7.block block (parent: Buffer._allocate_spec_i64_7)

scope 2867 Buffer._allocate_spec_i64_7.block.block block (parent: Buffer._allocate_spec_i64_7.block)

scope 2868 Buffer._allocate_spec_i64_7.block block (parent: Buffer._allocate_spec_i64_7)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2869 Buffer.firstRef_spec_i64_1.block block (parent: Buffer.firstRef_spec_i64_1)

scope 2870 Buffer.firstRef_spec_i64_1.block.block block (parent: Buffer.firstRef_spec_i64_1.block)

scope 2871 Buffer.firstRef_spec_i64_1.block block (parent: Buffer.firstRef_spec_i64_1)

scope 2872 Opt.opt_equals_spec_i64_1.block block (parent: Opt.opt_equals_spec_i64_1)
	VARS
	__payload_Some_2716 -> __payload_Some_2716: i64
	at -> at: i64
	__if_target_2715 -> __if_target_2715: Opt[i64]

scope 2873 Opt.opt_equals_spec_i64_1.block.block block (parent: Opt.opt_equals_spec_i64_1.block)

scope 2874 Opt.opt_equals_spec_i64_1.block.block.block block (parent: Opt.opt_equals_spec_i64_1.block.block)
	VARS
	__if_target_2718 -> __if_target_2718: Opt[i64]
	__payload_Some_2719 -> __payload_Some_2719: i64
	bt -> bt: i64

scope 2875 Opt.opt_equals_spec_i64_1.block block (parent: Opt.opt_equals_spec_i64_1)
	VARS
	__match_subject_2721 -> __match_subject_2721: Opt[i64]

scope 2876 Opt.opt_equals_spec_i64_1.block.block block (parent: Opt.opt_equals_spec_i64_1.block)

scope 2877 Opt.opt_equals_spec_i64_1.block.block.match_arm match_arm (parent: Opt.opt_equals_spec_i64_1.block.block)

scope 2878 Opt.opt_equals_spec_i64_1.block.block.match_arm match_arm (parent: Opt.opt_equals_spec_i64_1.block.block)

scope 2879 Buffer.lastRef_spec_i64_1.block block (parent: Buffer.lastRef_spec_i64_1)

scope 2880 Buffer.lastRef_spec_i64_1.block.block block (parent: Buffer.lastRef_spec_i64_1.block)

scope 2881 Buffer.lastRef_spec_i64_1.block block (parent: Buffer.lastRef_spec_i64_1)

scope 2882 Buffer.getRef_spec_i64_5.block block (parent: Buffer.getRef_spec_i64_5)

scope 2883 Buffer.getRef_spec_i64_5.block.block block (parent: Buffer.getRef_spec_i64_5.block)

scope 2884 Pointer.refAtIndex_spec_i64_5 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> i64

scope 2885 Buffer._copyFrom_spec_i64_2.block block (parent: Buffer._copyFrom_spec_i64_2)

scope 2886 Buffer._copyFrom_spec_i64_2.block.block block (parent: Buffer._copyFrom_spec_i64_2.block)

scope 2887 Buffer._copyFrom_spec_i64_2.block.block.block block (parent: Buffer._copyFrom_spec_i64_2.block.block)
	VARS
	__sb_2725 -> __sb_2725: StringBuilder

scope 2888 Buffer._copyFrom_spec_i64_2.block block (parent: Buffer._copyFrom_spec_i64_2)

scope 2889 Buffer._copyFrom_spec_i64_2.block.block block (parent: Buffer._copyFrom_spec_i64_2.block)

scope 2890 Buffer._copyFrom_spec_i64_2.block.block.block block (parent: Buffer._copyFrom_spec_i64_2.block.block)
	VARS
	__sb_2726 -> __sb_2726: StringBuilder

scope 2891 context_generic.contextC_spec_i64_1 fn (parent: context_generic)
	VARS
	t -> t: i64
	name -> name: string
	value -> value: i64
	TYPES
	T -> i64

scope 2892 List.get_spec_string_4.block block (parent: List.get_spec_string_4)

scope 2893 List.get_spec_string_4.block.block block (parent: List.get_spec_string_4.block)

scope 2894 Buffer.get_spec_string_10 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[string]
	tRef -> tRef: string*
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 2895 Opt.get_spec_Maybe.A_7.block block (parent: Opt.get_spec_Maybe.A_7)
	VARS
	__if_target_2733 -> __if_target_2733: Opt[Maybe.A]
	__payload_Some_2734 -> __payload_Some_2734: Maybe.A
	t -> t: Maybe.A

scope 2896 Opt.get_spec_Maybe.A_7.block block (parent: Opt.get_spec_Maybe.A_7)

scope 2897 Opt.get_spec_Maybe.B(char)_8.block block (parent: Opt.get_spec_Maybe.B(char)_8)
	VARS
	__payload_Some_2737 -> __payload_Some_2737: Maybe.B(char)
	t -> t: Maybe.B(char)
	__if_target_2736 -> __if_target_2736: Opt[Maybe.B(char)]

scope 2898 Opt.get_spec_Maybe.B(char)_8.block block (parent: Opt.get_spec_Maybe.B(char)_8)

scope 2899 Opt.get_spec_Maybe.C(string)_9.block block (parent: Opt.get_spec_Maybe.C(string)_9)
	VARS
	__if_target_2739 -> __if_target_2739: Opt[Maybe.C(string)]
	__payload_Some_2740 -> __payload_Some_2740: Maybe.C(string)
	t -> t: Maybe.C(string)

scope 2900 Opt.get_spec_Maybe.C(string)_9.block block (parent: Opt.get_spec_Maybe.C(string)_9)

scope 2901 Opt.get_spec_MyResult[i64, string].Ok(i64)_10.block block (parent: Opt.get_spec_MyResult[i64, string].Ok(i64)_10)
	VARS
	__payload_Some_2743 -> __payload_Some_2743: MyResult[i64, string].Ok(i64)
	t -> t: MyResult[i64, string].Ok(i64)
	__if_target_2742 -> __if_target_2742: Opt[MyResult[i64, string].Ok(i64)]

scope 2902 Opt.get_spec_MyResult[i64, string].Ok(i64)_10.block block (parent: Opt.get_spec_MyResult[i64, string].Ok(i64)_10)

scope 2903 List._grow_spec_i64_7.block block (parent: List._grow_spec_i64_7)

scope 2904 List._grow_spec_i64_7.block.block block (parent: List._grow_spec_i64_7.block)

scope 2905 List._grow_spec_i64_7.block.block.block block (parent: List._grow_spec_i64_7.block.block)

scope 2906 List._grow_spec_i64_7.block block (parent: List._grow_spec_i64_7)

scope 2907 List.reserve_spec_i64_7 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[i64]*
	newBuffer -> newBuffer: Buffer[i64]
	TYPES
	T -> i64

scope 2908 BufferIterator.fromBuffer_spec_i64_6 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[i64]
	TYPES
	T -> i64

scope 2909 Opt.get_spec_i64_11.block block (parent: Opt.get_spec_i64_11)
	VARS
	__payload_Some_2751 -> __payload_Some_2751: i64
	t -> t: i64
	__if_target_2750 -> __if_target_2750: Opt[i64]

scope 2910 Opt.get_spec_i64_11.block block (parent: Opt.get_spec_i64_11)

scope 2911 Opt.get_spec_bool_12.block block (parent: Opt.get_spec_bool_12)
	VARS
	__if_target_2753 -> __if_target_2753: Opt[bool]
	__payload_Some_2754 -> __payload_Some_2754: bool
	t -> t: bool

scope 2912 Opt.get_spec_bool_12.block block (parent: Opt.get_spec_bool_12)

scope 2913 Buffer._allocate_spec_bool_8.block block (parent: Buffer._allocate_spec_bool_8)

scope 2914 Buffer._allocate_spec_bool_8.block.block block (parent: Buffer._allocate_spec_bool_8.block)

scope 2915 Buffer._allocate_spec_bool_8.block block (parent: Buffer._allocate_spec_bool_8)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2916 Buffer.bufferLenBytes_spec_bool_11 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> bool

scope 2917 Buffer._allocate_spec_Json_9.block block (parent: Buffer._allocate_spec_Json_9)

scope 2918 Buffer._allocate_spec_Json_9.block.block block (parent: Buffer._allocate_spec_Json_9.block)

scope 2919 Buffer._allocate_spec_Json_9.block block (parent: Buffer._allocate_spec_Json_9)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2920 Buffer.bufferLenBytes_spec_Json_12 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Json

scope 2921 sizeOf_spec_Json_22 fn (parent: )
	TYPES
	T -> Json

scope 2922 List._grow_spec_Json_8.block block (parent: List._grow_spec_Json_8)

scope 2923 Buffer.isEmpty_spec_Json_8 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Json]
	TYPES
	T -> Json

scope 2924 List._grow_spec_Json_8.block.block block (parent: List._grow_spec_Json_8.block)

scope 2925 List._grow_spec_Json_8.block.block.block block (parent: List._grow_spec_Json_8.block.block)

scope 2926 List._grow_spec_Json_8.block block (parent: List._grow_spec_Json_8)

scope 2927 List.reserve_spec_Json_8 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[Json]*
	newBuffer -> newBuffer: Buffer[Json]
	TYPES
	T -> Json

scope 2928 Buffer.set_spec_Json_8 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Json]
	tRef -> tRef: Json*
	elem -> elem: Json
	TYPES
	T -> Json

scope 2929 Opt.get_spec_Json.JsArray(List[Json])_13.block block (parent: Opt.get_spec_Json.JsArray(List[Json])_13)
	VARS
	__if_target_2772 -> __if_target_2772: Opt[Json.JsArray(List[Json])]
	__payload_Some_2773 -> __payload_Some_2773: Json.JsArray(List[Json])
	t -> t: Json.JsArray(List[Json])

scope 2930 Opt.get_spec_Json.JsArray(List[Json])_13.block block (parent: Opt.get_spec_Json.JsArray(List[Json])_13)

scope 2931 Buffer.getRef_spec_Json_9 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Json]
	TYPES
	T -> Json

scope 2932 Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7 fn (parent: Buffer)
	VARS
	self -> self: Buffer[lambda_object(fn((env){}*) -> unit)]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: lambda_object(fn((env){}*) -> unit)*
	end -> end: u64
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2933 BufferIterator.fromBuffer_spec_lambda_object(fn((env){}*) -> unit)_7 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[lambda_object(fn((env){}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2934 Buffer.getRef_spec_lambda_object(fn((env){}*) -> unit)_10 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[lambda_object(fn((env){}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 2935 Opt.get_spec_lambda_object(fn((env){}*) -> unit)_14.block block (parent: Opt.get_spec_lambda_object(fn((env){}*) -> unit)_14)
	VARS
	t -> t: lambda_object(fn((env){}*) -> unit)
	__if_target_2785 -> __if_target_2785: Opt[lambda_object(fn((env){}*) -> unit)]
	__payload_Some_2786 -> __payload_Some_2786: lambda_object(fn((env){}*) -> unit)

scope 2936 Opt.get_spec_lambda_object(fn((env){}*) -> unit)_14.block block (parent: Opt.get_spec_lambda_object(fn((env){}*) -> unit)_14)

scope 2937 Buffer._allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10.block block (parent: Buffer._allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10)

scope 2938 Buffer._allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10.block.block block (parent: Buffer._allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10.block)

scope 2939 Buffer._allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10.block block (parent: Buffer._allocate_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_10)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2940 Buffer.bufferLenBytes_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_13 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2941 sizeOf_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_23 fn (parent: )
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2942 List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block block (parent: List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9)

scope 2943 Buffer.isEmpty_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: Buffer)
	VARS
	self -> self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2944 List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block block (parent: List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block)

scope 2945 List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block.block block (parent: List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block)

scope 2946 List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block block (parent: List._grow_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9)

scope 2947 List.reserve_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[lambda_object(fn((env){counter: i64*}*) -> unit)]*
	newBuffer -> newBuffer: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2948 Buffer.set_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	tRef -> tRef: lambda_object(fn((env){counter: i64*}*) -> unit)*
	elem -> elem: lambda_object(fn((env){counter: i64*}*) -> unit)
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 2949 Opt.opt_equals_spec_bool_2.block block (parent: Opt.opt_equals_spec_bool_2)
	VARS
	__if_target_2800 -> __if_target_2800: Opt[bool]
	__payload_Some_2801 -> __payload_Some_2801: bool
	at -> at: bool

scope 2950 Opt.opt_equals_spec_bool_2.block.block block (parent: Opt.opt_equals_spec_bool_2.block)

scope 2951 Opt.opt_equals_spec_bool_2.block.block.block block (parent: Opt.opt_equals_spec_bool_2.block.block)
	VARS
	bt -> bt: bool
	__if_target_2803 -> __if_target_2803: Opt[bool]
	__payload_Some_2804 -> __payload_Some_2804: bool

scope 2952 Opt.opt_equals_spec_bool_2.block block (parent: Opt.opt_equals_spec_bool_2)
	VARS
	__match_subject_2806 -> __match_subject_2806: Opt[bool]

scope 2953 Opt.opt_equals_spec_bool_2.block.block block (parent: Opt.opt_equals_spec_bool_2.block)

scope 2954 Opt.opt_equals_spec_bool_2.block.block.match_arm match_arm (parent: Opt.opt_equals_spec_bool_2.block.block)

scope 2955 Opt.opt_equals_spec_bool_2.block.block.match_arm match_arm (parent: Opt.opt_equals_spec_bool_2.block.block)

scope 2956 List.firstRef_spec_i64_1.block block (parent: List.firstRef_spec_i64_1)

scope 2957 List.nonEmpty_spec_i64_2 fn (parent: List)
	VARS
	self -> self: List[i64]
	TYPES
	T -> i64

scope 2958 List.firstRef_spec_i64_1.block.block block (parent: List.firstRef_spec_i64_1.block)

scope 2959 List.firstRef_spec_i64_1.block block (parent: List.firstRef_spec_i64_1)

scope 2960 List.lastRef_spec_i64_1.block block (parent: List.lastRef_spec_i64_1)

scope 2961 List.lastRef_spec_i64_1.block.block block (parent: List.lastRef_spec_i64_1.block)

scope 2962 List.lastRef_spec_i64_1.block block (parent: List.lastRef_spec_i64_1)

scope 2963 Buffer._allocate_spec_Point_11.block block (parent: Buffer._allocate_spec_Point_11)

scope 2964 Buffer._allocate_spec_Point_11.block.block block (parent: Buffer._allocate_spec_Point_11.block)

scope 2965 Buffer._allocate_spec_Point_11.block block (parent: Buffer._allocate_spec_Point_11)
	VARS
	sizeBytes -> sizeBytes: u64

scope 2966 Buffer.bufferLenBytes_spec_Point_14 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2967 sizeOf_spec_Point_24 fn (parent: )
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2968 List._grow_spec_Point_10.block block (parent: List._grow_spec_Point_10)

scope 2969 Buffer.isEmpty_spec_Point_10 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2970 List._grow_spec_Point_10.block.block block (parent: List._grow_spec_Point_10.block)

scope 2971 List._grow_spec_Point_10.block.block.block block (parent: List._grow_spec_Point_10.block.block)

scope 2972 List._grow_spec_Point_10.block block (parent: List._grow_spec_Point_10)

scope 2973 List.reserve_spec_Point_10 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[Point]*
	newBuffer -> newBuffer: Buffer[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2974 Buffer.set_spec_Point_10 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Point]
	tRef -> tRef: Point*
	elem -> elem: Point
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 2975 List.sort_spec_i64_1.block block (parent: List.sort_spec_i64_1)

scope 2976 List.sort_spec_i64_1.for for (parent: List.sort_spec_i64_1)
	VARS
	__iter_2826 -> __iter_2826: BufferIterator[i64]*
	itIndex -> mut itIndex: u64

scope 2977 List.sort_spec_i64_1.for.block block (parent: List.sort_spec_i64_1.for)
	VARS
	__next_2827 -> __next_2827: Opt[i64]

scope 2978 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)
	VARS
	__match_subject_2829 -> __match_subject_2829: Ordering
	__block_expr_val_2830 -> __block_expr_val_2830: unit
	item -> item: i64

scope 2979 List.sort_spec_i64_1.for.block.block.block block (parent: List.sort_spec_i64_1.for.block.block)

scope 2980 List.sort_spec_i64_1.for.block.block.block.match_arm match_arm (parent: List.sort_spec_i64_1.for.block.block.block)

scope 2981 List.sort_spec_i64_1.for.block.block.block.match_arm match_arm (parent: List.sort_spec_i64_1.for.block.block.block)

scope 2982 List.sort_spec_i64_1.for.block.block.block.match_arm match_arm (parent: List.sort_spec_i64_1.for.block.block.block)

scope 2983 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)

scope 2984 List.sort_spec_i64_1.for for (parent: List.sort_spec_i64_1)
	VARS
	__iter_2833 -> __iter_2833: BufferIterator[i64]*
	itIndex -> mut itIndex: u64

scope 2985 List.sort_spec_i64_1.for.block block (parent: List.sort_spec_i64_1.for)
	VARS
	__next_2834 -> __next_2834: Opt[i64]

scope 2986 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)
	VARS
	__block_expr_val_2836 -> __block_expr_val_2836: unit
	item -> item: i64

scope 2987 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)

scope 2988 List.sort_spec_i64_1.for for (parent: List.sort_spec_i64_1)
	VARS
	__iter_2838 -> __iter_2838: BufferIterator[i64]*
	itIndex -> mut itIndex: u64

scope 2989 List.sort_spec_i64_1.for.block block (parent: List.sort_spec_i64_1.for)
	VARS
	__next_2839 -> __next_2839: Opt[i64]

scope 2990 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)
	VARS
	__block_expr_val_2841 -> __block_expr_val_2841: unit
	item -> item: i64

scope 2991 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)

scope 2992 List.sort_spec_i64_1.for for (parent: List.sort_spec_i64_1)
	VARS
	__iter_2843 -> __iter_2843: BufferIterator[i64]*
	itIndex -> mut itIndex: u64

scope 2993 List.sort_spec_i64_1.for.block block (parent: List.sort_spec_i64_1.for)
	VARS
	__next_2844 -> __next_2844: Opt[i64]

scope 2994 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)
	VARS
	__block_expr_val_2846 -> __block_expr_val_2846: unit
	item -> item: i64

scope 2995 List.sort_spec_i64_1.for.block.block block (parent: List.sort_spec_i64_1.for.block)

scope 2996 Buffer.cloned_spec_{rank: i64, payload: string}_4 fn (parent: Buffer)
	VARS
	newBase -> newBase: Pointer
	self -> self: Buffer[{rank: i64, payload: string}]
	numBytes -> numBytes: u64
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2997 List.sort_spec_{rank: i64, payload: string}_2.block block (parent: List.sort_spec_{rank: i64, payload: string}_2)

scope 2998 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 2999 ability_impl ability_impl (parent: )
	TYPES
	Self -> List[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, buffer: Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*})})
	Item -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	I -> BufferIterator[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({buf: Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*}), pos: u64})

scope 3000 ability_impl.Iterable_List[{rank: i64, payload: string}]_iterator fn (parent: ability_impl)
	VARS
	self -> self: List[{rank: i64, payload: string}]

scope 3001 List.sort_spec_{rank: i64, payload: string}_2.for for (parent: List.sort_spec_{rank: i64, payload: string}_2)
	VARS
	__iter_2856 -> __iter_2856: BufferIterator[{rank: i64, payload: string}]*
	itIndex -> mut itIndex: u64

scope 3002 List.sort_spec_{rank: i64, payload: string}_2.for.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for)
	VARS
	__next_2863 -> __next_2863: Opt[{rank: i64, payload: string}]

scope 3003 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)
	VARS
	__match_subject_2868 -> __match_subject_2868: Ordering
	__block_expr_val_2869 -> __block_expr_val_2869: unit
	item -> item: {rank: i64, payload: string}

scope 3004 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3005 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	Self -> BufferIterator[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({buf: Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*}), pos: u64})
	Item -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3006 ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_next fn (parent: ability_impl)
	VARS
	self -> self: BufferIterator[{rank: i64, payload: string}]*

scope 3007 ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_sizeHint fn (parent: ability_impl)
	VARS
	rem -> rem: u64
	self -> self: BufferIterator[{rank: i64, payload: string}]

scope 3008 ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_advanceBy fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[{rank: i64, payload: string}]*

scope 3009 ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_nth fn (parent: ability_impl)
	VARS
	n -> n: u64
	self -> self: BufferIterator[{rank: i64, payload: string}]*

scope 3010 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3011 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	Inner -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	Self -> Opt[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}](enum None | Some({rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}))

scope 3012 ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_hasValue fn (parent: ability_impl)
	VARS
	__match_subject_3024 -> __match_subject_3024: Opt[{rank: i64, payload: string}]
	self -> self: Opt[{rank: i64, payload: string}]

scope 3013 ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_unwrap fn (parent: ability_impl)
	VARS
	self -> self: Opt[{rank: i64, payload: string}]

scope 3014 ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_make fn (parent: ability_impl)
	VARS
	t -> t: {rank: i64, payload: string}

scope 3015 List.sort_spec_{rank: i64, payload: string}_2.for.block.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block.block)

scope 3016 List.sort_spec_{rank: i64, payload: string}_2.for.block.block.block.match_arm match_arm (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block.block.block)

scope 3017 List.sort_spec_{rank: i64, payload: string}_2.for.block.block.block.match_arm match_arm (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block.block.block)

scope 3018 List.sort_spec_{rank: i64, payload: string}_2.for.block.block.block.match_arm match_arm (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block.block.block)

scope 3019 Opt.isSome_spec_{rank: i64, payload: string}_11 fn (parent: Opt)
	VARS
	self -> self: Opt[{rank: i64, payload: string}]
	__match_subject_3027 -> __match_subject_3027: Opt[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3020 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)

scope 3021 List.sort_spec_{rank: i64, payload: string}_2.for for (parent: List.sort_spec_{rank: i64, payload: string}_2)
	VARS
	__iter_2873 -> __iter_2873: BufferIterator[{rank: i64, payload: string}]*
	itIndex -> mut itIndex: u64

scope 3022 List.sort_spec_{rank: i64, payload: string}_2.for.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for)
	VARS
	__next_2874 -> __next_2874: Opt[{rank: i64, payload: string}]

scope 3023 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)
	VARS
	__block_expr_val_2876 -> __block_expr_val_2876: unit
	item -> item: {rank: i64, payload: string}

scope 3024 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)

scope 3025 List.sort_spec_{rank: i64, payload: string}_2.for for (parent: List.sort_spec_{rank: i64, payload: string}_2)
	VARS
	__iter_2878 -> __iter_2878: BufferIterator[{rank: i64, payload: string}]*
	itIndex -> mut itIndex: u64

scope 3026 List.sort_spec_{rank: i64, payload: string}_2.for.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for)
	VARS
	__next_2879 -> __next_2879: Opt[{rank: i64, payload: string}]

scope 3027 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)
	VARS
	__block_expr_val_2881 -> __block_expr_val_2881: unit
	item -> item: {rank: i64, payload: string}

scope 3028 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)

scope 3029 List.sort_spec_{rank: i64, payload: string}_2.for for (parent: List.sort_spec_{rank: i64, payload: string}_2)
	VARS
	__iter_2883 -> __iter_2883: BufferIterator[{rank: i64, payload: string}]*
	itIndex -> mut itIndex: u64

scope 3030 List.sort_spec_{rank: i64, payload: string}_2.for.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for)
	VARS
	__next_2884 -> __next_2884: Opt[{rank: i64, payload: string}]

scope 3031 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)
	VARS
	__block_expr_val_2886 -> __block_expr_val_2886: unit
	item -> item: {rank: i64, payload: string}

scope 3032 List.sort_spec_{rank: i64, payload: string}_2.for.block.block block (parent: List.sort_spec_{rank: i64, payload: string}_2.for.block)

scope 3033 List.get_spec_{rank: i64, payload: string}_5.block block (parent: List.get_spec_{rank: i64, payload: string}_5)

scope 3034 List.get_spec_{rank: i64, payload: string}_5.block.block block (parent: List.get_spec_{rank: i64, payload: string}_5.block)

scope 3035 Buffer.get_spec_{rank: i64, payload: string}_11 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[{rank: i64, payload: string}]
	tRef -> tRef: {rank: i64, payload: string}*
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3036 Buffer._allocate_spec_{rank: i64, payload: string}_12.block block (parent: Buffer._allocate_spec_{rank: i64, payload: string}_12)

scope 3037 Buffer._allocate_spec_{rank: i64, payload: string}_12.block.block block (parent: Buffer._allocate_spec_{rank: i64, payload: string}_12.block)

scope 3038 Buffer._allocate_spec_{rank: i64, payload: string}_12.block block (parent: Buffer._allocate_spec_{rank: i64, payload: string}_12)
	VARS
	sizeBytes -> sizeBytes: u64

scope 3039 Buffer.bufferLenBytes_spec_{rank: i64, payload: string}_15 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3040 sizeOf_spec_{rank: i64, payload: string}_25 fn (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3041 List._grow_spec_{rank: i64, payload: string}_11.block block (parent: List._grow_spec_{rank: i64, payload: string}_11)

scope 3042 Buffer.isEmpty_spec_{rank: i64, payload: string}_11 fn (parent: Buffer)
	VARS
	self -> self: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3043 List._grow_spec_{rank: i64, payload: string}_11.block.block block (parent: List._grow_spec_{rank: i64, payload: string}_11.block)

scope 3044 List._grow_spec_{rank: i64, payload: string}_11.block.block.block block (parent: List._grow_spec_{rank: i64, payload: string}_11.block.block)

scope 3045 List._grow_spec_{rank: i64, payload: string}_11.block block (parent: List._grow_spec_{rank: i64, payload: string}_11)

scope 3046 List.reserve_spec_{rank: i64, payload: string}_11 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[{rank: i64, payload: string}]*
	newBuffer -> newBuffer: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3047 Buffer.set_spec_{rank: i64, payload: string}_11 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[{rank: i64, payload: string}]
	tRef -> tRef: {rank: i64, payload: string}*
	elem -> elem: {rank: i64, payload: string}
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3048 Opt.get_spec_PointMaybeY_15.block block (parent: Opt.get_spec_PointMaybeY_15)
	VARS
	t -> t: PointMaybeY
	__if_target_2901 -> __if_target_2901: Opt[PointMaybeY]
	__payload_Some_2902 -> __payload_Some_2902: PointMaybeY

scope 3049 Opt.get_spec_PointMaybeY_15.block block (parent: Opt.get_spec_PointMaybeY_15)

scope 3050 Opt.get_spec_string_16.block block (parent: Opt.get_spec_string_16)
	VARS
	__if_target_2904 -> __if_target_2904: Opt[string]
	__payload_Some_2905 -> __payload_Some_2905: string
	t -> t: string

scope 3051 Opt.get_spec_string_16.block block (parent: Opt.get_spec_string_16)

scope 3052 Buffer._allocate_spec_Opt[WeirdPoint]_13.block block (parent: Buffer._allocate_spec_Opt[WeirdPoint]_13)

scope 3053 Buffer._allocate_spec_Opt[WeirdPoint]_13.block.block block (parent: Buffer._allocate_spec_Opt[WeirdPoint]_13.block)

scope 3054 Buffer._allocate_spec_Opt[WeirdPoint]_13.block block (parent: Buffer._allocate_spec_Opt[WeirdPoint]_13)
	VARS
	sizeBytes -> sizeBytes: u64

scope 3055 Buffer.bufferLenBytes_spec_Opt[WeirdPoint]_16 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3056 sizeOf_spec_Opt[WeirdPoint]_26 fn (parent: )
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3057 List._grow_spec_Opt[WeirdPoint]_12.block block (parent: List._grow_spec_Opt[WeirdPoint]_12)

scope 3058 Buffer.isEmpty_spec_Opt[WeirdPoint]_12 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3059 List._grow_spec_Opt[WeirdPoint]_12.block.block block (parent: List._grow_spec_Opt[WeirdPoint]_12.block)

scope 3060 List._grow_spec_Opt[WeirdPoint]_12.block.block.block block (parent: List._grow_spec_Opt[WeirdPoint]_12.block.block)

scope 3061 List._grow_spec_Opt[WeirdPoint]_12.block block (parent: List._grow_spec_Opt[WeirdPoint]_12)

scope 3062 List.reserve_spec_Opt[WeirdPoint]_12 fn (parent: List)
	VARS
	count -> count: u64
	self -> self: List[Opt[WeirdPoint]]*
	newBuffer -> newBuffer: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3063 Buffer.set_spec_Opt[WeirdPoint]_12 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Opt[WeirdPoint]]
	tRef -> tRef: Opt[WeirdPoint]*
	elem -> elem: Opt[WeirdPoint]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3064 Buffer.getRef_spec_Opt[WeirdPoint]_11 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3065 Opt.get_spec_u64_17.block block (parent: Opt.get_spec_u64_17)
	VARS
	__payload_Some_2923 -> __payload_Some_2923: u64
	t -> t: u64
	__if_target_2922 -> __if_target_2922: Opt[u64]

scope 3066 Opt.get_spec_u64_17.block block (parent: Opt.get_spec_u64_17)

scope 3067 ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_hasValue)

scope 3068 ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_hasValue.block)
	VARS
	__payload_Some_2926 -> __payload_Some_2926: Result[bool, string].Err(string)

scope 3069 ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[bool, string].Err(string)]_hasValue.block)

scope 3070 Opt.get_spec_Result[bool, string].Err(string)_19 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[bool, string].Err(string)]
	TYPES
	T -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3071 ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue)

scope 3072 ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue.block)
	VARS
	__payload_Some_2929 -> __payload_Some_2929: Result[bool, string].Ok(bool)

scope 3073 ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[bool, string].Ok(bool)]_hasValue.block)

scope 3074 Opt.get_spec_Result[bool, string].Ok(bool)_20 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[bool, string].Ok(bool)]
	TYPES
	T -> Result[bool, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(bool)

scope 3075 ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_hasValue)

scope 3076 ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_hasValue.block)
	VARS
	__payload_Some_2932 -> __payload_Some_2932: Result[i64, string].Err(string)

scope 3077 ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i64, string].Err(string)]_hasValue.block)

scope 3078 Opt.get_spec_Result[i64, string].Err(string)_21 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[i64, string].Err(string)]
	TYPES
	T -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3079 ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue)

scope 3080 ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue.block)
	VARS
	__payload_Some_2935 -> __payload_Some_2935: Result[i64, string].Ok(i64)

scope 3081 ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i64, string].Ok(i64)]_hasValue.block)

scope 3082 Opt.get_spec_Result[i64, string].Ok(i64)_22 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[i64, string].Ok(i64)]
	TYPES
	T -> Result[i64, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i64)

scope 3083 ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_hasValue)

scope 3084 ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_hasValue.block)
	VARS
	__payload_Some_2938 -> __payload_Some_2938: Result[i32, string].Err(string)

scope 3085 ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i32, string].Err(string)]_hasValue.block)

scope 3086 Opt.get_spec_Result[i32, string].Err(string)_23 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[i32, string].Err(string)]
	TYPES
	T -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Err(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3087 ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue.block block (parent: ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue)

scope 3088 ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue.block)
	VARS
	__payload_Some_2941 -> __payload_Some_2941: Result[i32, string].Ok(i32)

scope 3089 ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[Result[i32, string].Ok(i32)]_hasValue.block)

scope 3090 Opt.get_spec_Result[i32, string].Ok(i32)_24 fn (parent: Opt)
	VARS
	self -> self: Opt[Result[i32, string].Ok(i32)]
	TYPES
	T -> Result[i32, string({buffer: Buffer[char]({len: u64, data: char*})})].Ok(i32)

scope 3091 List.reserve_spec_string_3.block block (parent: List.reserve_spec_string_3)

scope 3092 List.reserve_spec_string_3.block.block block (parent: List.reserve_spec_string_3.block)

scope 3093 Buffer._enlargedClone_spec_string_4 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[string]
	self -> self: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 3094 Buffer.getRef_spec_string_6.block block (parent: Buffer.getRef_spec_string_6)

scope 3095 Buffer.getRef_spec_string_6.block.block block (parent: Buffer.getRef_spec_string_6.block)

scope 3096 Buffer.dataPointer_spec_string_6 fn (parent: Buffer)
	VARS
	self -> self: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 3097 Pointer.refAtIndex_spec_string_6 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 3098 Buffer._copyFrom_spec_u8_3 fn (parent: Buffer)
	VARS
	source -> source: Buffer[u8]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[u8]
	TYPES
	T -> u8

scope 3099 Opt.get_spec_u8_18.block block (parent: Opt.get_spec_u8_18)
	VARS
	__payload_Some_2955 -> __payload_Some_2955: u8
	t -> t: u8
	__if_target_2954 -> __if_target_2954: Opt[u8]

scope 3100 Opt.get_spec_u8_18.block block (parent: Opt.get_spec_u8_18)

scope 3101 Buffer._allocate_spec_List[char]_14.block block (parent: Buffer._allocate_spec_List[char]_14)

scope 3102 Buffer._allocate_spec_List[char]_14.block.block block (parent: Buffer._allocate_spec_List[char]_14.block)

scope 3103 Buffer._allocate_spec_List[char]_14.block block (parent: Buffer._allocate_spec_List[char]_14)
	VARS
	sizeBytes -> sizeBytes: u64

scope 3104 Buffer.bufferLenBytes_spec_List[char]_17 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 3105 List.reserve_spec_List[char]_4.block block (parent: List.reserve_spec_List[char]_4)

scope 3106 List.reserve_spec_List[char]_4.block.block block (parent: List.reserve_spec_List[char]_4.block)

scope 3107 Buffer._enlargedClone_spec_List[char]_5 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[List[char]]
	self -> self: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 3108 Buffer.slice_spec_List[char]_5.block block (parent: Buffer.slice_spec_List[char]_5)

scope 3109 Buffer.slice_spec_List[char]_5.block.block block (parent: Buffer.slice_spec_List[char]_5.block)

scope 3110 Buffer.empty_spec_List[char]_5 fn (parent: Buffer)
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 3111 Buffer.slice_spec_List[char]_5.block block (parent: Buffer.slice_spec_List[char]_5)

scope 3112 Buffer.slice_spec_List[char]_5.block.block block (parent: Buffer.slice_spec_List[char]_5.block)

scope 3113 Buffer.slice_spec_List[char]_5.block.block.block block (parent: Buffer.slice_spec_List[char]_5.block.block)
	VARS
	__sb_2965 -> __sb_2965: StringBuilder

scope 3114 Buffer.slice_spec_List[char]_5.block block (parent: Buffer.slice_spec_List[char]_5)

scope 3115 Buffer.getRef_spec_List[char]_7.block block (parent: Buffer.getRef_spec_List[char]_7)

scope 3116 Buffer.getRef_spec_List[char]_7.block.block block (parent: Buffer.getRef_spec_List[char]_7.block)

scope 3117 Buffer.dataPointer_spec_List[char]_7 fn (parent: Buffer)
	VARS
	self -> self: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 3118 Pointer.refAtIndex_spec_List[char]_7 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 3119 sizeOfStride_spec_enum Char(char) | String(string)_11 fn (parent: )
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3120 List.reserve_spec_enum Char(char) | String(string)_5.block block (parent: List.reserve_spec_enum Char(char) | String(string)_5)

scope 3121 List.reserve_spec_enum Char(char) | String(string)_5.block.block block (parent: List.reserve_spec_enum Char(char) | String(string)_5.block)

scope 3122 Buffer._enlargedClone_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[enum Char(char) | String(string)]
	self -> self: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3123 Buffer.slice_spec_enum Char(char) | String(string)_6.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_6)

scope 3124 Buffer.slice_spec_enum Char(char) | String(string)_6.block.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_6.block)

scope 3125 Buffer.empty_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3126 Buffer.slice_spec_enum Char(char) | String(string)_6.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_6)

scope 3127 Buffer.slice_spec_enum Char(char) | String(string)_6.block.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_6.block)

scope 3128 Buffer.slice_spec_enum Char(char) | String(string)_6.block.block.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_6.block.block)
	VARS
	__sb_2976 -> __sb_2976: StringBuilder

scope 3129 Buffer.slice_spec_enum Char(char) | String(string)_6.block block (parent: Buffer.slice_spec_enum Char(char) | String(string)_6)

scope 3130 Buffer.getRef_spec_enum Char(char) | String(string)_8.block block (parent: Buffer.getRef_spec_enum Char(char) | String(string)_8)

scope 3131 Buffer.getRef_spec_enum Char(char) | String(string)_8.block.block block (parent: Buffer.getRef_spec_enum Char(char) | String(string)_8.block)

scope 3132 Buffer.dataPointer_spec_enum Char(char) | String(string)_8 fn (parent: Buffer)
	VARS
	self -> self: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3133 Pointer.refAtIndex_spec_enum Char(char) | String(string)_8 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3134 sizeOfStride_spec_Arena_12 fn (parent: )
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 3135 List.reserve_spec_Arena_6.block block (parent: List.reserve_spec_Arena_6)

scope 3136 List.reserve_spec_Arena_6.block.block block (parent: List.reserve_spec_Arena_6.block)

scope 3137 Buffer._enlargedClone_spec_Arena_7 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[Arena]
	self -> self: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 3138 sizeOfStride_spec_ObjectPool_13 fn (parent: )
	TYPES
	T -> ObjectPool({})

scope 3139 List.reserve_spec_i64_7.block block (parent: List.reserve_spec_i64_7)

scope 3140 List.reserve_spec_i64_7.block.block block (parent: List.reserve_spec_i64_7.block)

scope 3141 sizeOfStride_spec_bool_14 fn (parent: )
	TYPES
	T -> bool

scope 3142 sizeOfStride_spec_Json_15 fn (parent: )
	TYPES
	T -> Json

scope 3143 List.reserve_spec_Json_8.block block (parent: List.reserve_spec_Json_8)

scope 3144 List.reserve_spec_Json_8.block.block block (parent: List.reserve_spec_Json_8.block)

scope 3145 Buffer._enlargedClone_spec_Json_8 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[Json]
	self -> self: Buffer[Json]
	TYPES
	T -> Json

scope 3146 Buffer.getRef_spec_Json_9.block block (parent: Buffer.getRef_spec_Json_9)

scope 3147 Buffer.getRef_spec_Json_9.block.block block (parent: Buffer.getRef_spec_Json_9.block)

scope 3148 Buffer.dataPointer_spec_Json_9 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Json]
	TYPES
	T -> Json

scope 3149 Pointer.refAtIndex_spec_Json_9 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Json

scope 3150 Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block block (parent: Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7)

scope 3151 Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block.block block (parent: Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block)

scope 3152 Buffer.empty_spec_lambda_object(fn((env){}*) -> unit)_7 fn (parent: Buffer)
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 3153 Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block block (parent: Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7)

scope 3154 Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block.block block (parent: Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block)

scope 3155 Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block.block.block block (parent: Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block.block)
	VARS
	__sb_2996 -> __sb_2996: StringBuilder

scope 3156 Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7.block block (parent: Buffer.slice_spec_lambda_object(fn((env){}*) -> unit)_7)

scope 3157 Buffer.getRef_spec_lambda_object(fn((env){}*) -> unit)_10.block block (parent: Buffer.getRef_spec_lambda_object(fn((env){}*) -> unit)_10)

scope 3158 Buffer.getRef_spec_lambda_object(fn((env){}*) -> unit)_10.block.block block (parent: Buffer.getRef_spec_lambda_object(fn((env){}*) -> unit)_10.block)

scope 3159 Buffer.dataPointer_spec_lambda_object(fn((env){}*) -> unit)_10 fn (parent: Buffer)
	VARS
	self -> self: Buffer[lambda_object(fn((env){}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 3160 Pointer.refAtIndex_spec_lambda_object(fn((env){}*) -> unit)_10 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 3161 sizeOfStride_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_16 fn (parent: )
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 3162 List.reserve_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block block (parent: List.reserve_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9)

scope 3163 List.reserve_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block block (parent: List.reserve_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block)

scope 3164 Buffer._enlargedClone_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	self -> self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 3165 Buffer.getRef_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 3166 sizeOfStride_spec_Point_17 fn (parent: )
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 3167 List.reserve_spec_Point_10.block block (parent: List.reserve_spec_Point_10)

scope 3168 List.reserve_spec_Point_10.block.block block (parent: List.reserve_spec_Point_10.block)

scope 3169 Buffer._enlargedClone_spec_Point_10 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[Point]
	self -> self: Buffer[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 3170 Buffer.getRef_spec_Point_13 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 3171 Buffer.lenBytes_spec_{rank: i64, payload: string}_4 fn (parent: Buffer)
	VARS
	self -> self: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3172 Buffer.dataPointer_spec_{rank: i64, payload: string}_11 fn (parent: Buffer)
	VARS
	self -> self: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3173 List.toBuffer_spec_{rank: i64, payload: string}_8 fn (parent: List)
	VARS
	self -> self: List[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3174 ability_impl ability_impl (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3175 ability_impl ability_impl (parent: )
	TYPES
	Self -> Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*})
	Item -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}
	I -> BufferIterator[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({buf: Buffer[{rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}]({len: u64, data: {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}*}), pos: u64})

scope 3176 ability_impl.Iterable_Buffer[{rank: i64, payload: string}]_iterator fn (parent: ability_impl)
	VARS
	self -> self: Buffer[{rank: i64, payload: string}]

scope 3177 ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_next.block block (parent: ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_next)

scope 3178 ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_next.block.block block (parent: ability_impl.Iterator_BufferIterator[{rank: i64, payload: string}]_next.block)
	VARS
	item -> item: {rank: i64, payload: string}

scope 3179 some_spec_{rank: i64, payload: string}_15 fn (parent: )
	VARS
	value -> value: {rank: i64, payload: string}
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3180 ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_hasValue.block block (parent: ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_hasValue)

scope 3181 ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_hasValue.block)
	VARS
	__payload_Some_3025 -> __payload_Some_3025: {rank: i64, payload: string}

scope 3182 ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_hasValue.block.match_arm match_arm (parent: ability_impl.Unwrap_Opt[{rank: i64, payload: string}]_hasValue.block)

scope 3183 Opt.get_spec_{rank: i64, payload: string}_25 fn (parent: Opt)
	VARS
	self -> self: Opt[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3184 Opt.isSome_spec_{rank: i64, payload: string}_11.block block (parent: Opt.isSome_spec_{rank: i64, payload: string}_11)

scope 3185 Opt.isSome_spec_{rank: i64, payload: string}_11.block.match_arm match_arm (parent: Opt.isSome_spec_{rank: i64, payload: string}_11.block)
	VARS
	__payload_Some_3028 -> __payload_Some_3028: {rank: i64, payload: string}

scope 3186 Opt.isSome_spec_{rank: i64, payload: string}_11.block.match_arm match_arm (parent: Opt.isSome_spec_{rank: i64, payload: string}_11.block)

scope 3187 Buffer.getRef_spec_{rank: i64, payload: string}_14 fn (parent: Buffer)
	VARS
	index -> index: u64
	self -> self: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3188 sizeOfStride_spec_{rank: i64, payload: string}_18 fn (parent: )
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3189 List.reserve_spec_{rank: i64, payload: string}_11.block block (parent: List.reserve_spec_{rank: i64, payload: string}_11)

scope 3190 List.reserve_spec_{rank: i64, payload: string}_11.block.block block (parent: List.reserve_spec_{rank: i64, payload: string}_11.block)

scope 3191 Buffer._enlargedClone_spec_{rank: i64, payload: string}_11 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[{rank: i64, payload: string}]
	self -> self: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3192 sizeOfStride_spec_Opt[WeirdPoint]_19 fn (parent: )
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3193 List.reserve_spec_Opt[WeirdPoint]_12.block block (parent: List.reserve_spec_Opt[WeirdPoint]_12)

scope 3194 List.reserve_spec_Opt[WeirdPoint]_12.block.block block (parent: List.reserve_spec_Opt[WeirdPoint]_12.block)

scope 3195 Buffer._enlargedClone_spec_Opt[WeirdPoint]_12 fn (parent: Buffer)
	VARS
	newCount -> newCount: u64
	newBuffer -> newBuffer: Buffer[Opt[WeirdPoint]]
	self -> self: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3196 Buffer.getRef_spec_Opt[WeirdPoint]_11.block block (parent: Buffer.getRef_spec_Opt[WeirdPoint]_11)

scope 3197 Buffer.getRef_spec_Opt[WeirdPoint]_11.block.block block (parent: Buffer.getRef_spec_Opt[WeirdPoint]_11.block)

scope 3198 Buffer.dataPointer_spec_Opt[WeirdPoint]_12 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3199 Pointer.refAtIndex_spec_Opt[WeirdPoint]_11 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3200 Opt.get_spec_Result[bool, string].Err(string)_19.block block (parent: Opt.get_spec_Result[bool, string].Err(string)_19)
	VARS
	__if_target_3043 -> __if_target_3043: Opt[Result[bool, string].Err(string)]
	__payload_Some_3044 -> __payload_Some_3044: Result[bool, string].Err(string)
	t -> t: Result[bool, string].Err(string)

scope 3201 Opt.get_spec_Result[bool, string].Err(string)_19.block block (parent: Opt.get_spec_Result[bool, string].Err(string)_19)

scope 3202 Opt.get_spec_Result[bool, string].Ok(bool)_20.block block (parent: Opt.get_spec_Result[bool, string].Ok(bool)_20)
	VARS
	t -> t: Result[bool, string].Ok(bool)
	__if_target_3046 -> __if_target_3046: Opt[Result[bool, string].Ok(bool)]
	__payload_Some_3047 -> __payload_Some_3047: Result[bool, string].Ok(bool)

scope 3203 Opt.get_spec_Result[bool, string].Ok(bool)_20.block block (parent: Opt.get_spec_Result[bool, string].Ok(bool)_20)

scope 3204 Opt.get_spec_Result[i64, string].Err(string)_21.block block (parent: Opt.get_spec_Result[i64, string].Err(string)_21)
	VARS
	__if_target_3049 -> __if_target_3049: Opt[Result[i64, string].Err(string)]
	__payload_Some_3050 -> __payload_Some_3050: Result[i64, string].Err(string)
	t -> t: Result[i64, string].Err(string)

scope 3205 Opt.get_spec_Result[i64, string].Err(string)_21.block block (parent: Opt.get_spec_Result[i64, string].Err(string)_21)

scope 3206 Opt.get_spec_Result[i64, string].Ok(i64)_22.block block (parent: Opt.get_spec_Result[i64, string].Ok(i64)_22)
	VARS
	t -> t: Result[i64, string].Ok(i64)
	__if_target_3052 -> __if_target_3052: Opt[Result[i64, string].Ok(i64)]
	__payload_Some_3053 -> __payload_Some_3053: Result[i64, string].Ok(i64)

scope 3207 Opt.get_spec_Result[i64, string].Ok(i64)_22.block block (parent: Opt.get_spec_Result[i64, string].Ok(i64)_22)

scope 3208 Opt.get_spec_Result[i32, string].Err(string)_23.block block (parent: Opt.get_spec_Result[i32, string].Err(string)_23)
	VARS
	__if_target_3055 -> __if_target_3055: Opt[Result[i32, string].Err(string)]
	__payload_Some_3056 -> __payload_Some_3056: Result[i32, string].Err(string)
	t -> t: Result[i32, string].Err(string)

scope 3209 Opt.get_spec_Result[i32, string].Err(string)_23.block block (parent: Opt.get_spec_Result[i32, string].Err(string)_23)

scope 3210 Opt.get_spec_Result[i32, string].Ok(i32)_24.block block (parent: Opt.get_spec_Result[i32, string].Ok(i32)_24)
	VARS
	t -> t: Result[i32, string].Ok(i32)
	__if_target_3058 -> __if_target_3058: Opt[Result[i32, string].Ok(i32)]
	__payload_Some_3059 -> __payload_Some_3059: Result[i32, string].Ok(i32)

scope 3211 Opt.get_spec_Result[i32, string].Ok(i32)_24.block block (parent: Opt.get_spec_Result[i32, string].Ok(i32)_24)

scope 3212 Buffer._copyFrom_spec_string_4 fn (parent: Buffer)
	VARS
	source -> source: Buffer[string]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[string]
	TYPES
	T -> string({buffer: Buffer[char]({len: u64, data: char*})})

scope 3213 Buffer._copyFrom_spec_u8_3.block block (parent: Buffer._copyFrom_spec_u8_3)

scope 3214 Buffer._copyFrom_spec_u8_3.block.block block (parent: Buffer._copyFrom_spec_u8_3.block)

scope 3215 Buffer._copyFrom_spec_u8_3.block.block.block block (parent: Buffer._copyFrom_spec_u8_3.block.block)
	VARS
	__sb_3065 -> __sb_3065: StringBuilder

scope 3216 Buffer._copyFrom_spec_u8_3.block block (parent: Buffer._copyFrom_spec_u8_3)

scope 3217 Buffer._copyFrom_spec_u8_3.block.block block (parent: Buffer._copyFrom_spec_u8_3.block)

scope 3218 Buffer._copyFrom_spec_u8_3.block.block.block block (parent: Buffer._copyFrom_spec_u8_3.block.block)
	VARS
	__sb_3066 -> __sb_3066: StringBuilder

scope 3219 sizeOfStride_spec_List[char]_20 fn (parent: )
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 3220 Buffer._copyFrom_spec_List[char]_5 fn (parent: Buffer)
	VARS
	source -> source: Buffer[List[char]]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[List[char]]
	TYPES
	T -> List[char]({len: u64, buffer: Buffer[char]({len: u64, data: char*})})

scope 3221 Buffer._copyFrom_spec_enum Char(char) | String(string)_6 fn (parent: Buffer)
	VARS
	source -> source: Buffer[enum Char(char) | String(string)]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[enum Char(char) | String(string)]
	TYPES
	T -> enum Char(char) | String(string({buffer: Buffer[char]({len: u64, data: char*})}))

scope 3222 Buffer._copyFrom_spec_Arena_7 fn (parent: Buffer)
	VARS
	source -> source: Buffer[Arena]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[Arena]
	TYPES
	T -> Arena({id: string({buffer: Buffer[char]({len: u64, data: char*})}), basePtr: Pointer, curAddr: u64, maxAddr: u64})

scope 3223 Buffer._copyFrom_spec_Json_8 fn (parent: Buffer)
	VARS
	source -> source: Buffer[Json]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[Json]
	TYPES
	T -> Json

scope 3224 Buffer._allocate_spec_lambda_object(fn((env){}*) -> unit)_15 fn (parent: Buffer)
	VARS
	count -> count: u64
	data -> data: lambda_object(fn((env){}*) -> unit)*
	ptr -> ptr: Pointer
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 3225 Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9 fn (parent: Buffer)
	VARS
	source -> source: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 3226 Buffer.getRef_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12.block block (parent: Buffer.getRef_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12)

scope 3227 Buffer.getRef_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12.block.block block (parent: Buffer.getRef_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12.block)

scope 3228 Buffer.dataPointer_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_13 fn (parent: Buffer)
	VARS
	self -> self: Buffer[lambda_object(fn((env){counter: i64*}*) -> unit)]
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 3229 Pointer.refAtIndex_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_12 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> lambda_object(fn((env){counter: i64*}*) -> unit)

scope 3230 Buffer._copyFrom_spec_Point_10 fn (parent: Buffer)
	VARS
	source -> source: Buffer[Point]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 3231 Buffer.getRef_spec_Point_13.block block (parent: Buffer.getRef_spec_Point_13)

scope 3232 Buffer.getRef_spec_Point_13.block.block block (parent: Buffer.getRef_spec_Point_13.block)

scope 3233 Buffer.dataPointer_spec_Point_14 fn (parent: Buffer)
	VARS
	self -> self: Buffer[Point]
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 3234 Pointer.refAtIndex_spec_Point_13 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> Point({x: i64, y: i64, z: i64})

scope 3235 Buffer.slice_spec_{rank: i64, payload: string}_8 fn (parent: Buffer)
	VARS
	self -> self: Buffer[{rank: i64, payload: string}]
	start -> start: u64
	newLen -> newLen: u64
	newBase -> newBase: {rank: i64, payload: string}*
	end -> end: u64
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3236 BufferIterator.fromBuffer_spec_{rank: i64, payload: string}_8 fn (parent: BufferIterator)
	VARS
	buf -> buf: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3237 Opt.get_spec_{rank: i64, payload: string}_25.block block (parent: Opt.get_spec_{rank: i64, payload: string}_25)
	VARS
	__if_target_3103 -> __if_target_3103: Opt[{rank: i64, payload: string}]
	__payload_Some_3104 -> __payload_Some_3104: {rank: i64, payload: string}
	t -> t: {rank: i64, payload: string}

scope 3238 Opt.get_spec_{rank: i64, payload: string}_25.block block (parent: Opt.get_spec_{rank: i64, payload: string}_25)

scope 3239 Buffer.getRef_spec_{rank: i64, payload: string}_14.block block (parent: Buffer.getRef_spec_{rank: i64, payload: string}_14)

scope 3240 Buffer.getRef_spec_{rank: i64, payload: string}_14.block.block block (parent: Buffer.getRef_spec_{rank: i64, payload: string}_14.block)

scope 3241 Pointer.refAtIndex_spec_{rank: i64, payload: string}_14 fn (parent: Pointer)
	VARS
	index -> index: u64
	self -> self: Pointer
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3242 Buffer._copyFrom_spec_{rank: i64, payload: string}_11 fn (parent: Buffer)
	VARS
	source -> source: Buffer[{rank: i64, payload: string}]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[{rank: i64, payload: string}]
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3243 Buffer._copyFrom_spec_Opt[WeirdPoint]_12 fn (parent: Buffer)
	VARS
	source -> source: Buffer[Opt[WeirdPoint]]
	count -> count: u64
	numBytes -> numBytes: u64
	dest -> dest: Buffer[Opt[WeirdPoint]]
	TYPES
	T -> Opt[WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})](enum None | Some(WeirdPoint({x: Opt[i64](enum None | Some(i64)), y: i64})))

scope 3244 Buffer._copyFrom_spec_string_4.block block (parent: Buffer._copyFrom_spec_string_4)

scope 3245 Buffer._copyFrom_spec_string_4.block.block block (parent: Buffer._copyFrom_spec_string_4.block)

scope 3246 Buffer._copyFrom_spec_string_4.block.block.block block (parent: Buffer._copyFrom_spec_string_4.block.block)
	VARS
	__sb_3116 -> __sb_3116: StringBuilder

scope 3247 Buffer._copyFrom_spec_string_4.block block (parent: Buffer._copyFrom_spec_string_4)

scope 3248 Buffer._copyFrom_spec_string_4.block.block block (parent: Buffer._copyFrom_spec_string_4.block)

scope 3249 Buffer._copyFrom_spec_string_4.block.block.block block (parent: Buffer._copyFrom_spec_string_4.block.block)
	VARS
	__sb_3117 -> __sb_3117: StringBuilder

scope 3250 Buffer._copyFrom_spec_List[char]_5.block block (parent: Buffer._copyFrom_spec_List[char]_5)

scope 3251 Buffer._copyFrom_spec_List[char]_5.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block)

scope 3252 Buffer._copyFrom_spec_List[char]_5.block.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block.block)
	VARS
	__sb_3119 -> __sb_3119: StringBuilder

scope 3253 Buffer._copyFrom_spec_List[char]_5.block block (parent: Buffer._copyFrom_spec_List[char]_5)

scope 3254 Buffer._copyFrom_spec_List[char]_5.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block)

scope 3255 Buffer._copyFrom_spec_List[char]_5.block.block.block block (parent: Buffer._copyFrom_spec_List[char]_5.block.block)
	VARS
	__sb_3120 -> __sb_3120: StringBuilder

scope 3256 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6)

scope 3257 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block)

scope 3258 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block)
	VARS
	__sb_3122 -> __sb_3122: StringBuilder

scope 3259 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6)

scope 3260 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block)

scope 3261 Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block.block block (parent: Buffer._copyFrom_spec_enum Char(char) | String(string)_6.block.block)
	VARS
	__sb_3123 -> __sb_3123: StringBuilder

scope 3262 Buffer._copyFrom_spec_Arena_7.block block (parent: Buffer._copyFrom_spec_Arena_7)

scope 3263 Buffer._copyFrom_spec_Arena_7.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block)

scope 3264 Buffer._copyFrom_spec_Arena_7.block.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block.block)
	VARS
	__sb_3125 -> __sb_3125: StringBuilder

scope 3265 Buffer._copyFrom_spec_Arena_7.block block (parent: Buffer._copyFrom_spec_Arena_7)

scope 3266 Buffer._copyFrom_spec_Arena_7.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block)

scope 3267 Buffer._copyFrom_spec_Arena_7.block.block.block block (parent: Buffer._copyFrom_spec_Arena_7.block.block)
	VARS
	__sb_3126 -> __sb_3126: StringBuilder

scope 3268 Buffer._copyFrom_spec_Json_8.block block (parent: Buffer._copyFrom_spec_Json_8)

scope 3269 Buffer._copyFrom_spec_Json_8.block.block block (parent: Buffer._copyFrom_spec_Json_8.block)

scope 3270 Buffer._copyFrom_spec_Json_8.block.block.block block (parent: Buffer._copyFrom_spec_Json_8.block.block)
	VARS
	__sb_3128 -> __sb_3128: StringBuilder

scope 3271 Buffer._copyFrom_spec_Json_8.block block (parent: Buffer._copyFrom_spec_Json_8)

scope 3272 Buffer._copyFrom_spec_Json_8.block.block block (parent: Buffer._copyFrom_spec_Json_8.block)

scope 3273 Buffer._copyFrom_spec_Json_8.block.block.block block (parent: Buffer._copyFrom_spec_Json_8.block.block)
	VARS
	__sb_3129 -> __sb_3129: StringBuilder

scope 3274 Buffer._allocate_spec_lambda_object(fn((env){}*) -> unit)_15.block block (parent: Buffer._allocate_spec_lambda_object(fn((env){}*) -> unit)_15)

scope 3275 Buffer._allocate_spec_lambda_object(fn((env){}*) -> unit)_15.block.block block (parent: Buffer._allocate_spec_lambda_object(fn((env){}*) -> unit)_15.block)

scope 3276 Buffer._allocate_spec_lambda_object(fn((env){}*) -> unit)_15.block block (parent: Buffer._allocate_spec_lambda_object(fn((env){}*) -> unit)_15)
	VARS
	sizeBytes -> sizeBytes: u64

scope 3277 Buffer.bufferLenBytes_spec_lambda_object(fn((env){}*) -> unit)_18 fn (parent: Buffer)
	VARS
	count -> count: u64
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)

scope 3278 Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block block (parent: Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9)

scope 3279 Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block block (parent: Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block)

scope 3280 Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block.block block (parent: Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block)
	VARS
	__sb_3135 -> __sb_3135: StringBuilder

scope 3281 Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block block (parent: Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9)

scope 3282 Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block block (parent: Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block)

scope 3283 Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block.block block (parent: Buffer._copyFrom_spec_lambda_object(fn((env){counter: i64*}*) -> unit)_9.block.block)
	VARS
	__sb_3136 -> __sb_3136: StringBuilder

scope 3284 Buffer._copyFrom_spec_Point_10.block block (parent: Buffer._copyFrom_spec_Point_10)

scope 3285 Buffer._copyFrom_spec_Point_10.block.block block (parent: Buffer._copyFrom_spec_Point_10.block)

scope 3286 Buffer._copyFrom_spec_Point_10.block.block.block block (parent: Buffer._copyFrom_spec_Point_10.block.block)
	VARS
	__sb_3138 -> __sb_3138: StringBuilder

scope 3287 Buffer._copyFrom_spec_Point_10.block block (parent: Buffer._copyFrom_spec_Point_10)

scope 3288 Buffer._copyFrom_spec_Point_10.block.block block (parent: Buffer._copyFrom_spec_Point_10.block)

scope 3289 Buffer._copyFrom_spec_Point_10.block.block.block block (parent: Buffer._copyFrom_spec_Point_10.block.block)
	VARS
	__sb_3139 -> __sb_3139: StringBuilder

scope 3290 Buffer.slice_spec_{rank: i64, payload: string}_8.block block (parent: Buffer.slice_spec_{rank: i64, payload: string}_8)

scope 3291 Buffer.slice_spec_{rank: i64, payload: string}_8.block.block block (parent: Buffer.slice_spec_{rank: i64, payload: string}_8.block)

scope 3292 Buffer.empty_spec_{rank: i64, payload: string}_8 fn (parent: Buffer)
	TYPES
	T -> {rank: i64, payload: string({buffer: Buffer[char]({len: u64, data: char*})})}

scope 3293 Buffer.slice_spec_{rank: i64, payload: string}_8.block block (parent: Buffer.slice_spec_{rank: i64, payload: string}_8)

scope 3294 Buffer.slice_spec_{rank: i64, payload: string}_8.block.block block (parent: Buffer.slice_spec_{rank: i64, payload: string}_8.block)

scope 3295 Buffer.slice_spec_{rank: i64, payload: string}_8.block.block.block block (parent: Buffer.slice_spec_{rank: i64, payload: string}_8.block.block)
	VARS
	__sb_3141 -> __sb_3141: StringBuilder

scope 3296 Buffer.slice_spec_{rank: i64, payload: string}_8.block block (parent: Buffer.slice_spec_{rank: i64, payload: string}_8)

scope 3297 Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block block (parent: Buffer._copyFrom_spec_{rank: i64, payload: string}_11)

scope 3298 Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block.block block (parent: Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block)

scope 3299 Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block.block.block block (parent: Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block.block)
	VARS
	__sb_3145 -> __sb_3145: StringBuilder

scope 3300 Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block block (parent: Buffer._copyFrom_spec_{rank: i64, payload: string}_11)

scope 3301 Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block.block block (parent: Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block)

scope 3302 Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block.block.block block (parent: Buffer._copyFrom_spec_{rank: i64, payload: string}_11.block.block)
	VARS
	__sb_3146 -> __sb_3146: StringBuilder

scope 3303 Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_12)

scope 3304 Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block)

scope 3305 Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block.block)
	VARS
	__sb_3148 -> __sb_3148: StringBuilder

scope 3306 Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_12)

scope 3307 Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block)

scope 3308 Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block.block.block block (parent: Buffer._copyFrom_spec_Opt[WeirdPoint]_12.block.block)
	VARS
	__sb_3149 -> __sb_3149: StringBuilder

scope 3309 sizeOfStride_spec_lambda_object(fn((env){}*) -> unit)_21 fn (parent: )
	TYPES
	T -> lambda_object(fn((env){}*) -> unit)


