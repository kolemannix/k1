// mr4th's scratch pool code
// scratch pool
// threadvar Arena *m__scratch_pool[MEM_SCRATCH_POOL_COUNT] = {0};
// 
// link_function ArenaTemp
// arena_get_scratch(Arena **conflict_array, U32 count){
//   ProfBeginFunc();
//   
//   // init on first time
//   if (m__scratch_pool[0] == 0){
//     Arena **scratch_slot = m__scratch_pool;
//     for (U64 i = 0;
//          i < MEM_SCRATCH_POOL_COUNT;
//          i += 1, scratch_slot += 1){
//       *scratch_slot = arena_alloc();
//     }
//   }
//   
//   // get non-conflicting arena
//   ArenaTemp result = {0};
//   Arena **scratch_slot = m__scratch_pool;
//   for (U64 i = 0;
//        i < MEM_SCRATCH_POOL_COUNT;
//        i += 1, scratch_slot += 1){
//     B32 is_non_conflict = 1;
//     Arena **conflict_ptr = conflict_array;
//     for (U32 j = 0; j < count; j += 1, conflict_ptr += 1){
//       if (*scratch_slot == *conflict_ptr){
//         is_non_conflict = 0;
//         break;
//       }
//     }
//     if (is_non_conflict){
//       result = arena_begin_temp(*scratch_slot);
//       break;
//     }
//   }
//   
//   ProfEndFunc();
//   return(result);
// }

let static K1_RT: bool = true;
#if K1_RT
ns rt {

  fn init(): unit {
    println("welcome to k1; runtime is enabled; i made you a temp arena");
  }

}

fn main(): i32 {
   #if K1_RT rt/init();
   // Compiler Setting to inject a context value equal to the global constant rt/ALLOC_MODE_SYSTEM_DEFAULT
   // to opt out of worrying about allocation for that program. If enabled, how do we prevent users from accidentally using it?
   // Also to consider, push/pop and scopes

   let debug = k1/DEBUG;

   mem/allocIn(mem/AllocMode/TEMP, 8, 8);
   println("debug? \{debug}");
   {
     let context alloc: mem/AllocMode = mem/AllocMode/SYSTEM_HEAP;
     let b = Buffer/filled[int](size = 5, value = 42);
     for i in b do {
       println("\{i}");
     };
     let b2 = Buffer/filled[int](size = 5, value = 49);
     for i in b2 do {
       println("\{i}");
     };
   };

   0
}
