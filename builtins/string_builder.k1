deftype StringBuilder = { parts: List[either Char(char), String(string)]* }
namespace StringBuilder {
  deftype alias Part = StringBuilder.parts.value.T

  fn withCapacity(cap: u64): StringBuilder {
    let parts = _root/new(List/withCapacity[Part](cap));
    { parts: parts }
  }

  fn new(): StringBuilder {
    withCapacity(0)
  }

  fn putChar(self: StringBuilder, c: char): unit {
    self.parts.push(.Char(c))
  }
  fn putString(self: StringBuilder, s: string): unit {
    self.parts.push(.String(s))
  }
  fn putByte(self: StringBuilder, b: byte): unit {
    self.parts.push(.Char(b as char))
  }
  fn len(self: StringBuilder): u64 {
    let mut len = 0: u64;
    for part in self.parts.* do {
      let partLen = switch part { .Char(_) -> 1: u64, .String(s) -> s.len() };
      len = len + partLen;
    };
    len
  }
  fn build(self: StringBuilder): string {
    let* bytes = List/withCapacity[char](self.len());
    for part in self.parts.* do {
      switch part {
        .Char(c) -> bytes.push(c),
        .String(s) -> {
          for c in s do {
            bytes.push(c)
          }
        }
      }
    };
    string/wrapList(bytes)
  }
}
