deftype unit = builtin
deftype char = builtin
deftype bool = builtin
deftype never = builtin
deftype Pointer = builtin

deftype f32 = builtin
deftype f64 = builtin

deftype Array[T] = { len: u64, cap: u64, data: Pointer }
deftype string = { len: u64, data: Pointer }

deftype Opt[T] = either None, Some(T)

deftype CompilerSourceLoc = { filename: string, line: u64 }

// One day
// ability OrElse[T] {
//   fn hasValue(self: Self): bool
//   fn unwrap(): T
// }

deftype alias int = i64
deftype alias uint = u64
deftype alias byte = u8

// Must have ability id 0
ability Equals {
  fn equals(self: Self, other: Self): bool
}

ability Show {
  // TODO: make this use an allocator. How does it get passed conveniently?
  #debug fn show(self: Self): string
}

intern fn sizeOf[T](): u64
intern fn alignOf[T](): u64

ability Bitwise {
  fn bitNot(self: Self): Self
  fn bitAnd(self: Self, other: Self): Self
  fn bitOr(self: Self, other: Self): Self
  fn xor(self: Self, other: Self): Self
  fn shiftLeft(self: Self, other: Self): Self
  fn shiftRight(self: Self, other: Self): Self
}

