deftype unit = builtin
deftype char = builtin
deftype bool = builtin
deftype never = builtin
deftype Pointer = builtin

deftype f32 = builtin
deftype f64 = builtin

deftype Array[T] = { len: u64, cap: u64, data: Pointer }
deftype string = { len: u64, data: Pointer }

deftype Opt[T] = enum None, Some(T)

deftype CompilerSourceLoc = { filename: string, line: u64 }

// One day
// ability OrElse[T] {
//   fn hasValue(): bool
//   fn unwrap(): T
// }

deftype alias int = i64
deftype alias uint = u64
deftype alias byte = u8

// deftype TypeInfo = enum Unit, Boolean(enum False, True), Int,
//
// deftype Any = {
//   typeInfo: TypeInfo,
//   value: Pointer
// }

// Must have ability id 0
ability Equals {
  fn equals(self: Self, other: Self): bool
}

ability Show {
  // TODO: make this use an allocator. How does it get passed conveniently?
  fn show(self: Self): string
}

intern fn sizeOf[T](): u64
intern fn alignOf[T](): u64
intern fn typeId[T](): bool

fn new[T](value: T): T* {
  val ptr = _k1_malloc(sizeOf[T]());
  val t = ptr as T*;
  referenceSet(t, value);
  t
}


// What will become platform stuff

extern fn _k1_readFileToString(path: string*): string
extern fn _k1_crash(reason: string*, file: string*, line: u64): never

extern fn _k1_malloc(size: u64): Pointer
extern fn _k1_free(ptr: Pointer): unit

// Straight to libc, for now
namespace libc {
  extern(exit) fn exit(code: i32): never

  extern(printf) fn printfString(formatStr: Pointer, len: i32, cString: Pointer): i32
  extern(memcpy) fn memcpy(dst: Pointer, src: Pointer, count: u64): Pointer
  extern(memset) fn memset(src: Pointer, count: u64, value: u8): Pointer
  extern(memcmp) fn memcmp(s1: Pointer, s2: Pointer, size: u64): i32

  extern(realloc) fn realloc(ptr: Pointer, size: u64): Pointer
  extern(arc4random_uniform) fn arc4random_uniform(upperBound: u32): u32
}

// End What will become platform stuff

intern fn referenceSet[T](t: T*, value: T): unit

namespace Pointer {
  fn null(): Pointer { 0 as u64 as Pointer }

  fn isNull(self: Pointer): bool {
    self as u64 == 0
  }

  // This is an intrinsic so that we can codegen a getelementptr
  // instruction in LLVM rather than a pointer cast.
  // But we _could_ do it in userland using sizeOf and arithmetic which is neat!
  intern fn refAtIndex[T](self: Pointer, index: u64): T*

}

impl Equals for Pointer {
  fn equals(self: Pointer, other: Pointer): bool {
    self as u64 == other as u64
  }
}

//deftype alias opaque string = { len: u64, data: Pointer }

fn printInt(value: i64): unit {
  print(value.show())
}
fn printUInt(value: u64): unit {
  print(value.show())
}
fn print(value: string): unit {
  val fmt = "%.*s\0".data;
  libc::printfString(fmt, value.len as i32, value.data);
  ()
}

fn printIt[T](value: T): unit where T: Show {
  val s = value.show();
  print(s)
}

fn println(value: string): unit {
  val fmt = "%.*s\n\0".data;
  libc::printfString(fmt, value.len as i32, value.data);
  ()
}

namespace sys {
  fn exit(code: i32): never {
    libc::exit(code)
  }
}

fn crash(context locn: CompilerSourceLoc)(msg: string): never {
  _k1_crash(msg.&, locn.filename.&, locn.line.&);
}

namespace Files {
  fn readToString(path: string): string {
    _k1_readFileToString(path.&)
  }
}

fn printBool(value: bool): unit {
  if value { print("true") } else { print("false") }
}

fn assert(context locn: CompilerSourceLoc)(value: bool): unit {
  if not value {
    crash("ASSERT FAILED")
  };
}
fn assertMsg(context locn: CompilerSourceLoc)(msg: string, value: bool): unit {
  if not value {
    crash("ASSERT FAILED: ".concat(msg))
  };
}

namespace char {
  fn toString(self: char): string {
    val arr = Array::new[char](0).&;
    arr.push(self);
    string::fromChars(arr.*);
  }

  fn toAsciiDigit(self: char): u8? {
    val i_code = self as u8;
    if i_code >= 48 and i_code <= 57 {
      i_code - 48
    } else {
      .None
    }
  }
}

namespace Array {

  fn empty[T](): Array[T] {
    new[T](0)
  }

  fn new[T](cap: u64): Array[T] {
    val data = if cap == 0 {
      Pointer::null()
    } else {
      val sizeBytes = sizeOf[T]() * cap;
      _k1_malloc(sizeBytes)
    };
    { len: 0, cap: cap, data: data }
  }

  fn getRef[T](self: Array[T], index: u64): T* {
    if index >= self.len {
      crash("Array index out of bounds")
    };
    val tRef: T* = self.data.refAtIndex[T](index);
    tRef
  }

  fn set[T](self: Array[T], index: u64, elem: T): unit {
    val tRef = self.getRef(index);
    referenceSet(tRef, elem);
  }

  fn get[T](self: Array[T], index: u64): T {
    val tRef = self.getRef(index);
    tRef.*
  }

  fn _grow[T](self: Array[T]*): unit {
    val tSize = sizeOf[T]();
    val newCap: u64 = if self.cap == 0 {
      // For large elements, just allocate what's needed
      if tSize >= 1024 1 else 8
    } else {
      self.cap * 2
    };
    val newSize = newCap * sizeOf[T]();

    val ptr = if self.data.isNull() {

      _k1_malloc(newSize)
    } else {
      libc::realloc(self.data, newSize)
    };
    if ptr.isNull() {
      crash("allocation failed in array grow");
    };

    self.data = ptr;
    self.cap = newCap;
  }

  fn push[T](self: Array[T]*, elem: T): unit {
    val startLength = self.len;
    if startLength == self.cap {
      self._grow();
    };
    self.len = startLength + 1;
    self.set(startLength, elem);
    ()
  }

  fn isEmpty[T](self: Array[T]): bool {
    self.len == 0
  }

  fn nonEmpty[T](self: Array[T]): bool {
    self.len > 0
  }

  fn firstRef[T](self: Array[T]): T*? {
    // This exercises both Some-wrapping, .None-promotion, and deftype hinting through ifs!
    if not self.isEmpty() {
      self.getRef(0)
    } else {
      .None
    }
  }

  fn first[T](self: Array[T]): T? {
    switch self.firstRef() {
      .None -> .None,
      .Some(firstRef) -> .Some(firstRef.*)
    }
  }

  fn lastRef[T](self: Array[T]): T*? {
    if not self.isEmpty() {
      self.getRef(self.len - 1)
    } else {
      .None
    }
  }

  fn last[T](self: Array[T]): T? {
    switch self.lastRef() {
      .None -> .None,
      .Some(lastRef) -> .Some(lastRef.*)
    }
  }

  // I know I know I know I know
  fn reversed[T](self: Array[T]): Array[T] {
    val reversed = Array::new[T](self.len).&;
    mut i = self.len - 1;
    while (i >= 0) {
      reversed.push(self.get(i));
      i = i - 1;
    };
    reversed
  }

  // TODO(stdlib slow)
  fn concat[T](self: Array[T]*, other: Array[T]): unit {
    for e in other do {
      self.push(e)
    }
  }
}

impl Equals for Array[u8] {
  fn equals(self: Array[u8], other: Array[u8]): bool {
    if self.len != other.len {
      false
    } else {
      libc::memcmp(self.data, other.data, self.len) == 0
    }
  }
}

impl Equals for Array[int] {
  // todo: Obviously this should be a memcmp
  fn equals(self: Array[int], other: Array[int]): bool {
    if self.len != other.len {
      false
    } else {
      mut i: u64 = 0;
      while i < self.len {
        if self.get(i) != other.get(i) {
          return(false);
        };
        i = i + 1;
      };
      true
    }
  }
}

impl Show for bool {
  fn show(self: bool): string {
    if self "true" else "false"
  }
}

impl Show for i64 {
  // We know this is super slow, relax, it'll be ok
  fn show(self: i64): string {
    val neg = self < 0;
    mut remaining: i64 = if neg self * -1 else self;
    val buf = Array::new[char](8).&;
    while remaining > 0 {
      val d = remaining % 10;
      val c = (d + 48) as u8 as char;
      buf.push(c);
      remaining = remaining / 10;
    };

    if neg {
      buf.push('-');
    };

    // I know I know I know I know
    // Since we know its bytes we could do simd stuff or even just 64 bits at a time
    // Which I guess is technically 'simd' too
    // Why did inference break here??
    val rev = buf.*.reversed();
    string::fromChars(rev)
  }
}

impl Show for u64 {
  fn show(self: u64): string {
    mut remaining: u64 = self;
    val buf = Array::new[char](8).&;
    while remaining > 0 {
      val d = remaining % 10;
      val c = (d + 48) as u8 as char;
      buf.push(c);
      remaining = remaining / 10;
    };

    val rev = buf.*.reversed();
    string::fromChars(rev)
  }
}

impl Show for i32 {
  fn show(self: i32): string {
    (self as i64).show()
  }
}

impl Show for i16 {
  fn show(self: i16): string {
    (self as i64).show()
  }
}

impl Show for i8 {
  fn show(self: i8): string {
    (self as i64).show()
  }
}

impl Equals for i64 {
  fn equals(self: i64, other: i64): bool {
    // Because the types of self and other are i64, the compiler will not 
    // use the ability but rather do the intrinsic thing
    self == other
  }
}
