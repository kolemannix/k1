// This table exercises:
// - Generics
// - References/pointers
// - Structs and enums (Option type)
// - Loops and control flow
// - Basic numeric operations
// - String handling
// - Array operations

deftype HashMap[V] = {
  size: u64,
  // TODO: Switch to a 3-state enum for the deleted variant for a more efficient layout
  entries: Array[{ key: string, value: V, deleted: bool }?],
}

fn fnv1a_hash(key: string): u64 {
  val FNV_PRIME: u64 = 1099511628211;
  val FNV_OFFSET: u64 = 14695981039346656037;
  mut hash_value = FNV_OFFSET;
  for c in key do {
    hash_value = Bitwise::xor(hash_value, c as u8 as u64);
    hash_value = hash_value * FNV_PRIME;
  };
  hash_value
}

namespace HashMap {

  deftype Entry[V] = { key: string, value: V, deleted: bool }?

  fn _make[V](cap: u64): HashMap[V] {
    { size: 0, entries: Array::filled(cap, .None) }
  }

  fn new[V](): HashMap[V] {
    _make(0)
  }
  // ha ha ha. once again Mr. Ocean. You have come in second.

  fn grow[V](self: HashMap[V]*): unit {
    val origSize = self.size;
    val oldEntries = self.entries;
    val newCap = if oldEntries.cap == 0 1: u64 else oldEntries.cap * 2;

    val newMap = _make[V](newCap);
    referenceSet(self, newMap);

    for v in oldEntries do {
      if v is .Some(v) {
        if not v.deleted self.insert(v.key, v.value)
      }
    };
  }

  fn _computeIndex[V](self: HashMap[V]*, key: string): u64 {
    val hash = fnv1a_hash(key);
    val index = hash % self.entries.len;
    index
  }

  // Super naive fully linear probing
  fn _probe[V](self: HashMap[V], startIndex: u64): Entry[V]* {
    mut probeIndex = startIndex;
    loop {
      probeIndex = probeIndex + 1;
      if probeIndex == self.entries.len { probeIndex = 0 };

      val entryRef = self.entries.getRef(probeIndex);
      // TODO: match on reference
      if entryRef.* is .None {
        return(entryRef)
      }
    }
  }

  fn fillFactor[V](self: HashMap[V]): f32 {
    val fillDivisor = if self.entries.len == 0 1 as f32 else self.entries.len as f32;
    val fillNumerator = if self.size == 0 1.0 else self.size as f32;
    val fillFactor = fillNumerator / fillDivisor;
    fillFactor
  }

  fn insert[V](self: HashMap[V]*, key: string, value: V): unit {
    if self.fillFactor() > 0.7 {
      self.grow();
    };
    val index = self._computeIndex(key);
    val entryRef = self.entries.getRef(index);
    val entry = { key: key, value: value, deleted: false };
    switch entryRef.* {
      .None -> {
        referenceSet(entryRef, .Some(entry));
        self.size = self.size + 1;
      },
      .Some({ key: existingKey, value: _ }) -> {
        if existingKey == key {
          referenceSet(entryRef, .Some(entry));
        } else {
          val nextAvailableEntry = self._probe(index);
          referenceSet(nextAvailableEntry, .Some(entry));
          self.size = self.size + 1;
        }
      }
    };
  }

  fn get[V](self: HashMap[V]*, key: string): V? {
    val index = self._computeIndex(key);
    val slot = self.entries.get(index);
    switch slot {
      .None -> .None,
      .Some({ key: existingKey, value: v, deleted }) -> {
        if existingKey == key {
          if deleted .None else .Some(v)
        } else {
          mut probe_index = index;
          loop {
            probe_index = probe_index + 1;
            if probe_index == self.entries.len { probe_index = 0; };

            switch self.entries.get(probe_index) {
              .Some({ key: existingKey, value: value, deleted }) -> {
                if key == existingKey {
                  if deleted break(.None)
                  else break(.Some(value))
                }
              },
              .None -> { break(.None) },
            }
          }
        }
      }
    };
  }

  fn remove[V](self: HashMap[V]*, key: string): bool {
    val index = self._computeIndex(key);
    val entryRef = self.entries.getRef(index);
    switch entryRef.* {
      .None -> false,
      .Some({ key: existingKey, value: value, deleted }) -> {
        if key == existingKey {
          entryRef.asSome()!.value*.deleted = true;
          not deleted
        } else {
          mut probeIndex = index;
          loop {
            probeIndex = probeIndex + 1;
            if probeIndex == self.entries.len { probeIndex = 0; };

            val probedEntryRef = self.entries.getRef(probeIndex);
            switch probedEntryRef.* {
              .Some({ key: existingKey, value, deleted }) -> {
                if key == existingKey {
                  probedEntryRef.asSome()!.value*.deleted = true;
                  break(not deleted)
                }
              },
              .None -> { break(false) },
            }
          }
        }
      }
    }

  }

  fn dump[V](self: HashMap[V]): unit where V: Show {
    val capacity = self.entries.len;
    val size = self.size;
    println("Capacity: \{capacity}");
    println("Size: \{size}");
    println("");
    for self.entries do {
      printUInt(it_index);
      print(" ");
      switch it {
        , .None -> println("empty")
        , .Some({ key, value, deleted }) -> {
            val v = Show::show(value);
            println("\{key} -> \{value} (d=\{deleted})");
        }
      }
    }
  }

}

fn test(size: u64): unit {
  val myMap: HashMap[int]* = HashMap::new().&;
  mut i = 0: i64;
  while i < size as i64 {
    myMap.insert(i.show(), i);
    if i % 5 == 0 {
      myMap.remove(i.show());
    };
    i = i + 1;
  };
  i = 0;
  // myMap.dump();
  while i < size as i64 {
    val result = myMap.get(i.show());
    if i % 5 == 0 {
      assertMsg("\{i} should be empty", result is .None);
    } else {
      if result is .Some(v) { assert (v == i) } else { crash("Missing value \{i}") }
    };
    i = i + 1;
  };
  // myMap.dump();
}

fn main(): int {
  test(100000);
  0
}

fn randByte(): u8 {
  (libc::arc4random_uniform(26) + 65) as u8
}

fn randString(len: uint): string {
  val arr = Array::withCapacity[char](len).&;
  mut i: uint = 0;
  while i < len {
    arr.push(randByte() as char);
    i = i + 1;
  };
  string::fromChars(arr)
}
