// This table exercises:
// - Generics
// - References/pointers
// - Structs and enums (Option type)
// - Loops and control flow
// - Basic numeric operations
// - String handling
// - Array operations

deftype HashMap[V] = {
  size: u64,
  entries: Array[{ key: string, value: V }?],
}

fn fnv1a_hash(key: string): u64 {
  val FNV_PRIME: u64 = 1099511628211;
  val FNV_OFFSET: u64 = 14695981039346656037;
  mut hash_value = FNV_OFFSET;
  for c in key do {
    hash_value = Bitwise::xor(hash_value, c as u8 as u64);
    hash_value = hash_value * FNV_PRIME;
  };
  hash_value
}

namespace HashMap {

  deftype Entry[V] = { key: string, value: V }?

  fn _make[V](cap: u64): HashMap[V] {
    val entries: Array[Entry[V]]* = Array::new(cap).&;
    mut i = 0: u64;
    while i < cap {
      entries.push(.None);
      i = i + 1;
    };
    { size: 0, entries: entries.* }
  }

  fn new[V](): HashMap[V] {
    _make(2)
  }

  fn grow[V](self: HashMap[V]*): unit {
    val origSize = self.size;
    val oldEntries = self.entries;
    val newCap = oldEntries.cap * 2;

    val newMap = _make[V](newCap);
    referenceSet(self, newMap);

    mut oldCount = 0: u64;
    for v in oldEntries do {
      if v is .Some(v) {
        oldCount = oldCount + 1;
        self.insert(v.key, v.value)
      }
    };
  }

  fn _locateNoProbe[V](self: HashMap[V]*, key: string): Entry[V]*? {
    val hash = fnv1a_hash(key);
    val index = hash % self.entries.len;
    self.entries.getRef(index)
  }

  // Super naive fully linear probing
  fn _probe[V](self: HashMap[V], startIndex: u64) -> Entry[V]* {
    mut probeIndex = startIndex;
    mut done = false;
    while not done {
      probeIndex = probeIndex + 1;
      if probeIndex == self.entries.len {
        probeIndex = 0
      };
      val entryRef = self.entries.getRef(probeIndex);
      if entryRef.* is .None {
        // done = true;
        return(entryRef);
      };
  }

  fn insert[V](self: HashMap[V]*, key: string, value: V): unit where V: Show {
    val fillFactor = self.size as f32 / self.entries.len as f32;
    if fillFactor > 0.7 {
      self.grow();
    };
    val slotRef = self._locateNoProbe(key);
    val entry = { key: key, value: value };
    switch slotRef.* {
      .None -> {
        referenceSet(slotRef, .Some(entry));
        self.size = self.size + 1;
      },
      .Some({ key: existingKey, value: _ }) -> {
        if existingKey == key {
          val elem = { key: key, value: value };
          slotRef.* = .Some(elem);
        } else {
          val nextAvailableEntry = self._probe(index);
          referenceSet(nextAvailableEntry, .Some(elem));
          self.size = self.size + 1;
        }
      }
    };
  }

  fn get[V](self: HashMap[V]*, key: string): V? {
    val hash = fnv1a_hash(key);
    val index = hash % self.entries.len;
    val slot = self.entries.get(index);
    switch slot {
      .None -> .None,
      .Some({ key: existingKey, value: v }) -> {
        if existingKey == key {
          .Some(v)
        } else {
          mut probe_index = index;
          mut retVal: V? = .None;

          // todo: Return from inside loop? or break w/ value
          mut done = false;
          while not done {
            probe_index = probe_index + 1;
            if probe_index == self.entries.len {
              probe_index = 0;
            };
            if self.entries.get(probe_index) is .Some({ key: existingKey, value: v }) {
              if existingKey == key {
                retVal = .Some(v);
                done = true;
              }
            };
          };
          retVal
        }
      }
    };
  }

  fn remove(self: HashMap[V]*, key: string): unit {

  }

  fn dump[V](self: HashMap[V]): unit where V: Show {
    print("Capacity: ");
    printUInt(self.entries.cap);
    println("");
    for self.entries do {
      printUInt(it_index);
      print(" ");
      switch it {
        , .None -> println("empty")
        , .Some({ key, value }) -> {
            print(key | string::concat(" -> ") | string::concat(value.show()) | string::concat('\n'.toString()));
        }
      }
    }
  }

}


fn test(): unit {
  val myMap: HashMap[int]* = HashMap::new().&;
  mut i = 0: i64;
  val size = 256: u64;
  while i < size as i64 {
    myMap.insert(i.show(), i);
    i = i + 1;
  };
  assert(myMap.size == size);
  i = 0;
  while i < size as i64 {
    assert(myMap.get(i.show())! == i);
    i = i + 1;
  };
  myMap.*.dump();
}

fn randByte(): u8 {
  (libc::arc4random_uniform(26) + 65) as u8
}

fn randString(len: uint): string {
  val arr = Array::new[char](len).&;
  mut i: uint = 0;
  while i < len {
    arr.push(randByte() as char);
    i = i + 1;
  };
  string::fromChars(arr)
}

fn main(): int {
  test();
  // printUInt(42);
  // printInt(42);
  // printInt(-42);
  0
}
