deftype Elem[E] = { key: string, value: E }
deftype HashMap[V] = {
  size: u64,
  slots: Array[Elem[V]?],
}

namespace HashMap {
  fn new[V](): HashMap[V] {
    val slots: Array[Elem[V]?]* = &Array::new(16);
    mut i = 0;
    while i < 16 {
      slots.push(.None);
      i = i + 1;
    };
    { size: 0, slots: *slots }
  }

  fn fnv1a_hash(key: string): u64 {
    val FNV_PRIME: u64 = 1099511628211;
    val FNV_OFFSET: u64 = 14695981039346656037;
    mut hash_value = FNV_OFFSET;
    for c in key do {
      hash_value = Bitwise::xor(hash_value, c as u8 as u64);
      hash_value = hash_value * FNV_PRIME;
    };
    hash_value
  }

  fn insert[V](self: HashMap[V]*, key: string, value: V): unit {
    val hash = fnv1a_hash(key);
    val index = hash % self.slots.len;
    val elem = { key: key, value: value };
    val slot = self.slots.get(index);
    // val fillFactor = fdiv(self.size, self.slots.len);
    switch slot {
      .None -> {
        self.slots.set(index, Opt.Some(elem));
        self.size = self.size + 1;
      },
      .Some({ key: existingKey, value: _ }) -> {
        if existingKey == key {
          self.slots.set(index, .Some(elem));
        } else {
          // Super naive fully linear probing
          mut probe_index = index;
          mut done = false;
          while not done {
            probe_index = probe_index + 1;
            if probe_index == self.slots.len {
              probe_index = 0;
            };
            if self.slots.get(probe_index) is None {
              self.slots.set(probe_index, .Some(elem));
              self.size = self.size + 1;
              done = true;
            };
          };
        }
      }
    }
  }

  fn dump[V](self: HashMap[V]): unit where V: Show {
    print("Capacity: ");
    printUInt(self.slots.cap);
    println("");
    for self.slots do {
      printUInt(it_index);
      print(" ");
      switch it {
        , .None -> println("empty")
        , .Some({ key, value }) -> {
            print(key | string::concat(" -> ") | string::concat(value.show()) | string::concat('\n'.toString()));
        }
      }
    }
  }

}


fn test(): unit {
  val myMap: HashMap[int]* = &HashMap::new();
  mut i = 0;
  while i < 100 {
    printInt(i);
    myMap.insert(randString(4), i);
    i = i + 1;
  };
  myMap.insert("1", 2);
  myMap.insert("1", 3);
  myMap.insert("2", 4);
  myMap.insert("18", 4);
  (*myMap).dump();

}

fn randByte(): u8 {
  (arc4random_uniform(26) + 65) as u8
}

fn randString(len: uint): string {
  val arr = &Array::new[char](len);
  mut i: uint = 0;
  while i < len {
    arr.push(randByte() as char);
    i = i + 1;
  };
  string::fromChars(arr)
}

fn main(): int {
  test();
  // printUInt(42);
  // printInt(42);
  // printInt(-42);
  0
}
