namespace Opt {
  fn hasValue[T](self: T?): bool {
    self is .Some(_)
  }

  fn get[T](self: T?): T {
    if self is .Some(t) t else {
      crash("Opt.get on None")
    }
  }
}

// Convenience constructors due to highly ubiquitous nature of Opt
fn none[T](): Opt[T].None { Opt.None[T] }
fn some[T](value: T): Opt[T].Some { Opt.Some[T](value) }

fn opt_equals[T](a: Opt[T], b: Opt[T]): bool where T: Equals {
  if a is .Some(at) {
    if b is .Some(bt) at == bt else false
  } else {
    b is .None
  }
}

impl Equals for Opt[i64] {
  fn equals(self: Opt[i64], other: Opt[i64]): bool {
    opt_equals(self, other)
  }
}
