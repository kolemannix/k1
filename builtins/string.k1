// TODO: CString type
// type alias opaque CString = Pointer
// namespace CString { }

namespace string {

  fn getRef(self: string, index: u64): char* {
    if index >= self.len {
      crash("string index out of bounds")
    };
    val charRef: char* = self.data.refAtIndex(index);
    charRef
  }

  fn get(self: string, index: u64): char {
    val charRef: char* = self.getRef(index);
    *charRef
  }
  fn set(self: string, index: u64, value: char): unit {
    val charRef: char* = self.getRef(index);
    referenceSet(charRef, value)
  }

  fn fromChars(bytes: Array[char]): string {
    { len: bytes.len, data: bytes.data }
  }

  fn indexOf(self: string, c: char): i64 {
    mut i: u64 = 0;
    while i < self.len {
      if self.get(i) == c {
        return(i as i64);
      };
      i = i + 1;
    };
    -1
  }

  fn concat(self: string, other: string): string {
    val new_length = self.len + other.len;
    val copied = &Array::new[char](new_length);

    libc::memcpy(copied.data, self.data, self.len);

    val offset = copied.data as u64 + self.len;
    libc::memcpy(offset as Pointer, other.data, other.len);

    copied.len = new_length;
    fromChars(copied)
  }

  fn appendChar(self: string, c: char): string {
    val new_length = self.len + 1;

    val copied = &Array::new[char](new_length);
    copied.len = new_length;

    libc::memcpy(copied.data, self.data, self.len);
    copied.set(self.len, c);

    fromChars(copied)
  }

  fn splitByChar(self: string, delim: char): Array[string] {
    val results = &Array::new[Array[char]](0);
    mut accum = &Array::new[char](0);
    for c in self do {
      if c == delim {
        if accum.nonEmpty() { 
          results.push(accum);
          accum = &Array::new[char](0);
        }
      } else {
        accum.push(c);
      };
    };
    if accum.nonEmpty() {
      results.push(accum);
    };

    for buf in *results yield {
      string::fromChars(buf)
    }
  }

  fn indexOfString(self: string, target: string): u64? {
    mut i: u64 = 0;
    while i < self.len {
      if i + target.len >= self.len {
        return(.None)
      };
      val sub = self.substring(i, i + target.len);
      if sub == target { return(i) };
      i = i + 1;
    };
    .None
  }

  fn substring(self: string, start: u64, end: u64): string {
    if start >= self.len or start < 0 {
      crash("substring start index out of bounds: ".concat(start.show()))
    };
    val end = if end >= self.len self.len else end;
    if end < start {
      return("")
    };
    val newLen = end - start;
    val newDataU64 = (self.data as u64) + (sizeOf[char]() * start);
    val newData = newDataU64 as Pointer;
    { len: newLen, data: newData }
  }

  fn startsWith(self: string, other: string): bool {
    self.substring(0, other.len) == other
  }

  fn toCString(self: string): Pointer {
    self.concat('\0'.toString()).data
  }
}

impl Equals for string {
  intern fn equals(self: string, that: string): bool
}

impl Equals for Array[string] {
  fn equals(self: Array[string], other: Array[string]): bool {
    if self.len != other.len {
      false
    } else {
      mut i: u64 = 0;
      while i < self.len {
        if self.get(i) != other.get(i) {
          return(false);
        };
        i = i + 1;
      };
      true
    }
  }
}

// One day? impl Show for Array[T] ???
// Note(stdlib slow): Need efficient string building
impl Show for Array[string] {
  fn show(self: Array[string]): string {
    mut builder: string = "[";
    for s in self do {
      builder = builder.concat(s);
      val last = it_index == self.len - 1;
      if not last {
        builder = builder.concat(", ");
      };
    };
    builder.concat("]")
  }
}
