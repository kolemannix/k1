// Has to appear before its static usage :'(
fn id(i: int): int { i }
fn main(): i32 {

  // String creation (special case)
  #static "Hello, Static";

  // Struct creation
  let point = #static {
    ({ x: 1, y: 2 })
  };
  assert(point.x == 1);
  assert(point.y == 2);

  // Scalars
  assert(#static true);
  assert(not (#static false));
  assert(not (#static true == false));
  assert(#static () == ());
  assert(#static 'a' == 'a');
  assert(not #static 'A' == 'a');
  assert(not #static 123 == -123);
  assert(not #static 123.0 == 3.14);

  // Variable assign
  let goodbye: string = #static {
    let mut msg = "Hello, World";
    msg = "Goodbye, World!";
    msg
  };
  println(goodbye);

  let letAssign = #static {
    let mut i = 22;
    i = 10;
    i
  };
  assertEquals(letAssign, 10);
  
  let padded = #static {
    let padded = { a: 1: u8, b: 2: u8, c: 3: u8, d: 4: u64, e: 5 };
    padded
  };
  assertEquals(padded.a, 1);
  assertEquals(padded.b, 2);
  assertEquals(padded.c, 3);
  assertEquals(padded.d, 4);
  assertEquals(padded.e, 5);

  let letRef = #static {
    let* i = 10;

    //assert(i.* == 10);
    i <- id(i.*);
    i.*
  };
  assertEquals(letRef, 10);

  assertEquals(k1/IS_STATIC, false);
  #static assert(k1/IS_STATIC);

  let enum1 = #static {
    let x = some(42);
    let y = if x is .Some(x) x else crash("");
    y
  };
  assertEquals(enum1, 42);

  let fieldPtrTest = #static {
    let* x = 21;
    let s = { ptr: x };
    s.ptr.*
  };
  assertEquals(fieldPtrTest, 21);


  let ptrInStructs = #static {
    let* b: u8* = 10;
    let* f = { asdf: b };
    f.asdf.*
  };
  assertEquals(ptrInStructs, 10);

  assertEquals(#static {
    let* sb = StringBuilder/new();
    sb.putString("Hello");
    sb.build()
  }, "Hello");

  let s = testCompile( #static assert(false) );
  printIt(s);

  let s2 = testCompile( #static testCompile(42) );
  printIt(s2);

  #static crash("");

  // Breaks
  //loop {
  //  switch 42 {
  //    _ -> break(100)
  //  }
  //};

  0
}

