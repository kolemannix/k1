namespace list_test {
fn listFill(): int {
  let* xs = List/empty[int]();
  assert(xs.cap() == 0);
  assert(xs.len == 0);

  let mut i = 0: u64;
  while i < 5 {
    assert(xs.len == i);
    xs.push(i as i64);
    i = i + 1;
  };
  assert(xs.len == 5);
  assert(xs.get(0) == 0);
  assert(xs.get(1) == 1);
  assert(xs.get(2) == 2);
  assert(xs.get(3) == 3);
  assert(xs.get(4) == 4);
  assert(xs.first()! == 0);
  assert(xs.last()! == 4);

  let exp = [0,1,2,3,4];
  assert(xs.* == exp);

  let xs2 = xs.cloned();
  assert(xs2 == xs.*);

  let empty = []: List[byte];
  let emptyCloned = empty.cloned();
  assert(empty.len == emptyCloned.len);
  assert(empty.cloned() == empty);

  0
}

fn listSlice(): unit {
  let* a =  [1,2,3];
  let slice = a.slice(0,2);
  assert(slice.len == 2);
  assert(slice.get(0) == 1);
  assert(slice.get(1) == 2);

  let emptyList = []: List[int];
  let emptySlice = emptyList.slice(0,0);
  assert(emptySlice.len == 0);

  let fullSlice = a.slice(0,3);
  assert(fullSlice.len == 3);
  assert(fullSlice.get(0) == 1);
  assert(fullSlice.get(1) == 2);
  assert(fullSlice.get(2) == 3);
}

deftype Point = {
  x: int,
  y: int,
  z: int,
}

fn listOfStructs(): int {
  let* xs = [{ x: 1, y: 2, z: 3}: Point];
  let mut i = 0;
  while i < 100 {
    xs.push({ x: 1, y: 2, z: 3});
    i = i + 1;
  };

  assert(xs.len == 101);
  assert(xs.cap() == 128);
  0
}

fn listEquality(): int {
  let empty: List[int] = [];
  assert(empty != [1]);
  assert(empty == empty);
  assert([3] == [3]);
  assert(["asdf", "2"] != ["asdf", "3"]);
  0
}

// Begin sort stuff

impl Show for { rank: int, payload: string } {
  fn show(self: Self): string {
    let rank = self.rank;
    let payload = self.payload;
    "Payload: \{payload} (rank=\{rank})"
  }
}

impl Comparable for { rank: int, payload: string } {
  fn compare(self: Self, other: Self): Ordering {
    self.rank.compare(other.rank)
  }
}

impl Equals for { rank: int, payload: string } {
  fn equals(self: Self, other: Self): bool {
    self.rank == other.rank and self.payload == other.payload
  }
}

impl Equals for List[{ rank: int, payload: string }] {
  fn equals(self: Self, other: Self): bool {
    if self.len != other.len {
      (false)
    } else {
      let mut i: u64 = 0;
      while i < self.len {
        if self.get(i) != other.get(i) {
          return(false);
        };
        i = i + 1;
      };
      true
    }
  }
}

fn testSortInt(input: List[int], expected: List[int]): unit {
  let sorted = input.sorted();
  assert(sorted == expected);
}

fn testSortOther(input: List[{ rank: int, payload: string }], expected: List[{ rank: int, payload: string }]): unit {
  let sorted = input.sorted();
  assert(sorted == expected);
}

fn testSort(): unit {
  testSortInt([], []);
  testSortInt([0], [0]);
  testSortInt([5,4], [4,5]);
  testSortInt([5,3,1], [1,3,5]);
  testSortOther([
    { rank: 1, payload: "third" },
    { rank: 0, payload: "first" },
    { rank: 0, payload: "second" }
  ], [
    { rank: 0, payload: "first" },
    { rank: 0, payload: "second" },
    { rank: 1, payload: "third" }
  ]);
}

fn testSwap(): unit {
  let* a = [1,2];
  a.swap(0,1);
  assert(a.* == [2,1]);
  a.swap(1,0);
  assert(a.* == [1,2]);
  a.swap(1,1);
  assert(a.* == [1,2]);
}

} // end namespace

fn main(): int {
  list_test/listOfStructs();
  list_test/listSlice();
  list_test/listFill();
  list_test/listEquality();
  list_test/testSort();
  list_test/testSwap();
  0
}
