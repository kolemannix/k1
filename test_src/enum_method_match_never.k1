ns enum_method_match_never; 

deftype E = either A(int), B
ns E {
  fn valueIfA(self: E): int {
    switch self {
      .A(i) -> i,
      .B -> crash("This is a B!"),
    }
  }
}


fn isVariant(): unit {
  let x: either A(int), B(int), C = .A(42);
  assert(x.asB().isNone());
  assert(x.asC().isNone());
  assert(x.asA().isSome());
}

fn main(): int {
    isVariant();

    use enum_method_match_never/E;
    let x: E = .A(42);
    let y: E.A = .A(42);
    assert(x.valueIfA() == y.valueIfA());
    assert((.B: E).valueIfA() == 0);
    0
  }
//exitcode: 1 This is a B!
