ns buffer_test;

fn bufferEmpty(): unit {
  let empty = Buffer/empty[int]();
  assert(empty.len == 0);
  assert(empty.isEmpty());
  assert(not empty.nonEmpty());
  assert(empty.first() == .None);
  assert(empty.last() == .None);
}

fn bufferFilled(): unit {
  let buf = Buffer/filled(5, 42);
  assert(buf.len == 5);
  assert(not buf.isEmpty());
  assert(buf.nonEmpty());

  let mut i = 0: u64;
  while i < 5 {
    assert(buf.get(i) == 42);
    i = i + 1;
  };
}

fn bufferGetSet(): unit {
  let buf = Buffer/filled(3, 0);
  buf.set(0, 10);
  buf.set(1, 20);
  buf.set(2, 30);

  assert(buf.get(0) == 10);
  assert(buf.get(1) == 20);
  assert(buf.get(2) == 30);
}

fn bufferFirstLast(): unit {
  let buf = Buffer/filled(3, 0);
  buf.set(0, 10);
  buf.set(1, 20);
  buf.set(2, 30);

  assert(buf.first() == .Some(10));
  assert(buf.last() == .Some(30));
}

fn bufferSlice(): unit {
  let buf = Buffer/filled(5, 0);
  let mut i = 0: u64;
  while i < 5 {
    buf.set(i, i as int);
    i = i + 1;
  };

  let slice = buf.slice(1, 4);
  assert(slice.len == 3);
  assert(slice.get(0) == 1);
  assert(slice.get(1) == 2);
  assert(slice.get(2) == 3);
}

fn bufferTakeDrop(): unit {
  let buf = Buffer/filled(5, 0);
  let mut i = 0: u64;
  while i < 5 {
    buf.set(i, i as int);
    i = i + 1;
  };

  let taken = buf.take(3);
  assert(taken.len == 3);
  assert(taken.get(0) == 0);
  assert(taken.get(1) == 1);
  assert(taken.get(2) == 2);

  let dropped = buf.drop(2);
  assert(dropped.len == 3);
  assert(dropped.get(0) == 2);
  assert(dropped.get(1) == 3);
  assert(dropped.get(2) == 4);
}

fn bufferConcat(): unit {
  let buf1 = Buffer/filled(2, 1);
  let buf2 = Buffer/filled(2, 2);

  let combined = buf1.concat(buf2);
  assert(combined.len == 4);
  assert(combined.get(0) == 1);
  assert(combined.get(1) == 1);
  assert(combined.get(2) == 2);
  assert(combined.get(3) == 2);
}

fn bufferSwap(): unit {
  let* buf = Buffer/filled(3, 0);
  buf.*.set(0, 10);
  buf.*.set(1, 20);
  buf.*.set(2, 30);

  buf.swap(0, 2);

  assert(buf.*.get(0) == 30);
  assert(buf.*.get(1) == 20);
  assert(buf.*.get(2) == 10);
}

fn bufferClone(): unit {
  let original = Buffer/filled(3, 0);
  original.set(0, 10);
  original.set(1, 20);
  original.set(2, 30);

  let cloned = original.cloned();
  assert(cloned == original);

  // Modify clone and verify original is unchanged
  cloned.set(0, 99);
  assert(original.get(0) == 10);
  assert(cloned.get(0) == 99);
}

fn test(): unit {
  bufferEmpty();
  bufferFilled();
  bufferGetSet();
  bufferFirstLast();
  bufferSlice();
  bufferTakeDrop();
  bufferConcat();
  bufferSwap();
  bufferClone();
}
