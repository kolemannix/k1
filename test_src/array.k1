fn arrayFill(): int {
  let* xs = Array::new[int]();
  assert(xs.cap == 0);
  assert(xs.len == 0);

  let mut i = 0: u64;
  while i < 5 {
    assert(xs.len == i);
    xs.push(i as i64);
    i = i + 1;
  };
  assert(xs.len == 5);
  assert(xs.*.get(0) == 0);
  assert(xs.*.get(1) == 1);
  assert(xs.*.get(2) == 2);
  assert(xs.*.get(3) == 3);
  assert(xs.*.get(4) == 4);
  assert(xs.*.first()! == 0);
  assert(xs.*.last()! == 4);
  assert(xs.* == [0,1,2,3,4]);

  let xs2 = xs.*.cloned();
  assert(xs2 == xs.*);

  let empty = []: Array[byte];
  assert(empty.cloned() == empty);

  0
}

deftype Point = {
  x: int,
  y: int,
  z: int,
}

fn arrayOfStructs(): int {
  let* xs = [{ x: 1, y: 2, z: 3}: Point];
  let mut i = 0;
  while i < 100 {
    xs.push({ x: 1, y: 2, z: 3});
    i = i + 1;
  };

  assert(xs.len == 101);
  assert(xs.cap == 128);
  0
}

fn arrayEquality(): int {
  let empty: Array[int] = [];
  assert(empty != [1]);
  assert(empty == empty);
  assert([3] == [3]);
  assert(["asdf", "2"] != ["asdf", "3"]);
  0
}

fn main(): int {
  arrayOfStructs();
  arrayFill();
  arrayEquality();
  0
}
