ns any_test;

use types/Any
use types/TypeSchema
use types/typeId
use types/makeAny

fn kindOfAny(any: Any): string {
  typeVariantName(any.typeId) ? "fail"
}

fn typeVariantName(typeId: u64): ?string {
  let schema = types/typeSchema(typeId);
  let schemaSchema = types/typeSchema(typeId[TypeSchema]());
  require schemaSchema is .Either(e) else { return(.None) };
  let variant = core/iter/find(e.variants, \(v)
    if v.tag is .U8(t) and t == schema.tag true else false
  );
  variant?.name
}

fn test(): unit {
  let* i: *int = 10;
  let intPtr: Any = makeAny(i);
  let* s = { x: 1, y: 100 };
  let structPtr: Any = makeAny(s);
  assertEquals(kindOfAny(intPtr), "Int");
  assertEquals(kindOfAny(structPtr), "Struct");
}
