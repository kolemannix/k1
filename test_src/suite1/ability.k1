ns ability_01;

ability Num {
  fn num(self: Self): i32
}

// One day, generic abilities
// ability To<T> {
//   fn to(self: Self): T
// }

deftype Point = { x: i32, y: i32 }

impl Num for Point {
  fn num(self: Self): i32 {
    self.x + self.y
  }
}

ability Codec {
  fn aConst(): u8
  fn write(self: Self): Buffer[u8]
  fn read(buffer: Buffer[u8]): Self
}

impl Codec for string {
  fn aConst(): u8 { 10 }
  fn write(self: string): Buffer[u8] {
    self.clone().innerBufferBytes()
  }
  fn read(buffer: Buffer[u8]): string {
    string/fromBytes(buffer)
  }
}

ns qualified_syntax {

  ability HasSecretInt {
    fn secret(): int
  }
  ability HasSecretGen[A] {
    fn secret(): A
  }

  deftype Foo = {}
  deftype Bar = {}

  impl HasSecretGen[A = int] for Foo {
    fn secret(): int { 10 }
  }
  impl HasSecretGen[A = int] for Bar {
    fn secret(): int { 20 }
  }
  impl HasSecretInt for Foo {
    fn secret(): int { 10 }
  }
  impl HasSecretInt for Bar {
    fn secret(): int { 20 }
  }

  fn test(): unit {
    let sFoo: int = HasSecretGen[A = int]@(Foo)/secret();
    assertEquals(sFoo, 10);
    let sBar: int = HasSecretGen[A = int]@(Bar)/secret();
    assertEquals(sBar, 20);

    let sFooInt: int = HasSecretInt@(Foo)/secret();
    assertEquals(sFooInt, 10);
    let sBarInt: int = HasSecretInt@(Bar)/secret();
    assertEquals(sBarInt, 20);
  }
}


fn test(): unit {

  // Method-style call
  let three = 3: i32;
  assert(three.num() == 3);

  // Qualified call
  assert(Num/num(3: i32) == 3);

  // Method-style call on user-defined type
  let p = { x: 1, y: 2 }: Point;
  assert(p.num() == 3);

  let buf: Buffer[u8] = [104: u8, 101, 108, 108, 111].toBuffer();
  let x: string = Codec/read(buf);
  assertEquals(x, "hello");
  assertEquals("asdf", Codec/read("asdf".write()));

  qualified_syntax/test();
}

// This is below 'main' so that
// it tests for order-independence of the impls
impl Num for i32 {
  fn num(self: Self): i32 {
    self
  }
}
