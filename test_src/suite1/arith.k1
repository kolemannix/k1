ns arith;

let z: int = 1337;

fn add_stuff(x: int, y: int): int {
  let b: int = x + 1;
  let foo: int = b + z;
  foo + y
}

fn mult(x: int, y: int): int {
  x * y
}

fn test(): unit {
  let x = (1 * 100 * 2) / 3;
  assert(x == 66);

  assert(50 >= 50);
  assert(51 >= 50);

  assert(50 <= 50);
  assert(49 <= 50);

  let y = x - 14;

  assert(y == 52);
  assert(y > 51);
  assert(y < 53);

  assert(2 % 2 == 0);
  assert(2 % 3 == 2);
  assert(-1 % 2 == -1);
  assert(-10 % 2 == 0);

  assert(add_stuff(y = 2, x = 1) == 1341);

  let multResult: int = mult(
    55,
    2 + 3 + 3,
  );
  assert(multResult == 440);

  assert(1 != 2);
  assert(2 == 2);

  let z = 0.show();
  let zs = "0";
  assertEquals(z, "0");
  assertEquals(1.show(), "1");
  assertEquals(2.show(), "2");
  assertEquals(3.show(), "3");
  assertEquals(4.show(), "4");
  assertEquals(5.show(), "5");
  assertEquals(15.show(), "15");
  assertEquals(16.show(), "16");
  assertEquals(99.show(), "99");
  assertEquals(101.show(), "101");
  assertEquals(-101.show(), "-101");
  assertEquals(-99.show(), "-99");
  assertEquals(-11.show(), "-11");

  ()

}
