ns control_flow;

fn ifBasic(): int {
  let cond: bool = false;
  let result: int = if cond 42 else 1337;
  assert(result == 1337);
  0
}

fn ifNoElse(): int {
  // Gets unit type
  let x = 0;
  let expr: unit = if true {
    x := 42;
  };
  assert(x == 42);
  assert(expr == ());

  // Even if one branch is 'never'
  let expr: unit = if false {
    crash("never happens");
  };
  0
}

fn returnSimple(): bool {
  return(true)
}

fn rand(): bool { true }
fn returnFromIf(): int {
  let x: unit = if rand() {
    return(1)
  };

  0
}

fn loopBreak(): unit {
  let x: int = loop {
    let inner: int = if true {
      break(3)
    } else 4
    
  };
  assertEquals(x, 3)

  //nocommit
  //let y: string = loop {
  //  break("asdf")
  //};
  //assertEquals(y, "asdf")
}

fn loopNested(): unit {
  let result = loop {
    break(loop { break(10) })
  };
  assertEquals(result, 10)
}

fn loopFalse(): unit {
  let x = loop {
    break(3);
  };
  assert(x == 3)
}

fn doCrash(): bool {
  crash("should not run");
}

fn test(): unit {

  ifBasic();
  ifNoElse();
  assert(returnSimple());
  assert(returnFromIf() == 1);

  // Short-circuiting is guaranteed
  if (false and doCrash()) {
    ()
  };

  loopBreak();
  loopNested();
  loopFalse();
}
