ns range_test;

use core/IntRange

fn testBasicIntRangeIteration(): unit {
  let* iter = IntRange/make(0, 5).iterator();
  
  // Test stepping through range one by one
  assert(iter.next().! == 0);
  assert(iter.next().! == 1);
  assert(iter.next().! == 2);
  assert(iter.next().! == 3);
  assert(iter.next().! == 4);
  assert(iter.next().isNone());
}

fn testEmptyIntRange(): unit {
  let* iter = IntRange/make(0, 0).iterator();
  
  assert(iter.next().isNone());
}

fn testNegativeIntRange(): unit {
  let* iter = IntRange/make(-3, 2).iterator();
  
  assert(iter.next().! == -3);
  assert(iter.next().! == -2);
  assert(iter.next().! == -1);
  assert(iter.next().! == 0);
  assert(iter.next().! == 1);
  assert(iter.next().isNone());
}

fn testUpTo(): unit {
  let* iter = IntRange/upTo(3).iterator();
  
  assert(iter.next().! == 0);
  assert(iter.next().! == 1);
  assert(iter.next().! == 2);
  assert(iter.next().isNone());
}

fn testStepBy(): unit {
  let* iter = IntRange/upTo(10).iterator();
  
  assert(iter.stepBy(2));  // Move by 2 to position 2
  assert(iter.current() == 2);
  
  assert(iter.stepBy(3));  // Move by 3 to position 5
  assert(iter.current() == 5);
  
  assert(iter.stepBy(4));  // Move by 4 to position 9
  assert(iter.current() == 9);
  
  assert(not iter.stepBy(2));  // Try to move past end
}

fn testSizeHint(): unit {
  let* iter = IntRange/make(0, 5).iterator();
  
  let hint = iter.sizeHint();
  assert(hint.atLeast == 5);
  assert(hint.atMost.! == 5);
  
  // After advancing, size hint should decrease
  iter.next();
  iter.next();
  let hint2 = iter.sizeHint();
  assert(hint2.atLeast == 3);
}

fn testNth(): unit {
  let* iter = IntRange/upTo(10).iterator();
  
  assert(iter.nth(3).! == 3);  // Skip to 4th element
  assert(iter.next().! == 4);  // Next should be 4
  
  assert(iter.nth(4).! == 9);  // Skip 4 more to get to 8
  assert(iter.next().isNone());  // Next should be 9
  
  assert(iter.nth(1).isNone());  // Try to skip past end
}

fn testAdvanceBy(): unit {
  let* iter = IntRange/upTo(5).iterator();
  
  iter.advanceBy(2);
  assert(iter.next().! == 2);
  
  iter.advanceBy(1);
  assert(iter.next().! == 4);
}

fn test(): unit {
  testBasicIntRangeIteration();
  testEmptyIntRange();
  testNegativeIntRange();
  testUpTo();
  testStepBy();
  testSizeHint();
  testNth();
  testAdvanceBy();
}
