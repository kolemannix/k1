ns ability_complex;

deftype Pair[PA, PB] = { a: *PA, b: PB? }
ability AsPair[AA, BB] {
  fn getA(self: Self): *AA
  fn getB(self: Self): BB?
}

impl[A, B] AsPair[AA = A, BB = B] for Pair[A, B] {
  fn getA(self: Pair[A, B]): *A { self.a }
  fn getB(self: Pair[A, B]): B? { self.b }
}

// blanket impl that insanely swaps the pair for you
impl[A, B] AsPair[AA = A, BB = B] for Pair[B, A] {
  fn getA(self: Pair[B, A]): *A { mem/new(self.b.!) }
  fn getB(self: Pair[B, A]): B? { some(self.a.*) }
}

fn unwrapB[
  X,
  Y,
  T: AsPair[AA=X, BB=Y] and AsPair[AA=Y, BB=X]
](t: T): Y {
  // Ability call resolution picks the implementation that results in the call working!
  let y: Y? = t.getB();
  y.!
}

fn getNothin[A, B, T: AsPair[AA=A, BB=B]](t: T): unit {
  ()
}

fn test(): unit {
  // Phase 1
  let myPair: Pair[int, bool] = { a: mem/new(10), b: some(true) };
  getNothin(t = myPair);
  let b = unwrapB[int, bool, Pair[int, bool]](myPair);
  assert(b);
  let i = unwrapB[bool, int, Pair[int, bool]](myPair);
  assertEquals(i, 10);

  ()
}
