ns static_run;
let INT_BUFFER: Buffer[int] = [1,2,3,4,5].toBuffer();

fn getPoint(): { x: u8, y: u32, z: i64 } {
  { x: 1, y: 300, z: -222 }
}
fn test(): unit {
  // String creation (special case)
  #static "Hello, Static";

  // Struct creation
  let point = #static {
    ({ x: 1, y: 2 })
  };
  assertEquals(point.x, 1);
  assertEquals(point.y, 2);

  // Scalars
  assert(#static true);
  assert(not (#static false));
  assert(not (#static true == false));
  assert(#static () == ());
  assert(#static 'a' == 'a');
  assert(not #static 'A' == 'a');
  assert(not #static 123 == -123);
  assert(not #static 123.0 == 3.14);

  // Return struct
  assertEquals[u8](#static getPoint().x, 1);
  assertEquals[u32](#static getPoint().y, 300);
  assertEquals[i64](#static getPoint().z, -222);

  // Variable assign
  let goodbye: static string = #static {
    let mut msg = "Hello, World";
    msg = "Goodbye, World!";
    msg
  };
  println(goodbye);

  let letAssign = #static {
    let mut i = 22;
    i = 10;
    i
  };
  assertEquals[int](letAssign, 10);

  let padded = #static {
    let padded = { a: 1: u8, b: 2: u8, c: 3: u8, d: 4: u64, e: 5 };
    padded
  };
  assertEquals(padded.a, 1);
  assertEquals(padded.b, 2);
  assertEquals(padded.c, 3);
  assertEquals(padded.d, 4);
  assertEquals(padded.e, 5);

  let letRef = #static {
    let* i = 10;

    //assert(i.* == 10);
    i <- core/identity(i.*);
    i.*
  };
  assertEquals[int](letRef, 10);

  assertEquals(core/k1/IS_STATIC, false);
  #static assert(core/k1/IS_STATIC);

  let enum1 = #static {
    let x = some(42);
    let y = if x is .Some(x) x else crash("");
    y
  };
  assertEquals[int](enum1, 42);

  let fieldPtrTest: int = (#static {
    let* x = 21;
    let s = { ptr: x };
    s.ptr.*
  }).fromStatic();
  assertEquals(fieldPtrTest, 21);


  let ptrInStructs = #static {
    let* b: u8* = 10;
    let* f = { asdf: b };
    f.asdf.*
  };
  assertEquals[u8](ptrInStructs, 10);

  //// Loops
  #if false assertEquals(#static {
    let mut i = 0;
    loop {
      if i >= 5 { break() };
      i = i + 1
    };
    i
  }, 5);

  #if false assertEquals(#static {
    let mut i = 0;
    while i < 5 { i = i + 1 };
    i
  }, 5);

  #static {
    let* l = List/withCapacity[unit](0);
    l.len
  };

  // lists
  let listLast = #static {
    let inced = for [1,2,3,4,5] yield {
      it + 1
    };
    inced.last()
  };
  assertEquals[int?](listLast, some(6));

  assertEquals[int](#static loop {
    switch 42 {
      _ -> break(100)
    }
  }, 100);

  // StringBuilder

  assertEquals[string](#static {
    let* sb = core/StringBuilder/new();
    sb.putString("Hello");
    sb.build()
  }, "Hello");

  assertEquals[string?](
    testCompile( #static assert(false) ).map(\(s) s.take(38)),
    some("Static execution exited with code: 111")
  );

  assert(testCompile(#static crash("")).isSome());

  // Call order
  #static bar(2);

  // Buffer
  let buf = #static {
    let xs = [1,2,3,4,5];
    xs.toBuffer()
  };
  assert(buf.fromStatic() == [1,2,3,4,5].toBuffer());
  let bufFromStatic = #static {
    let* l = List/wrapBuffer(INT_BUFFER.cloned());
    l.push(9);
    assertEquals(l.len, 6);
    assertEquals(l.last(), some(9));
  };


  // Simple lambda
  assertEquals[int](#static {
    let lam = \(x: int) x * 2;
    lam(1)
  }, 2);

  // Buffer of buffers!
  let bob = #static [[1,2,3].toBuffer(), [4,5,6].toBuffer()].toBuffer();
  assertEquals(bob.len, 2);
  assertEquals(bob.get(0).get(0), 1);
  assertEquals(bob.get(0).get(1), 2);
  assertEquals(bob.get(0).get(2), 3);
  assertEquals(bob.get(1).get(0), 4);
  assertEquals(bob.get(1).get(1), 5);
  assertEquals(bob.get(1).get(2), 6);

  ()
}

fn getOne(): int { 1 }
fn getThree(): int { getOne() + 2 }

fn foo(n: int): unit {
  if n == 0 return(())
  else bar(n - 1)
}

fn bar(n: int): unit {
  if n == 0 return(())
  else foo(n - 1)
}

