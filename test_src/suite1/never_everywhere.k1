ns never_everywhere;

fn callArgument(): never { println(crash("call arg")) }
fn letRhs(): unit { let x = crash("letRhs") }
fn assgnRhs(): never { let x = 123; x := crash("assgn rhs") }
// should fail to compile anyway
// fn binopLhs(): never { crash("") + 4 }
fn binopRhs(): never { 4 + crash("") }
fn unop(): never { not crash("") }
fn whileCond(): never { while crash("asdf") { () } }
fn enumConstrPayload(): never { Opt.Some(crash("asdf")) }
fn getEnumPayload(): i64 { 
  let x: ?int = Opt.Some(crash(""));
}
fn castTarget(): i64 { crash(""): i64 }
fn inReturn(): never { 
  #static assertEquals(
    testCompile(
      return(crash("what"))
    ),
    .Some("return is dead since returned expression is divergent; remove the return")
  );

  core/sys/exit(0)
}
fn inBreak(): never { 
  #static assertEquals(
    testCompile(
      loop { break(crash("inBreak")) }
    ),
    .Some("break is dead since returned expression is divergent; consider removing the 'break'")
  );
  core/sys/exit(0)
}

fn test(): unit {
  ()
}
