deftype Point[T] = { x: T, y: T }

impl To[T = string] for i32 {
  fn to(self: Self): string { "i32" }
  // fn to(self: Self): string { Show/show[i32](self) }
}
impl To[T = string] for i64 {
  fn to(self: Self): string { "i64" }
  // fn to(self: Self): string { Show/show[i64](self) }
}

ability Add[Rhs: To[T = string], impl Output] {
  fn add(self: Self, rhs: Rhs): Output
}

impl Add[Rhs = i32, Output = i32] for i32 {
  fn add(self: i32, other: Rhs): i32 { self + other }
}

impl Add[Rhs = i64, Output = i64] for i32 {
  fn add(self: i32, other: i64): i64 { (self as i64) + other }
}

// TODO: generic impls
// impl[T: Add] Add[Rhs = Point[T], Output = Point[T]] for Point[T] {
//   fn add(self: Point[T], other: Point[T]): Point[T] { 
//     { x: add(self.x, other.x), y: add(self.y, other.y) }
//   }
// }

ability From[T] {
  fn from(t: T): Self
}

ability To[T] {
  fn to(self: Self): T
}

// ability Iterator(out Item) {
//   fn next(self: Self): Item? 
// }
// deftype Listerator[T] = { l: List[T]*, pos: u64 }
// 
// impl Iterator[out Item = T] for Listerator[T] {
//   fn next(self: Listerator[T]): T? { self.l.get(self.pos) }
// }

impl To[T = char] for byte {
  fn to(self: byte): char {
    self as char
  }

}

fn main(): unit {

  let btoc: char = (101: u8).to();

  let p: Point[i32] = { x: 1, y: 2 };

  let x: i32 = 4;

  let a1 = x.add(12: i64);
  let a2 = x.add(10: i32);

  assert(a1 == 16);
  assert(a2 == 14: i32);


  ()
}
