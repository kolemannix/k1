deftype State = either On(unit), Off(unit), Zilch
deftype StateHard = either On(int?), Off(int?)
deftype Contrived[A, B] = either Stuff({ a: A, b: B}), Empty

fn main(): int {

  val State: unit = ();

  val z0: State.Zilch = State.Zilch;
  val z1: State = State.Zilch;
  val z2: State.Zilch = State.Zilch: State.Zilch;

  val s1 = _root::State.On(());
  val s2 = _root::State.Off(());

  val s3: _root::State = _root::State.Off(());
  val s4: _root::State.On = _root::State.On(());

  val s5 = StateHard.On(.Some(42));
  val s6: StateHard = StateHard.On(42);
  val s7: StateHard = StateHard.On(.None);

  // A collision to make sure it works
  val Opt: unit = ();

  val bb: Opt[bool]      = .Some(true);
  val bc: Opt[bool].Some = .Some(true);
  val bc = _root::Opt.Some[bool](true);
  assert(bc is .Some(true));
  val bc2 = _root::Opt.Some(42);
  assert(bc2 is .Some(42));

  val b: Opt[bool].None = Opt.None;
  val b: Opt[bool].None = .None;
  val c: Opt[bool].None = Opt.None;

  val i: Opt[i32] = Opt.None[i32];
  val i: Opt[i32].None = Opt.None[i32];
  val i: Opt[i32].None = Opt.None;

  val x = Contrived.Stuff({ a: 42, b: "hello"});

  val bbb = Opt.None[int];

  0
}
