fn map[T, U](a: Array[T], f: \T -> U): Array[U] {
  for i in a yield { f(i) }
}

// Todo: this performs dynamic dispatch, always
// We could instead specialize the function on the closure type
// and get static dispatch
fn filter[T](a: Array[T], f: \T -> bool): Array[T] {
  val keep = Array::new[T](0).&;
  for i in a do { if f(i) keep.push(i) };
  keep
}

fn staticAddOne(x: int): int { x + 1 }

fn main(): int {
  val addOne = \x: int -> x + 1;
  val addOne2 = addOne;
  val addOne3 = \i: int -> staticAddOne(i);

  assert(addOne(1) == 2);
  assert(addOne2(2) == 3);
  assert(addOne3(3) == 4);


  val result = [1,2,3,5,6,7,8] 
  | map(\x: int -> x + 1) 
  | filter(\x: int -> x % 2 == 0);

  assert(result == [2, 4, 6, 8]);
  
  0
}
