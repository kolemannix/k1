fn main(): int {
  // "Matching if" expressions
  // You can match on as many things as you like, as long as the whole chain is connected by 'ands' and your "is" expressions live at the top-level
  let foo = 3;
  let x = some("foo");
  let y = some("bar");
  let result = if x is .Some(v) and y is .Some("bar") and foo == 3 {
    v == "foo";
  } else {
    // Fails parsing without parens since 'false' isn't a keyword! hm
    (false)
  };
  assert(result);

  let failure1 = testCompile({
    if x is .Some(v) or foo == 3 {

    }
  });
  assert(failure1 is .Some(_));

  let myPoint = { x: 1, y: 2 };
  let structResult = if myPoint is { x: 1, y: yy } and myPoint is { x: xx, y: 2 } {
    yy == 2 and xx == 1
  } else (false);
  assert(structResult);

  // Test nested pattern matching with Options containing structs
  let nested = some({ x: some(42), y: some(24) });
  let nestedResult = if nested is .Some({ x: .Some(xVal), y: .Some(yVal) }) {
    xVal == 42 and yVal == 24
  } else (false);
  assert(nestedResult);

  // Test that partial nested matches fail appropriately
  let partial = some({ x: some(42), y: none[int]() });
  let partialResult = if partial is .Some({ x: .Some(xVal), y: .Some(yVal) }) {
    (false)  // Should never reach here
  } else (true);
  assert(partialResult);

  // Test deeply nested patterns with mixed struct/enum matching
  let complex = some({ 
    point: { x: 1, y: 2 },
    value: some("test")
  });
  let complexResult = if complex is .Some({ point: { x: 1, y: yy }, value: .Some(v) }) {
    yy == 2 and v == "test"
  } else (false);
  assert(complexResult);

  // Test mixing bound variables from different levels
  let mixed = some({ 
    outer: 1,
    inner: some({ value: 1 })
  });
  let mixedResult = if mixed is .Some({ outer: o, inner: .Some({ value: v })}) {
    o == v  // Both should be 1
  } else (false);
  assert(mixedResult);

  // Test that we can't use bound variables in the pattern itself
  // We should prevent shadowing within the same match, seems like always a bad idea
  let shadowFailure = testCompile(#debug {
    if mixed is .Some({ outer: o, inner: .Some({ value: o })}) {
      ()
    } else {
      ()
    }
  });
  assert(shadowFailure.isSome());

  0

}
