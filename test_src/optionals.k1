deftype PointMaybeY = { x: int, y: int? }

fn testBasics(): int {
  let p: PointMaybeY? = .Some({ x: 1, y: .Some(2) });
  assert(p!.x == 1);
  assert(p!.y! == 2);

  let b = .Some(true): bool?;
  if b is .Some(x) {
    assert(x);
  };

  assertMsg("a", Opt/hasValue[bool](b));
  let c: int? = .None;
  assertMsg("b", not c.hasValue());

  assertMsg("c", types/typeId[PointMaybeY.y.Some.value]() == types/typeId[int]());

  0
}

fn testCoalesceAccessor(): unit {
  let maybeUser = Opt.Some({ name: "Koleman", age: 31 });
  assert(maybeUser?.age! == 31);
  assert(maybeUser?.name! == "Koleman");
}

deftype WeirdPoint = { x: int?, y: int }

fn testComplex(): int {
  let my_point: WeirdPoint = { x: .Some(42), y: 0 };
  if my_point.x is .Some(my_x) {
    assert(my_x == 42);
  } else {
    assert(false);
  };

  let mut my_arr: List[WeirdPoint?] = [.Some({ x: .Some(42), y: 3}), .None];
  if my_arr.get(0) is .Some(a) {
    assert(a.y == 3);
  };

  0
}

fn noNum(): int? { .None }
fn someNum(): int? { .Some(100) }

fn optElseOperator(): unit {
  let result = noNum() ? 42;
  assert(result == 42);

  let result = someNum() ? 41;
  assert(result == 100);
}


fn blanketImpls(): unit {
  assert(some(4) == some(4));
  assert(some(2).unwrap() == 2);
  assert(some(true).unwrap() != false);
}

fn main(): int {

  testBasics();
  testComplex();
  testCoalesceAccessor();
  optElseOperator();
  blanketImpls();

  0
}
