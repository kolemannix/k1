deftype Point = { x: int, y: int? }

fn testCoalesce(): int {
  let p: Point? = { x: 1, y: 2 };
  assert(p!.x == 1);
  assert(p!.y! == 2);

  let b = true: bool?;
  if b is .Some(x) {
    assert(x);
  };

  assertMsg("a", Opt::hasValue[bool](b));
  let c: int? = .None;
  assertMsg("b", not c.hasValue());

  assertMsg("c", types::typeId[Point.y.Some.value]() == types::typeId[int]());

  0
}

fn testCoalesceAccessor(): unit {
  let maybeUser = Opt.Some({ name: "Koleman", age: 31 });
  assert(maybeUser?.age == 31);
  assert(maybeUser?.name == "Koleman");
}

fn noNum(): int? { .None }
fn someNum(): int? { 100 }

deftype WeirdPoint = { x: int?, y: int }

fn testComplex(): int {
  let my_point: WeirdPoint = { x: 42, y: 0 };
  if my_point.x is .Some(my_x) {
    assert(my_x == 42);
  } else {
    assert(false);
  };

  let mut my_arr: Array[WeirdPoint?] = [{ x: 42, y: 3}, .None];
  if my_arr.get(0) is .Some(a) {
    assert(a.y == 3);
  };

  0
}

fn main(): int {

  let result = noNum() ? 42;
  assert(result == 42);

  let result = someNum() ? 41;
  assert(result == 100);

  testCoalesce();
  testComplex();
  testCoalesceAccessor();

  0
}
