fn map[T, U](a: List[T], f: \T -> U): List[U] {
  let* us = List::withCapacity[U](a.len);
  for i in a do { us.push[U](f(i)) };
  us.*
}

// Todo: this performs dynamic dispatch, always
// We could instead specialize the function on the closure type
// and get static dispatch
fn filter[T](a: List[T], f: \T -> bool): List[T] {
  let* keep = List::empty[T]();
  for i in a do { if f(i) keep.push(i) };
  keep
}

fn staticAddOne(x: int): int { x + 1 }

fn captures(): unit {
  let closedOver: int = 3;

  let add = \(x: int) {
    let addOne = \(y: int) y + 1;
    addOne(x) + closedOver + addOne(closedOver) + (if closedOver == 3 1 else 0);
  };

  assert(add(3) == 12);
}

fn captureMut(): unit {
  let* counter = 3;

  let inc = \(x: int) {
    counter <- counter.* + 1;
  };

  inc(0);
  inc(0);
  inc(0);

  assert(counter.* == 6);
}

fn closureReturn(): unit {
  let getThree = \(-> int) { return(3) };
  let nullary = \() 4;
  assert(getThree() == 3);
  assert(nullary() == 4);
}

fn main(): int {
  let addOne = \(x: int) x + 1;
  let addOne2 = addOne;
  let addOne3 = \(i: int) staticAddOne(i);

  assert(addOne(1) == 2);
  assert(addOne2(2) == 3);
  assert(addOne3(3) == 4);


  let result = [1,2,3,5,6,7,8]
  | map(\(x: int) x + 1)
  | filter(\(x: int) x % 2 == 0);

  assert(result == [2, 4, 6, 8]);

  captures();
  captureMut();
  closureReturn();

  0
}
