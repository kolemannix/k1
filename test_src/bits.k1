fn main(): int {

  // NOT
  assert(100.bitNot() == -101);
  assert(Bitwise::bitNot(0) == -1);
  // 2^63-1 == 9223372036854775807
  // 2^63 == 9223372036854775808
  assert(9223372036854775807.bitNot() == -9223372036854775808);

  assert(Bitwise::bitNot(-24555: i32) == 24554);

  // AND
  assert(100.bitAnd(100) == 100);
  assert(Bitwise::bitAnd(100, 0) == 0);
  assert(Bitwise::bitAnd(0, 100) == 0);
  assert(Bitwise::bitAnd(0, 0) == 0);
  assert(Bitwise::bitAnd(-1, 2) == 2);

  // OR
  assert(Bitwise::bitOr(100, 100) == 100);
  assert(Bitwise::bitOr(100, 0) == 100);
  assert(Bitwise::bitOr(0, 100) == 100);
  assert(Bitwise::bitOr(0, 0) == 0);
  assert(Bitwise::bitOr(-1, 2) == -1);

  // Shift Left
  assert(Bitwise::shiftLeft(1, 1) == 2);
  assert(Bitwise::shiftLeft(1, 2) == 4);
  assert(Bitwise::shiftLeft(1, 3) == 8);
  assert(Bitwise::shiftLeft(3, 7) == 384);

  // Shift Right
  assert(Bitwise::shiftRight(42, 1) == 21);
  assert(Bitwise::shiftRight(-16, 2) == -4);
  assert(Bitwise::shiftRight(0, 5) == 0);
  assert(Bitwise::shiftRight(1000000000, 10) == 976562);
  assert(Bitwise::shiftRight(-7, 1) == -4);

  0
}
