ability Add[Rhs, impl Output] {
  fn add(self: Self, rhs: Rhs): Output
}

fn some[U](value: U): Opt[U].Some { Opt.Some[U](value) }
fn identity[T](value: T): T { value }
fn main(): int {
  let a = #debug identity(true): bool;
  // #debug identity(true);
  let b = #debug identity(identity(12));
  let c = #debug some(identity(13));

  // let d: u32 = Add/add(identity(1), identity(2));

  0
}
