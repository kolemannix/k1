fn combine[T](a: T, b: T): T { a }
fn combine3[T](a: T, b: T, c: { one: T, two: T }): T { a }
fn getOrElse[T](a: Opt[T], b: T): T { if a is .Some(a) a else b }
fn some[U](value: U): Opt[U].Some { Opt.Some[U](value) }

fn get[UU](value: Opt[UU]): UU { if value is .Some(u) u else libc/exit(1) }
fn identity[T](value: T): T { value }

fn occursCheckTest[T](x: T): T {
  assert(
    testCompile( combine(x, some(x)) ) is .Some(_)
  );
  x
}

fn main(): int {
  let a = identity(true): bool;
  let a2 = identity(true);
  let a3: bool = identity(true);
  let b = identity(identity(12));
  let c = some(identity(13));

  get(some(10)): u32;
  let d: u32 = combine(identity(4000), get(some(5000)));
  let d2: u32 = combine(identity(8000), identity(get(some(9000))));

  assert(testCompile(getOrElse(some(1000), -1)) is .Some(_));

  occursCheckTest(42);

  let e = combine(Opt.Some(4), some(23));
  let e2: Opt[u32] = #debug combine(Opt.Some(4), some(23));

  let* x = Opt.Some(42);

  let f = combine3(x, libc/exit(1), { one: some(-1), two: some(3), });

  0
}
