ns List {
  fn filter[T](self: List[T], f: \T -> bool): List[T] {
    let* keep = List/empty[T]();
    for i in self do { if f(i) keep.push(i) };
    keep
  }
  // fn map[T, U](self: List[T], f: \T -> U): List[U] {
  //   for self yield { f(it) }
  // }
  fn map[T, U](self: List[T], f: \T -> U): List[U] {
    let* us = List/withCapacity[U](self.len);
    for i in self do { us.push[U](f(i)) };
    us.*
  }
}

deftype alias Person = { name: string, age: int }
fn main(): i32 {
  let ints = [1];
  let ints2 = ints.map(\(i: int) i + 1);
  let people = [
    { name: "Alice", age: 30 },
  ];
  //let processedPeople = people.filter(\(p: Person) p.name == "Bob").map(\(p: Person) "a");
  // I think something simple; returning structs isn't working in closures, or passing them in.
  // Probably just using the wrong type; it works for primitives.
  let processedPeople = people.map(\(p: Person) p.name);

  for p in processedPeople do {
    println(p)
  };

  println("Hello, silly example!");

  0
}

fn personInfo(p: Person): string {
  switch p {
    { name, age } if age < 20 -> "\{name} is a teenager.",
    { name, age } if age < 40 -> "\{name} is an adult.",
    { name, age } -> "\{name} is older",
  }
}
