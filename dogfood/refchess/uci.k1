// Copyright (C) 2025 Koleman Nix 
ns uci;

deftype Command = either
  Uci,
  IsReady,
  NewGame,
  Quit,
  Position(string),
  Go(string),
  Perft({ depth: u32 })

fn parseCommand(cmd: string): Result[Command, string] {
  println("[debug] received: `{cmd}`");
  
  switch cmd {
    // Initial handshake: GUI sends "uci", engine responds with id and options
    "uci" -> .Ok(.Uci),

    // GUI checking if engine is initialized and ready
    "isready" -> .Ok(.IsReady),

    // Request to start a new game
    "ucinewgame" -> .Ok(.NewGame),

    // GUI wants to quit
    "quit" -> .Ok(.Quit),
    
    // Commands that require more complex parsing
    _ -> {
      if cmd.startsWith("perft ") {
         let parsedDepth = cmd.drop(6).toInt();
         if parsedDepth is .Some(depth) { .Ok(.Perft({ depth: depth as u32 })) }
         else .Err("Invalid perft command: {cmd}")
      } else if cmd.startsWith("position ") {
        // "position" command sets up a position to analyze:
        //   "position startpos" - start from initial position
        //   "position startpos moves e2e4 e7e5" - start pos then apply moves
        //   "position fen [fen string]" - start from FEN position
        //   "position fen [fen string] moves e2e4" - FEN position then moves

        
        // Example minimal parsing:
        // if cmd.startsWith("position startpos") {
        //   println("[debug] setting up start position");
        //   
        //   // Check if there are moves to apply
        //   if cmd.startsWith("position startpos moves ") {
        //     let movesStr = cmd.substring(24, cmd.len());
        //     println("[debug] applying moves: \{movesStr}");
        //   }
        //   
        // } else if cmd.startsWith("position fen ") {
        //   println("[debug] setting up FEN position");
        //   // Would parse FEN and any moves here
        // }

        .Ok(.Position(cmd.substring(8, cmd.len())))
      } else if cmd.startsWith("go ") {
        // "go" command tells engine to start calculating. Examples:
        //   "go infinite" - search until "stop" command
        //   "go wtime 300000 btime 300000" - search with time controls
        //   "go depth 6" - search to fixed depth
        //   "go nodes 10000" - search fixed number of nodes
        //   "go movetime 1000" - search for exactly 1 second
        
        .Ok(.Go(cmd.substring(2, cmd.len())))
      } else .Err("Unsupported command: {cmd}")
    }
  }
}
