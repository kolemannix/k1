// The efficient representation, a Bitboard encoding
deftype Color = either White, Black
deftype GameState = {
  wPawns: u64,
  wKnights: u64,
  wBishops: u64,
  wRooks: u64,
  wQueens: u64,
  wKings: u64,

  bPawns: u64,
  bKnights: u64,
  bBishops: u64,
  bRooks: u64,
  bQueens: u64,
  bKings: u64,

  castleRights: u8,
  enPassantFile: u8?,
  turn: Color
}

ns GameState {
  fn startPos(): GameState {
    let wPawns   = 0b0000000000000000000000000000000000000000000000001111111100000000: u64;
    let wKnights = 0b0000000000000000000000000000000000000000000000000000000001000010: u64;
    let wBishops = 0b0000000000000000000000000000000000000000000000000000000000100100: u64;
    let wRooks   = 0b0000000000000000000000000000000000000000000000000000000010000001: u64;
    let wQueens  = 0b0000000000000000000000000000000000000000000000000000000000010000: u64;
    let wKings   = 0b0000000000000000000000000000000000000000000000000000000000001000: u64;
    let bPawns   = 0b0000000011111111000000000000000000000000000000000000000000000000: u64;
    let bKnights = 0b0100001000000000000000000000000000000000000000000000000000000000: u64;
    let bBishops = 0b0010010000000000000000000000000000000000000000000000000000000000: u64;
    let bRooks   = 0b1000000100000000000000000000000000000000000000000000000000000000: u64;
    let bQueens  = 0b0001000000000000000000000000000000000000000000000000000000000000: u64;
    let bKings   = 0b0000100000000000000000000000000000000000000000000000000000000000: u64;
    { wPawns, wKnights, wBishops, wRooks, wQueens, wKings, 
      bPawns, bKnights, bBishops, bRooks, bQueens, bKings, 
      castleRights: 0b00000011, enPassantFile: some(0: u8), turn: .White }
  }

  fn genMoves(self: GameState): List[Move] {
    crash("todo")
  }
}

deftype Move = { from: u8, to: u8 }

fn main(): int {
  println("Hello, Chess!");
  let board: List[SquareState] = startPos();
  dump(board);

  let move1 = {
    from: Square/fromName("e2"),
    to: Square/fromName("e4")
  };
  printIt(move1.from);
  println("");
  printIt(move1.to);

  //board.set(move1.to as u64, board.get(move1.from as u64));
  //board.set(move1.from as u64, .Blank);

  //println("");
  //dump(board);

  0
}
