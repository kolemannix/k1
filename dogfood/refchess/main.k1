// Copyright (C) 2025 Koleman Nix 
// The efficient representation, a Bitboard encoding

use core/IntRange
use core/eprintln
use core/sys

deftype Color = either White, Black
deftype alias Bitboard = u64

let RANK_1 :    Bitboard = 0x00000000000000FF;
let RANK_2 :    Bitboard = 0x000000000000FF00;
let RANK_3 :    Bitboard = 0x0000000000FF0000;
let RANK_4 :    Bitboard = 0x00000000FF000000;
let RANK_5 :    Bitboard = 0x000000FF00000000;
let RANK_6 :    Bitboard = 0x0000FF0000000000;
let RANK_7 :    Bitboard = 0x00FF000000000000;
let RANK_8 :    Bitboard = 0xFF00000000000000;
let A_FILE: Bitboard = 0x0101010101010101;
let B_FILE: Bitboard = 0x0202020202020202;
let C_FILE: Bitboard = 0x0404040404040404;

let H_FILE: Bitboard = 0x8080808080808080;
let NOT_A_FILE: Bitboard = 0xFEFEFEFEFEFEFEFE;
let NOT_H_FILE: Bitboard = 0x7F7F7F7F7F7F7F7F;

deftype GameState = {
  wPawns: Bitboard,
  wKnights: Bitboard,
  wBishops: Bitboard,
  wRooks: Bitboard,
  wQueens: Bitboard,
  wKings: Bitboard,

  bPawns: Bitboard,
  bKnights: Bitboard,
  bBishops: Bitboard,
  bRooks: Bitboard,
  bQueens: Bitboard,
  bKings: Bitboard,

  castleRights: u8,
  enPassantFile: i8,
  turn: Color
}

fn valueAtSquare(b: Bitboard, index: u64): u64 {
  let shifted = Bitwise/shiftRight(b, index);
  let masked = Bitwise/bitAnd(shifted, 1: u64);
  masked
}

fn isSet(b: Bitboard, index: u64): bool {
  valueAtSquare(b, index) == 1
}

fn valueAtRank(b: Bitboard, rank: u64): u64 {
  let rankStart = rank * 8;
  let shifted = Bitwise/shiftRight(b, rankStart);
  let masked = Bitwise/bitAnd(shifted, RANK_1);
  masked
}

fn indexToBit(index: u64): Bitboard {
  (1: u64).shiftLeft(index)
}

fn printBitboard(b: Bitboard): unit {
  let* l = List/empty[char]();
  writeBitboard(l, b);
  println(string/wrapList(l))
}

fn writeBitboard[W: Writer](writer: W, b: Bitboard): unit {
  // Scanlines by rank backwards so it reads naturally
  let rank = 7;
  while rank >= 0 {
    let rankStart = rank * 8;
    // TODO(dogfood): formatUInt(base = 2) (also need padding specifier)
    //formatUInt(context writer)(valueAtRank(b, rank as u64), base = 2);

    for square in IntRange/make(rankStart, rankStart + 8) do {
      let bit = valueAtSquare(b, square as u64);
      writer.writeChar(u8/toAsciiDigit(bit as u8));
    };
    writer.writeChar('\n');
    rank := rank - 1;
  }
}

ns GameState {
  fn startPos(): GameState {
    let wPawns   = 0b0000000000000000000000000000000000000000000000001111111100000000: Bitboard;
    let wKnights = 0b0000000000000000000000000000000000000000000000000000000001000010: Bitboard;
    let wBishops = 0b0000000000000000000000000000000000000000000000000000000000100100: Bitboard;
    let wRooks   = 0b0000000000000000000000000000000000000000000000000000000010000001: Bitboard;
    let wQueens  = 0b0000000000000000000000000000000000000000000000000000000000001000: Bitboard;
    let wKings   = 0b0000000000000000000000000000000000000000000000000000000000010000: Bitboard;
    let bPawns   = 0b0000000011111111000000000000000000000000000000000000000000000000: Bitboard;
    let bKnights = 0b0100001000000000000000000000000000000000000000000000000000000000: Bitboard;
    let bBishops = 0b0010010000000000000000000000000000000000000000000000000000000000: Bitboard;
    let bRooks   = 0b1000000100000000000000000000000000000000000000000000000000000000: Bitboard;
    let bQueens  = 0b0000100000000000000000000000000000000000000000000000000000000000: Bitboard;
    let bKings   = 0b0001000000000000000000000000000000000000000000000000000000000000: Bitboard;
    { wPawns, wKnights, wBishops, wRooks, wQueens, wKings, 
      bPawns, bKnights, bBishops, bRooks, bQueens, bKings, 
      castleRights: 0b00000011, enPassantFile: -1, turn: .White }
  }

  fn printGrid(self: GameState): unit {
    let* writer = List/withCapacity[char](128);
    let rank = 7;
    while rank >= 0 {
      let rankStart = rank * 8;
      for i in IntRange/make(rankStart, rankStart + 8) do {
        let i = i as u64;
        if isSet(self.wPawns, i) { writer.writeChar('P') }
        else if isSet(self.wKnights, i) { writer.writeChar('N') }
        else if isSet(self.wBishops, i) { writer.writeChar('B') }
        else if isSet(self.wRooks, i) { writer.writeChar('R') }
        else if isSet(self.wQueens, i) { writer.writeChar('Q') }
        else if isSet(self.wKings, i) { writer.writeChar('K') }
        else if isSet(self.bPawns, i) { writer.writeChar('p') }
        else if isSet(self.bKnights, i) { writer.writeChar('n') }
        else if isSet(self.bBishops, i) { writer.writeChar('b') }
        else if isSet(self.bRooks, i) { writer.writeChar('r') }
        else if isSet(self.bQueens, i) { writer.writeChar('q') }
        else if isSet(self.bKings, i) { writer.writeChar('k') }
        else { writer.writeChar('.') };
      };
      writer.writeChar('\n');
      rank := rank - 1;
    };
    print(string/wrapList(writer));
    println("--------\nabcdefgh");
  }

  fn genMoves(self: GameState): List[Move] {
    self.printGrid();
    println("");
    self.genWhitePawnMoves();
  }

  fn wOccupied(self: GameState): Bitboard {
    self.wPawns.bitAnd(self.wKnights).bitAnd(self.wBishops).bitAnd(self.wRooks).bitAnd(self.wQueens).bitAnd(self.wKings)
  }

  fn bOccupied(self: GameState): Bitboard {
    self.bPawns.bitAnd(self.bKnights).bitAnd(self.bBishops).bitAnd(self.bRooks).bitAnd(self.bQueens).bitAnd(self.bKings)
  }

  // todo(cache occupied)
  fn occupied(self: GameState): Bitboard {
    self.wOccupied().bitAnd(self.bOccupied())
  }

  // todo(cache not occupied)
  fn notOccupied(self: GameState): Bitboard {
    self.occupied().bitNot()
  }

  fn genWhitePawnMoves(self: GameState): List[Move] {
     let* moves = List/empty[Move]();
     let notOccupied = self.notOccupied();
     // Single push: shift pawns up one rank if square is empty
     let singlePush = (self.wPawns.shiftLeft(8)).bitAnd(notOccupied);
     let singlePushSources = self.wPawns.bitAnd(singlePush.shiftRight(8));
     println("White single push");
     printBitboard(singlePush);
     // Double push: for pawns on rank 2, shift up two ranks if both squares empty
     let doublePush = ((singlePush.bitAnd(RANK_3)).shiftLeft(8)).bitAnd(notOccupied);
     println("White double push");
     printBitboard(doublePush);
     if self.enPassantFile != -1 {
        let enPassantTargetSquareIndex = self.enPassantFile as u64 + ((5*8) as u64);
        let enPassantTargetSquareBit = indexToBit(enPassantTargetSquareIndex);
        let enPassantTargetSquareOccupied = enPassantTargetSquareBit.bitAnd(self.bOccupied());
        let enPassantAttackers = enPassantTargetSquareOccupied.bitAnd(enPassantTargetSquareBit.shiftLeft(1)).bitAnd(enPassantTargetSquareBit.shiftRight(1));
        printBitboard(enPassantTargetSquareOccupied);
     };
     List/empty()
  }
}

deftype Move = { from: u8, to: u8 }

fn cmdInfo(): string {
  // Here you would register any options the engine supports
  // println("option name Hash type spin default 16 min 1 max 32768");
  // println("option name Skill Level type spin default 20 min 0 max 20");
  [
    "id name refchess alpha",
    "id author Koleman Nix",
    "uciok"
  ].join("\n")
}

fn cmdGo(go: string): string {
  "bestmove e2e4"
  // Or if pondering:
  // "bestmove e2e4 ponder e7e5";
}

fn cmdIsReady(): string {
  "readyok"
}

fn cmdNewGame(): unit {
  ()
}


fn handleCommand(context eng: Engine)(command: uci/Command): ?string {
  switch command {
    .Uci -> some(cmdInfo()),
    .Go(s) -> some(cmdGo(s)),
    .IsReady -> some(cmdIsReady()),
    .NewGame -> { cmdNewGame(); none() },
    .Quit -> {
      eprintln("Quitting");
      sys/exit(0)
    },
    .Position(s) -> {
      debugLog("Setting position: {s}");
      none()
    },
    .Perft({ depth }) -> {
      debugLog("Handling perft depth {depth}");
      eng.game.genMoves();
      none()
    }

  }
}

deftype Engine = { game: GameState }
ns Engine {
  fn inDebugMode(self: Engine): bool { true }
}

fn debugLog(context eng: Engine)(s: string): unit {
  if eng.inDebugMode() {
    println("[debug] {s}");
  }
}

fn run(args: View[string]): Result[i32, string] {
  let context eng: Engine = { game: GameState/startPos() };
  loop {
    // TODO(dogfood): easy mapError before try
    let cmd = sys/readLine(2048).try; 
    switch uci/parseCommand(cmd) {
      .Err(msg) -> eprintln("[debug] {msg}"),
      .Ok(cmd) -> {
        let response = handleCommand(cmd);
        // If a command produces output, it goes to stdout with a newline added
        if response is .Some(r) { println(r) };
      }
    }
  };
}

fn main(argCount: u32, args: Pointer): i32 {
  let args = sys/parseMainArgs(argCount, args);
  run(args).!
}
