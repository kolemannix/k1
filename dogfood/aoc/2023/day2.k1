type Color = either Red, Green, Blue

impl Show for Color {
  fn show(self: Color): string {
    switch self {
      .Red -> "red",
      .Green -> "green",
      .Blue -> "blue"
    }
  }
}

fn main(): int {

  val input: string = Files::readToString("/Users/knix/dev/k1/dogfood/aoc/2023/2.txt");

  // println("Hello, day 2!");
  // val testInput = [
  //   "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green",
  //   "Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue",
  //   "Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red",
  //   "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red",
  //   "Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"
  // ];
  val supply = {
    red: 12,
    green: 13,
    blue: 14
  };
  mut goodGamesSum: u64 = 0;
  for line in input.splitByChar('\n') do {
    val id = it_index + 1;
    val line = line.splitByChar(':').get(1);
    mut isGoodGame = true;
    val rounds = for round in line.splitByChar(';') yield {
      val values = round.splitByChar(',');
      val values: Array[{ amount: int, color: Color }] = for value in values yield {
        val amountColor = value.splitByChar(' ');
        val amount = amountColor.get(0).toInt() ? crash("Bad amount: ".concat(value));
        val color: Color = switch amountColor.get(1) {
          "red" -> .Red,
          "green" -> .Green,
          "blue" -> .Blue,
          c -> crash("Unexpected color: ".concat(c))
        };
        { amount: amount, color: color }
      };
      for value in values do {
        val colorSupply = switch value.color {
          .Red -> supply.red,
          .Green -> supply.green,
          .Blue -> supply.blue
        };
        if value.amount > colorSupply {
          isGoodGame = false;
          // println("Bad ".concat(value.amount.show()).concat(value.color.show()))
        };
      };
    };
    if isGoodGame { goodGamesSum = goodGamesSum + id };
    // println(line);
  };
  printUInt(goodGamesSum);
  0
}
