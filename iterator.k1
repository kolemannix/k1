ns IteratorTest {
impl[T] Iterator[Item = T] for ListIterator[T] {
  fn next(self: ListIterator[T]*): Item? { 
    if self.pos < self.list.len {
      let ret = some(self.list.get(self.pos));
      self.pos* <- self.pos + 1;
      ret
    } else .None
  }
  fn remainingGuess(self: Self): u64? { 
    some(self.list.len - self.pos)
  }
}

deftype ListIterator[T] = {
  list: List[T],
  pos: u64
}
impl[T] Iterable[Item = T, I = ListIterator[T]] for List[T] {
  fn iter(self: Self): I {
    { list: self, pos: 0 }
  }
}

fn test(): int {
  let l = [1,2,3];
  let* i: ListIterator[int]* = l.iter();
  assert(i.next().! == 1);
  assert(i.next().! == 2);
  assert(i.next().! == 3);
  assert(i.next().isNone());
  0
}

} // end IteratorTest

fn main(): int {
  IteratorTest/test();
  0
}
