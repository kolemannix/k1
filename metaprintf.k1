use core/meta
fn sprintf[Args](fmtString: static string, args: Args): string {
  let* result: List[char]* = List/empty();
  #meta(fmtString) {
    let schema = types/typeSchema(types/typeId[Args]());
    if schema is .Other("param") { meta/emitLine(`""`); return(()) };
    require schema is .Struct({ fields }) else { crash("Struct!") };

    for field in fields do {
      meta/emitLine("let f{itIndex} = args.{field.name}")
    };
    let mut fmtIndex = 0;

    let parts = (fmtString as string).splitByChar('?');
    meta/emitVariable("parts", parts);

    if parts.len != fields.len {
      crash("Mismatching format arg count")
    };

    for part in parts do {
      meta/emitLine("parts.get({fmtIndex}).printTo(result)");
      meta/emitLine("f{fmtIndex}.printTo(result)");
      fmtIndex = fmtIndex + 1;
    };
    meta/emitLine(#code string/wrapList(result));
  }
}

fn main(args: Buffer[string]): i32 {
  let fmt = #static "My value is: ? ?";
  let s1 = sprintf(fmt, {a: 42, b: true});
  //let s1 = sprintf(args.get(1), {a: 42, b: true});
  println(s1);
  //let s3 = sprintf("My values are: ?, ?", {a: "asdf", b: true});
  //println(s3);

  0
}
